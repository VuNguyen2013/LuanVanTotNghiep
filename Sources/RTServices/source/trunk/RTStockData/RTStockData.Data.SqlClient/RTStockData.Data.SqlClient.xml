<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RTStockData.Data.SqlClient</name>
    </assembly>
    <members>
        <member name="T:RTStockData.Data.SqlClient.SqlSecurityRealtimeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.SecurityRealtime"/> entity.
            </summary>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlSecurityRealtimeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.SecurityRealtime"/> entity.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlSecurityRealtimeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlSecurityRealtimeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlSecurityRealtimeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlSecurityRealtimeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlSecurityRealtimeProviderBase.Delete(RTStockData.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlSecurityRealtimeProviderBase.Find(RTStockData.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of RTStockData.Entities.SecurityRealtime objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlSecurityRealtimeProviderBase.Find(RTStockData.Data.TransactionManager,RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RTStockData.Entities.SecurityRealtime objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlSecurityRealtimeProviderBase.GetAll(RTStockData.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.SecurityRealtime objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlSecurityRealtimeProviderBase.GetPaged(RTStockData.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.SecurityRealtime objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlSecurityRealtimeProviderBase.GetById(RTStockData.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_security_realtime index.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.SecurityRealtime"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlSecurityRealtimeProviderBase.BulkInsert(RTStockData.Data.TransactionManager,RTStockData.Entities.TList{RTStockData.Entities.SecurityRealtime})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.SecurityRealtime object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlSecurityRealtimeProviderBase.Insert(RTStockData.Data.TransactionManager,RTStockData.Entities.SecurityRealtime)">
            <summary>
            	Inserts a RTStockData.Entities.SecurityRealtime object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.SecurityRealtime object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.SecurityRealtime object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlSecurityRealtimeProviderBase.Update(RTStockData.Data.TransactionManager,RTStockData.Entities.SecurityRealtime)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.SecurityRealtime object to update.</param>
            <remarks>
            	After updating the datasource, the RTStockData.Entities.SecurityRealtime object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlSecurityRealtimeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlSecurityRealtimeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlSecurityRealtimeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlSecurityRealtimeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlSecurityRealtimeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlHastcStocksProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.HastcStocks"/> entity.
            </summary>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlHastcStocksProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.HastcStocks"/> entity.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcStocksProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlHastcStocksProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcStocksProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlHastcStocksProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcStocksProviderBase.Delete(RTStockData.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcStocksProviderBase.Find(RTStockData.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of RTStockData.Entities.HastcStocks objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcStocksProviderBase.Find(RTStockData.Data.TransactionManager,RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RTStockData.Entities.HastcStocks objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcStocksProviderBase.GetAll(RTStockData.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.HastcStocks objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcStocksProviderBase.GetPaged(RTStockData.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.HastcStocks objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcStocksProviderBase.GetById(RTStockData.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_hastc_stocks index.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.HastcStocks"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcStocksProviderBase.BulkInsert(RTStockData.Data.TransactionManager,RTStockData.Entities.TList{RTStockData.Entities.HastcStocks})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.HastcStocks object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcStocksProviderBase.Insert(RTStockData.Data.TransactionManager,RTStockData.Entities.HastcStocks)">
            <summary>
            	Inserts a RTStockData.Entities.HastcStocks object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.HastcStocks object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.HastcStocks object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcStocksProviderBase.Update(RTStockData.Data.TransactionManager,RTStockData.Entities.HastcStocks)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.HastcStocks object to update.</param>
            <remarks>
            	After updating the datasource, the RTStockData.Entities.HastcStocks object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlHastcStocksProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlHastcStocksProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlHastcStocksProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcStocksProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlHastcStocksProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlCompanyInfoLanguageProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.CompanyInfoLanguage"/> entity.
            </summary>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlCompanyInfoLanguageProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.CompanyInfoLanguage"/> entity.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlCompanyInfoLanguageProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlCompanyInfoLanguageProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlCompanyInfoLanguageProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlCompanyInfoLanguageProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlCompanyInfoLanguageProviderBase.Delete(RTStockData.Data.TransactionManager,System.Int32,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_companyId">. Primary Key.</param>	
            <param name="_languageId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlCompanyInfoLanguageProviderBase.Find(RTStockData.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of RTStockData.Entities.CompanyInfoLanguage objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlCompanyInfoLanguageProviderBase.Find(RTStockData.Data.TransactionManager,RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RTStockData.Entities.CompanyInfoLanguage objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlCompanyInfoLanguageProviderBase.GetAll(RTStockData.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.CompanyInfoLanguage objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlCompanyInfoLanguageProviderBase.GetPaged(RTStockData.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.CompanyInfoLanguage objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlCompanyInfoLanguageProviderBase.GetByCompanyIdLanguageId(RTStockData.Data.TransactionManager,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_CompanyInfoLanguage index.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="_companyId"></param>
            <param name="_languageId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.CompanyInfoLanguage"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlCompanyInfoLanguageProviderBase.BulkInsert(RTStockData.Data.TransactionManager,RTStockData.Entities.TList{RTStockData.Entities.CompanyInfoLanguage})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.CompanyInfoLanguage object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlCompanyInfoLanguageProviderBase.Insert(RTStockData.Data.TransactionManager,RTStockData.Entities.CompanyInfoLanguage)">
            <summary>
            	Inserts a RTStockData.Entities.CompanyInfoLanguage object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.CompanyInfoLanguage object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.CompanyInfoLanguage object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlCompanyInfoLanguageProviderBase.Update(RTStockData.Data.TransactionManager,RTStockData.Entities.CompanyInfoLanguage)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.CompanyInfoLanguage object to update.</param>
            <remarks>
            	After updating the datasource, the RTStockData.Entities.CompanyInfoLanguage object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlCompanyInfoLanguageProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlCompanyInfoLanguageProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlCompanyInfoLanguageProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlCompanyInfoLanguageProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlCompanyInfoLanguageProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlHoseTransactionsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.HoseTransactions"/> entity.
            </summary>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlHoseTransactionsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.HoseTransactions"/> entity.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHoseTransactionsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlHoseTransactionsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHoseTransactionsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlHoseTransactionsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHoseTransactionsProviderBase.Delete(RTStockData.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHoseTransactionsProviderBase.Find(RTStockData.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of RTStockData.Entities.HoseTransactions objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHoseTransactionsProviderBase.Find(RTStockData.Data.TransactionManager,RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RTStockData.Entities.HoseTransactions objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHoseTransactionsProviderBase.GetAll(RTStockData.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.HoseTransactions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHoseTransactionsProviderBase.GetPaged(RTStockData.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.HoseTransactions objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHoseTransactionsProviderBase.GetById(RTStockData.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_hose_transactions index.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.HoseTransactions"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHoseTransactionsProviderBase.BulkInsert(RTStockData.Data.TransactionManager,RTStockData.Entities.TList{RTStockData.Entities.HoseTransactions})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.HoseTransactions object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHoseTransactionsProviderBase.Insert(RTStockData.Data.TransactionManager,RTStockData.Entities.HoseTransactions)">
            <summary>
            	Inserts a RTStockData.Entities.HoseTransactions object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.HoseTransactions object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.HoseTransactions object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHoseTransactionsProviderBase.Update(RTStockData.Data.TransactionManager,RTStockData.Entities.HoseTransactions)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.HoseTransactions object to update.</param>
            <remarks>
            	After updating the datasource, the RTStockData.Entities.HoseTransactions object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlHoseTransactionsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlHoseTransactionsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlHoseTransactionsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHoseTransactionsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlHoseTransactionsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlIndexVn30Provider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.IndexVn30"/> entity.
            </summary>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlIndexVn30ProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.IndexVn30"/> entity.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexVn30ProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlIndexVn30ProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexVn30ProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlIndexVn30ProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexVn30ProviderBase.Delete(RTStockData.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexVn30ProviderBase.Find(RTStockData.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of RTStockData.Entities.IndexVn30 objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexVn30ProviderBase.Find(RTStockData.Data.TransactionManager,RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RTStockData.Entities.IndexVn30 objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexVn30ProviderBase.GetAll(RTStockData.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.IndexVn30 objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexVn30ProviderBase.GetPaged(RTStockData.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.IndexVn30 objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexVn30ProviderBase.GetById(RTStockData.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Index_VN30 index.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.IndexVn30"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexVn30ProviderBase.BulkInsert(RTStockData.Data.TransactionManager,RTStockData.Entities.TList{RTStockData.Entities.IndexVn30})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.IndexVn30 object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexVn30ProviderBase.Insert(RTStockData.Data.TransactionManager,RTStockData.Entities.IndexVn30)">
            <summary>
            	Inserts a RTStockData.Entities.IndexVn30 object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.IndexVn30 object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.IndexVn30 object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexVn30ProviderBase.Update(RTStockData.Data.TransactionManager,RTStockData.Entities.IndexVn30)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.IndexVn30 object to update.</param>
            <remarks>
            	After updating the datasource, the RTStockData.Entities.IndexVn30 object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlIndexVn30ProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlIndexVn30ProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlIndexVn30ProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexVn30Provider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlIndexVn30Provider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlIndexsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.Indexs"/> entity.
            </summary>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlIndexsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.Indexs"/> entity.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlIndexsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlIndexsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexsProviderBase.Delete(RTStockData.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_vnindexId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexsProviderBase.Find(RTStockData.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of RTStockData.Entities.Indexs objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexsProviderBase.Find(RTStockData.Data.TransactionManager,RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RTStockData.Entities.Indexs objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexsProviderBase.GetAll(RTStockData.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.Indexs objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexsProviderBase.GetPaged(RTStockData.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.Indexs objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexsProviderBase.GetByVnindexId(RTStockData.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Indexs index.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="_vnindexId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.Indexs"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexsProviderBase.BulkInsert(RTStockData.Data.TransactionManager,RTStockData.Entities.TList{RTStockData.Entities.Indexs})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.Indexs object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexsProviderBase.Insert(RTStockData.Data.TransactionManager,RTStockData.Entities.Indexs)">
            <summary>
            	Inserts a RTStockData.Entities.Indexs object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.Indexs object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.Indexs object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexsProviderBase.Update(RTStockData.Data.TransactionManager,RTStockData.Entities.Indexs)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.Indexs object to update.</param>
            <remarks>
            	After updating the datasource, the RTStockData.Entities.Indexs object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlIndexsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlIndexsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlIndexsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlIndexsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlUpcomTransactionsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.UpcomTransactions"/> entity.
            </summary>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlUpcomTransactionsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.UpcomTransactions"/> entity.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomTransactionsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlUpcomTransactionsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomTransactionsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlUpcomTransactionsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomTransactionsProviderBase.Delete(RTStockData.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomTransactionsProviderBase.Find(RTStockData.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of RTStockData.Entities.UpcomTransactions objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomTransactionsProviderBase.Find(RTStockData.Data.TransactionManager,RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RTStockData.Entities.UpcomTransactions objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomTransactionsProviderBase.GetAll(RTStockData.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.UpcomTransactions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomTransactionsProviderBase.GetPaged(RTStockData.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.UpcomTransactions objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomTransactionsProviderBase.GetById(RTStockData.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_upcom_transactions index.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.UpcomTransactions"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomTransactionsProviderBase.BulkInsert(RTStockData.Data.TransactionManager,RTStockData.Entities.TList{RTStockData.Entities.UpcomTransactions})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.UpcomTransactions object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomTransactionsProviderBase.Insert(RTStockData.Data.TransactionManager,RTStockData.Entities.UpcomTransactions)">
            <summary>
            	Inserts a RTStockData.Entities.UpcomTransactions object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.UpcomTransactions object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.UpcomTransactions object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomTransactionsProviderBase.Update(RTStockData.Data.TransactionManager,RTStockData.Entities.UpcomTransactions)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.UpcomTransactions object to update.</param>
            <remarks>
            	After updating the datasource, the RTStockData.Entities.UpcomTransactions object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlUpcomTransactionsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlUpcomTransactionsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlUpcomTransactionsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomTransactionsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlUpcomTransactionsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlNearestWorkingDatesProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.NearestWorkingDates"/> entity.
            </summary>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlNearestWorkingDatesProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.NearestWorkingDates"/> entity.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNearestWorkingDatesProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlNearestWorkingDatesProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNearestWorkingDatesProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlNearestWorkingDatesProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNearestWorkingDatesProviderBase.Delete(RTStockData.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_marketId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNearestWorkingDatesProviderBase.Find(RTStockData.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of RTStockData.Entities.NearestWorkingDates objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNearestWorkingDatesProviderBase.Find(RTStockData.Data.TransactionManager,RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RTStockData.Entities.NearestWorkingDates objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNearestWorkingDatesProviderBase.GetAll(RTStockData.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.NearestWorkingDates objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNearestWorkingDatesProviderBase.GetPaged(RTStockData.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.NearestWorkingDates objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNearestWorkingDatesProviderBase.GetByMarketId(RTStockData.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_NearestWorkingDates index.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="_marketId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.NearestWorkingDates"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNearestWorkingDatesProviderBase.BulkInsert(RTStockData.Data.TransactionManager,RTStockData.Entities.TList{RTStockData.Entities.NearestWorkingDates})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.NearestWorkingDates object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNearestWorkingDatesProviderBase.Insert(RTStockData.Data.TransactionManager,RTStockData.Entities.NearestWorkingDates)">
            <summary>
            	Inserts a RTStockData.Entities.NearestWorkingDates object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.NearestWorkingDates object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.NearestWorkingDates object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNearestWorkingDatesProviderBase.Update(RTStockData.Data.TransactionManager,RTStockData.Entities.NearestWorkingDates)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.NearestWorkingDates object to update.</param>
            <remarks>
            	After updating the datasource, the RTStockData.Entities.NearestWorkingDates object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNearestWorkingDatesProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNearestWorkingDatesProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNearestWorkingDatesProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNearestWorkingDatesProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlNearestWorkingDatesProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RTStockData.Data.SqlClient.StoredProcedureProvider">
            <summary>
            Summary description for Procedures.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.StoredProcedureProvider.#ctor">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.StoredProcedureProvider"/> instance.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.StoredProcedureProvider.Serialize(System.String)">
            <summary>
            Serializes the specified filename.
            </summary>
            <param name="filename">Filename.</param>
        </member>
        <member name="M:RTStockData.Data.SqlClient.StoredProcedureProvider.Deserialize">
            <summary>
            Deserializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.StoredProcedureProvider.GetProcedureBodyFromEmbeddedResource(System.String)">
            <summary>
            Get the query text from the embedded xml file.
            </summary>
            <param name="name">The name of the query.</param>
            <returns>the text of the query</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Boolean)">
            <summary>
            Get the command wrapper, either from the stored procedures or from the embedded queries.
            </summary>
            <param name="database">The database instance.</param>
            <param name="commandName">the name of the sp.</param>
            <param name="useStoredProcedure">Indicates if we want stored procedure.</param>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Type,RTStockData.Data.SqlFilterParameterCollection,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the command wrapper for a dynamically generated query and
            optionally includes server-side paging.
            </summary>
            <param name="database"></param>
            <param name="commandName"></param>
            <param name="columnEnum"></param>
            <param name="parameters"></param>
            <param name="orderBy"></param>
            <param name="start"></param>
            <param name="pageLength"></param>
            <returns></returns>
        </member>
        <member name="P:RTStockData.Data.SqlClient.StoredProcedureProvider.Current">
            <summary>
            Gets the current <see cref="T:RTStockData.Data.SqlClient.StoredProcedureProvider"/> singleton instance.
            </summary>
            <value><see cref="T:RTStockData.Data.SqlClient.StoredProcedureProvider"/></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.StoredProcedureProvider.Procedures">
            <summary>
            Gets or sets the procedures.
            </summary>
            <value>An <see cref="T:System.Collections.ArrayList"/> of <see cref="T:RTStockData.Data.SqlClient.Procedure"/> objects.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.StoredProcedureProvider.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:RTStockData.Data.SqlClient.Procedure"/> instance with the specified name.
            </summary>
        </member>
        <member name="P:RTStockData.Data.SqlClient.StoredProcedureProvider.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:RTStockData.Data.SqlClient.Procedure"/> instance at the specified index.
            </summary>
        </member>
        <member name="T:RTStockData.Data.SqlClient.Procedure">
            <summary>
            Represents a sql query.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.Procedure.#ctor">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.Procedure"/> instance.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.Procedure.Parameter(System.String)">
            <summary>
            Get the parameter from the specified name of the param.
            </summary>
            <param name="paramName">Name of the param.</param>
            <returns></returns>
        </member>
        <member name="P:RTStockData.Data.SqlClient.Procedure.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.Procedure.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.Procedure.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.Procedure.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.Procedure.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value></value>
        </member>
        <member name="T:RTStockData.Data.SqlClient.Parameter">
            <summary>
            Respresents a query parameter.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.Parameter.#ctor">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.Parameter"/> instance.
            </summary>
        </member>
        <member name="P:RTStockData.Data.SqlClient.Parameter.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.Parameter.SqlType">
            <summary>
            Gets or sets the SqlType.
            </summary>
            <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.Parameter.Direction">
            <summary>
            Gets or sets the Direction.
            </summary>
            <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.Parameter.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.Parameter.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.Parameter.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value></value>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlMatchedProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.Matched"/> entity.
            </summary>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlMatchedProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.Matched"/> entity.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlMatchedProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlMatchedProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlMatchedProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlMatchedProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlMatchedProviderBase.Delete(RTStockData.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlMatchedProviderBase.Find(RTStockData.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of RTStockData.Entities.Matched objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlMatchedProviderBase.Find(RTStockData.Data.TransactionManager,RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RTStockData.Entities.Matched objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlMatchedProviderBase.GetAll(RTStockData.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.Matched objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlMatchedProviderBase.GetPaged(RTStockData.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.Matched objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlMatchedProviderBase.GetById(RTStockData.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Matched index.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.Matched"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlMatchedProviderBase.BulkInsert(RTStockData.Data.TransactionManager,RTStockData.Entities.TList{RTStockData.Entities.Matched})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.Matched object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlMatchedProviderBase.Insert(RTStockData.Data.TransactionManager,RTStockData.Entities.Matched)">
            <summary>
            	Inserts a RTStockData.Entities.Matched object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.Matched object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.Matched object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlMatchedProviderBase.Update(RTStockData.Data.TransactionManager,RTStockData.Entities.Matched)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.Matched object to update.</param>
            <remarks>
            	After updating the datasource, the RTStockData.Entities.Matched object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlMatchedProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlMatchedProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlMatchedProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlMatchedProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlMatchedProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlIndexVn30HistoryProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.IndexVn30History"/> entity.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexVn30HistoryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlIndexVn30HistoryProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexVn30HistoryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlIndexVn30HistoryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexVn30HistoryProviderBase.Delete(RTStockData.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexVn30HistoryProviderBase.Find(RTStockData.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of RTStockData.Entities.IndexVn30History objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexVn30HistoryProviderBase.Find(RTStockData.Data.TransactionManager,RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RTStockData.Entities.IndexVn30History objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexVn30HistoryProviderBase.GetAll(RTStockData.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.IndexVn30History objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexVn30HistoryProviderBase.GetPaged(RTStockData.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.IndexVn30History objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexVn30HistoryProviderBase.GetById(RTStockData.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_IndexVN30_History index.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.IndexVn30History"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexVn30HistoryProviderBase.BulkInsert(RTStockData.Data.TransactionManager,RTStockData.Entities.TList{RTStockData.Entities.IndexVn30History})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.IndexVn30History object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexVn30HistoryProviderBase.Insert(RTStockData.Data.TransactionManager,RTStockData.Entities.IndexVn30History)">
            <summary>
            	Inserts a RTStockData.Entities.IndexVn30History object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.IndexVn30History object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.IndexVn30History object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexVn30HistoryProviderBase.Update(RTStockData.Data.TransactionManager,RTStockData.Entities.IndexVn30History)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.IndexVn30History object to update.</param>
            <remarks>
            	After updating the datasource, the RTStockData.Entities.IndexVn30History object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlIndexVn30HistoryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlIndexVn30HistoryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlIndexVn30HistoryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlIndexInfoHistoryProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.IndexInfoHistory"/> entity.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexInfoHistoryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlIndexInfoHistoryProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexInfoHistoryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlIndexInfoHistoryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexInfoHistoryProviderBase.Delete(RTStockData.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexInfoHistoryProviderBase.Find(RTStockData.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of RTStockData.Entities.IndexInfoHistory objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexInfoHistoryProviderBase.Find(RTStockData.Data.TransactionManager,RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RTStockData.Entities.IndexInfoHistory objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexInfoHistoryProviderBase.GetAll(RTStockData.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.IndexInfoHistory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexInfoHistoryProviderBase.GetPaged(RTStockData.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.IndexInfoHistory objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexInfoHistoryProviderBase.GetById(RTStockData.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_IndexInfoHistory index.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.IndexInfoHistory"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexInfoHistoryProviderBase.BulkInsert(RTStockData.Data.TransactionManager,RTStockData.Entities.TList{RTStockData.Entities.IndexInfoHistory})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.IndexInfoHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexInfoHistoryProviderBase.Insert(RTStockData.Data.TransactionManager,RTStockData.Entities.IndexInfoHistory)">
            <summary>
            	Inserts a RTStockData.Entities.IndexInfoHistory object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.IndexInfoHistory object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.IndexInfoHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexInfoHistoryProviderBase.Update(RTStockData.Data.TransactionManager,RTStockData.Entities.IndexInfoHistory)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.IndexInfoHistory object to update.</param>
            <remarks>
            	After updating the datasource, the RTStockData.Entities.IndexInfoHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlIndexInfoHistoryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlIndexInfoHistoryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlIndexInfoHistoryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlIndexInfoHistoryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.IndexInfoHistory"/> entity.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexInfoHistoryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlIndexInfoHistoryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlNetTiersProvider">
            <summary>
            This class is the Sql implementation of the NetTiersProvider.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNetTiersProvider.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:RTStockData.Data.SqlClient.SqlNetTiersProvider"/> class.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNetTiersProvider.CreateTransaction">
            <summary>
            Creates a new <c cref="T:RTStockData.Data.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(RTStockData.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(RTStockData.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(RTStockData.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(RTStockData.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(RTStockData.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNetTiersProvider.ExecuteReader(RTStockData.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(RTStockData.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(RTStockData.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNetTiersProvider.ExecuteDataSet(RTStockData.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(RTStockData.Data.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(RTStockData.Data.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlNetTiersProvider.ExecuteScalar(RTStockData.Data.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.UseStoredProcedure">
            <summary>
            Gets a value indicating whether to use stored procedure or not.
            </summary>
            <value>
            	<c>true</c> if this repository use stored procedures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.IsTransactionSupported">
            <summary>
             Indicates if the current <c cref="T:RTStockData.Data.Bases.NetTiersProvider"/> implementation supports Transacton.
            </summary>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.IndexVn30Provider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RTStockData.Entities.IndexVn30"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlIndexVn30Provider">
            <summary>
            Gets the current <c cref="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlIndexVn30Provider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.NearestWorkingDatesProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RTStockData.Entities.NearestWorkingDates"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlNearestWorkingDatesProvider">
            <summary>
            Gets the current <c cref="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlNearestWorkingDatesProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.CompanyInfoProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RTStockData.Entities.CompanyInfo"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlCompanyInfoProvider">
            <summary>
            Gets the current <c cref="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlCompanyInfoProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SecurityRealtimeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RTStockData.Entities.SecurityRealtime"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlSecurityRealtimeProvider">
            <summary>
            Gets the current <c cref="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlSecurityRealtimeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.MatchedProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RTStockData.Entities.Matched"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlMatchedProvider">
            <summary>
            Gets the current <c cref="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlMatchedProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.UpcomStocksProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RTStockData.Entities.UpcomStocks"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlUpcomStocksProvider">
            <summary>
            Gets the current <c cref="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlUpcomStocksProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.TotalmarketProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RTStockData.Entities.Totalmarket"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlTotalmarketProvider">
            <summary>
            Gets the current <c cref="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlTotalmarketProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.LeProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RTStockData.Entities.Le"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlLeProvider">
            <summary>
            Gets the current <c cref="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlLeProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.UpcomMarketProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RTStockData.Entities.UpcomMarket"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlUpcomMarketProvider">
            <summary>
            Gets the current <c cref="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlUpcomMarketProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.HastcMarketProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RTStockData.Entities.HastcMarket"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlHastcMarketProvider">
            <summary>
            Gets the current <c cref="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlHastcMarketProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.LanguageProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RTStockData.Entities.Language"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlLanguageProvider">
            <summary>
            Gets the current <c cref="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlLanguageProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.HastcStocksProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RTStockData.Entities.HastcStocks"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlHastcStocksProvider">
            <summary>
            Gets the current <c cref="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlHastcStocksProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.CompanyInfoLanguageProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RTStockData.Entities.CompanyInfoLanguage"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlCompanyInfoLanguageProvider">
            <summary>
            Gets the current <c cref="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlCompanyInfoLanguageProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.IndexsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RTStockData.Entities.Indexs"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlIndexsProvider">
            <summary>
            Gets the current <c cref="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlIndexsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.HastcTransactionsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RTStockData.Entities.HastcTransactions"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlHastcTransactionsProvider">
            <summary>
            Gets the current <c cref="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlHastcTransactionsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.UpcomTransactionsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RTStockData.Entities.UpcomTransactions"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlUpcomTransactionsProvider">
            <summary>
            Gets the current <c cref="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlUpcomTransactionsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.HoseTransactionsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RTStockData.Entities.HoseTransactions"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlHoseTransactionsProvider">
            <summary>
            Gets the current <c cref="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlHoseTransactionsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.IndexVn30HistoryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RTStockData.Entities.IndexVn30History"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlIndexVn30HistoryProvider">
            <summary>
            Gets the current <c cref="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlIndexVn30HistoryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.BasketInfoProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RTStockData.Entities.BasketInfo"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlBasketInfoProvider">
            <summary>
            Gets the current <c cref="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlBasketInfoProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.IndexInfoProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RTStockData.Entities.IndexInfo"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlIndexInfoProvider">
            <summary>
            Gets the current <c cref="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlIndexInfoProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.IndexInfoHistoryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:RTStockData.Entities.IndexInfoHistory"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlIndexInfoHistoryProvider">
            <summary>
            Gets the current <c cref="P:RTStockData.Data.SqlClient.SqlNetTiersProvider.SqlIndexInfoHistoryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlIndexVn30HistoryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.IndexVn30History"/> entity.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexVn30HistoryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlIndexVn30HistoryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlCompanyInfoProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.CompanyInfo"/> entity.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlCompanyInfoProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlCompanyInfoProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlCompanyInfoProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlCompanyInfoProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlCompanyInfoProviderBase.Delete(RTStockData.Data.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_companyId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlCompanyInfoProviderBase.Find(RTStockData.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of RTStockData.Entities.CompanyInfo objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlCompanyInfoProviderBase.Find(RTStockData.Data.TransactionManager,RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RTStockData.Entities.CompanyInfo objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlCompanyInfoProviderBase.GetAll(RTStockData.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.CompanyInfo objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlCompanyInfoProviderBase.GetPaged(RTStockData.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.CompanyInfo objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlCompanyInfoProviderBase.GetByCompanyId(RTStockData.Data.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_CompanyInfo index.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="_companyId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.CompanyInfo"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlCompanyInfoProviderBase.BulkInsert(RTStockData.Data.TransactionManager,RTStockData.Entities.TList{RTStockData.Entities.CompanyInfo})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.CompanyInfo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlCompanyInfoProviderBase.Insert(RTStockData.Data.TransactionManager,RTStockData.Entities.CompanyInfo)">
            <summary>
            	Inserts a RTStockData.Entities.CompanyInfo object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.CompanyInfo object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.CompanyInfo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlCompanyInfoProviderBase.Update(RTStockData.Data.TransactionManager,RTStockData.Entities.CompanyInfo)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.CompanyInfo object to update.</param>
            <remarks>
            	After updating the datasource, the RTStockData.Entities.CompanyInfo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlCompanyInfoProviderBase.GetCompanyInfoByLanguageId(RTStockData.Data.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wraps the '_CompanyInfo_GetCompanyInfoByLanguageId' stored procedure. 
            </summary>	
            <param name="languageId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlCompanyInfoProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlCompanyInfoProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlCompanyInfoProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlIndexInfoProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.IndexInfo"/> entity.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexInfoProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlIndexInfoProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexInfoProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlIndexInfoProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexInfoProviderBase.Delete(RTStockData.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexInfoProviderBase.Find(RTStockData.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of RTStockData.Entities.IndexInfo objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexInfoProviderBase.Find(RTStockData.Data.TransactionManager,RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RTStockData.Entities.IndexInfo objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexInfoProviderBase.GetAll(RTStockData.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.IndexInfo objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexInfoProviderBase.GetPaged(RTStockData.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.IndexInfo objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexInfoProviderBase.GetById(RTStockData.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_IndexInfo index.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.IndexInfo"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexInfoProviderBase.BulkInsert(RTStockData.Data.TransactionManager,RTStockData.Entities.TList{RTStockData.Entities.IndexInfo})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.IndexInfo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexInfoProviderBase.Insert(RTStockData.Data.TransactionManager,RTStockData.Entities.IndexInfo)">
            <summary>
            	Inserts a RTStockData.Entities.IndexInfo object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.IndexInfo object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.IndexInfo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexInfoProviderBase.Update(RTStockData.Data.TransactionManager,RTStockData.Entities.IndexInfo)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.IndexInfo object to update.</param>
            <remarks>
            	After updating the datasource, the RTStockData.Entities.IndexInfo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlIndexInfoProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlIndexInfoProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlIndexInfoProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlUpcomMarketProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.UpcomMarket"/> entity.
            </summary>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlUpcomMarketProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.UpcomMarket"/> entity.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomMarketProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlUpcomMarketProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomMarketProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlUpcomMarketProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomMarketProviderBase.Delete(RTStockData.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomMarketProviderBase.Find(RTStockData.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of RTStockData.Entities.UpcomMarket objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomMarketProviderBase.Find(RTStockData.Data.TransactionManager,RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RTStockData.Entities.UpcomMarket objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomMarketProviderBase.GetAll(RTStockData.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.UpcomMarket objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomMarketProviderBase.GetPaged(RTStockData.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.UpcomMarket objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomMarketProviderBase.GetById(RTStockData.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_upcom_market index.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.UpcomMarket"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomMarketProviderBase.BulkInsert(RTStockData.Data.TransactionManager,RTStockData.Entities.TList{RTStockData.Entities.UpcomMarket})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.UpcomMarket object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomMarketProviderBase.Insert(RTStockData.Data.TransactionManager,RTStockData.Entities.UpcomMarket)">
            <summary>
            	Inserts a RTStockData.Entities.UpcomMarket object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.UpcomMarket object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.UpcomMarket object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomMarketProviderBase.Update(RTStockData.Data.TransactionManager,RTStockData.Entities.UpcomMarket)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.UpcomMarket object to update.</param>
            <remarks>
            	After updating the datasource, the RTStockData.Entities.UpcomMarket object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlUpcomMarketProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlUpcomMarketProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlUpcomMarketProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomMarketProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlUpcomMarketProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlUpcomStocksProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.UpcomStocks"/> entity.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomStocksProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlUpcomStocksProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomStocksProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlUpcomStocksProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomStocksProviderBase.Delete(RTStockData.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomStocksProviderBase.Find(RTStockData.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of RTStockData.Entities.UpcomStocks objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomStocksProviderBase.Find(RTStockData.Data.TransactionManager,RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RTStockData.Entities.UpcomStocks objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomStocksProviderBase.GetAll(RTStockData.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.UpcomStocks objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomStocksProviderBase.GetPaged(RTStockData.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.UpcomStocks objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomStocksProviderBase.GetById(RTStockData.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_upcom_stocks index.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.UpcomStocks"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomStocksProviderBase.BulkInsert(RTStockData.Data.TransactionManager,RTStockData.Entities.TList{RTStockData.Entities.UpcomStocks})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.UpcomStocks object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomStocksProviderBase.Insert(RTStockData.Data.TransactionManager,RTStockData.Entities.UpcomStocks)">
            <summary>
            	Inserts a RTStockData.Entities.UpcomStocks object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.UpcomStocks object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.UpcomStocks object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomStocksProviderBase.Update(RTStockData.Data.TransactionManager,RTStockData.Entities.UpcomStocks)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.UpcomStocks object to update.</param>
            <remarks>
            	After updating the datasource, the RTStockData.Entities.UpcomStocks object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlUpcomStocksProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlUpcomStocksProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlUpcomStocksProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlTotalmarketProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.Totalmarket"/> entity.
            </summary>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlTotalmarketProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.Totalmarket"/> entity.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlTotalmarketProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlTotalmarketProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlTotalmarketProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlTotalmarketProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlTotalmarketProviderBase.Delete(RTStockData.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlTotalmarketProviderBase.Find(RTStockData.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of RTStockData.Entities.Totalmarket objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlTotalmarketProviderBase.Find(RTStockData.Data.TransactionManager,RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RTStockData.Entities.Totalmarket objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlTotalmarketProviderBase.GetAll(RTStockData.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.Totalmarket objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlTotalmarketProviderBase.GetPaged(RTStockData.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.Totalmarket objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlTotalmarketProviderBase.GetById(RTStockData.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_totalmarket index.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.Totalmarket"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlTotalmarketProviderBase.BulkInsert(RTStockData.Data.TransactionManager,RTStockData.Entities.TList{RTStockData.Entities.Totalmarket})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.Totalmarket object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlTotalmarketProviderBase.Insert(RTStockData.Data.TransactionManager,RTStockData.Entities.Totalmarket)">
            <summary>
            	Inserts a RTStockData.Entities.Totalmarket object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.Totalmarket object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.Totalmarket object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlTotalmarketProviderBase.Update(RTStockData.Data.TransactionManager,RTStockData.Entities.Totalmarket)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.Totalmarket object to update.</param>
            <remarks>
            	After updating the datasource, the RTStockData.Entities.Totalmarket object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlTotalmarketProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlTotalmarketProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlTotalmarketProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlTotalmarketProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlTotalmarketProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlHastcTransactionsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.HastcTransactions"/> entity.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcTransactionsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlHastcTransactionsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcTransactionsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlHastcTransactionsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcTransactionsProviderBase.Delete(RTStockData.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcTransactionsProviderBase.Find(RTStockData.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of RTStockData.Entities.HastcTransactions objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcTransactionsProviderBase.Find(RTStockData.Data.TransactionManager,RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RTStockData.Entities.HastcTransactions objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcTransactionsProviderBase.GetAll(RTStockData.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.HastcTransactions objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcTransactionsProviderBase.GetPaged(RTStockData.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.HastcTransactions objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcTransactionsProviderBase.GetById(RTStockData.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_hastc_transactions index.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.HastcTransactions"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcTransactionsProviderBase.BulkInsert(RTStockData.Data.TransactionManager,RTStockData.Entities.TList{RTStockData.Entities.HastcTransactions})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.HastcTransactions object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcTransactionsProviderBase.Insert(RTStockData.Data.TransactionManager,RTStockData.Entities.HastcTransactions)">
            <summary>
            	Inserts a RTStockData.Entities.HastcTransactions object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.HastcTransactions object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.HastcTransactions object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcTransactionsProviderBase.Update(RTStockData.Data.TransactionManager,RTStockData.Entities.HastcTransactions)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.HastcTransactions object to update.</param>
            <remarks>
            	After updating the datasource, the RTStockData.Entities.HastcTransactions object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlHastcTransactionsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlHastcTransactionsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlHastcTransactionsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlHastcTransactionsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.HastcTransactions"/> entity.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcTransactionsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlHastcTransactionsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlIndexInfoProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.IndexInfo"/> entity.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlIndexInfoProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlIndexInfoProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlLanguageProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.Language"/> entity.
            </summary>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlLanguageProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.Language"/> entity.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlLanguageProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlLanguageProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlLanguageProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlLanguageProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlLanguageProviderBase.Delete(RTStockData.Data.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_languageId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlLanguageProviderBase.Find(RTStockData.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of RTStockData.Entities.Language objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlLanguageProviderBase.Find(RTStockData.Data.TransactionManager,RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RTStockData.Entities.Language objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlLanguageProviderBase.GetAll(RTStockData.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.Language objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlLanguageProviderBase.GetPaged(RTStockData.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.Language objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlLanguageProviderBase.GetByLanguageId(RTStockData.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Language index.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="_languageId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.Language"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlLanguageProviderBase.BulkInsert(RTStockData.Data.TransactionManager,RTStockData.Entities.TList{RTStockData.Entities.Language})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.Language object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlLanguageProviderBase.Insert(RTStockData.Data.TransactionManager,RTStockData.Entities.Language)">
            <summary>
            	Inserts a RTStockData.Entities.Language object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.Language object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.Language object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlLanguageProviderBase.Update(RTStockData.Data.TransactionManager,RTStockData.Entities.Language)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.Language object to update.</param>
            <remarks>
            	After updating the datasource, the RTStockData.Entities.Language object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlLanguageProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlLanguageProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlLanguageProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlLanguageProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlLanguageProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlHastcMarketProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.HastcMarket"/> entity.
            </summary>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlHastcMarketProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.HastcMarket"/> entity.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcMarketProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlHastcMarketProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcMarketProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlHastcMarketProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcMarketProviderBase.Delete(RTStockData.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcMarketProviderBase.Find(RTStockData.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of RTStockData.Entities.HastcMarket objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcMarketProviderBase.Find(RTStockData.Data.TransactionManager,RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RTStockData.Entities.HastcMarket objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcMarketProviderBase.GetAll(RTStockData.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.HastcMarket objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcMarketProviderBase.GetPaged(RTStockData.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.HastcMarket objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcMarketProviderBase.GetById(RTStockData.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_hastc_market index.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.HastcMarket"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcMarketProviderBase.BulkInsert(RTStockData.Data.TransactionManager,RTStockData.Entities.TList{RTStockData.Entities.HastcMarket})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.HastcMarket object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcMarketProviderBase.Insert(RTStockData.Data.TransactionManager,RTStockData.Entities.HastcMarket)">
            <summary>
            	Inserts a RTStockData.Entities.HastcMarket object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.HastcMarket object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.HastcMarket object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcMarketProviderBase.Update(RTStockData.Data.TransactionManager,RTStockData.Entities.HastcMarket)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.HastcMarket object to update.</param>
            <remarks>
            	After updating the datasource, the RTStockData.Entities.HastcMarket object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlHastcMarketProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlHastcMarketProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlHastcMarketProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlHastcMarketProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlHastcMarketProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlUpcomStocksProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.UpcomStocks"/> entity.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlUpcomStocksProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlUpcomStocksProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlLeProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.Le"/> entity.
            </summary>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlLeProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.Le"/> entity.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlLeProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlLeProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlLeProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlLeProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlLeProviderBase.Delete(RTStockData.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlLeProviderBase.Find(RTStockData.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of RTStockData.Entities.Le objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlLeProviderBase.Find(RTStockData.Data.TransactionManager,RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RTStockData.Entities.Le objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlLeProviderBase.GetAll(RTStockData.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.Le objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlLeProviderBase.GetPaged(RTStockData.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.Le objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlLeProviderBase.GetById(RTStockData.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_le index.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.Le"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlLeProviderBase.BulkInsert(RTStockData.Data.TransactionManager,RTStockData.Entities.TList{RTStockData.Entities.Le})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.Le object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlLeProviderBase.Insert(RTStockData.Data.TransactionManager,RTStockData.Entities.Le)">
            <summary>
            	Inserts a RTStockData.Entities.Le object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.Le object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.Le object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlLeProviderBase.Update(RTStockData.Data.TransactionManager,RTStockData.Entities.Le)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.Le object to update.</param>
            <remarks>
            	After updating the datasource, the RTStockData.Entities.Le object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlLeProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlLeProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlLeProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlLeProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlLeProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlCompanyInfoProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.CompanyInfo"/> entity.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlCompanyInfoProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlCompanyInfoProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlBasketInfoProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.BasketInfo"/> entity.
            </summary>
        </member>
        <member name="T:RTStockData.Data.SqlClient.SqlBasketInfoProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:RTStockData.Entities.BasketInfo"/> entity.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlBasketInfoProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlBasketInfoProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlBasketInfoProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlBasketInfoProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlBasketInfoProviderBase.Delete(RTStockData.Data.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlBasketInfoProviderBase.Find(RTStockData.Data.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of RTStockData.Entities.BasketInfo objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlBasketInfoProviderBase.Find(RTStockData.Data.TransactionManager,RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of RTStockData.Entities.BasketInfo objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlBasketInfoProviderBase.GetAll(RTStockData.Data.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.BasketInfo objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlBasketInfoProviderBase.GetPaged(RTStockData.Data.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of RTStockData.Entities.BasketInfo objects.</returns>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlBasketInfoProviderBase.GetById(RTStockData.Data.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_BasketInfo index.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.BasketInfo"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlBasketInfoProviderBase.BulkInsert(RTStockData.Data.TransactionManager,RTStockData.Entities.TList{RTStockData.Entities.BasketInfo})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.BasketInfo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlBasketInfoProviderBase.Insert(RTStockData.Data.TransactionManager,RTStockData.Entities.BasketInfo)">
            <summary>
            	Inserts a RTStockData.Entities.BasketInfo object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.BasketInfo object to insert.</param>
            <remarks>
            	After inserting into the datasource, the RTStockData.Entities.BasketInfo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlBasketInfoProviderBase.Update(RTStockData.Data.TransactionManager,RTStockData.Entities.BasketInfo)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:RTStockData.Data.TransactionManager"/> object</param>
            <param name="entity">RTStockData.Entities.BasketInfo object to update.</param>
            <remarks>
            	After updating the datasource, the RTStockData.Entities.BasketInfo object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlBasketInfoProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlBasketInfoProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:RTStockData.Data.SqlClient.SqlBasketInfoProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:RTStockData.Data.SqlClient.SqlBasketInfoProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:RTStockData.Data.SqlClient.SqlBasketInfoProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
    </members>
</doc>
