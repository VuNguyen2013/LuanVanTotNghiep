
/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlSecurityRealtimeProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using RTStockData.Entities;
using RTStockData.Data;
using RTStockData.Data.Bases;

#endregion

namespace RTStockData.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="SecurityRealtime"/> entity.
	///</summary>
	public abstract partial class SqlSecurityRealtimeProviderBase : SecurityRealtimeProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlSecurityRealtimeProviderBase"/> instance.
		/// </summary>
		public SqlSecurityRealtimeProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlSecurityRealtimeProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlSecurityRealtimeProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_id">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int64 _id)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.security_realtime_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@Id", DbType.Int64, _id);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(SecurityRealtime)
					,_id);
				EntityManager.StopTracking(entityKey);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of RTStockData.Entities.SecurityRealtime objects.</returns>
		public override TList<SecurityRealtime> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<SecurityRealtime>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.security_realtime_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@Id", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TradeDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Stockno", DbType.Int16, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StockSymbol", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StockType", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Ceiling", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Floor", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BigLotValue", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SecurityName", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SectorNo", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Designated", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Suspension", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Delist", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@HaltResumeFlag", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Split", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Benefit", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Meeting", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Notice", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ClientidRequired", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CouponRate", DbType.Int16, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IssueDate", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MatureDate", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AvrPrice", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ParValue", DbType.Int16, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SdcFlag", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PriorClosePrice", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PriorCloseDate", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ProjectOpen", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@OpenPrice", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Last", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LastVol", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@LastVal", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Highest", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Lowest", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Totalshares", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TotalValue", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AccumulateDeal", DbType.Int16, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BigDeal", DbType.Int16, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BigVolume", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BigValue", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@OddDeal", DbType.Int16, DBNull.Value);
		database.AddInParameter(commandWrapper, "@OddVolume", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@OddValue", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Best1Bid", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Best1BidVolume", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Best2Bid", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Best2BidVolume", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Best3Bid", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Best3BidVolume", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Best1Offer", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Best1OfferVolume", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Best2Offer", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Best2OfferVolume", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Best3Offer", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Best3OfferVolume", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@BoardLost", DbType.Int16, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TotalRoom", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CurrentRoom", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@StartRoom", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Sequence", DbType.Int64, DBNull.Value);
        database.AddInParameter(commandWrapper, "@IsVn30", DbType.Boolean, DBNull.Value);

	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("id ") || clause.Trim().StartsWith("id="))
				{
					database.SetParameterValue(commandWrapper, "@Id", 
						clause.Trim().Remove(0,2).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tradedate ") || clause.Trim().StartsWith("tradedate="))
				{
					database.SetParameterValue(commandWrapper, "@TradeDate", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stockno ") || clause.Trim().StartsWith("stockno="))
				{
					database.SetParameterValue(commandWrapper, "@Stockno", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stocksymbol ") || clause.Trim().StartsWith("stocksymbol="))
				{
					database.SetParameterValue(commandWrapper, "@StockSymbol", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("stocktype ") || clause.Trim().StartsWith("stocktype="))
				{
					database.SetParameterValue(commandWrapper, "@StockType", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ceiling ") || clause.Trim().StartsWith("ceiling="))
				{
					database.SetParameterValue(commandWrapper, "@Ceiling", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("floor ") || clause.Trim().StartsWith("floor="))
				{
					database.SetParameterValue(commandWrapper, "@Floor", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("biglotvalue ") || clause.Trim().StartsWith("biglotvalue="))
				{
					database.SetParameterValue(commandWrapper, "@BigLotValue", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("securityname ") || clause.Trim().StartsWith("securityname="))
				{
					database.SetParameterValue(commandWrapper, "@SecurityName", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sectorno ") || clause.Trim().StartsWith("sectorno="))
				{
					database.SetParameterValue(commandWrapper, "@SectorNo", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("designated ") || clause.Trim().StartsWith("designated="))
				{
					database.SetParameterValue(commandWrapper, "@Designated", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("suspension ") || clause.Trim().StartsWith("suspension="))
				{
					database.SetParameterValue(commandWrapper, "@Suspension", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("delist ") || clause.Trim().StartsWith("delist="))
				{
					database.SetParameterValue(commandWrapper, "@Delist", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("haltresumeflag ") || clause.Trim().StartsWith("haltresumeflag="))
				{
					database.SetParameterValue(commandWrapper, "@HaltResumeFlag", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("split ") || clause.Trim().StartsWith("split="))
				{
					database.SetParameterValue(commandWrapper, "@Split", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("benefit ") || clause.Trim().StartsWith("benefit="))
				{
					database.SetParameterValue(commandWrapper, "@Benefit", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("meeting ") || clause.Trim().StartsWith("meeting="))
				{
					database.SetParameterValue(commandWrapper, "@Meeting", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("notice ") || clause.Trim().StartsWith("notice="))
				{
					database.SetParameterValue(commandWrapper, "@Notice", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("clientidrequired ") || clause.Trim().StartsWith("clientidrequired="))
				{
					database.SetParameterValue(commandWrapper, "@ClientidRequired", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("couponrate ") || clause.Trim().StartsWith("couponrate="))
				{
					database.SetParameterValue(commandWrapper, "@CouponRate", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("issuedate ") || clause.Trim().StartsWith("issuedate="))
				{
					database.SetParameterValue(commandWrapper, "@IssueDate", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("maturedate ") || clause.Trim().StartsWith("maturedate="))
				{
					database.SetParameterValue(commandWrapper, "@MatureDate", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("avrprice ") || clause.Trim().StartsWith("avrprice="))
				{
					database.SetParameterValue(commandWrapper, "@AvrPrice", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("parvalue ") || clause.Trim().StartsWith("parvalue="))
				{
					database.SetParameterValue(commandWrapper, "@ParValue", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sdcflag ") || clause.Trim().StartsWith("sdcflag="))
				{
					database.SetParameterValue(commandWrapper, "@SdcFlag", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("priorcloseprice ") || clause.Trim().StartsWith("priorcloseprice="))
				{
					database.SetParameterValue(commandWrapper, "@PriorClosePrice", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("priorclosedate ") || clause.Trim().StartsWith("priorclosedate="))
				{
					database.SetParameterValue(commandWrapper, "@PriorCloseDate", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("projectopen ") || clause.Trim().StartsWith("projectopen="))
				{
					database.SetParameterValue(commandWrapper, "@ProjectOpen", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("openprice ") || clause.Trim().StartsWith("openprice="))
				{
					database.SetParameterValue(commandWrapper, "@OpenPrice", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("last ") || clause.Trim().StartsWith("last="))
				{
					database.SetParameterValue(commandWrapper, "@Last", 
						clause.Trim().Remove(0,4).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lastvol ") || clause.Trim().StartsWith("lastvol="))
				{
					database.SetParameterValue(commandWrapper, "@LastVol", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lastval ") || clause.Trim().StartsWith("lastval="))
				{
					database.SetParameterValue(commandWrapper, "@LastVal", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("highest ") || clause.Trim().StartsWith("highest="))
				{
					database.SetParameterValue(commandWrapper, "@Highest", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("lowest ") || clause.Trim().StartsWith("lowest="))
				{
					database.SetParameterValue(commandWrapper, "@Lowest", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("totalshares ") || clause.Trim().StartsWith("totalshares="))
				{
					database.SetParameterValue(commandWrapper, "@Totalshares", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("totalvalue ") || clause.Trim().StartsWith("totalvalue="))
				{
					database.SetParameterValue(commandWrapper, "@TotalValue", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("accumulatedeal ") || clause.Trim().StartsWith("accumulatedeal="))
				{
					database.SetParameterValue(commandWrapper, "@AccumulateDeal", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("bigdeal ") || clause.Trim().StartsWith("bigdeal="))
				{
					database.SetParameterValue(commandWrapper, "@BigDeal", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("bigvolume ") || clause.Trim().StartsWith("bigvolume="))
				{
					database.SetParameterValue(commandWrapper, "@BigVolume", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("bigvalue ") || clause.Trim().StartsWith("bigvalue="))
				{
					database.SetParameterValue(commandWrapper, "@BigValue", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("odddeal ") || clause.Trim().StartsWith("odddeal="))
				{
					database.SetParameterValue(commandWrapper, "@OddDeal", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("oddvolume ") || clause.Trim().StartsWith("oddvolume="))
				{
					database.SetParameterValue(commandWrapper, "@OddVolume", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("oddvalue ") || clause.Trim().StartsWith("oddvalue="))
				{
					database.SetParameterValue(commandWrapper, "@OddValue", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("best1bid ") || clause.Trim().StartsWith("best1bid="))
				{
					database.SetParameterValue(commandWrapper, "@Best1Bid", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("best1bidvolume ") || clause.Trim().StartsWith("best1bidvolume="))
				{
					database.SetParameterValue(commandWrapper, "@Best1BidVolume", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("best2bid ") || clause.Trim().StartsWith("best2bid="))
				{
					database.SetParameterValue(commandWrapper, "@Best2Bid", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("best2bidvolume ") || clause.Trim().StartsWith("best2bidvolume="))
				{
					database.SetParameterValue(commandWrapper, "@Best2BidVolume", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("best3bid ") || clause.Trim().StartsWith("best3bid="))
				{
					database.SetParameterValue(commandWrapper, "@Best3Bid", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("best3bidvolume ") || clause.Trim().StartsWith("best3bidvolume="))
				{
					database.SetParameterValue(commandWrapper, "@Best3BidVolume", 
						clause.Trim().Remove(0,14).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("best1offer ") || clause.Trim().StartsWith("best1offer="))
				{
					database.SetParameterValue(commandWrapper, "@Best1Offer", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("best1offervolume ") || clause.Trim().StartsWith("best1offervolume="))
				{
					database.SetParameterValue(commandWrapper, "@Best1OfferVolume", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("best2offer ") || clause.Trim().StartsWith("best2offer="))
				{
					database.SetParameterValue(commandWrapper, "@Best2Offer", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("best2offervolume ") || clause.Trim().StartsWith("best2offervolume="))
				{
					database.SetParameterValue(commandWrapper, "@Best2OfferVolume", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("best3offer ") || clause.Trim().StartsWith("best3offer="))
				{
					database.SetParameterValue(commandWrapper, "@Best3Offer", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("best3offervolume ") || clause.Trim().StartsWith("best3offervolume="))
				{
					database.SetParameterValue(commandWrapper, "@Best3OfferVolume", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("boardlost ") || clause.Trim().StartsWith("boardlost="))
				{
					database.SetParameterValue(commandWrapper, "@BoardLost", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("totalroom ") || clause.Trim().StartsWith("totalroom="))
				{
					database.SetParameterValue(commandWrapper, "@TotalRoom", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("currentroom ") || clause.Trim().StartsWith("currentroom="))
				{
					database.SetParameterValue(commandWrapper, "@CurrentRoom", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("startroom ") || clause.Trim().StartsWith("startroom="))
				{
					database.SetParameterValue(commandWrapper, "@StartRoom", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sequence ") || clause.Trim().StartsWith("sequence="))
				{
					database.SetParameterValue(commandWrapper, "@Sequence", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
                if (clause.Trim().StartsWith("isvn30 ") || clause.Trim().StartsWith("isvn30="))
                {
                    database.SetParameterValue(commandWrapper, "@IsVn30",
                        clause.Trim().Remove(0, 8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
                    continue;
                }
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<SecurityRealtime> rows = new TList<SecurityRealtime>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of RTStockData.Entities.SecurityRealtime objects.</returns>
		public override TList<SecurityRealtime> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.security_realtime_Find_Dynamic", typeof(SecurityRealtimeColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<SecurityRealtime> rows = new TList<SecurityRealtime>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of RTStockData.Entities.SecurityRealtime objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<SecurityRealtime> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.security_realtime_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<SecurityRealtime> rows = new TList<SecurityRealtime>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of RTStockData.Entities.SecurityRealtime objects.</returns>
		public override TList<SecurityRealtime> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.security_realtime_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<SecurityRealtime> rows = new TList<SecurityRealtime>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions
	#endregion
	
		#region Get By Index Functions

		#region GetById
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_security_realtime index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_id"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="RTStockData.Entities.SecurityRealtime"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override RTStockData.Entities.SecurityRealtime GetById(TransactionManager transactionManager, System.Int64 _id, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.security_realtime_GetById", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@Id", DbType.Int64, _id);
			
			IDataReader reader = null;
			TList<SecurityRealtime> tmp = new TList<SecurityRealtime>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetById", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetById", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the RTStockData.Entities.SecurityRealtime object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<RTStockData.Entities.SecurityRealtime> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "security_realtime";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("id", typeof(System.Int64));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("TradeDate", typeof(System.DateTime));
			col1.AllowDBNull = true;		
			DataColumn col2 = dataTable.Columns.Add("Stockno", typeof(System.Int16));
			col2.AllowDBNull = true;		
			DataColumn col3 = dataTable.Columns.Add("StockSymbol", typeof(System.String));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("StockType", typeof(System.String));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("Ceiling", typeof(System.Int64));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("Floor", typeof(System.Int64));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("BigLotValue", typeof(System.Int64));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("SecurityName", typeof(System.String));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("SectorNo", typeof(System.String));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("Designated", typeof(System.String));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("SUSPENSION", typeof(System.String));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("Delist", typeof(System.String));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("HaltResumeFlag", typeof(System.String));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("SPLIT", typeof(System.String));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("Benefit", typeof(System.String));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("Meeting", typeof(System.String));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("Notice", typeof(System.String));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("ClientidRequired", typeof(System.String));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("CouponRate", typeof(System.Int16));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("IssueDate", typeof(System.String));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("MatureDate", typeof(System.String));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("AvrPrice", typeof(System.Int64));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("ParValue", typeof(System.Int16));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("SDCFlag", typeof(System.String));
			col24.AllowDBNull = true;		
			DataColumn col25 = dataTable.Columns.Add("PriorClosePrice", typeof(System.Int64));
			col25.AllowDBNull = true;		
			DataColumn col26 = dataTable.Columns.Add("PriorCloseDate", typeof(System.String));
			col26.AllowDBNull = true;		
			DataColumn col27 = dataTable.Columns.Add("ProjectOpen", typeof(System.Int64));
			col27.AllowDBNull = true;		
			DataColumn col28 = dataTable.Columns.Add("OpenPrice", typeof(System.Int64));
			col28.AllowDBNull = true;		
			DataColumn col29 = dataTable.Columns.Add("Last", typeof(System.Int64));
			col29.AllowDBNull = true;		
			DataColumn col30 = dataTable.Columns.Add("LastVol", typeof(System.Int64));
			col30.AllowDBNull = true;		
			DataColumn col31 = dataTable.Columns.Add("LastVal", typeof(System.Int64));
			col31.AllowDBNull = true;		
			DataColumn col32 = dataTable.Columns.Add("Highest", typeof(System.Int64));
			col32.AllowDBNull = true;		
			DataColumn col33 = dataTable.Columns.Add("Lowest", typeof(System.Int64));
			col33.AllowDBNull = true;		
			DataColumn col34 = dataTable.Columns.Add("Totalshares", typeof(System.Int64));
			col34.AllowDBNull = true;		
			DataColumn col35 = dataTable.Columns.Add("TotalValue", typeof(System.Int64));
			col35.AllowDBNull = true;		
			DataColumn col36 = dataTable.Columns.Add("AccumulateDeal", typeof(System.Int16));
			col36.AllowDBNull = true;		
			DataColumn col37 = dataTable.Columns.Add("BigDeal", typeof(System.Int16));
			col37.AllowDBNull = true;		
			DataColumn col38 = dataTable.Columns.Add("BigVolume", typeof(System.Int64));
			col38.AllowDBNull = true;		
			DataColumn col39 = dataTable.Columns.Add("BigValue", typeof(System.Int64));
			col39.AllowDBNull = true;		
			DataColumn col40 = dataTable.Columns.Add("OddDeal", typeof(System.Int16));
			col40.AllowDBNull = true;		
			DataColumn col41 = dataTable.Columns.Add("OddVolume", typeof(System.Int64));
			col41.AllowDBNull = true;		
			DataColumn col42 = dataTable.Columns.Add("OddValue", typeof(System.Int64));
			col42.AllowDBNull = true;		
			DataColumn col43 = dataTable.Columns.Add("Best1Bid", typeof(System.Int64));
			col43.AllowDBNull = true;		
			DataColumn col44 = dataTable.Columns.Add("Best1BidVolume", typeof(System.Int64));
			col44.AllowDBNull = true;		
			DataColumn col45 = dataTable.Columns.Add("Best2Bid", typeof(System.Int64));
			col45.AllowDBNull = true;		
			DataColumn col46 = dataTable.Columns.Add("Best2BidVolume", typeof(System.Int64));
			col46.AllowDBNull = true;		
			DataColumn col47 = dataTable.Columns.Add("Best3Bid", typeof(System.Int64));
			col47.AllowDBNull = true;		
			DataColumn col48 = dataTable.Columns.Add("Best3BidVolume", typeof(System.Int64));
			col48.AllowDBNull = true;		
			DataColumn col49 = dataTable.Columns.Add("Best1Offer", typeof(System.Int64));
			col49.AllowDBNull = true;		
			DataColumn col50 = dataTable.Columns.Add("Best1OfferVolume", typeof(System.Int64));
			col50.AllowDBNull = true;		
			DataColumn col51 = dataTable.Columns.Add("Best2Offer", typeof(System.Int64));
			col51.AllowDBNull = true;		
			DataColumn col52 = dataTable.Columns.Add("Best2OfferVolume", typeof(System.Int64));
			col52.AllowDBNull = true;		
			DataColumn col53 = dataTable.Columns.Add("Best3Offer", typeof(System.Int64));
			col53.AllowDBNull = true;		
			DataColumn col54 = dataTable.Columns.Add("Best3OfferVolume", typeof(System.Int64));
			col54.AllowDBNull = true;		
			DataColumn col55 = dataTable.Columns.Add("BoardLost", typeof(System.Int16));
			col55.AllowDBNull = true;		
			DataColumn col56 = dataTable.Columns.Add("TotalRoom", typeof(System.Int64));
			col56.AllowDBNull = true;		
			DataColumn col57 = dataTable.Columns.Add("CurrentRoom", typeof(System.Int64));
			col57.AllowDBNull = true;		
			DataColumn col58 = dataTable.Columns.Add("StartRoom", typeof(System.Int64));
			col58.AllowDBNull = true;		
			DataColumn col59 = dataTable.Columns.Add("Sequence", typeof(System.Int64));
			col59.AllowDBNull = true;
            DataColumn col60 = dataTable.Columns.Add("IsVn30", typeof(System.Boolean));
            col60.AllowDBNull = true;

			bulkCopy.ColumnMappings.Add("id", "id");
			bulkCopy.ColumnMappings.Add("TradeDate", "TradeDate");
			bulkCopy.ColumnMappings.Add("Stockno", "Stockno");
			bulkCopy.ColumnMappings.Add("StockSymbol", "StockSymbol");
			bulkCopy.ColumnMappings.Add("StockType", "StockType");
			bulkCopy.ColumnMappings.Add("Ceiling", "Ceiling");
			bulkCopy.ColumnMappings.Add("Floor", "Floor");
			bulkCopy.ColumnMappings.Add("BigLotValue", "BigLotValue");
			bulkCopy.ColumnMappings.Add("SecurityName", "SecurityName");
			bulkCopy.ColumnMappings.Add("SectorNo", "SectorNo");
			bulkCopy.ColumnMappings.Add("Designated", "Designated");
			bulkCopy.ColumnMappings.Add("SUSPENSION", "SUSPENSION");
			bulkCopy.ColumnMappings.Add("Delist", "Delist");
			bulkCopy.ColumnMappings.Add("HaltResumeFlag", "HaltResumeFlag");
			bulkCopy.ColumnMappings.Add("SPLIT", "SPLIT");
			bulkCopy.ColumnMappings.Add("Benefit", "Benefit");
			bulkCopy.ColumnMappings.Add("Meeting", "Meeting");
			bulkCopy.ColumnMappings.Add("Notice", "Notice");
			bulkCopy.ColumnMappings.Add("ClientidRequired", "ClientidRequired");
			bulkCopy.ColumnMappings.Add("CouponRate", "CouponRate");
			bulkCopy.ColumnMappings.Add("IssueDate", "IssueDate");
			bulkCopy.ColumnMappings.Add("MatureDate", "MatureDate");
			bulkCopy.ColumnMappings.Add("AvrPrice", "AvrPrice");
			bulkCopy.ColumnMappings.Add("ParValue", "ParValue");
			bulkCopy.ColumnMappings.Add("SDCFlag", "SDCFlag");
			bulkCopy.ColumnMappings.Add("PriorClosePrice", "PriorClosePrice");
			bulkCopy.ColumnMappings.Add("PriorCloseDate", "PriorCloseDate");
			bulkCopy.ColumnMappings.Add("ProjectOpen", "ProjectOpen");
			bulkCopy.ColumnMappings.Add("OpenPrice", "OpenPrice");
			bulkCopy.ColumnMappings.Add("Last", "Last");
			bulkCopy.ColumnMappings.Add("LastVol", "LastVol");
			bulkCopy.ColumnMappings.Add("LastVal", "LastVal");
			bulkCopy.ColumnMappings.Add("Highest", "Highest");
			bulkCopy.ColumnMappings.Add("Lowest", "Lowest");
			bulkCopy.ColumnMappings.Add("Totalshares", "Totalshares");
			bulkCopy.ColumnMappings.Add("TotalValue", "TotalValue");
			bulkCopy.ColumnMappings.Add("AccumulateDeal", "AccumulateDeal");
			bulkCopy.ColumnMappings.Add("BigDeal", "BigDeal");
			bulkCopy.ColumnMappings.Add("BigVolume", "BigVolume");
			bulkCopy.ColumnMappings.Add("BigValue", "BigValue");
			bulkCopy.ColumnMappings.Add("OddDeal", "OddDeal");
			bulkCopy.ColumnMappings.Add("OddVolume", "OddVolume");
			bulkCopy.ColumnMappings.Add("OddValue", "OddValue");
			bulkCopy.ColumnMappings.Add("Best1Bid", "Best1Bid");
			bulkCopy.ColumnMappings.Add("Best1BidVolume", "Best1BidVolume");
			bulkCopy.ColumnMappings.Add("Best2Bid", "Best2Bid");
			bulkCopy.ColumnMappings.Add("Best2BidVolume", "Best2BidVolume");
			bulkCopy.ColumnMappings.Add("Best3Bid", "Best3Bid");
			bulkCopy.ColumnMappings.Add("Best3BidVolume", "Best3BidVolume");
			bulkCopy.ColumnMappings.Add("Best1Offer", "Best1Offer");
			bulkCopy.ColumnMappings.Add("Best1OfferVolume", "Best1OfferVolume");
			bulkCopy.ColumnMappings.Add("Best2Offer", "Best2Offer");
			bulkCopy.ColumnMappings.Add("Best2OfferVolume", "Best2OfferVolume");
			bulkCopy.ColumnMappings.Add("Best3Offer", "Best3Offer");
			bulkCopy.ColumnMappings.Add("Best3OfferVolume", "Best3OfferVolume");
			bulkCopy.ColumnMappings.Add("BoardLost", "BoardLost");
			bulkCopy.ColumnMappings.Add("TotalRoom", "TotalRoom");
			bulkCopy.ColumnMappings.Add("CurrentRoom", "CurrentRoom");
			bulkCopy.ColumnMappings.Add("StartRoom", "StartRoom");
			bulkCopy.ColumnMappings.Add("Sequence", "Sequence");
            bulkCopy.ColumnMappings.Add("IsVn30", "IsVn30");

			
			foreach(RTStockData.Entities.SecurityRealtime entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["id"] = entity.Id;
							
				
					row["TradeDate"] = entity.TradeDate.HasValue ? (object) entity.TradeDate  : System.DBNull.Value;
							
				
					row["Stockno"] = entity.Stockno.HasValue ? (object) entity.Stockno  : System.DBNull.Value;
							
				
					row["StockSymbol"] = entity.StockSymbol;
							
				
					row["StockType"] = entity.StockType;
							
				
					row["Ceiling"] = entity.Ceiling.HasValue ? (object) entity.Ceiling  : System.DBNull.Value;
							
				
					row["Floor"] = entity.Floor.HasValue ? (object) entity.Floor  : System.DBNull.Value;
							
				
					row["BigLotValue"] = entity.BigLotValue.HasValue ? (object) entity.BigLotValue  : System.DBNull.Value;
							
				
					row["SecurityName"] = entity.SecurityName;
							
				
					row["SectorNo"] = entity.SectorNo;
							
				
					row["Designated"] = entity.Designated;
							
				
					row["SUSPENSION"] = entity.Suspension;
							
				
					row["Delist"] = entity.Delist;
							
				
					row["HaltResumeFlag"] = entity.HaltResumeFlag;
							
				
					row["SPLIT"] = entity.Split;
							
				
					row["Benefit"] = entity.Benefit;
							
				
					row["Meeting"] = entity.Meeting;
							
				
					row["Notice"] = entity.Notice;
							
				
					row["ClientidRequired"] = entity.ClientidRequired;
							
				
					row["CouponRate"] = entity.CouponRate.HasValue ? (object) entity.CouponRate  : System.DBNull.Value;
							
				
					row["IssueDate"] = entity.IssueDate;
							
				
					row["MatureDate"] = entity.MatureDate;
							
				
					row["AvrPrice"] = entity.AvrPrice.HasValue ? (object) entity.AvrPrice  : System.DBNull.Value;
							
				
					row["ParValue"] = entity.ParValue.HasValue ? (object) entity.ParValue  : System.DBNull.Value;
							
				
					row["SDCFlag"] = entity.SdcFlag;
							
				
					row["PriorClosePrice"] = entity.PriorClosePrice.HasValue ? (object) entity.PriorClosePrice  : System.DBNull.Value;
							
				
					row["PriorCloseDate"] = entity.PriorCloseDate;
							
				
					row["ProjectOpen"] = entity.ProjectOpen.HasValue ? (object) entity.ProjectOpen  : System.DBNull.Value;
							
				
					row["OpenPrice"] = entity.OpenPrice.HasValue ? (object) entity.OpenPrice  : System.DBNull.Value;
							
				
					row["Last"] = entity.Last.HasValue ? (object) entity.Last  : System.DBNull.Value;
							
				
					row["LastVol"] = entity.LastVol.HasValue ? (object) entity.LastVol  : System.DBNull.Value;
							
				
					row["LastVal"] = entity.LastVal.HasValue ? (object) entity.LastVal  : System.DBNull.Value;
							
				
					row["Highest"] = entity.Highest.HasValue ? (object) entity.Highest  : System.DBNull.Value;
							
				
					row["Lowest"] = entity.Lowest.HasValue ? (object) entity.Lowest  : System.DBNull.Value;
							
				
					row["Totalshares"] = entity.Totalshares.HasValue ? (object) entity.Totalshares  : System.DBNull.Value;
							
				
					row["TotalValue"] = entity.TotalValue.HasValue ? (object) entity.TotalValue  : System.DBNull.Value;
							
				
					row["AccumulateDeal"] = entity.AccumulateDeal.HasValue ? (object) entity.AccumulateDeal  : System.DBNull.Value;
							
				
					row["BigDeal"] = entity.BigDeal.HasValue ? (object) entity.BigDeal  : System.DBNull.Value;
							
				
					row["BigVolume"] = entity.BigVolume.HasValue ? (object) entity.BigVolume  : System.DBNull.Value;
							
				
					row["BigValue"] = entity.BigValue.HasValue ? (object) entity.BigValue  : System.DBNull.Value;
							
				
					row["OddDeal"] = entity.OddDeal.HasValue ? (object) entity.OddDeal  : System.DBNull.Value;
							
				
					row["OddVolume"] = entity.OddVolume.HasValue ? (object) entity.OddVolume  : System.DBNull.Value;
							
				
					row["OddValue"] = entity.OddValue.HasValue ? (object) entity.OddValue  : System.DBNull.Value;
							
				
					row["Best1Bid"] = entity.Best1Bid.HasValue ? (object) entity.Best1Bid  : System.DBNull.Value;
							
				
					row["Best1BidVolume"] = entity.Best1BidVolume.HasValue ? (object) entity.Best1BidVolume  : System.DBNull.Value;
							
				
					row["Best2Bid"] = entity.Best2Bid.HasValue ? (object) entity.Best2Bid  : System.DBNull.Value;
							
				
					row["Best2BidVolume"] = entity.Best2BidVolume.HasValue ? (object) entity.Best2BidVolume  : System.DBNull.Value;
							
				
					row["Best3Bid"] = entity.Best3Bid.HasValue ? (object) entity.Best3Bid  : System.DBNull.Value;
							
				
					row["Best3BidVolume"] = entity.Best3BidVolume.HasValue ? (object) entity.Best3BidVolume  : System.DBNull.Value;
							
				
					row["Best1Offer"] = entity.Best1Offer.HasValue ? (object) entity.Best1Offer  : System.DBNull.Value;
							
				
					row["Best1OfferVolume"] = entity.Best1OfferVolume.HasValue ? (object) entity.Best1OfferVolume  : System.DBNull.Value;
							
				
					row["Best2Offer"] = entity.Best2Offer.HasValue ? (object) entity.Best2Offer  : System.DBNull.Value;
							
				
					row["Best2OfferVolume"] = entity.Best2OfferVolume.HasValue ? (object) entity.Best2OfferVolume  : System.DBNull.Value;
							
				
					row["Best3Offer"] = entity.Best3Offer.HasValue ? (object) entity.Best3Offer  : System.DBNull.Value;
							
				
					row["Best3OfferVolume"] = entity.Best3OfferVolume.HasValue ? (object) entity.Best3OfferVolume  : System.DBNull.Value;
							
				
					row["BoardLost"] = entity.BoardLost.HasValue ? (object) entity.BoardLost  : System.DBNull.Value;
							
				
					row["TotalRoom"] = entity.TotalRoom.HasValue ? (object) entity.TotalRoom  : System.DBNull.Value;
							
				
					row["CurrentRoom"] = entity.CurrentRoom.HasValue ? (object) entity.CurrentRoom  : System.DBNull.Value;
							
				
					row["StartRoom"] = entity.StartRoom.HasValue ? (object) entity.StartRoom  : System.DBNull.Value;
							
				
					row["Sequence"] = entity.Sequence.HasValue ? (object) entity.Sequence  : System.DBNull.Value;

                    row["IsVn30"] = entity.IsVn30.HasValue ? (object)entity.IsVn30  : System.DBNull.Value;
					
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(RTStockData.Entities.SecurityRealtime entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a RTStockData.Entities.SecurityRealtime object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">RTStockData.Entities.SecurityRealtime object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the RTStockData.Entities.SecurityRealtime object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, RTStockData.Entities.SecurityRealtime entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.security_realtime_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@Id", DbType.Int64, 8);
			database.AddInParameter(commandWrapper, "@TradeDate", DbType.DateTime, (entity.TradeDate.HasValue ? (object) entity.TradeDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Stockno", DbType.Int16, (entity.Stockno.HasValue ? (object) entity.Stockno  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@StockSymbol", DbType.AnsiString, entity.StockSymbol );
			database.AddInParameter(commandWrapper, "@StockType", DbType.AnsiString, entity.StockType );
			database.AddInParameter(commandWrapper, "@Ceiling", DbType.Int64, (entity.Ceiling.HasValue ? (object) entity.Ceiling  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Floor", DbType.Int64, (entity.Floor.HasValue ? (object) entity.Floor  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@BigLotValue", DbType.Int64, (entity.BigLotValue.HasValue ? (object) entity.BigLotValue  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SecurityName", DbType.AnsiString, entity.SecurityName );
			database.AddInParameter(commandWrapper, "@SectorNo", DbType.AnsiString, entity.SectorNo );
			database.AddInParameter(commandWrapper, "@Designated", DbType.AnsiString, entity.Designated );
			database.AddInParameter(commandWrapper, "@Suspension", DbType.AnsiString, entity.Suspension );
			database.AddInParameter(commandWrapper, "@Delist", DbType.AnsiString, entity.Delist );
			database.AddInParameter(commandWrapper, "@HaltResumeFlag", DbType.AnsiString, entity.HaltResumeFlag );
			database.AddInParameter(commandWrapper, "@Split", DbType.AnsiString, entity.Split );
			database.AddInParameter(commandWrapper, "@Benefit", DbType.AnsiString, entity.Benefit );
			database.AddInParameter(commandWrapper, "@Meeting", DbType.AnsiString, entity.Meeting );
			database.AddInParameter(commandWrapper, "@Notice", DbType.AnsiString, entity.Notice );
			database.AddInParameter(commandWrapper, "@ClientidRequired", DbType.AnsiString, entity.ClientidRequired );
			database.AddInParameter(commandWrapper, "@CouponRate", DbType.Int16, (entity.CouponRate.HasValue ? (object) entity.CouponRate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@IssueDate", DbType.AnsiString, entity.IssueDate );
			database.AddInParameter(commandWrapper, "@MatureDate", DbType.AnsiString, entity.MatureDate );
			database.AddInParameter(commandWrapper, "@AvrPrice", DbType.Int64, (entity.AvrPrice.HasValue ? (object) entity.AvrPrice  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ParValue", DbType.Int16, (entity.ParValue.HasValue ? (object) entity.ParValue  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SdcFlag", DbType.AnsiString, entity.SdcFlag );
			database.AddInParameter(commandWrapper, "@PriorClosePrice", DbType.Int64, (entity.PriorClosePrice.HasValue ? (object) entity.PriorClosePrice  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@PriorCloseDate", DbType.AnsiString, entity.PriorCloseDate );
			database.AddInParameter(commandWrapper, "@ProjectOpen", DbType.Int64, (entity.ProjectOpen.HasValue ? (object) entity.ProjectOpen  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@OpenPrice", DbType.Int64, (entity.OpenPrice.HasValue ? (object) entity.OpenPrice  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Last", DbType.Int64, (entity.Last.HasValue ? (object) entity.Last  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@LastVol", DbType.Int64, (entity.LastVol.HasValue ? (object) entity.LastVol  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@LastVal", DbType.Int64, (entity.LastVal.HasValue ? (object) entity.LastVal  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Highest", DbType.Int64, (entity.Highest.HasValue ? (object) entity.Highest  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Lowest", DbType.Int64, (entity.Lowest.HasValue ? (object) entity.Lowest  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Totalshares", DbType.Int64, (entity.Totalshares.HasValue ? (object) entity.Totalshares  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@TotalValue", DbType.Int64, (entity.TotalValue.HasValue ? (object) entity.TotalValue  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@AccumulateDeal", DbType.Int16, (entity.AccumulateDeal.HasValue ? (object) entity.AccumulateDeal  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@BigDeal", DbType.Int16, (entity.BigDeal.HasValue ? (object) entity.BigDeal  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@BigVolume", DbType.Int64, (entity.BigVolume.HasValue ? (object) entity.BigVolume  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@BigValue", DbType.Int64, (entity.BigValue.HasValue ? (object) entity.BigValue  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@OddDeal", DbType.Int16, (entity.OddDeal.HasValue ? (object) entity.OddDeal  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@OddVolume", DbType.Int64, (entity.OddVolume.HasValue ? (object) entity.OddVolume  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@OddValue", DbType.Int64, (entity.OddValue.HasValue ? (object) entity.OddValue  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Best1Bid", DbType.Int64, (entity.Best1Bid.HasValue ? (object) entity.Best1Bid  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Best1BidVolume", DbType.Int64, (entity.Best1BidVolume.HasValue ? (object) entity.Best1BidVolume  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Best2Bid", DbType.Int64, (entity.Best2Bid.HasValue ? (object) entity.Best2Bid  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Best2BidVolume", DbType.Int64, (entity.Best2BidVolume.HasValue ? (object) entity.Best2BidVolume  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Best3Bid", DbType.Int64, (entity.Best3Bid.HasValue ? (object) entity.Best3Bid  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Best3BidVolume", DbType.Int64, (entity.Best3BidVolume.HasValue ? (object) entity.Best3BidVolume  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Best1Offer", DbType.Int64, (entity.Best1Offer.HasValue ? (object) entity.Best1Offer  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Best1OfferVolume", DbType.Int64, (entity.Best1OfferVolume.HasValue ? (object) entity.Best1OfferVolume  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Best2Offer", DbType.Int64, (entity.Best2Offer.HasValue ? (object) entity.Best2Offer  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Best2OfferVolume", DbType.Int64, (entity.Best2OfferVolume.HasValue ? (object) entity.Best2OfferVolume  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Best3Offer", DbType.Int64, (entity.Best3Offer.HasValue ? (object) entity.Best3Offer  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Best3OfferVolume", DbType.Int64, (entity.Best3OfferVolume.HasValue ? (object) entity.Best3OfferVolume  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@BoardLost", DbType.Int16, (entity.BoardLost.HasValue ? (object) entity.BoardLost  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@TotalRoom", DbType.Int64, (entity.TotalRoom.HasValue ? (object) entity.TotalRoom  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CurrentRoom", DbType.Int64, (entity.CurrentRoom.HasValue ? (object) entity.CurrentRoom  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@StartRoom", DbType.Int64, (entity.StartRoom.HasValue ? (object) entity.StartRoom  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Sequence", DbType.Int64, (entity.Sequence.HasValue ? (object) entity.Sequence  : System.DBNull.Value));
            database.AddInParameter(commandWrapper, "@IsVn30", DbType.Boolean, (entity.IsVn30.HasValue ? (object)entity.IsVn30  : System.DBNull.Value));
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _id = database.GetParameterValue(commandWrapper, "@Id");
			entity.Id = (System.Int64)_id;
			
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">RTStockData.Entities.SecurityRealtime object to update.</param>
		/// <remarks>
		///		After updating the datasource, the RTStockData.Entities.SecurityRealtime object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, RTStockData.Entities.SecurityRealtime entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.security_realtime_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@Id", DbType.Int64, entity.Id );
			database.AddInParameter(commandWrapper, "@TradeDate", DbType.DateTime, (entity.TradeDate.HasValue ? (object) entity.TradeDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Stockno", DbType.Int16, (entity.Stockno.HasValue ? (object) entity.Stockno : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@StockSymbol", DbType.AnsiString, entity.StockSymbol );
			database.AddInParameter(commandWrapper, "@StockType", DbType.AnsiString, entity.StockType );
			database.AddInParameter(commandWrapper, "@Ceiling", DbType.Int64, (entity.Ceiling.HasValue ? (object) entity.Ceiling : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Floor", DbType.Int64, (entity.Floor.HasValue ? (object) entity.Floor : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@BigLotValue", DbType.Int64, (entity.BigLotValue.HasValue ? (object) entity.BigLotValue : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SecurityName", DbType.AnsiString, entity.SecurityName );
			database.AddInParameter(commandWrapper, "@SectorNo", DbType.AnsiString, entity.SectorNo );
			database.AddInParameter(commandWrapper, "@Designated", DbType.AnsiString, entity.Designated );
			database.AddInParameter(commandWrapper, "@Suspension", DbType.AnsiString, entity.Suspension );
			database.AddInParameter(commandWrapper, "@Delist", DbType.AnsiString, entity.Delist );
			database.AddInParameter(commandWrapper, "@HaltResumeFlag", DbType.AnsiString, entity.HaltResumeFlag );
			database.AddInParameter(commandWrapper, "@Split", DbType.AnsiString, entity.Split );
			database.AddInParameter(commandWrapper, "@Benefit", DbType.AnsiString, entity.Benefit );
			database.AddInParameter(commandWrapper, "@Meeting", DbType.AnsiString, entity.Meeting );
			database.AddInParameter(commandWrapper, "@Notice", DbType.AnsiString, entity.Notice );
			database.AddInParameter(commandWrapper, "@ClientidRequired", DbType.AnsiString, entity.ClientidRequired );
			database.AddInParameter(commandWrapper, "@CouponRate", DbType.Int16, (entity.CouponRate.HasValue ? (object) entity.CouponRate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@IssueDate", DbType.AnsiString, entity.IssueDate );
			database.AddInParameter(commandWrapper, "@MatureDate", DbType.AnsiString, entity.MatureDate );
			database.AddInParameter(commandWrapper, "@AvrPrice", DbType.Int64, (entity.AvrPrice.HasValue ? (object) entity.AvrPrice : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ParValue", DbType.Int16, (entity.ParValue.HasValue ? (object) entity.ParValue : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SdcFlag", DbType.AnsiString, entity.SdcFlag );
			database.AddInParameter(commandWrapper, "@PriorClosePrice", DbType.Int64, (entity.PriorClosePrice.HasValue ? (object) entity.PriorClosePrice : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@PriorCloseDate", DbType.AnsiString, entity.PriorCloseDate );
			database.AddInParameter(commandWrapper, "@ProjectOpen", DbType.Int64, (entity.ProjectOpen.HasValue ? (object) entity.ProjectOpen : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@OpenPrice", DbType.Int64, (entity.OpenPrice.HasValue ? (object) entity.OpenPrice : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Last", DbType.Int64, (entity.Last.HasValue ? (object) entity.Last : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@LastVol", DbType.Int64, (entity.LastVol.HasValue ? (object) entity.LastVol : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@LastVal", DbType.Int64, (entity.LastVal.HasValue ? (object) entity.LastVal : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Highest", DbType.Int64, (entity.Highest.HasValue ? (object) entity.Highest : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Lowest", DbType.Int64, (entity.Lowest.HasValue ? (object) entity.Lowest : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Totalshares", DbType.Int64, (entity.Totalshares.HasValue ? (object) entity.Totalshares : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@TotalValue", DbType.Int64, (entity.TotalValue.HasValue ? (object) entity.TotalValue : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@AccumulateDeal", DbType.Int16, (entity.AccumulateDeal.HasValue ? (object) entity.AccumulateDeal : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@BigDeal", DbType.Int16, (entity.BigDeal.HasValue ? (object) entity.BigDeal : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@BigVolume", DbType.Int64, (entity.BigVolume.HasValue ? (object) entity.BigVolume : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@BigValue", DbType.Int64, (entity.BigValue.HasValue ? (object) entity.BigValue : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@OddDeal", DbType.Int16, (entity.OddDeal.HasValue ? (object) entity.OddDeal : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@OddVolume", DbType.Int64, (entity.OddVolume.HasValue ? (object) entity.OddVolume : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@OddValue", DbType.Int64, (entity.OddValue.HasValue ? (object) entity.OddValue : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Best1Bid", DbType.Int64, (entity.Best1Bid.HasValue ? (object) entity.Best1Bid : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Best1BidVolume", DbType.Int64, (entity.Best1BidVolume.HasValue ? (object) entity.Best1BidVolume : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Best2Bid", DbType.Int64, (entity.Best2Bid.HasValue ? (object) entity.Best2Bid : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Best2BidVolume", DbType.Int64, (entity.Best2BidVolume.HasValue ? (object) entity.Best2BidVolume : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Best3Bid", DbType.Int64, (entity.Best3Bid.HasValue ? (object) entity.Best3Bid : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Best3BidVolume", DbType.Int64, (entity.Best3BidVolume.HasValue ? (object) entity.Best3BidVolume : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Best1Offer", DbType.Int64, (entity.Best1Offer.HasValue ? (object) entity.Best1Offer : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Best1OfferVolume", DbType.Int64, (entity.Best1OfferVolume.HasValue ? (object) entity.Best1OfferVolume : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Best2Offer", DbType.Int64, (entity.Best2Offer.HasValue ? (object) entity.Best2Offer : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Best2OfferVolume", DbType.Int64, (entity.Best2OfferVolume.HasValue ? (object) entity.Best2OfferVolume : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Best3Offer", DbType.Int64, (entity.Best3Offer.HasValue ? (object) entity.Best3Offer : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Best3OfferVolume", DbType.Int64, (entity.Best3OfferVolume.HasValue ? (object) entity.Best3OfferVolume : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@BoardLost", DbType.Int16, (entity.BoardLost.HasValue ? (object) entity.BoardLost : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@TotalRoom", DbType.Int64, (entity.TotalRoom.HasValue ? (object) entity.TotalRoom : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CurrentRoom", DbType.Int64, (entity.CurrentRoom.HasValue ? (object) entity.CurrentRoom : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@StartRoom", DbType.Int64, (entity.StartRoom.HasValue ? (object) entity.StartRoom : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Sequence", DbType.Int64, (entity.Sequence.HasValue ? (object) entity.Sequence : System.DBNull.Value) );
            database.AddInParameter(commandWrapper, "@IsVn30", DbType.Boolean, (entity.Sequence.HasValue ? (object)entity.Sequence : System.DBNull.Value));

			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	
		#endregion
	}//end class
} // end namespace
