<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RTStockData.Services</name>
    </assembly>
    <members>
        <member name="T:RTStockData.Services.TotalmarketService">
            <summary>
            An component type implementation of the 'totalmarket' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:RTStockData.Services.TotalmarketServiceBase">
            <summary>
             An object representation of the 'totalmarket' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Totalmarket.cs file instead.
             All custom implementations should be done in the <see cref="T:RTStockData.Entities.Totalmarket"/> class.
             </remarks>
        </member>
        <member name="T:RTStockData.Services.ServiceBase`2">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:RTStockData.Services.ServiceBaseCore`2">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:RTStockData.Services.IComponentService">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="P:RTStockData.Services.IComponentService.ProcessorList">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:RTStockData.Services.IComponentService.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:RTStockData.Services.IComponentService.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="E:RTStockData.Services.IComponentService.ProcessStarting">
            <summary>
            Event to indicate that a processor is about to begin.
            </summary>
        </member>
        <member name="E:RTStockData.Services.IComponentService.ProcessEnded">
            <summary>
            Event to indicate that a processor has just ended.
            </summary>
        </member>
        <member name="M:RTStockData.Services.ServiceBaseCore`2.OnProcessStarting(RTStockData.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:RTStockData.Services.ServiceBaseCore`2.OnProcessEnded(RTStockData.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:RTStockData.Services.ServiceBaseCore`2.Execute">
             <summary>
            	Provides the beginning
             <remarks>
             If no AbortIfFailure parameter is passed then the process will not abort if there is a failure
             </remarks>
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:RTStockData.Services.ServiceBaseCore`2.Execute(System.Boolean)">
             <summary>
            	Executes the processors in the processor list
             <remarks>
             If abortIfFailure is set to true then the execution will halt on the first failure
            </remarks>
             </summary>
        </member>
        <member name="M:RTStockData.Services.ServiceBaseCore`2.Get(`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RTStockData.Services.ServiceBaseCore`2.GetAll">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:RTStockData.Services.ServiceBaseCore`2.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:RTStockData.Services.ServiceBaseCore`2.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RTStockData.Services.ServiceBaseCore`2.Insert(`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:RTStockData.Services.ServiceBaseCore`2.BulkInsert(RTStockData.Entities.TList{`0})">
            <summary>
            Efficiently inserts multiple rows into the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to insert.</param>
        </member>
        <member name="M:RTStockData.Services.ServiceBaseCore`2.Update(`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:RTStockData.Services.ServiceBaseCore`2.Delete(`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:RTStockData.Services.ServiceBaseCore`2.Save(`0)">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:RTStockData.Services.ServiceBaseCore`2.DeepLoad(`0,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[],RTStockData.Data.Bases.DeepSession)">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
            <param name="innerList">A collection of child types for easy access.</param>
        </member>
        <member name="M:RTStockData.Services.ServiceBaseCore`2.DeepLoad(RTStockData.Entities.TList{`0},System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:RTStockData.Services.ServiceBaseCore`2.DeepSave(`0)">
            <summary>
            Deep Save the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:RTStockData.Services.ServiceBaseCore`2.DeepSave(`0,RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:RTStockData.Services.ServiceBaseCore`2.DeepSave(`0,RTStockData.Data.DeepSaveType,System.Type[],System.Collections.Hashtable)">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep save functionality.
            </remarks>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="M:RTStockData.Services.ServiceBaseCore`2.DeepSave(RTStockData.Entities.TList{`0},RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="P:RTStockData.Services.ServiceBaseCore`2.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:RTStockData.Services.ServiceBaseCore`2.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:RTStockData.Services.ServiceBaseCore`2.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:RTStockData.Services.ServiceBaseCore`2.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:RTStockData.Services.ServiceBaseCore`2.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:RTStockData.Services.ServiceBaseCore`2.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:RTStockData.Services.ServiceBaseCore`2.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:RTStockData.Services.ServiceBaseCore`2.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:RTStockData.Services.ServiceBaseCore`2.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RTStockData.Entities.Totalmarket"/> instance .
            </summary>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.CreateTotalmarket(System.Nullable{System.DateTime},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Int64},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:RTStockData.Entities.Totalmarket"/> instance.
            </summary>
            <param name="_tradeDate"></param>
            <param name="_setIndex"></param>
            <param name="_totalTrade"></param>
            <param name="_totalshare"></param>
            <param name="_totalValue"></param>
            <param name="_upVolume"></param>
            <param name="_downVolume"></param>
            <param name="_noChangeVolume"></param>
            <param name="_advances"></param>
            <param name="_declines"></param>
            <param name="_nochange"></param>
            <param name="_marketid"></param>
            <param name="_filler"></param>
            <param name="_time"></param>
            <param name="_status"></param>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.Get(RTStockData.Entities.TotalmarketKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.GetById(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_totalmarket index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.Totalmarket"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.GetById(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_totalmarket index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.Totalmarket"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RTStockData.Entities.Totalmarket"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RTStockData.Entities.Totalmarket"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RTStockData.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Totalmarket</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Totalmarket</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RTStockData.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Totalmarket</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Totalmarket} of <c>Totalmarket</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.Find(RTStockData.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Totalmarket</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Totalmarket</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Totalmarket</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Totalmarket</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Totalmarket</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.Insert(RTStockData.Entities.Totalmarket)">
            <summary>
            public virtual method that Inserts a Totalmarket object into the datasource using a transaction.
            </summary>
            <param name="entity">Totalmarket object to Insert.</param>
            <remarks>After Inserting into the datasource, the Totalmarket object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Totalmarket entity = new Totalmarket();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	TotalmarketService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.Insert(RTStockData.Entities.TList{RTStockData.Entities.Totalmarket})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Totalmarket</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Totalmarket</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Totalmarket.
             <code><![CDATA[
             TList<Totalmarket> list = new TList<Totalmarket>();
             Totalmarket entity = new Totalmarket();
             entity.StringProperty = "foo";
             Totalmarket entity2 = new Totalmarket();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TotalmarketService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.Update(RTStockData.Entities.Totalmarket)">
            <summary>
            public virtual method that Updates a Totalmarket object into the datasource using a transaction.
            </summary>
            <param name="entity">Totalmarket object to Update.</param>
            <remarks>After Updateing into the datasource, the Totalmarket object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Totalmarket entity = TotalmarketService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	TotalmarketService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.Update(RTStockData.Entities.TList{RTStockData.Entities.Totalmarket})">
             <summary>
             public virtual method that Updates rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Totalmarket</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Totalmarket</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Totalmarket.
             <code><![CDATA[
             TList<Totalmarket> list = new TList<Totalmarket>();
             Totalmarket entity = new Totalmarket();
             entity.StringProperty = "foo";
             Totalmarket entity2 = new Totalmarket();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TotalmarketService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.Save(RTStockData.Entities.Totalmarket)">
            <summary>
            public virtual method that Saves a Totalmarket object into the datasource using a transaction.
            </summary>
            <param name="entity">Totalmarket object to Save.</param>
            <remarks>After Saveing into the datasource, the Totalmarket object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Totalmarket entity = TotalmarketService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	TotalmarketService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.Save(RTStockData.Entities.TList{RTStockData.Entities.Totalmarket})">
             <summary>
             public virtual method that Saves rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Totalmarket</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Totalmarket</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Totalmarket.
             <code><![CDATA[
             TList<Totalmarket> list = new TList<Totalmarket>();
             Totalmarket entity = new Totalmarket();
             entity.StringProperty = "foo";
             Totalmarket entity2 = new Totalmarket();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TotalmarketService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.Delete(RTStockData.Entities.Totalmarket)">
            <summary>
            public virtual method that Deletes a Totalmarket object into the datasource using a transaction.
            </summary>
            <param name="entity">Totalmarket object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Totalmarket object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Totalmarket entity = TotalmarketService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	TotalmarketService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.Delete(RTStockData.Entities.TList{RTStockData.Entities.Totalmarket})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Totalmarket</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Totalmarket</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Totalmarket.
             <code><![CDATA[
             TList<Totalmarket> list = new TList<Totalmarket>();
             Totalmarket entity = new Totalmarket();
             entity.StringProperty = "foo";
             Totalmarket entity2 = new Totalmarket();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	TotalmarketService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.Delete(RTStockData.Entities.TotalmarketKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 _id
            </summary>
            <param name="_id">Totalmarket pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.DeepLoadById(System.Int64,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RTStockData.Entities.Totalmarket"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Totalmarket Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.Totalmarket"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.DeepLoad(RTStockData.Entities.Totalmarket)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Totalmarket Object</param>
            <remarks>
            <seealso cref="M:RTStockData.Services.TotalmarketServiceBase.DeepLoad(RTStockData.Entities.Totalmarket)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.DeepLoad(RTStockData.Entities.Totalmarket,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.TotalmarketServiceBase.DeepLoad(RTStockData.Entities.Totalmarket)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Totalmarket Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.DeepLoad(RTStockData.Entities.Totalmarket,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RTStockData.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RTStockData.Entities.Totalmarket"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Totalmarket Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.Totalmarket})">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.TotalmarketServiceBase.DeepLoad(RTStockData.Entities.Totalmarket)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.Totalmarket},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.TotalmarketServiceBase.DeepLoad(RTStockData.Entities.Totalmarket)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.Totalmarket},System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RTStockData.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RTStockData.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RTStockData.Entities.Totalmarket"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.DeepSave(RTStockData.Entities.Totalmarket)">
            <summary>
            public virtualDeep Saves the <see cref="T:RTStockData.Entities.Totalmarket"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Totalmarket Object</param>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.DeepSave(RTStockData.Entities.Totalmarket,RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Totalmarket object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Totalmarket Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Totalmarket</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.Totalmarket})">
            <summary>
            Deep Save the entire <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Totalmarket} Object</param>
        </member>
        <member name="M:RTStockData.Services.TotalmarketServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.Totalmarket},RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RTStockData.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Totalmarket Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RTStockData.Services.TotalmarketServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RTStockData.Services.TotalmarketService.#ctor">
            <summary>
            Initializes a new instance of the TotalmarketService class.
            </summary>
        </member>
        <member name="T:RTStockData.Services.HoseTransactionsService">
            <summary>
            An component type implementation of the 'hose_transactions' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:RTStockData.Services.HoseTransactionsServiceBase">
            <summary>
             An object representation of the 'hose_transactions' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the HoseTransactions.cs file instead.
             All custom implementations should be done in the <see cref="T:RTStockData.Entities.HoseTransactions"/> class.
             </remarks>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RTStockData.Entities.HoseTransactions"/> instance .
            </summary>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.CreateHoseTransactions(System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:RTStockData.Entities.HoseTransactions"/> instance.
            </summary>
            <param name="_tradeDate"></param>
            <param name="_stockSymbol"></param>
            <param name="_price"></param>
            <param name="_vol"></param>
            <param name="_val"></param>
            <param name="_accumulatedVol"></param>
            <param name="_accumulatedVal"></param>
            <param name="_highest"></param>
            <param name="_lowest"></param>
            <param name="_time"></param>
            <param name="_side"></param>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.Get(RTStockData.Entities.HoseTransactionsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.GetById(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_hose_transactions index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.HoseTransactions"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.GetById(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_hose_transactions index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.HoseTransactions"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RTStockData.Entities.HoseTransactions"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RTStockData.Entities.HoseTransactions"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RTStockData.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HoseTransactions</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HoseTransactions</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RTStockData.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HoseTransactions</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{HoseTransactions} of <c>HoseTransactions</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.Find(RTStockData.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>HoseTransactions</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>HoseTransactions</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>HoseTransactions</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>HoseTransactions</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>HoseTransactions</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.Insert(RTStockData.Entities.HoseTransactions)">
            <summary>
            public virtual method that Inserts a HoseTransactions object into the datasource using a transaction.
            </summary>
            <param name="entity">HoseTransactions object to Insert.</param>
            <remarks>After Inserting into the datasource, the HoseTransactions object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            HoseTransactions entity = new HoseTransactions();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	HoseTransactionsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.Insert(RTStockData.Entities.TList{RTStockData.Entities.HoseTransactions})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HoseTransactions</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>HoseTransactions</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of HoseTransactions.
             <code><![CDATA[
             TList<HoseTransactions> list = new TList<HoseTransactions>();
             HoseTransactions entity = new HoseTransactions();
             entity.StringProperty = "foo";
             HoseTransactions entity2 = new HoseTransactions();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HoseTransactionsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.Update(RTStockData.Entities.HoseTransactions)">
            <summary>
            public virtual method that Updates a HoseTransactions object into the datasource using a transaction.
            </summary>
            <param name="entity">HoseTransactions object to Update.</param>
            <remarks>After Updateing into the datasource, the HoseTransactions object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            HoseTransactions entity = HoseTransactionsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	HoseTransactionsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.Update(RTStockData.Entities.TList{RTStockData.Entities.HoseTransactions})">
             <summary>
             public virtual method that Updates rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HoseTransactions</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>HoseTransactions</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of HoseTransactions.
             <code><![CDATA[
             TList<HoseTransactions> list = new TList<HoseTransactions>();
             HoseTransactions entity = new HoseTransactions();
             entity.StringProperty = "foo";
             HoseTransactions entity2 = new HoseTransactions();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HoseTransactionsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.Save(RTStockData.Entities.HoseTransactions)">
            <summary>
            public virtual method that Saves a HoseTransactions object into the datasource using a transaction.
            </summary>
            <param name="entity">HoseTransactions object to Save.</param>
            <remarks>After Saveing into the datasource, the HoseTransactions object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            HoseTransactions entity = HoseTransactionsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	HoseTransactionsService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.Save(RTStockData.Entities.TList{RTStockData.Entities.HoseTransactions})">
             <summary>
             public virtual method that Saves rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HoseTransactions</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>HoseTransactions</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of HoseTransactions.
             <code><![CDATA[
             TList<HoseTransactions> list = new TList<HoseTransactions>();
             HoseTransactions entity = new HoseTransactions();
             entity.StringProperty = "foo";
             HoseTransactions entity2 = new HoseTransactions();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HoseTransactionsService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.Delete(RTStockData.Entities.HoseTransactions)">
            <summary>
            public virtual method that Deletes a HoseTransactions object into the datasource using a transaction.
            </summary>
            <param name="entity">HoseTransactions object to Delete.</param>
            <remarks>After Deleteing into the datasource, the HoseTransactions object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            HoseTransactions entity = HoseTransactionsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	HoseTransactionsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.Delete(RTStockData.Entities.TList{RTStockData.Entities.HoseTransactions})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HoseTransactions</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>HoseTransactions</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of HoseTransactions.
             <code><![CDATA[
             TList<HoseTransactions> list = new TList<HoseTransactions>();
             HoseTransactions entity = new HoseTransactions();
             entity.StringProperty = "foo";
             HoseTransactions entity2 = new HoseTransactions();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HoseTransactionsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.Delete(RTStockData.Entities.HoseTransactionsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 _id
            </summary>
            <param name="_id">HoseTransactions pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.DeepLoadById(System.Int64,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RTStockData.Entities.HoseTransactions"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">HoseTransactions Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.HoseTransactions"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.DeepLoad(RTStockData.Entities.HoseTransactions)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">HoseTransactions Object</param>
            <remarks>
            <seealso cref="M:RTStockData.Services.HoseTransactionsServiceBase.DeepLoad(RTStockData.Entities.HoseTransactions)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.DeepLoad(RTStockData.Entities.HoseTransactions,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.HoseTransactionsServiceBase.DeepLoad(RTStockData.Entities.HoseTransactions)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">HoseTransactions Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.DeepLoad(RTStockData.Entities.HoseTransactions,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RTStockData.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RTStockData.Entities.HoseTransactions"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">HoseTransactions Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.HoseTransactions})">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.HoseTransactionsServiceBase.DeepLoad(RTStockData.Entities.HoseTransactions)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.HoseTransactions},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.HoseTransactionsServiceBase.DeepLoad(RTStockData.Entities.HoseTransactions)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.HoseTransactions},System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RTStockData.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RTStockData.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RTStockData.Entities.HoseTransactions"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.DeepSave(RTStockData.Entities.HoseTransactions)">
            <summary>
            public virtualDeep Saves the <see cref="T:RTStockData.Entities.HoseTransactions"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">HoseTransactions Object</param>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.DeepSave(RTStockData.Entities.HoseTransactions,RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the HoseTransactions object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">HoseTransactions Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>HoseTransactions</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.HoseTransactions})">
            <summary>
            Deep Save the entire <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{HoseTransactions} Object</param>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.HoseTransactions},RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RTStockData.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">HoseTransactions Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RTStockData.Services.HoseTransactionsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsService.#ctor">
            <summary>
            Initializes a new instance of the HoseTransactionsService class.
            </summary>
        </member>
        <member name="M:RTStockData.Services.HoseTransactionsService.GetAllById(System.Int64)">
            <summary>
             Get all records with id > sending id
            </summary>
            <param name="id">Sending id</param>
            <returns></returns>
        </member>
        <member name="T:RTStockData.Services.IndexInfoServiceBase">
            <summary>
             An object representation of the 'IndexInfo' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the IndexInfo.cs file instead.
             All custom implementations should be done in the <see cref="T:RTStockData.Entities.IndexInfo"/> class.
             </remarks>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RTStockData.Entities.IndexInfo"/> instance .
            </summary>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.CreateIndexInfo(System.Nullable{System.Int64},System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int64},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime})">
            <summary>
             A simple factory method to create a new <see cref="T:RTStockData.Entities.IndexInfo"/> instance.
            </summary>
            <param name="_indexId"></param>
            <param name="_indexCode"></param>
            <param name="_name"></param>
            <param name="_description"></param>
            <param name="_tradingDate"></param>
            <param name="_time"></param>
            <param name="_currentStatus"></param>
            <param name="_totalStock"></param>
            <param name="_advances"></param>
            <param name="_nochange"></param>
            <param name="_declines"></param>
            <param name="_totalQtty"></param>
            <param name="_totalValue"></param>
            <param name="_priorIndexVal"></param>
            <param name="_chgIndex"></param>
            <param name="_pctIndex"></param>
            <param name="_currentIndex"></param>
            <param name="_highestIndex"></param>
            <param name="_lowestIndex"></param>
            <param name="_sessionNo"></param>
            <param name="_typeIndex"></param>
            <param name="_closeIndex"></param>
            <param name="_tradeDate"></param>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.Get(RTStockData.Entities.IndexInfoKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.GetById(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_IndexInfo index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.IndexInfo"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.GetById(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_IndexInfo index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.IndexInfo"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RTStockData.Entities.IndexInfo"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RTStockData.Entities.IndexInfo"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RTStockData.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>IndexInfo</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>IndexInfo</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RTStockData.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>IndexInfo</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{IndexInfo} of <c>IndexInfo</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.Find(RTStockData.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>IndexInfo</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>IndexInfo</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>IndexInfo</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>IndexInfo</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>IndexInfo</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.Insert(RTStockData.Entities.IndexInfo)">
            <summary>
            public virtual method that Inserts a IndexInfo object into the datasource using a transaction.
            </summary>
            <param name="entity">IndexInfo object to Insert.</param>
            <remarks>After Inserting into the datasource, the IndexInfo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            IndexInfo entity = new IndexInfo();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	IndexInfoService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.Insert(RTStockData.Entities.TList{RTStockData.Entities.IndexInfo})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>IndexInfo</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>IndexInfo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of IndexInfo.
             <code><![CDATA[
             TList<IndexInfo> list = new TList<IndexInfo>();
             IndexInfo entity = new IndexInfo();
             entity.StringProperty = "foo";
             IndexInfo entity2 = new IndexInfo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IndexInfoService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.Update(RTStockData.Entities.IndexInfo)">
            <summary>
            public virtual method that Updates a IndexInfo object into the datasource using a transaction.
            </summary>
            <param name="entity">IndexInfo object to Update.</param>
            <remarks>After Updateing into the datasource, the IndexInfo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            IndexInfo entity = IndexInfoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	IndexInfoService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.Update(RTStockData.Entities.TList{RTStockData.Entities.IndexInfo})">
             <summary>
             public virtual method that Updates rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>IndexInfo</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>IndexInfo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of IndexInfo.
             <code><![CDATA[
             TList<IndexInfo> list = new TList<IndexInfo>();
             IndexInfo entity = new IndexInfo();
             entity.StringProperty = "foo";
             IndexInfo entity2 = new IndexInfo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IndexInfoService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.Save(RTStockData.Entities.IndexInfo)">
            <summary>
            public virtual method that Saves a IndexInfo object into the datasource using a transaction.
            </summary>
            <param name="entity">IndexInfo object to Save.</param>
            <remarks>After Saveing into the datasource, the IndexInfo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            IndexInfo entity = IndexInfoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	IndexInfoService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.Save(RTStockData.Entities.TList{RTStockData.Entities.IndexInfo})">
             <summary>
             public virtual method that Saves rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>IndexInfo</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>IndexInfo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of IndexInfo.
             <code><![CDATA[
             TList<IndexInfo> list = new TList<IndexInfo>();
             IndexInfo entity = new IndexInfo();
             entity.StringProperty = "foo";
             IndexInfo entity2 = new IndexInfo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IndexInfoService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.Delete(RTStockData.Entities.IndexInfo)">
            <summary>
            public virtual method that Deletes a IndexInfo object into the datasource using a transaction.
            </summary>
            <param name="entity">IndexInfo object to Delete.</param>
            <remarks>After Deleteing into the datasource, the IndexInfo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            IndexInfo entity = IndexInfoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	IndexInfoService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.Delete(RTStockData.Entities.TList{RTStockData.Entities.IndexInfo})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>IndexInfo</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>IndexInfo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of IndexInfo.
             <code><![CDATA[
             TList<IndexInfo> list = new TList<IndexInfo>();
             IndexInfo entity = new IndexInfo();
             entity.StringProperty = "foo";
             IndexInfo entity2 = new IndexInfo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IndexInfoService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.Delete(RTStockData.Entities.IndexInfoKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 _id
            </summary>
            <param name="_id">IndexInfo pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.DeepLoadById(System.Int64,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RTStockData.Entities.IndexInfo"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">IndexInfo Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.IndexInfo"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.DeepLoad(RTStockData.Entities.IndexInfo)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">IndexInfo Object</param>
            <remarks>
            <seealso cref="M:RTStockData.Services.IndexInfoServiceBase.DeepLoad(RTStockData.Entities.IndexInfo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.DeepLoad(RTStockData.Entities.IndexInfo,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.IndexInfoServiceBase.DeepLoad(RTStockData.Entities.IndexInfo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">IndexInfo Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.DeepLoad(RTStockData.Entities.IndexInfo,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RTStockData.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RTStockData.Entities.IndexInfo"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">IndexInfo Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.IndexInfo})">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.IndexInfoServiceBase.DeepLoad(RTStockData.Entities.IndexInfo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.IndexInfo},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.IndexInfoServiceBase.DeepLoad(RTStockData.Entities.IndexInfo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.IndexInfo},System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RTStockData.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RTStockData.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RTStockData.Entities.IndexInfo"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.DeepSave(RTStockData.Entities.IndexInfo)">
            <summary>
            public virtualDeep Saves the <see cref="T:RTStockData.Entities.IndexInfo"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">IndexInfo Object</param>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.DeepSave(RTStockData.Entities.IndexInfo,RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the IndexInfo object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">IndexInfo Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>IndexInfo</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.IndexInfo})">
            <summary>
            Deep Save the entire <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{IndexInfo} Object</param>
        </member>
        <member name="M:RTStockData.Services.IndexInfoServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.IndexInfo},RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RTStockData.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">IndexInfo Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RTStockData.Services.IndexInfoServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RTStockData.Services.LeServiceBase">
            <summary>
             An object representation of the 'le' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Le.cs file instead.
             All custom implementations should be done in the <see cref="T:RTStockData.Entities.Le"/> class.
             </remarks>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RTStockData.Entities.Le"/> instance .
            </summary>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.CreateLe(System.Nullable{System.DateTime},System.Nullable{System.Int16},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
             A simple factory method to create a new <see cref="T:RTStockData.Entities.Le"/> instance.
            </summary>
            <param name="_tradeDate"></param>
            <param name="_stockNo"></param>
            <param name="_price"></param>
            <param name="_accumulatedVol"></param>
            <param name="_accumulatedVal"></param>
            <param name="_highest"></param>
            <param name="_lowest"></param>
            <param name="_turn"></param>
            <param name="_time"></param>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.Get(RTStockData.Entities.LeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.GetById(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_le index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.Le"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.GetById(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_le index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.Le"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RTStockData.Entities.Le"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RTStockData.Entities.Le"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RTStockData.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Le</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Le</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RTStockData.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Le</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Le} of <c>Le</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.Find(RTStockData.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Le</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Le</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Le</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Le</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Le</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.Insert(RTStockData.Entities.Le)">
            <summary>
            public virtual method that Inserts a Le object into the datasource using a transaction.
            </summary>
            <param name="entity">Le object to Insert.</param>
            <remarks>After Inserting into the datasource, the Le object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Le entity = new Le();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	LeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.Insert(RTStockData.Entities.TList{RTStockData.Entities.Le})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Le</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Le</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Le.
             <code><![CDATA[
             TList<Le> list = new TList<Le>();
             Le entity = new Le();
             entity.StringProperty = "foo";
             Le entity2 = new Le();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.Update(RTStockData.Entities.Le)">
            <summary>
            public virtual method that Updates a Le object into the datasource using a transaction.
            </summary>
            <param name="entity">Le object to Update.</param>
            <remarks>After Updateing into the datasource, the Le object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Le entity = LeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	LeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.Update(RTStockData.Entities.TList{RTStockData.Entities.Le})">
             <summary>
             public virtual method that Updates rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Le</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Le</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Le.
             <code><![CDATA[
             TList<Le> list = new TList<Le>();
             Le entity = new Le();
             entity.StringProperty = "foo";
             Le entity2 = new Le();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.Save(RTStockData.Entities.Le)">
            <summary>
            public virtual method that Saves a Le object into the datasource using a transaction.
            </summary>
            <param name="entity">Le object to Save.</param>
            <remarks>After Saveing into the datasource, the Le object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Le entity = LeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	LeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.Save(RTStockData.Entities.TList{RTStockData.Entities.Le})">
             <summary>
             public virtual method that Saves rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Le</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Le</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Le.
             <code><![CDATA[
             TList<Le> list = new TList<Le>();
             Le entity = new Le();
             entity.StringProperty = "foo";
             Le entity2 = new Le();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.Delete(RTStockData.Entities.Le)">
            <summary>
            public virtual method that Deletes a Le object into the datasource using a transaction.
            </summary>
            <param name="entity">Le object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Le object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Le entity = LeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	LeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.Delete(RTStockData.Entities.TList{RTStockData.Entities.Le})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Le</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Le</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Le.
             <code><![CDATA[
             TList<Le> list = new TList<Le>();
             Le entity = new Le();
             entity.StringProperty = "foo";
             Le entity2 = new Le();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.Delete(RTStockData.Entities.LeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 _id
            </summary>
            <param name="_id">Le pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.DeepLoadById(System.Int64,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RTStockData.Entities.Le"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Le Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.Le"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.DeepLoad(RTStockData.Entities.Le)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Le Object</param>
            <remarks>
            <seealso cref="M:RTStockData.Services.LeServiceBase.DeepLoad(RTStockData.Entities.Le)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.DeepLoad(RTStockData.Entities.Le,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.LeServiceBase.DeepLoad(RTStockData.Entities.Le)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Le Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.DeepLoad(RTStockData.Entities.Le,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RTStockData.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RTStockData.Entities.Le"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Le Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.Le})">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.LeServiceBase.DeepLoad(RTStockData.Entities.Le)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.Le},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.LeServiceBase.DeepLoad(RTStockData.Entities.Le)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.Le},System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RTStockData.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RTStockData.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RTStockData.Entities.Le"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.DeepSave(RTStockData.Entities.Le)">
            <summary>
            public virtualDeep Saves the <see cref="T:RTStockData.Entities.Le"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Le Object</param>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.DeepSave(RTStockData.Entities.Le,RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Le object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Le Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Le</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.Le})">
            <summary>
            Deep Save the entire <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Le} Object</param>
        </member>
        <member name="M:RTStockData.Services.LeServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.Le},RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RTStockData.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Le Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RTStockData.Services.LeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RTStockData.Services.BasketInfoService">
            <summary>
            An component type implementation of the 'BasketInfo' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:RTStockData.Services.BasketInfoServiceBase">
            <summary>
             An object representation of the 'BasketInfo' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the BasketInfo.cs file instead.
             All custom implementations should be done in the <see cref="T:RTStockData.Entities.BasketInfo"/> class.
             </remarks>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RTStockData.Entities.BasketInfo"/> instance .
            </summary>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.CreateBasketInfo(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.DateTime})">
            <summary>
             A simple factory method to create a new <see cref="T:RTStockData.Entities.BasketInfo"/> instance.
            </summary>
            <param name="_basketId"></param>
            <param name="_indexId"></param>
            <param name="_indexCode"></param>
            <param name="_stockCode"></param>
            <param name="_totalCeilingQtty"></param>
            <param name="_addDate"></param>
            <param name="_currentWeight"></param>
            <param name="_tradeDate"></param>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.Get(RTStockData.Entities.BasketInfoKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.GetById(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_BasketInfo index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.BasketInfo"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.GetById(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_BasketInfo index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.BasketInfo"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RTStockData.Entities.BasketInfo"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RTStockData.Entities.BasketInfo"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RTStockData.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>BasketInfo</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>BasketInfo</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RTStockData.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>BasketInfo</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{BasketInfo} of <c>BasketInfo</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.Find(RTStockData.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>BasketInfo</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>BasketInfo</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>BasketInfo</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>BasketInfo</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>BasketInfo</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.Insert(RTStockData.Entities.BasketInfo)">
            <summary>
            public virtual method that Inserts a BasketInfo object into the datasource using a transaction.
            </summary>
            <param name="entity">BasketInfo object to Insert.</param>
            <remarks>After Inserting into the datasource, the BasketInfo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            BasketInfo entity = new BasketInfo();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	BasketInfoService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.Insert(RTStockData.Entities.TList{RTStockData.Entities.BasketInfo})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BasketInfo</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>BasketInfo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of BasketInfo.
             <code><![CDATA[
             TList<BasketInfo> list = new TList<BasketInfo>();
             BasketInfo entity = new BasketInfo();
             entity.StringProperty = "foo";
             BasketInfo entity2 = new BasketInfo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BasketInfoService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.Update(RTStockData.Entities.BasketInfo)">
            <summary>
            public virtual method that Updates a BasketInfo object into the datasource using a transaction.
            </summary>
            <param name="entity">BasketInfo object to Update.</param>
            <remarks>After Updateing into the datasource, the BasketInfo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            BasketInfo entity = BasketInfoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	BasketInfoService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.Update(RTStockData.Entities.TList{RTStockData.Entities.BasketInfo})">
             <summary>
             public virtual method that Updates rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BasketInfo</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>BasketInfo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of BasketInfo.
             <code><![CDATA[
             TList<BasketInfo> list = new TList<BasketInfo>();
             BasketInfo entity = new BasketInfo();
             entity.StringProperty = "foo";
             BasketInfo entity2 = new BasketInfo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BasketInfoService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.Save(RTStockData.Entities.BasketInfo)">
            <summary>
            public virtual method that Saves a BasketInfo object into the datasource using a transaction.
            </summary>
            <param name="entity">BasketInfo object to Save.</param>
            <remarks>After Saveing into the datasource, the BasketInfo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            BasketInfo entity = BasketInfoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	BasketInfoService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.Save(RTStockData.Entities.TList{RTStockData.Entities.BasketInfo})">
             <summary>
             public virtual method that Saves rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BasketInfo</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>BasketInfo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of BasketInfo.
             <code><![CDATA[
             TList<BasketInfo> list = new TList<BasketInfo>();
             BasketInfo entity = new BasketInfo();
             entity.StringProperty = "foo";
             BasketInfo entity2 = new BasketInfo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BasketInfoService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.Delete(RTStockData.Entities.BasketInfo)">
            <summary>
            public virtual method that Deletes a BasketInfo object into the datasource using a transaction.
            </summary>
            <param name="entity">BasketInfo object to Delete.</param>
            <remarks>After Deleteing into the datasource, the BasketInfo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            BasketInfo entity = BasketInfoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	BasketInfoService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.Delete(RTStockData.Entities.TList{RTStockData.Entities.BasketInfo})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BasketInfo</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>BasketInfo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of BasketInfo.
             <code><![CDATA[
             TList<BasketInfo> list = new TList<BasketInfo>();
             BasketInfo entity = new BasketInfo();
             entity.StringProperty = "foo";
             BasketInfo entity2 = new BasketInfo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BasketInfoService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.Delete(RTStockData.Entities.BasketInfoKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 _id
            </summary>
            <param name="_id">BasketInfo pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.DeepLoadById(System.Int64,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RTStockData.Entities.BasketInfo"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">BasketInfo Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.BasketInfo"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.DeepLoad(RTStockData.Entities.BasketInfo)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">BasketInfo Object</param>
            <remarks>
            <seealso cref="M:RTStockData.Services.BasketInfoServiceBase.DeepLoad(RTStockData.Entities.BasketInfo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.DeepLoad(RTStockData.Entities.BasketInfo,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.BasketInfoServiceBase.DeepLoad(RTStockData.Entities.BasketInfo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">BasketInfo Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.DeepLoad(RTStockData.Entities.BasketInfo,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RTStockData.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RTStockData.Entities.BasketInfo"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">BasketInfo Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.BasketInfo})">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.BasketInfoServiceBase.DeepLoad(RTStockData.Entities.BasketInfo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.BasketInfo},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.BasketInfoServiceBase.DeepLoad(RTStockData.Entities.BasketInfo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.BasketInfo},System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RTStockData.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RTStockData.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RTStockData.Entities.BasketInfo"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.DeepSave(RTStockData.Entities.BasketInfo)">
            <summary>
            public virtualDeep Saves the <see cref="T:RTStockData.Entities.BasketInfo"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">BasketInfo Object</param>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.DeepSave(RTStockData.Entities.BasketInfo,RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the BasketInfo object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">BasketInfo Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>BasketInfo</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.BasketInfo})">
            <summary>
            Deep Save the entire <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{BasketInfo} Object</param>
        </member>
        <member name="M:RTStockData.Services.BasketInfoServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.BasketInfo},RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RTStockData.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">BasketInfo Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RTStockData.Services.BasketInfoServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RTStockData.Services.BasketInfoService.#ctor">
            <summary>
            Initializes a new instance of the BasketInfoService class.
            </summary>
        </member>
        <member name="T:RTStockData.Services.ServiceResult">
            <summary>
            The class provides a notification pattern for the processor execution.
            </summary>
        </member>
        <member name="P:RTStockData.Services.ServiceResult.HasErrors">
            <summary>
               Determines whethere the containing service, has errors.
            </summary>
        </member>
        <member name="P:RTStockData.Services.ServiceResult.Error">
            <summary>
               Provides a string of errors accumulated with a new line of delimeted errors.
            </summary>
        </member>
        <member name="P:RTStockData.Services.ServiceResult.ProcessBrokenRuleLists">
            <summary>
               Provides an aggregated group of BrokenRuleList for each of the executed processes.
            </summary>
        </member>
        <member name="P:RTStockData.Services.ServiceResult.ProcessorResultList">
            <summary>
               Determines whethere the containing processs results that were enlisted in the service.
            </summary>
        </member>
        <member name="P:RTStockData.Services.ServiceResult.ExceptionList">
             <summary>
            	Provides the List of UnHandled Exceptions that occured during processing.
             </summary>
            <value>A list of rules that were broken in the process</value>		
        </member>
        <member name="T:RTStockData.Services.IndexVn30ServiceBase">
            <summary>
             An object representation of the 'Index_VN30' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the IndexVn30.cs file instead.
             All custom implementations should be done in the <see cref="T:RTStockData.Entities.IndexVn30"/> class.
             </remarks>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RTStockData.Entities.IndexVn30"/> instance .
            </summary>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.CreateIndexVn30(System.Nullable{System.DateTime},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
             A simple factory method to create a new <see cref="T:RTStockData.Entities.IndexVn30"/> instance.
            </summary>
            <param name="_tradeDate"></param>
            <param name="_index"></param>
            <param name="_totalShares"></param>
            <param name="_totalValues"></param>
            <param name="_up"></param>
            <param name="_down"></param>
            <param name="_noChange"></param>
            <param name="_time"></param>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.Get(RTStockData.Entities.IndexVn30Key)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.GetById(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_Index_VN30 index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.IndexVn30"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.GetById(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_Index_VN30 index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.IndexVn30"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RTStockData.Entities.IndexVn30"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RTStockData.Entities.IndexVn30"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RTStockData.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>IndexVn30</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>IndexVn30</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RTStockData.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>IndexVn30</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{IndexVn30} of <c>IndexVn30</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.Find(RTStockData.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>IndexVn30</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>IndexVn30</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>IndexVn30</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>IndexVn30</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>IndexVn30</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.Insert(RTStockData.Entities.IndexVn30)">
            <summary>
            public virtual method that Inserts a IndexVn30 object into the datasource using a transaction.
            </summary>
            <param name="entity">IndexVn30 object to Insert.</param>
            <remarks>After Inserting into the datasource, the IndexVn30 object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            IndexVn30 entity = new IndexVn30();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	IndexVn30Service.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.Insert(RTStockData.Entities.TList{RTStockData.Entities.IndexVn30})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>IndexVn30</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>IndexVn30</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of IndexVn30.
             <code><![CDATA[
             TList<IndexVn30> list = new TList<IndexVn30>();
             IndexVn30 entity = new IndexVn30();
             entity.StringProperty = "foo";
             IndexVn30 entity2 = new IndexVn30();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IndexVn30Service.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.Update(RTStockData.Entities.IndexVn30)">
            <summary>
            public virtual method that Updates a IndexVn30 object into the datasource using a transaction.
            </summary>
            <param name="entity">IndexVn30 object to Update.</param>
            <remarks>After Updateing into the datasource, the IndexVn30 object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            IndexVn30 entity = IndexVn30Service.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	IndexVn30Service.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.Update(RTStockData.Entities.TList{RTStockData.Entities.IndexVn30})">
             <summary>
             public virtual method that Updates rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>IndexVn30</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>IndexVn30</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of IndexVn30.
             <code><![CDATA[
             TList<IndexVn30> list = new TList<IndexVn30>();
             IndexVn30 entity = new IndexVn30();
             entity.StringProperty = "foo";
             IndexVn30 entity2 = new IndexVn30();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IndexVn30Service.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.Save(RTStockData.Entities.IndexVn30)">
            <summary>
            public virtual method that Saves a IndexVn30 object into the datasource using a transaction.
            </summary>
            <param name="entity">IndexVn30 object to Save.</param>
            <remarks>After Saveing into the datasource, the IndexVn30 object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            IndexVn30 entity = IndexVn30Service.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	IndexVn30Service.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.Save(RTStockData.Entities.TList{RTStockData.Entities.IndexVn30})">
             <summary>
             public virtual method that Saves rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>IndexVn30</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>IndexVn30</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of IndexVn30.
             <code><![CDATA[
             TList<IndexVn30> list = new TList<IndexVn30>();
             IndexVn30 entity = new IndexVn30();
             entity.StringProperty = "foo";
             IndexVn30 entity2 = new IndexVn30();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IndexVn30Service.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.Delete(RTStockData.Entities.IndexVn30)">
            <summary>
            public virtual method that Deletes a IndexVn30 object into the datasource using a transaction.
            </summary>
            <param name="entity">IndexVn30 object to Delete.</param>
            <remarks>After Deleteing into the datasource, the IndexVn30 object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            IndexVn30 entity = IndexVn30Service.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	IndexVn30Service.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.Delete(RTStockData.Entities.TList{RTStockData.Entities.IndexVn30})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>IndexVn30</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>IndexVn30</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of IndexVn30.
             <code><![CDATA[
             TList<IndexVn30> list = new TList<IndexVn30>();
             IndexVn30 entity = new IndexVn30();
             entity.StringProperty = "foo";
             IndexVn30 entity2 = new IndexVn30();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IndexVn30Service.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.Delete(RTStockData.Entities.IndexVn30Key)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 _id
            </summary>
            <param name="_id">IndexVn30 pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.DeepLoadById(System.Int64,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RTStockData.Entities.IndexVn30"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">IndexVn30 Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.IndexVn30"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.DeepLoad(RTStockData.Entities.IndexVn30)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">IndexVn30 Object</param>
            <remarks>
            <seealso cref="M:RTStockData.Services.IndexVn30ServiceBase.DeepLoad(RTStockData.Entities.IndexVn30)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.DeepLoad(RTStockData.Entities.IndexVn30,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.IndexVn30ServiceBase.DeepLoad(RTStockData.Entities.IndexVn30)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">IndexVn30 Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.DeepLoad(RTStockData.Entities.IndexVn30,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RTStockData.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RTStockData.Entities.IndexVn30"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">IndexVn30 Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.IndexVn30})">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.IndexVn30ServiceBase.DeepLoad(RTStockData.Entities.IndexVn30)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.IndexVn30},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.IndexVn30ServiceBase.DeepLoad(RTStockData.Entities.IndexVn30)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.IndexVn30},System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RTStockData.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RTStockData.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RTStockData.Entities.IndexVn30"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.DeepSave(RTStockData.Entities.IndexVn30)">
            <summary>
            public virtualDeep Saves the <see cref="T:RTStockData.Entities.IndexVn30"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">IndexVn30 Object</param>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.DeepSave(RTStockData.Entities.IndexVn30,RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the IndexVn30 object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">IndexVn30 Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>IndexVn30</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.IndexVn30})">
            <summary>
            Deep Save the entire <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{IndexVn30} Object</param>
        </member>
        <member name="M:RTStockData.Services.IndexVn30ServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.IndexVn30},RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RTStockData.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">IndexVn30 Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RTStockData.Services.IndexVn30ServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RTStockData.Services.IndexVn30HistoryService">
            <summary>
            An component type implementation of the 'IndexVN30_History' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:RTStockData.Services.IndexVn30HistoryServiceBase">
            <summary>
             An object representation of the 'IndexVN30_History' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the IndexVn30History.cs file instead.
             All custom implementations should be done in the <see cref="T:RTStockData.Entities.IndexVn30History"/> class.
             </remarks>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RTStockData.Entities.IndexVn30History"/> instance .
            </summary>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.CreateIndexVn30History(System.Nullable{System.DateTime},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Double})">
            <summary>
             A simple factory method to create a new <see cref="T:RTStockData.Entities.IndexVn30History"/> instance.
            </summary>
            <param name="_tradeDate"></param>
            <param name="_index"></param>
            <param name="_totalShares"></param>
            <param name="_totalValues"></param>
            <param name="_up"></param>
            <param name="_down"></param>
            <param name="_noChange"></param>
            <param name="_time"></param>
            <param name="_change"></param>
            <param name="_perChange"></param>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.Get(RTStockData.Entities.IndexVn30HistoryKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.GetById(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_IndexVN30_History index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.IndexVn30History"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.GetById(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_IndexVN30_History index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.IndexVn30History"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RTStockData.Entities.IndexVn30History"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RTStockData.Entities.IndexVn30History"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RTStockData.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>IndexVn30History</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>IndexVn30History</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RTStockData.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>IndexVn30History</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{IndexVn30History} of <c>IndexVn30History</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.Find(RTStockData.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>IndexVn30History</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>IndexVn30History</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>IndexVn30History</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>IndexVn30History</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>IndexVn30History</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.Insert(RTStockData.Entities.IndexVn30History)">
            <summary>
            public virtual method that Inserts a IndexVn30History object into the datasource using a transaction.
            </summary>
            <param name="entity">IndexVn30History object to Insert.</param>
            <remarks>After Inserting into the datasource, the IndexVn30History object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            IndexVn30History entity = new IndexVn30History();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	IndexVn30HistoryService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.Insert(RTStockData.Entities.TList{RTStockData.Entities.IndexVn30History})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>IndexVn30History</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>IndexVn30History</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of IndexVn30History.
             <code><![CDATA[
             TList<IndexVn30History> list = new TList<IndexVn30History>();
             IndexVn30History entity = new IndexVn30History();
             entity.StringProperty = "foo";
             IndexVn30History entity2 = new IndexVn30History();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IndexVn30HistoryService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.Update(RTStockData.Entities.IndexVn30History)">
            <summary>
            public virtual method that Updates a IndexVn30History object into the datasource using a transaction.
            </summary>
            <param name="entity">IndexVn30History object to Update.</param>
            <remarks>After Updateing into the datasource, the IndexVn30History object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            IndexVn30History entity = IndexVn30HistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	IndexVn30HistoryService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.Update(RTStockData.Entities.TList{RTStockData.Entities.IndexVn30History})">
             <summary>
             public virtual method that Updates rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>IndexVn30History</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>IndexVn30History</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of IndexVn30History.
             <code><![CDATA[
             TList<IndexVn30History> list = new TList<IndexVn30History>();
             IndexVn30History entity = new IndexVn30History();
             entity.StringProperty = "foo";
             IndexVn30History entity2 = new IndexVn30History();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IndexVn30HistoryService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.Save(RTStockData.Entities.IndexVn30History)">
            <summary>
            public virtual method that Saves a IndexVn30History object into the datasource using a transaction.
            </summary>
            <param name="entity">IndexVn30History object to Save.</param>
            <remarks>After Saveing into the datasource, the IndexVn30History object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            IndexVn30History entity = IndexVn30HistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	IndexVn30HistoryService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.Save(RTStockData.Entities.TList{RTStockData.Entities.IndexVn30History})">
             <summary>
             public virtual method that Saves rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>IndexVn30History</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>IndexVn30History</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of IndexVn30History.
             <code><![CDATA[
             TList<IndexVn30History> list = new TList<IndexVn30History>();
             IndexVn30History entity = new IndexVn30History();
             entity.StringProperty = "foo";
             IndexVn30History entity2 = new IndexVn30History();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IndexVn30HistoryService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.Delete(RTStockData.Entities.IndexVn30History)">
            <summary>
            public virtual method that Deletes a IndexVn30History object into the datasource using a transaction.
            </summary>
            <param name="entity">IndexVn30History object to Delete.</param>
            <remarks>After Deleteing into the datasource, the IndexVn30History object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            IndexVn30History entity = IndexVn30HistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	IndexVn30HistoryService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.Delete(RTStockData.Entities.TList{RTStockData.Entities.IndexVn30History})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>IndexVn30History</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>IndexVn30History</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of IndexVn30History.
             <code><![CDATA[
             TList<IndexVn30History> list = new TList<IndexVn30History>();
             IndexVn30History entity = new IndexVn30History();
             entity.StringProperty = "foo";
             IndexVn30History entity2 = new IndexVn30History();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IndexVn30HistoryService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.Delete(RTStockData.Entities.IndexVn30HistoryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 _id
            </summary>
            <param name="_id">IndexVn30History pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.DeepLoadById(System.Int64,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RTStockData.Entities.IndexVn30History"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">IndexVn30History Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.IndexVn30History"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.DeepLoad(RTStockData.Entities.IndexVn30History)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">IndexVn30History Object</param>
            <remarks>
            <seealso cref="M:RTStockData.Services.IndexVn30HistoryServiceBase.DeepLoad(RTStockData.Entities.IndexVn30History)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.DeepLoad(RTStockData.Entities.IndexVn30History,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.IndexVn30HistoryServiceBase.DeepLoad(RTStockData.Entities.IndexVn30History)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">IndexVn30History Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.DeepLoad(RTStockData.Entities.IndexVn30History,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RTStockData.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RTStockData.Entities.IndexVn30History"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">IndexVn30History Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.IndexVn30History})">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.IndexVn30HistoryServiceBase.DeepLoad(RTStockData.Entities.IndexVn30History)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.IndexVn30History},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.IndexVn30HistoryServiceBase.DeepLoad(RTStockData.Entities.IndexVn30History)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.IndexVn30History},System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RTStockData.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RTStockData.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RTStockData.Entities.IndexVn30History"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.DeepSave(RTStockData.Entities.IndexVn30History)">
            <summary>
            public virtualDeep Saves the <see cref="T:RTStockData.Entities.IndexVn30History"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">IndexVn30History Object</param>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.DeepSave(RTStockData.Entities.IndexVn30History,RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the IndexVn30History object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">IndexVn30History Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>IndexVn30History</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.IndexVn30History})">
            <summary>
            Deep Save the entire <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{IndexVn30History} Object</param>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.IndexVn30History},RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RTStockData.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">IndexVn30History Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RTStockData.Services.IndexVn30HistoryServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RTStockData.Services.IndexVn30HistoryService.#ctor">
            <summary>
            Initializes a new instance of the IndexVn30HistoryService class.
            </summary>
        </member>
        <member name="T:RTStockData.Services.HastcMarketServiceBase">
            <summary>
             An object representation of the 'hastc_market' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the HastcMarket.cs file instead.
             All custom implementations should be done in the <see cref="T:RTStockData.Entities.HastcMarket"/> class.
             </remarks>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RTStockData.Entities.HastcMarket"/> instance .
            </summary>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.CreateHastcMarket(System.Nullable{System.DateTime},System.Nullable{System.Double},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int16},System.Nullable{System.Int16},System.Nullable{System.Int16},System.Nullable{System.Int64},System.Nullable{System.Double})">
            <summary>
             A simple factory method to create a new <see cref="T:RTStockData.Entities.HastcMarket"/> instance.
            </summary>
            <param name="_tradeDate"></param>
            <param name="_setIndex"></param>
            <param name="_totalTrade"></param>
            <param name="_totalshare"></param>
            <param name="_totalValue"></param>
            <param name="_advances"></param>
            <param name="_nochange"></param>
            <param name="_declines"></param>
            <param name="_time"></param>
            <param name="_openIndex"></param>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.Get(RTStockData.Entities.HastcMarketKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.GetById(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_hastc_market index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.HastcMarket"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.GetById(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_hastc_market index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.HastcMarket"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RTStockData.Entities.HastcMarket"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RTStockData.Entities.HastcMarket"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RTStockData.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HastcMarket</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HastcMarket</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RTStockData.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HastcMarket</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{HastcMarket} of <c>HastcMarket</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.Find(RTStockData.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>HastcMarket</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>HastcMarket</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>HastcMarket</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>HastcMarket</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>HastcMarket</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.Insert(RTStockData.Entities.HastcMarket)">
            <summary>
            public virtual method that Inserts a HastcMarket object into the datasource using a transaction.
            </summary>
            <param name="entity">HastcMarket object to Insert.</param>
            <remarks>After Inserting into the datasource, the HastcMarket object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            HastcMarket entity = new HastcMarket();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	HastcMarketService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.Insert(RTStockData.Entities.TList{RTStockData.Entities.HastcMarket})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HastcMarket</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>HastcMarket</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of HastcMarket.
             <code><![CDATA[
             TList<HastcMarket> list = new TList<HastcMarket>();
             HastcMarket entity = new HastcMarket();
             entity.StringProperty = "foo";
             HastcMarket entity2 = new HastcMarket();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HastcMarketService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.Update(RTStockData.Entities.HastcMarket)">
            <summary>
            public virtual method that Updates a HastcMarket object into the datasource using a transaction.
            </summary>
            <param name="entity">HastcMarket object to Update.</param>
            <remarks>After Updateing into the datasource, the HastcMarket object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            HastcMarket entity = HastcMarketService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	HastcMarketService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.Update(RTStockData.Entities.TList{RTStockData.Entities.HastcMarket})">
             <summary>
             public virtual method that Updates rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HastcMarket</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>HastcMarket</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of HastcMarket.
             <code><![CDATA[
             TList<HastcMarket> list = new TList<HastcMarket>();
             HastcMarket entity = new HastcMarket();
             entity.StringProperty = "foo";
             HastcMarket entity2 = new HastcMarket();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HastcMarketService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.Save(RTStockData.Entities.HastcMarket)">
            <summary>
            public virtual method that Saves a HastcMarket object into the datasource using a transaction.
            </summary>
            <param name="entity">HastcMarket object to Save.</param>
            <remarks>After Saveing into the datasource, the HastcMarket object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            HastcMarket entity = HastcMarketService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	HastcMarketService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.Save(RTStockData.Entities.TList{RTStockData.Entities.HastcMarket})">
             <summary>
             public virtual method that Saves rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HastcMarket</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>HastcMarket</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of HastcMarket.
             <code><![CDATA[
             TList<HastcMarket> list = new TList<HastcMarket>();
             HastcMarket entity = new HastcMarket();
             entity.StringProperty = "foo";
             HastcMarket entity2 = new HastcMarket();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HastcMarketService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.Delete(RTStockData.Entities.HastcMarket)">
            <summary>
            public virtual method that Deletes a HastcMarket object into the datasource using a transaction.
            </summary>
            <param name="entity">HastcMarket object to Delete.</param>
            <remarks>After Deleteing into the datasource, the HastcMarket object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            HastcMarket entity = HastcMarketService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	HastcMarketService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.Delete(RTStockData.Entities.TList{RTStockData.Entities.HastcMarket})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HastcMarket</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>HastcMarket</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of HastcMarket.
             <code><![CDATA[
             TList<HastcMarket> list = new TList<HastcMarket>();
             HastcMarket entity = new HastcMarket();
             entity.StringProperty = "foo";
             HastcMarket entity2 = new HastcMarket();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HastcMarketService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.Delete(RTStockData.Entities.HastcMarketKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 _id
            </summary>
            <param name="_id">HastcMarket pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.DeepLoadById(System.Int64,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RTStockData.Entities.HastcMarket"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">HastcMarket Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.HastcMarket"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.DeepLoad(RTStockData.Entities.HastcMarket)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">HastcMarket Object</param>
            <remarks>
            <seealso cref="M:RTStockData.Services.HastcMarketServiceBase.DeepLoad(RTStockData.Entities.HastcMarket)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.DeepLoad(RTStockData.Entities.HastcMarket,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.HastcMarketServiceBase.DeepLoad(RTStockData.Entities.HastcMarket)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">HastcMarket Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.DeepLoad(RTStockData.Entities.HastcMarket,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RTStockData.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RTStockData.Entities.HastcMarket"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">HastcMarket Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.HastcMarket})">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.HastcMarketServiceBase.DeepLoad(RTStockData.Entities.HastcMarket)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.HastcMarket},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.HastcMarketServiceBase.DeepLoad(RTStockData.Entities.HastcMarket)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.HastcMarket},System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RTStockData.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RTStockData.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RTStockData.Entities.HastcMarket"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.DeepSave(RTStockData.Entities.HastcMarket)">
            <summary>
            public virtualDeep Saves the <see cref="T:RTStockData.Entities.HastcMarket"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">HastcMarket Object</param>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.DeepSave(RTStockData.Entities.HastcMarket,RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the HastcMarket object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">HastcMarket Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>HastcMarket</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.HastcMarket})">
            <summary>
            Deep Save the entire <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{HastcMarket} Object</param>
        </member>
        <member name="M:RTStockData.Services.HastcMarketServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.HastcMarket},RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RTStockData.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">HastcMarket Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RTStockData.Services.HastcMarketServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RTStockData.Services.ServiceViewBaseCore`1">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:RTStockData.Services.ServiceViewBaseCore`1.Execute">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:RTStockData.Services.ServiceViewBaseCore`1.Execute(System.Boolean)">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:RTStockData.Services.ServiceViewBaseCore`1.OnProcessStarting(RTStockData.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:RTStockData.Services.ServiceViewBaseCore`1.OnProcessEnded(RTStockData.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:RTStockData.Services.ServiceViewBaseCore`1.Get">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RTStockData.Services.ServiceViewBaseCore`1.Get(System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RTStockData.Services.ServiceViewBaseCore`1.Get(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RTStockData.Services.ServiceViewBaseCore`1.Get(System.String,System.String)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RTStockData.Services.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RTStockData.Services.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RTStockData.Services.ServiceViewBaseCore`1.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RTStockData.Services.ServiceViewBaseCore`1.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:RTStockData.Services.ServiceViewBaseCore`1.Find(RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="P:RTStockData.Services.ServiceViewBaseCore`1.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:RTStockData.Services.ServiceViewBaseCore`1.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:RTStockData.Services.ServiceViewBaseCore`1.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:RTStockData.Services.ServiceViewBaseCore`1.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:RTStockData.Services.ServiceViewBaseCore`1.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:RTStockData.Services.ServiceViewBaseCore`1.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:RTStockData.Services.ServiceViewBaseCore`1.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:RTStockData.Services.ServiceViewBaseCore`1.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:RTStockData.Services.ServiceViewBaseCore`1.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="T:RTStockData.Services.UpcomTransactionsService">
            <summary>
            An component type implementation of the 'upcom_transactions' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:RTStockData.Services.UpcomTransactionsServiceBase">
            <summary>
             An object representation of the 'upcom_transactions' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the UpcomTransactions.cs file instead.
             All custom implementations should be done in the <see cref="T:RTStockData.Entities.UpcomTransactions"/> class.
             </remarks>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RTStockData.Entities.UpcomTransactions"/> instance .
            </summary>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.CreateUpcomTransactions(System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:RTStockData.Entities.UpcomTransactions"/> instance.
            </summary>
            <param name="_tradeDate"></param>
            <param name="_stockSymbol"></param>
            <param name="_price"></param>
            <param name="_vol"></param>
            <param name="_val"></param>
            <param name="_accumulatedVol"></param>
            <param name="_accumulatedVal"></param>
            <param name="_highest"></param>
            <param name="_lowest"></param>
            <param name="_time"></param>
            <param name="_side"></param>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.Get(RTStockData.Entities.UpcomTransactionsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.GetById(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_upcom_transactions index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.UpcomTransactions"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.GetById(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_upcom_transactions index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.UpcomTransactions"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RTStockData.Entities.UpcomTransactions"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RTStockData.Entities.UpcomTransactions"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RTStockData.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UpcomTransactions</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UpcomTransactions</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RTStockData.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UpcomTransactions</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{UpcomTransactions} of <c>UpcomTransactions</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.Find(RTStockData.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>UpcomTransactions</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>UpcomTransactions</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>UpcomTransactions</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>UpcomTransactions</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>UpcomTransactions</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.Insert(RTStockData.Entities.UpcomTransactions)">
            <summary>
            public virtual method that Inserts a UpcomTransactions object into the datasource using a transaction.
            </summary>
            <param name="entity">UpcomTransactions object to Insert.</param>
            <remarks>After Inserting into the datasource, the UpcomTransactions object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            UpcomTransactions entity = new UpcomTransactions();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	UpcomTransactionsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.Insert(RTStockData.Entities.TList{RTStockData.Entities.UpcomTransactions})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UpcomTransactions</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>UpcomTransactions</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of UpcomTransactions.
             <code><![CDATA[
             TList<UpcomTransactions> list = new TList<UpcomTransactions>();
             UpcomTransactions entity = new UpcomTransactions();
             entity.StringProperty = "foo";
             UpcomTransactions entity2 = new UpcomTransactions();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UpcomTransactionsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.Update(RTStockData.Entities.UpcomTransactions)">
            <summary>
            public virtual method that Updates a UpcomTransactions object into the datasource using a transaction.
            </summary>
            <param name="entity">UpcomTransactions object to Update.</param>
            <remarks>After Updateing into the datasource, the UpcomTransactions object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            UpcomTransactions entity = UpcomTransactionsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	UpcomTransactionsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.Update(RTStockData.Entities.TList{RTStockData.Entities.UpcomTransactions})">
             <summary>
             public virtual method that Updates rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UpcomTransactions</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>UpcomTransactions</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of UpcomTransactions.
             <code><![CDATA[
             TList<UpcomTransactions> list = new TList<UpcomTransactions>();
             UpcomTransactions entity = new UpcomTransactions();
             entity.StringProperty = "foo";
             UpcomTransactions entity2 = new UpcomTransactions();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UpcomTransactionsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.Save(RTStockData.Entities.UpcomTransactions)">
            <summary>
            public virtual method that Saves a UpcomTransactions object into the datasource using a transaction.
            </summary>
            <param name="entity">UpcomTransactions object to Save.</param>
            <remarks>After Saveing into the datasource, the UpcomTransactions object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            UpcomTransactions entity = UpcomTransactionsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	UpcomTransactionsService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.Save(RTStockData.Entities.TList{RTStockData.Entities.UpcomTransactions})">
             <summary>
             public virtual method that Saves rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UpcomTransactions</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>UpcomTransactions</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of UpcomTransactions.
             <code><![CDATA[
             TList<UpcomTransactions> list = new TList<UpcomTransactions>();
             UpcomTransactions entity = new UpcomTransactions();
             entity.StringProperty = "foo";
             UpcomTransactions entity2 = new UpcomTransactions();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UpcomTransactionsService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.Delete(RTStockData.Entities.UpcomTransactions)">
            <summary>
            public virtual method that Deletes a UpcomTransactions object into the datasource using a transaction.
            </summary>
            <param name="entity">UpcomTransactions object to Delete.</param>
            <remarks>After Deleteing into the datasource, the UpcomTransactions object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            UpcomTransactions entity = UpcomTransactionsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	UpcomTransactionsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.Delete(RTStockData.Entities.TList{RTStockData.Entities.UpcomTransactions})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UpcomTransactions</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>UpcomTransactions</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of UpcomTransactions.
             <code><![CDATA[
             TList<UpcomTransactions> list = new TList<UpcomTransactions>();
             UpcomTransactions entity = new UpcomTransactions();
             entity.StringProperty = "foo";
             UpcomTransactions entity2 = new UpcomTransactions();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UpcomTransactionsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.Delete(RTStockData.Entities.UpcomTransactionsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 _id
            </summary>
            <param name="_id">UpcomTransactions pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.DeepLoadById(System.Int64,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RTStockData.Entities.UpcomTransactions"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">UpcomTransactions Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.UpcomTransactions"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.DeepLoad(RTStockData.Entities.UpcomTransactions)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">UpcomTransactions Object</param>
            <remarks>
            <seealso cref="M:RTStockData.Services.UpcomTransactionsServiceBase.DeepLoad(RTStockData.Entities.UpcomTransactions)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.DeepLoad(RTStockData.Entities.UpcomTransactions,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.UpcomTransactionsServiceBase.DeepLoad(RTStockData.Entities.UpcomTransactions)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">UpcomTransactions Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.DeepLoad(RTStockData.Entities.UpcomTransactions,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RTStockData.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RTStockData.Entities.UpcomTransactions"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">UpcomTransactions Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.UpcomTransactions})">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.UpcomTransactionsServiceBase.DeepLoad(RTStockData.Entities.UpcomTransactions)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.UpcomTransactions},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.UpcomTransactionsServiceBase.DeepLoad(RTStockData.Entities.UpcomTransactions)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.UpcomTransactions},System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RTStockData.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RTStockData.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RTStockData.Entities.UpcomTransactions"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.DeepSave(RTStockData.Entities.UpcomTransactions)">
            <summary>
            public virtualDeep Saves the <see cref="T:RTStockData.Entities.UpcomTransactions"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">UpcomTransactions Object</param>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.DeepSave(RTStockData.Entities.UpcomTransactions,RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the UpcomTransactions object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">UpcomTransactions Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>UpcomTransactions</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.UpcomTransactions})">
            <summary>
            Deep Save the entire <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{UpcomTransactions} Object</param>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.UpcomTransactions},RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RTStockData.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">UpcomTransactions Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RTStockData.Services.UpcomTransactionsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsService.#ctor">
            <summary>
            Initializes a new instance of the UpcomTransactionsService class.
            </summary>
        </member>
        <member name="M:RTStockData.Services.UpcomTransactionsService.GetAllById(System.Int64)">
            <summary>
             Get all records with id > sending id
            </summary>
            <param name="id">Sending id</param>
            <returns></returns>
        </member>
        <member name="T:RTStockData.Services.HastcStocksService">
            <summary>
            An component type implementation of the 'hastc_stocks' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:RTStockData.Services.HastcStocksServiceBase">
            <summary>
             An object representation of the 'hastc_stocks' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the HastcStocks.cs file instead.
             All custom implementations should be done in the <see cref="T:RTStockData.Entities.HastcStocks"/> class.
             </remarks>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RTStockData.Entities.HastcStocks"/> instance .
            </summary>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.CreateHastcStocks(System.Nullable{System.DateTime},System.Nullable{System.Int16},System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{System.Int64})">
            <summary>
             A simple factory method to create a new <see cref="T:RTStockData.Entities.HastcStocks"/> instance.
            </summary>
            <param name="_tradeDate"></param>
            <param name="_stockno"></param>
            <param name="_stockSymbol"></param>
            <param name="_stockType"></param>
            <param name="_ceiling"></param>
            <param name="_floor"></param>
            <param name="_securityName"></param>
            <param name="_priorClosePrice"></param>
            <param name="_last"></param>
            <param name="_lastVol"></param>
            <param name="_lastVal"></param>
            <param name="_highest"></param>
            <param name="_average"></param>
            <param name="_lowest"></param>
            <param name="_totalshares"></param>
            <param name="_totalValue"></param>
            <param name="_best1Bid"></param>
            <param name="_best1BidVolume"></param>
            <param name="_best2Bid"></param>
            <param name="_best2BidVolume"></param>
            <param name="_best3Bid"></param>
            <param name="_best3BidVolume"></param>
            <param name="_best1Offer"></param>
            <param name="_best1OfferVolume"></param>
            <param name="_best2Offer"></param>
            <param name="_best2OfferVolume"></param>
            <param name="_best3Offer"></param>
            <param name="_best3OfferVolume"></param>
            <param name="_nmTotalTradedQtty"></param>
            <param name="_prevPriorPrice"></param>
            <param name="_sellCount"></param>
            <param name="_buyCount"></param>
            <param name="_nmTotalTradedValue"></param>
            <param name="_totalBidQtty"></param>
            <param name="_totalSellTradingQtty"></param>
            <param name="_totalOfferQtty"></param>
            <param name="_totalBuyTradingQtty"></param>
            <param name="_bidCount"></param>
            <param name="_offerCount"></param>
            <param name="_buyForeignQtty"></param>
            <param name="_buyForeignValue"></param>
            <param name="_sellForeignQtty"></param>
            <param name="_sellForeignValue"></param>
            <param name="_remainForeignQtty"></param>
            <param name="_ptMatchPrice"></param>
            <param name="_ptMatchQtty"></param>
            <param name="_ptTotalTradedQtty"></param>
            <param name="_ptTotalTradedValue"></param>
            <param name="_totalListingQtty"></param>
            <param name="_openPrice"></param>
            <param name="_closePrice"></param>
            <param name="_averagePrice"></param>
            <param name="_status"></param>
            <param name="_sequence"></param>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.Get(RTStockData.Entities.HastcStocksKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.GetById(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_hastc_stocks index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.HastcStocks"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.GetById(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_hastc_stocks index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.HastcStocks"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RTStockData.Entities.HastcStocks"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RTStockData.Entities.HastcStocks"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RTStockData.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HastcStocks</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HastcStocks</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RTStockData.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HastcStocks</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{HastcStocks} of <c>HastcStocks</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.Find(RTStockData.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>HastcStocks</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>HastcStocks</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>HastcStocks</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>HastcStocks</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>HastcStocks</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.Insert(RTStockData.Entities.HastcStocks)">
            <summary>
            public virtual method that Inserts a HastcStocks object into the datasource using a transaction.
            </summary>
            <param name="entity">HastcStocks object to Insert.</param>
            <remarks>After Inserting into the datasource, the HastcStocks object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            HastcStocks entity = new HastcStocks();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	HastcStocksService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.Insert(RTStockData.Entities.TList{RTStockData.Entities.HastcStocks})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HastcStocks</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>HastcStocks</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of HastcStocks.
             <code><![CDATA[
             TList<HastcStocks> list = new TList<HastcStocks>();
             HastcStocks entity = new HastcStocks();
             entity.StringProperty = "foo";
             HastcStocks entity2 = new HastcStocks();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HastcStocksService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.Update(RTStockData.Entities.HastcStocks)">
            <summary>
            public virtual method that Updates a HastcStocks object into the datasource using a transaction.
            </summary>
            <param name="entity">HastcStocks object to Update.</param>
            <remarks>After Updateing into the datasource, the HastcStocks object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            HastcStocks entity = HastcStocksService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	HastcStocksService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.Update(RTStockData.Entities.TList{RTStockData.Entities.HastcStocks})">
             <summary>
             public virtual method that Updates rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HastcStocks</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>HastcStocks</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of HastcStocks.
             <code><![CDATA[
             TList<HastcStocks> list = new TList<HastcStocks>();
             HastcStocks entity = new HastcStocks();
             entity.StringProperty = "foo";
             HastcStocks entity2 = new HastcStocks();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HastcStocksService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.Save(RTStockData.Entities.HastcStocks)">
            <summary>
            public virtual method that Saves a HastcStocks object into the datasource using a transaction.
            </summary>
            <param name="entity">HastcStocks object to Save.</param>
            <remarks>After Saveing into the datasource, the HastcStocks object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            HastcStocks entity = HastcStocksService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	HastcStocksService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.Save(RTStockData.Entities.TList{RTStockData.Entities.HastcStocks})">
             <summary>
             public virtual method that Saves rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HastcStocks</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>HastcStocks</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of HastcStocks.
             <code><![CDATA[
             TList<HastcStocks> list = new TList<HastcStocks>();
             HastcStocks entity = new HastcStocks();
             entity.StringProperty = "foo";
             HastcStocks entity2 = new HastcStocks();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HastcStocksService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.Delete(RTStockData.Entities.HastcStocks)">
            <summary>
            public virtual method that Deletes a HastcStocks object into the datasource using a transaction.
            </summary>
            <param name="entity">HastcStocks object to Delete.</param>
            <remarks>After Deleteing into the datasource, the HastcStocks object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            HastcStocks entity = HastcStocksService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	HastcStocksService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.Delete(RTStockData.Entities.TList{RTStockData.Entities.HastcStocks})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HastcStocks</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>HastcStocks</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of HastcStocks.
             <code><![CDATA[
             TList<HastcStocks> list = new TList<HastcStocks>();
             HastcStocks entity = new HastcStocks();
             entity.StringProperty = "foo";
             HastcStocks entity2 = new HastcStocks();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HastcStocksService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.Delete(RTStockData.Entities.HastcStocksKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 _id
            </summary>
            <param name="_id">HastcStocks pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.DeepLoadById(System.Int64,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RTStockData.Entities.HastcStocks"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">HastcStocks Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.HastcStocks"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.DeepLoad(RTStockData.Entities.HastcStocks)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">HastcStocks Object</param>
            <remarks>
            <seealso cref="M:RTStockData.Services.HastcStocksServiceBase.DeepLoad(RTStockData.Entities.HastcStocks)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.DeepLoad(RTStockData.Entities.HastcStocks,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.HastcStocksServiceBase.DeepLoad(RTStockData.Entities.HastcStocks)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">HastcStocks Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.DeepLoad(RTStockData.Entities.HastcStocks,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RTStockData.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RTStockData.Entities.HastcStocks"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">HastcStocks Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.HastcStocks})">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.HastcStocksServiceBase.DeepLoad(RTStockData.Entities.HastcStocks)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.HastcStocks},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.HastcStocksServiceBase.DeepLoad(RTStockData.Entities.HastcStocks)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.HastcStocks},System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RTStockData.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RTStockData.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RTStockData.Entities.HastcStocks"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.DeepSave(RTStockData.Entities.HastcStocks)">
            <summary>
            public virtualDeep Saves the <see cref="T:RTStockData.Entities.HastcStocks"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">HastcStocks Object</param>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.DeepSave(RTStockData.Entities.HastcStocks,RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the HastcStocks object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">HastcStocks Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>HastcStocks</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.HastcStocks})">
            <summary>
            Deep Save the entire <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{HastcStocks} Object</param>
        </member>
        <member name="M:RTStockData.Services.HastcStocksServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.HastcStocks},RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RTStockData.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">HastcStocks Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RTStockData.Services.HastcStocksServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RTStockData.Services.HastcStocksService.#ctor">
            <summary>
            Initializes a new instance of the HastcStocksService class.
            </summary>
        </member>
        <member name="T:RTStockData.Services.IndexInfoService">
            <summary>
            An component type implementation of the 'IndexInfo' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:RTStockData.Services.IndexInfoService.#ctor">
            <summary>
            Initializes a new instance of the IndexInfoService class.
            </summary>
        </member>
        <member name="T:RTStockData.Services.UpcomStocksService">
            <summary>
            An component type implementation of the 'upcom_stocks' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:RTStockData.Services.UpcomStocksServiceBase">
            <summary>
             An object representation of the 'upcom_stocks' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the UpcomStocks.cs file instead.
             All custom implementations should be done in the <see cref="T:RTStockData.Entities.UpcomStocks"/> class.
             </remarks>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RTStockData.Entities.UpcomStocks"/> instance .
            </summary>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.CreateUpcomStocks(System.Nullable{System.DateTime},System.Nullable{System.Int16},System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{System.Int64})">
            <summary>
             A simple factory method to create a new <see cref="T:RTStockData.Entities.UpcomStocks"/> instance.
            </summary>
            <param name="_tradeDate"></param>
            <param name="_stockno"></param>
            <param name="_stockSymbol"></param>
            <param name="_stockType"></param>
            <param name="_ceiling"></param>
            <param name="_floor"></param>
            <param name="_securityName"></param>
            <param name="_priorClosePrice"></param>
            <param name="_last"></param>
            <param name="_lastVol"></param>
            <param name="_lastVal"></param>
            <param name="_highest"></param>
            <param name="_average"></param>
            <param name="_lowest"></param>
            <param name="_totalshares"></param>
            <param name="_totalValue"></param>
            <param name="_best1Bid"></param>
            <param name="_best1BidVolume"></param>
            <param name="_best2Bid"></param>
            <param name="_best2BidVolume"></param>
            <param name="_best3Bid"></param>
            <param name="_best3BidVolume"></param>
            <param name="_best1Offer"></param>
            <param name="_best1OfferVolume"></param>
            <param name="_best2Offer"></param>
            <param name="_best2OfferVolume"></param>
            <param name="_best3Offer"></param>
            <param name="_best3OfferVolume"></param>
            <param name="_nmTotalTradedQtty"></param>
            <param name="_prevPriorPrice"></param>
            <param name="_sellCount"></param>
            <param name="_buyCount"></param>
            <param name="_nmTotalTradedValue"></param>
            <param name="_totalBidQtty"></param>
            <param name="_totalSellTradingQtty"></param>
            <param name="_totalOfferQtty"></param>
            <param name="_auTotalTradedQtty"></param>
            <param name="_totalBuyTradingQtty"></param>
            <param name="_bidCount"></param>
            <param name="_offerCount"></param>
            <param name="_buyForeignQtty"></param>
            <param name="_buyForeignValue"></param>
            <param name="_sellForeignQtty"></param>
            <param name="_sellForeignValue"></param>
            <param name="_remainForeignQtty"></param>
            <param name="_ptMatchPrice"></param>
            <param name="_ptMatchQtty"></param>
            <param name="_ptTotalTradedQtty"></param>
            <param name="_ptTotalTradedValue"></param>
            <param name="_totalListingQtty"></param>
            <param name="_openPrice"></param>
            <param name="_closePrice"></param>
            <param name="_averagePrice"></param>
            <param name="_status"></param>
            <param name="_sequence"></param>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.Get(RTStockData.Entities.UpcomStocksKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.GetById(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_upcom_stocks index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.UpcomStocks"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.GetById(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_upcom_stocks index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.UpcomStocks"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RTStockData.Entities.UpcomStocks"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RTStockData.Entities.UpcomStocks"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RTStockData.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UpcomStocks</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UpcomStocks</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RTStockData.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UpcomStocks</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{UpcomStocks} of <c>UpcomStocks</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.Find(RTStockData.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>UpcomStocks</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>UpcomStocks</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>UpcomStocks</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>UpcomStocks</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>UpcomStocks</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.Insert(RTStockData.Entities.UpcomStocks)">
            <summary>
            public virtual method that Inserts a UpcomStocks object into the datasource using a transaction.
            </summary>
            <param name="entity">UpcomStocks object to Insert.</param>
            <remarks>After Inserting into the datasource, the UpcomStocks object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            UpcomStocks entity = new UpcomStocks();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	UpcomStocksService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.Insert(RTStockData.Entities.TList{RTStockData.Entities.UpcomStocks})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UpcomStocks</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>UpcomStocks</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of UpcomStocks.
             <code><![CDATA[
             TList<UpcomStocks> list = new TList<UpcomStocks>();
             UpcomStocks entity = new UpcomStocks();
             entity.StringProperty = "foo";
             UpcomStocks entity2 = new UpcomStocks();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UpcomStocksService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.Update(RTStockData.Entities.UpcomStocks)">
            <summary>
            public virtual method that Updates a UpcomStocks object into the datasource using a transaction.
            </summary>
            <param name="entity">UpcomStocks object to Update.</param>
            <remarks>After Updateing into the datasource, the UpcomStocks object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            UpcomStocks entity = UpcomStocksService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	UpcomStocksService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.Update(RTStockData.Entities.TList{RTStockData.Entities.UpcomStocks})">
             <summary>
             public virtual method that Updates rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UpcomStocks</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>UpcomStocks</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of UpcomStocks.
             <code><![CDATA[
             TList<UpcomStocks> list = new TList<UpcomStocks>();
             UpcomStocks entity = new UpcomStocks();
             entity.StringProperty = "foo";
             UpcomStocks entity2 = new UpcomStocks();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UpcomStocksService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.Save(RTStockData.Entities.UpcomStocks)">
            <summary>
            public virtual method that Saves a UpcomStocks object into the datasource using a transaction.
            </summary>
            <param name="entity">UpcomStocks object to Save.</param>
            <remarks>After Saveing into the datasource, the UpcomStocks object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            UpcomStocks entity = UpcomStocksService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	UpcomStocksService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.Save(RTStockData.Entities.TList{RTStockData.Entities.UpcomStocks})">
             <summary>
             public virtual method that Saves rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UpcomStocks</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>UpcomStocks</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of UpcomStocks.
             <code><![CDATA[
             TList<UpcomStocks> list = new TList<UpcomStocks>();
             UpcomStocks entity = new UpcomStocks();
             entity.StringProperty = "foo";
             UpcomStocks entity2 = new UpcomStocks();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UpcomStocksService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.Delete(RTStockData.Entities.UpcomStocks)">
            <summary>
            public virtual method that Deletes a UpcomStocks object into the datasource using a transaction.
            </summary>
            <param name="entity">UpcomStocks object to Delete.</param>
            <remarks>After Deleteing into the datasource, the UpcomStocks object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            UpcomStocks entity = UpcomStocksService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	UpcomStocksService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.Delete(RTStockData.Entities.TList{RTStockData.Entities.UpcomStocks})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UpcomStocks</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>UpcomStocks</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of UpcomStocks.
             <code><![CDATA[
             TList<UpcomStocks> list = new TList<UpcomStocks>();
             UpcomStocks entity = new UpcomStocks();
             entity.StringProperty = "foo";
             UpcomStocks entity2 = new UpcomStocks();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UpcomStocksService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.Delete(RTStockData.Entities.UpcomStocksKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 _id
            </summary>
            <param name="_id">UpcomStocks pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.DeepLoadById(System.Int64,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RTStockData.Entities.UpcomStocks"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">UpcomStocks Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.UpcomStocks"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.DeepLoad(RTStockData.Entities.UpcomStocks)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">UpcomStocks Object</param>
            <remarks>
            <seealso cref="M:RTStockData.Services.UpcomStocksServiceBase.DeepLoad(RTStockData.Entities.UpcomStocks)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.DeepLoad(RTStockData.Entities.UpcomStocks,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.UpcomStocksServiceBase.DeepLoad(RTStockData.Entities.UpcomStocks)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">UpcomStocks Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.DeepLoad(RTStockData.Entities.UpcomStocks,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RTStockData.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RTStockData.Entities.UpcomStocks"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">UpcomStocks Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.UpcomStocks})">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.UpcomStocksServiceBase.DeepLoad(RTStockData.Entities.UpcomStocks)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.UpcomStocks},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.UpcomStocksServiceBase.DeepLoad(RTStockData.Entities.UpcomStocks)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.UpcomStocks},System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RTStockData.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RTStockData.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RTStockData.Entities.UpcomStocks"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.DeepSave(RTStockData.Entities.UpcomStocks)">
            <summary>
            public virtualDeep Saves the <see cref="T:RTStockData.Entities.UpcomStocks"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">UpcomStocks Object</param>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.DeepSave(RTStockData.Entities.UpcomStocks,RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the UpcomStocks object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">UpcomStocks Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>UpcomStocks</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.UpcomStocks})">
            <summary>
            Deep Save the entire <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{UpcomStocks} Object</param>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.UpcomStocks},RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RTStockData.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">UpcomStocks Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RTStockData.Services.UpcomStocksServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RTStockData.Services.UpcomStocksService.#ctor">
            <summary>
            Initializes a new instance of the UpcomStocksService class.
            </summary>
        </member>
        <member name="T:RTStockData.Services.SecurityRealtimeServiceBase">
            <summary>
             An object representation of the 'security_realtime' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the SecurityRealtime.cs file instead.
             All custom implementations should be done in the <see cref="T:RTStockData.Entities.SecurityRealtime"/> class.
             </remarks>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RTStockData.Entities.SecurityRealtime"/> instance .
            </summary>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.CreateSecurityRealtime(System.Nullable{System.DateTime},System.Nullable{System.Int16},System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Int16},System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int16},System.String,System.Nullable{System.Int64},System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int16},System.Nullable{System.Int16},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int16},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int16},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Boolean})">
            <summary>
             A simple factory method to create a new <see cref="T:RTStockData.Entities.SecurityRealtime"/> instance.
            </summary>
            <param name="_tradeDate"></param>
            <param name="_stockno"></param>
            <param name="_stockSymbol"></param>
            <param name="_stockType"></param>
            <param name="_ceiling"></param>
            <param name="_floor"></param>
            <param name="_bigLotValue"></param>
            <param name="_securityName"></param>
            <param name="_sectorNo"></param>
            <param name="_designated"></param>
            <param name="_suspension"></param>
            <param name="_delist"></param>
            <param name="_haltResumeFlag"></param>
            <param name="_split"></param>
            <param name="_benefit"></param>
            <param name="_meeting"></param>
            <param name="_notice"></param>
            <param name="_clientidRequired"></param>
            <param name="_couponRate"></param>
            <param name="_issueDate"></param>
            <param name="_matureDate"></param>
            <param name="_avrPrice"></param>
            <param name="_parValue"></param>
            <param name="_sdcFlag"></param>
            <param name="_priorClosePrice"></param>
            <param name="_priorCloseDate"></param>
            <param name="_projectOpen"></param>
            <param name="_openPrice"></param>
            <param name="_last"></param>
            <param name="_lastVol"></param>
            <param name="_lastVal"></param>
            <param name="_highest"></param>
            <param name="_lowest"></param>
            <param name="_totalshares"></param>
            <param name="_totalValue"></param>
            <param name="_accumulateDeal"></param>
            <param name="_bigDeal"></param>
            <param name="_bigVolume"></param>
            <param name="_bigValue"></param>
            <param name="_oddDeal"></param>
            <param name="_oddVolume"></param>
            <param name="_oddValue"></param>
            <param name="_best1Bid"></param>
            <param name="_best1BidVolume"></param>
            <param name="_best2Bid"></param>
            <param name="_best2BidVolume"></param>
            <param name="_best3Bid"></param>
            <param name="_best3BidVolume"></param>
            <param name="_best1Offer"></param>
            <param name="_best1OfferVolume"></param>
            <param name="_best2Offer"></param>
            <param name="_best2OfferVolume"></param>
            <param name="_best3Offer"></param>
            <param name="_best3OfferVolume"></param>
            <param name="_boardLost"></param>
            <param name="_totalRoom"></param>
            <param name="_currentRoom"></param>
            <param name="_startRoom"></param>
            <param name="_sequence"></param>
            <param name="_isVn30"></param>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.Get(RTStockData.Entities.SecurityRealtimeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.GetById(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_security_realtime index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.SecurityRealtime"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.GetById(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_security_realtime index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.SecurityRealtime"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RTStockData.Entities.SecurityRealtime"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RTStockData.Entities.SecurityRealtime"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RTStockData.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SecurityRealtime</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SecurityRealtime</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RTStockData.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SecurityRealtime</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{SecurityRealtime} of <c>SecurityRealtime</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.Find(RTStockData.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>SecurityRealtime</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>SecurityRealtime</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>SecurityRealtime</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SecurityRealtime</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SecurityRealtime</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.Insert(RTStockData.Entities.SecurityRealtime)">
            <summary>
            public virtual method that Inserts a SecurityRealtime object into the datasource using a transaction.
            </summary>
            <param name="entity">SecurityRealtime object to Insert.</param>
            <remarks>After Inserting into the datasource, the SecurityRealtime object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            SecurityRealtime entity = new SecurityRealtime();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	SecurityRealtimeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.Insert(RTStockData.Entities.TList{RTStockData.Entities.SecurityRealtime})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SecurityRealtime</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>SecurityRealtime</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of SecurityRealtime.
             <code><![CDATA[
             TList<SecurityRealtime> list = new TList<SecurityRealtime>();
             SecurityRealtime entity = new SecurityRealtime();
             entity.StringProperty = "foo";
             SecurityRealtime entity2 = new SecurityRealtime();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SecurityRealtimeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.Update(RTStockData.Entities.SecurityRealtime)">
            <summary>
            public virtual method that Updates a SecurityRealtime object into the datasource using a transaction.
            </summary>
            <param name="entity">SecurityRealtime object to Update.</param>
            <remarks>After Updateing into the datasource, the SecurityRealtime object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            SecurityRealtime entity = SecurityRealtimeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	SecurityRealtimeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.Update(RTStockData.Entities.TList{RTStockData.Entities.SecurityRealtime})">
             <summary>
             public virtual method that Updates rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SecurityRealtime</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>SecurityRealtime</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of SecurityRealtime.
             <code><![CDATA[
             TList<SecurityRealtime> list = new TList<SecurityRealtime>();
             SecurityRealtime entity = new SecurityRealtime();
             entity.StringProperty = "foo";
             SecurityRealtime entity2 = new SecurityRealtime();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SecurityRealtimeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.Save(RTStockData.Entities.SecurityRealtime)">
            <summary>
            public virtual method that Saves a SecurityRealtime object into the datasource using a transaction.
            </summary>
            <param name="entity">SecurityRealtime object to Save.</param>
            <remarks>After Saveing into the datasource, the SecurityRealtime object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            SecurityRealtime entity = SecurityRealtimeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	SecurityRealtimeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.Save(RTStockData.Entities.TList{RTStockData.Entities.SecurityRealtime})">
             <summary>
             public virtual method that Saves rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SecurityRealtime</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>SecurityRealtime</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of SecurityRealtime.
             <code><![CDATA[
             TList<SecurityRealtime> list = new TList<SecurityRealtime>();
             SecurityRealtime entity = new SecurityRealtime();
             entity.StringProperty = "foo";
             SecurityRealtime entity2 = new SecurityRealtime();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SecurityRealtimeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.Delete(RTStockData.Entities.SecurityRealtime)">
            <summary>
            public virtual method that Deletes a SecurityRealtime object into the datasource using a transaction.
            </summary>
            <param name="entity">SecurityRealtime object to Delete.</param>
            <remarks>After Deleteing into the datasource, the SecurityRealtime object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            SecurityRealtime entity = SecurityRealtimeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	SecurityRealtimeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.Delete(RTStockData.Entities.TList{RTStockData.Entities.SecurityRealtime})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SecurityRealtime</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>SecurityRealtime</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of SecurityRealtime.
             <code><![CDATA[
             TList<SecurityRealtime> list = new TList<SecurityRealtime>();
             SecurityRealtime entity = new SecurityRealtime();
             entity.StringProperty = "foo";
             SecurityRealtime entity2 = new SecurityRealtime();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SecurityRealtimeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.Delete(RTStockData.Entities.SecurityRealtimeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 _id
            </summary>
            <param name="_id">SecurityRealtime pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.DeepLoadById(System.Int64,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RTStockData.Entities.SecurityRealtime"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SecurityRealtime Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.SecurityRealtime"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.DeepLoad(RTStockData.Entities.SecurityRealtime)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">SecurityRealtime Object</param>
            <remarks>
            <seealso cref="M:RTStockData.Services.SecurityRealtimeServiceBase.DeepLoad(RTStockData.Entities.SecurityRealtime)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.DeepLoad(RTStockData.Entities.SecurityRealtime,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.SecurityRealtimeServiceBase.DeepLoad(RTStockData.Entities.SecurityRealtime)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">SecurityRealtime Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.DeepLoad(RTStockData.Entities.SecurityRealtime,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RTStockData.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RTStockData.Entities.SecurityRealtime"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SecurityRealtime Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.SecurityRealtime})">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.SecurityRealtimeServiceBase.DeepLoad(RTStockData.Entities.SecurityRealtime)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.SecurityRealtime},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.SecurityRealtimeServiceBase.DeepLoad(RTStockData.Entities.SecurityRealtime)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.SecurityRealtime},System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RTStockData.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RTStockData.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RTStockData.Entities.SecurityRealtime"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.DeepSave(RTStockData.Entities.SecurityRealtime)">
            <summary>
            public virtualDeep Saves the <see cref="T:RTStockData.Entities.SecurityRealtime"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">SecurityRealtime Object</param>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.DeepSave(RTStockData.Entities.SecurityRealtime,RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the SecurityRealtime object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">SecurityRealtime Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>SecurityRealtime</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.SecurityRealtime})">
            <summary>
            Deep Save the entire <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{SecurityRealtime} Object</param>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.SecurityRealtime},RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RTStockData.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">SecurityRealtime Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RTStockData.Services.SecurityRealtimeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RTStockData.Services.HastcMarketService">
            <summary>
            An component type implementation of the 'hastc_market' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:RTStockData.Services.HastcMarketService.#ctor">
            <summary>
            Initializes a new instance of the HastcMarketService class.
            </summary>
        </member>
        <member name="T:RTStockData.Services.SecurityContext`1">
            <summary>
            The class that is available in case role based security is required at runtime.  
            It will be made availabe through the entities themselves.
            </summary>
        </member>
        <member name="T:RTStockData.Services.SecurityContextBase`1">
            <summary>
            The class that is available in case role based security is required at runtime.  
            It will be made availabe through the entities themselves.
            </summary>
        </member>
        <member name="M:RTStockData.Services.SecurityContextBase`1.#ctor">
            <summary>
            Initializes a new instance of the SecurityContext class.
            </summary>
        </member>
        <member name="M:RTStockData.Services.SecurityContextBase`1.IsAuthorized(System.String)">
            <summary>
            Determine whether user is authorized for the rule based on the rule provider
            </summary>
        </member>
        <member name="P:RTStockData.Services.SecurityContextBase`1.Identity">
            <summary>
            The Current IIdentity.
            </summary>
        </member>
        <member name="P:RTStockData.Services.SecurityContextBase`1.Profile">
            <summary>
            The Current Profile .
            </summary>
        </member>
        <member name="P:RTStockData.Services.SecurityContextBase`1.Principal">
            <summary>
             The Current IPrincipal .
            </summary>
        </member>
        <member name="P:RTStockData.Services.SecurityContextBase`1.RuleProvider">
            <summary>
             The Current Authorization Rule Provider
            </summary>
        </member>
        <member name="M:RTStockData.Services.SecurityContext`1.#ctor">
            <summary>
             Creates a new <see cref="T:System.Security.SecurityContext"/> instance.
            </summary>
        </member>
        <member name="T:RTStockData.Services.UpcomMarketService">
            <summary>
            An component type implementation of the 'upcom_market' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:RTStockData.Services.UpcomMarketServiceBase">
            <summary>
             An object representation of the 'upcom_market' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the UpcomMarket.cs file instead.
             All custom implementations should be done in the <see cref="T:RTStockData.Entities.UpcomMarket"/> class.
             </remarks>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RTStockData.Entities.UpcomMarket"/> instance .
            </summary>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.CreateUpcomMarket(System.Nullable{System.DateTime},System.Nullable{System.Double},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int16},System.Nullable{System.Int16},System.Nullable{System.Int16},System.Nullable{System.Int64},System.Nullable{System.Double})">
            <summary>
             A simple factory method to create a new <see cref="T:RTStockData.Entities.UpcomMarket"/> instance.
            </summary>
            <param name="_tradeDate"></param>
            <param name="_setIndex"></param>
            <param name="_totalTrade"></param>
            <param name="_totalshare"></param>
            <param name="_totalValue"></param>
            <param name="_advances"></param>
            <param name="_nochange"></param>
            <param name="_declines"></param>
            <param name="_time"></param>
            <param name="_openIndex"></param>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.Get(RTStockData.Entities.UpcomMarketKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.GetById(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_upcom_market index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.UpcomMarket"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.GetById(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_upcom_market index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.UpcomMarket"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RTStockData.Entities.UpcomMarket"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RTStockData.Entities.UpcomMarket"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RTStockData.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UpcomMarket</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UpcomMarket</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RTStockData.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>UpcomMarket</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{UpcomMarket} of <c>UpcomMarket</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.Find(RTStockData.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>UpcomMarket</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>UpcomMarket</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>UpcomMarket</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>UpcomMarket</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>UpcomMarket</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.Insert(RTStockData.Entities.UpcomMarket)">
            <summary>
            public virtual method that Inserts a UpcomMarket object into the datasource using a transaction.
            </summary>
            <param name="entity">UpcomMarket object to Insert.</param>
            <remarks>After Inserting into the datasource, the UpcomMarket object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            UpcomMarket entity = new UpcomMarket();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	UpcomMarketService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.Insert(RTStockData.Entities.TList{RTStockData.Entities.UpcomMarket})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UpcomMarket</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>UpcomMarket</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of UpcomMarket.
             <code><![CDATA[
             TList<UpcomMarket> list = new TList<UpcomMarket>();
             UpcomMarket entity = new UpcomMarket();
             entity.StringProperty = "foo";
             UpcomMarket entity2 = new UpcomMarket();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UpcomMarketService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.Update(RTStockData.Entities.UpcomMarket)">
            <summary>
            public virtual method that Updates a UpcomMarket object into the datasource using a transaction.
            </summary>
            <param name="entity">UpcomMarket object to Update.</param>
            <remarks>After Updateing into the datasource, the UpcomMarket object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            UpcomMarket entity = UpcomMarketService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	UpcomMarketService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.Update(RTStockData.Entities.TList{RTStockData.Entities.UpcomMarket})">
             <summary>
             public virtual method that Updates rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UpcomMarket</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>UpcomMarket</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of UpcomMarket.
             <code><![CDATA[
             TList<UpcomMarket> list = new TList<UpcomMarket>();
             UpcomMarket entity = new UpcomMarket();
             entity.StringProperty = "foo";
             UpcomMarket entity2 = new UpcomMarket();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UpcomMarketService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.Save(RTStockData.Entities.UpcomMarket)">
            <summary>
            public virtual method that Saves a UpcomMarket object into the datasource using a transaction.
            </summary>
            <param name="entity">UpcomMarket object to Save.</param>
            <remarks>After Saveing into the datasource, the UpcomMarket object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            UpcomMarket entity = UpcomMarketService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	UpcomMarketService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.Save(RTStockData.Entities.TList{RTStockData.Entities.UpcomMarket})">
             <summary>
             public virtual method that Saves rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UpcomMarket</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>UpcomMarket</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of UpcomMarket.
             <code><![CDATA[
             TList<UpcomMarket> list = new TList<UpcomMarket>();
             UpcomMarket entity = new UpcomMarket();
             entity.StringProperty = "foo";
             UpcomMarket entity2 = new UpcomMarket();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UpcomMarketService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.Delete(RTStockData.Entities.UpcomMarket)">
            <summary>
            public virtual method that Deletes a UpcomMarket object into the datasource using a transaction.
            </summary>
            <param name="entity">UpcomMarket object to Delete.</param>
            <remarks>After Deleteing into the datasource, the UpcomMarket object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            UpcomMarket entity = UpcomMarketService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	UpcomMarketService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.Delete(RTStockData.Entities.TList{RTStockData.Entities.UpcomMarket})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>UpcomMarket</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>UpcomMarket</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of UpcomMarket.
             <code><![CDATA[
             TList<UpcomMarket> list = new TList<UpcomMarket>();
             UpcomMarket entity = new UpcomMarket();
             entity.StringProperty = "foo";
             UpcomMarket entity2 = new UpcomMarket();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	UpcomMarketService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.Delete(RTStockData.Entities.UpcomMarketKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 _id
            </summary>
            <param name="_id">UpcomMarket pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.DeepLoadById(System.Int64,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RTStockData.Entities.UpcomMarket"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">UpcomMarket Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.UpcomMarket"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.DeepLoad(RTStockData.Entities.UpcomMarket)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">UpcomMarket Object</param>
            <remarks>
            <seealso cref="M:RTStockData.Services.UpcomMarketServiceBase.DeepLoad(RTStockData.Entities.UpcomMarket)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.DeepLoad(RTStockData.Entities.UpcomMarket,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.UpcomMarketServiceBase.DeepLoad(RTStockData.Entities.UpcomMarket)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">UpcomMarket Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.DeepLoad(RTStockData.Entities.UpcomMarket,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RTStockData.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RTStockData.Entities.UpcomMarket"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">UpcomMarket Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.UpcomMarket})">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.UpcomMarketServiceBase.DeepLoad(RTStockData.Entities.UpcomMarket)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.UpcomMarket},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.UpcomMarketServiceBase.DeepLoad(RTStockData.Entities.UpcomMarket)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.UpcomMarket},System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RTStockData.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RTStockData.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RTStockData.Entities.UpcomMarket"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.DeepSave(RTStockData.Entities.UpcomMarket)">
            <summary>
            public virtualDeep Saves the <see cref="T:RTStockData.Entities.UpcomMarket"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">UpcomMarket Object</param>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.DeepSave(RTStockData.Entities.UpcomMarket,RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the UpcomMarket object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">UpcomMarket Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>UpcomMarket</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.UpcomMarket})">
            <summary>
            Deep Save the entire <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{UpcomMarket} Object</param>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.UpcomMarket},RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RTStockData.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">UpcomMarket Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RTStockData.Services.UpcomMarketServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RTStockData.Services.UpcomMarketService.#ctor">
            <summary>
            Initializes a new instance of the UpcomMarketService class.
            </summary>
        </member>
        <member name="T:RTStockData.Services.HastcTransactionsService">
            <summary>
            An component type implementation of the 'hastc_transactions' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:RTStockData.Services.HastcTransactionsServiceBase">
            <summary>
             An object representation of the 'hastc_transactions' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the HastcTransactions.cs file instead.
             All custom implementations should be done in the <see cref="T:RTStockData.Entities.HastcTransactions"/> class.
             </remarks>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RTStockData.Entities.HastcTransactions"/> instance .
            </summary>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.CreateHastcTransactions(System.Nullable{System.DateTime},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int64},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:RTStockData.Entities.HastcTransactions"/> instance.
            </summary>
            <param name="_tradeDate"></param>
            <param name="_stockSymbol"></param>
            <param name="_price"></param>
            <param name="_vol"></param>
            <param name="_val"></param>
            <param name="_accumulatedVol"></param>
            <param name="_accumulatedVal"></param>
            <param name="_highest"></param>
            <param name="_lowest"></param>
            <param name="_time"></param>
            <param name="_side"></param>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.Get(RTStockData.Entities.HastcTransactionsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.GetById(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_hastc_transactions index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.HastcTransactions"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.GetById(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_hastc_transactions index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.HastcTransactions"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RTStockData.Entities.HastcTransactions"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RTStockData.Entities.HastcTransactions"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RTStockData.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HastcTransactions</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HastcTransactions</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RTStockData.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HastcTransactions</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{HastcTransactions} of <c>HastcTransactions</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.Find(RTStockData.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>HastcTransactions</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>HastcTransactions</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>HastcTransactions</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>HastcTransactions</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>HastcTransactions</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.Insert(RTStockData.Entities.HastcTransactions)">
            <summary>
            public virtual method that Inserts a HastcTransactions object into the datasource using a transaction.
            </summary>
            <param name="entity">HastcTransactions object to Insert.</param>
            <remarks>After Inserting into the datasource, the HastcTransactions object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            HastcTransactions entity = new HastcTransactions();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	HastcTransactionsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.Insert(RTStockData.Entities.TList{RTStockData.Entities.HastcTransactions})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HastcTransactions</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>HastcTransactions</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of HastcTransactions.
             <code><![CDATA[
             TList<HastcTransactions> list = new TList<HastcTransactions>();
             HastcTransactions entity = new HastcTransactions();
             entity.StringProperty = "foo";
             HastcTransactions entity2 = new HastcTransactions();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HastcTransactionsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.Update(RTStockData.Entities.HastcTransactions)">
            <summary>
            public virtual method that Updates a HastcTransactions object into the datasource using a transaction.
            </summary>
            <param name="entity">HastcTransactions object to Update.</param>
            <remarks>After Updateing into the datasource, the HastcTransactions object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            HastcTransactions entity = HastcTransactionsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	HastcTransactionsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.Update(RTStockData.Entities.TList{RTStockData.Entities.HastcTransactions})">
             <summary>
             public virtual method that Updates rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HastcTransactions</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>HastcTransactions</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of HastcTransactions.
             <code><![CDATA[
             TList<HastcTransactions> list = new TList<HastcTransactions>();
             HastcTransactions entity = new HastcTransactions();
             entity.StringProperty = "foo";
             HastcTransactions entity2 = new HastcTransactions();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HastcTransactionsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.Save(RTStockData.Entities.HastcTransactions)">
            <summary>
            public virtual method that Saves a HastcTransactions object into the datasource using a transaction.
            </summary>
            <param name="entity">HastcTransactions object to Save.</param>
            <remarks>After Saveing into the datasource, the HastcTransactions object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            HastcTransactions entity = HastcTransactionsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	HastcTransactionsService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.Save(RTStockData.Entities.TList{RTStockData.Entities.HastcTransactions})">
             <summary>
             public virtual method that Saves rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HastcTransactions</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>HastcTransactions</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of HastcTransactions.
             <code><![CDATA[
             TList<HastcTransactions> list = new TList<HastcTransactions>();
             HastcTransactions entity = new HastcTransactions();
             entity.StringProperty = "foo";
             HastcTransactions entity2 = new HastcTransactions();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HastcTransactionsService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.Delete(RTStockData.Entities.HastcTransactions)">
            <summary>
            public virtual method that Deletes a HastcTransactions object into the datasource using a transaction.
            </summary>
            <param name="entity">HastcTransactions object to Delete.</param>
            <remarks>After Deleteing into the datasource, the HastcTransactions object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            HastcTransactions entity = HastcTransactionsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	HastcTransactionsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.Delete(RTStockData.Entities.TList{RTStockData.Entities.HastcTransactions})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HastcTransactions</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>HastcTransactions</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of HastcTransactions.
             <code><![CDATA[
             TList<HastcTransactions> list = new TList<HastcTransactions>();
             HastcTransactions entity = new HastcTransactions();
             entity.StringProperty = "foo";
             HastcTransactions entity2 = new HastcTransactions();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HastcTransactionsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.Delete(RTStockData.Entities.HastcTransactionsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 _id
            </summary>
            <param name="_id">HastcTransactions pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.DeepLoadById(System.Int64,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RTStockData.Entities.HastcTransactions"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">HastcTransactions Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.HastcTransactions"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.DeepLoad(RTStockData.Entities.HastcTransactions)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">HastcTransactions Object</param>
            <remarks>
            <seealso cref="M:RTStockData.Services.HastcTransactionsServiceBase.DeepLoad(RTStockData.Entities.HastcTransactions)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.DeepLoad(RTStockData.Entities.HastcTransactions,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.HastcTransactionsServiceBase.DeepLoad(RTStockData.Entities.HastcTransactions)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">HastcTransactions Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.DeepLoad(RTStockData.Entities.HastcTransactions,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RTStockData.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RTStockData.Entities.HastcTransactions"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">HastcTransactions Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.HastcTransactions})">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.HastcTransactionsServiceBase.DeepLoad(RTStockData.Entities.HastcTransactions)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.HastcTransactions},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.HastcTransactionsServiceBase.DeepLoad(RTStockData.Entities.HastcTransactions)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.HastcTransactions},System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RTStockData.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RTStockData.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RTStockData.Entities.HastcTransactions"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.DeepSave(RTStockData.Entities.HastcTransactions)">
            <summary>
            public virtualDeep Saves the <see cref="T:RTStockData.Entities.HastcTransactions"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">HastcTransactions Object</param>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.DeepSave(RTStockData.Entities.HastcTransactions,RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the HastcTransactions object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">HastcTransactions Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>HastcTransactions</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.HastcTransactions})">
            <summary>
            Deep Save the entire <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{HastcTransactions} Object</param>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.HastcTransactions},RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RTStockData.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">HastcTransactions Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RTStockData.Services.HastcTransactionsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsService.#ctor">
            <summary>
            Initializes a new instance of the HastcTransactionsService class.
            </summary>
        </member>
        <member name="M:RTStockData.Services.HastcTransactionsService.GetAllById(System.Int64)">
            <summary>
             Get all records with id > sending id
            </summary>
            <param name="id">Sending id</param>
            <returns></returns>
        </member>
        <member name="T:RTStockData.Services.IndexInfoHistoryServiceBase">
            <summary>
             An object representation of the 'IndexInfoHistory' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the IndexInfoHistory.cs file instead.
             All custom implementations should be done in the <see cref="T:RTStockData.Entities.IndexInfoHistory"/> class.
             </remarks>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RTStockData.Entities.IndexInfoHistory"/> instance .
            </summary>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.CreateIndexInfoHistory(System.Nullable{System.Int64},System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Int64},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.DateTime})">
            <summary>
             A simple factory method to create a new <see cref="T:RTStockData.Entities.IndexInfoHistory"/> instance.
            </summary>
            <param name="_indexId"></param>
            <param name="_indexCode"></param>
            <param name="_name"></param>
            <param name="_description"></param>
            <param name="_tradingDate"></param>
            <param name="_time"></param>
            <param name="_currentStatus"></param>
            <param name="_totalStock"></param>
            <param name="_advances"></param>
            <param name="_nochange"></param>
            <param name="_declines"></param>
            <param name="_totalQtty"></param>
            <param name="_totalValue"></param>
            <param name="_priorIndexVal"></param>
            <param name="_chgIndex"></param>
            <param name="_pctIndex"></param>
            <param name="_currentIndex"></param>
            <param name="_highestIndex"></param>
            <param name="_lowestIndex"></param>
            <param name="_sessionNo"></param>
            <param name="_typeIndex"></param>
            <param name="_closeIndex"></param>
            <param name="_tradeDate"></param>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.Get(RTStockData.Entities.IndexInfoHistoryKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.GetById(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_IndexInfoHistory index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.IndexInfoHistory"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.GetById(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_IndexInfoHistory index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.IndexInfoHistory"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RTStockData.Entities.IndexInfoHistory"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RTStockData.Entities.IndexInfoHistory"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RTStockData.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>IndexInfoHistory</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>IndexInfoHistory</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RTStockData.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>IndexInfoHistory</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{IndexInfoHistory} of <c>IndexInfoHistory</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.Find(RTStockData.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>IndexInfoHistory</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>IndexInfoHistory</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>IndexInfoHistory</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>IndexInfoHistory</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>IndexInfoHistory</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.Insert(RTStockData.Entities.IndexInfoHistory)">
            <summary>
            public virtual method that Inserts a IndexInfoHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">IndexInfoHistory object to Insert.</param>
            <remarks>After Inserting into the datasource, the IndexInfoHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            IndexInfoHistory entity = new IndexInfoHistory();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	IndexInfoHistoryService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.Insert(RTStockData.Entities.TList{RTStockData.Entities.IndexInfoHistory})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>IndexInfoHistory</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>IndexInfoHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of IndexInfoHistory.
             <code><![CDATA[
             TList<IndexInfoHistory> list = new TList<IndexInfoHistory>();
             IndexInfoHistory entity = new IndexInfoHistory();
             entity.StringProperty = "foo";
             IndexInfoHistory entity2 = new IndexInfoHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IndexInfoHistoryService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.Update(RTStockData.Entities.IndexInfoHistory)">
            <summary>
            public virtual method that Updates a IndexInfoHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">IndexInfoHistory object to Update.</param>
            <remarks>After Updateing into the datasource, the IndexInfoHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            IndexInfoHistory entity = IndexInfoHistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	IndexInfoHistoryService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.Update(RTStockData.Entities.TList{RTStockData.Entities.IndexInfoHistory})">
             <summary>
             public virtual method that Updates rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>IndexInfoHistory</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>IndexInfoHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of IndexInfoHistory.
             <code><![CDATA[
             TList<IndexInfoHistory> list = new TList<IndexInfoHistory>();
             IndexInfoHistory entity = new IndexInfoHistory();
             entity.StringProperty = "foo";
             IndexInfoHistory entity2 = new IndexInfoHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IndexInfoHistoryService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.Save(RTStockData.Entities.IndexInfoHistory)">
            <summary>
            public virtual method that Saves a IndexInfoHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">IndexInfoHistory object to Save.</param>
            <remarks>After Saveing into the datasource, the IndexInfoHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            IndexInfoHistory entity = IndexInfoHistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	IndexInfoHistoryService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.Save(RTStockData.Entities.TList{RTStockData.Entities.IndexInfoHistory})">
             <summary>
             public virtual method that Saves rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>IndexInfoHistory</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>IndexInfoHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of IndexInfoHistory.
             <code><![CDATA[
             TList<IndexInfoHistory> list = new TList<IndexInfoHistory>();
             IndexInfoHistory entity = new IndexInfoHistory();
             entity.StringProperty = "foo";
             IndexInfoHistory entity2 = new IndexInfoHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IndexInfoHistoryService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.Delete(RTStockData.Entities.IndexInfoHistory)">
            <summary>
            public virtual method that Deletes a IndexInfoHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">IndexInfoHistory object to Delete.</param>
            <remarks>After Deleteing into the datasource, the IndexInfoHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            IndexInfoHistory entity = IndexInfoHistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	IndexInfoHistoryService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.Delete(RTStockData.Entities.TList{RTStockData.Entities.IndexInfoHistory})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>IndexInfoHistory</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>IndexInfoHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of IndexInfoHistory.
             <code><![CDATA[
             TList<IndexInfoHistory> list = new TList<IndexInfoHistory>();
             IndexInfoHistory entity = new IndexInfoHistory();
             entity.StringProperty = "foo";
             IndexInfoHistory entity2 = new IndexInfoHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IndexInfoHistoryService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.Delete(RTStockData.Entities.IndexInfoHistoryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 _id
            </summary>
            <param name="_id">IndexInfoHistory pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.DeepLoadById(System.Int64,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RTStockData.Entities.IndexInfoHistory"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">IndexInfoHistory Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.IndexInfoHistory"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.DeepLoad(RTStockData.Entities.IndexInfoHistory)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">IndexInfoHistory Object</param>
            <remarks>
            <seealso cref="M:RTStockData.Services.IndexInfoHistoryServiceBase.DeepLoad(RTStockData.Entities.IndexInfoHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.DeepLoad(RTStockData.Entities.IndexInfoHistory,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.IndexInfoHistoryServiceBase.DeepLoad(RTStockData.Entities.IndexInfoHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">IndexInfoHistory Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.DeepLoad(RTStockData.Entities.IndexInfoHistory,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RTStockData.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RTStockData.Entities.IndexInfoHistory"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">IndexInfoHistory Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.IndexInfoHistory})">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.IndexInfoHistoryServiceBase.DeepLoad(RTStockData.Entities.IndexInfoHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.IndexInfoHistory},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.IndexInfoHistoryServiceBase.DeepLoad(RTStockData.Entities.IndexInfoHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.IndexInfoHistory},System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RTStockData.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RTStockData.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RTStockData.Entities.IndexInfoHistory"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.DeepSave(RTStockData.Entities.IndexInfoHistory)">
            <summary>
            public virtualDeep Saves the <see cref="T:RTStockData.Entities.IndexInfoHistory"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">IndexInfoHistory Object</param>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.DeepSave(RTStockData.Entities.IndexInfoHistory,RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the IndexInfoHistory object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">IndexInfoHistory Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>IndexInfoHistory</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.IndexInfoHistory})">
            <summary>
            Deep Save the entire <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{IndexInfoHistory} Object</param>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.IndexInfoHistory},RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RTStockData.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">IndexInfoHistory Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RTStockData.Services.IndexInfoHistoryServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RTStockData.Services.ConnectionScopeBase">
            <summary>
            Provides storage of global database connection information.
            </summary>
        </member>
        <member name="T:RTStockData.Services.IConnectionScope">
            <summary>
            Connection Scope Interface
            </summary>
        </member>
        <member name="P:RTStockData.Services.IConnectionScope.ConnectionStringKey">
            <summary>
            Gets or sets the connection string key.
            </summary>
            <value>The connection string key.</value>
        </member>
        <member name="P:RTStockData.Services.IConnectionScope.DataProvider">
            <summary>
            Gets or sets the data provider.
            </summary>
            <value>The data provider.</value>
        </member>
        <member name="P:RTStockData.Services.IConnectionScope.DynamicConnectionString">
            <summary>
            Gets or sets the dynamic connection string.
            </summary>
            <value>The dynamic connection string.</value>
        </member>
        <member name="P:RTStockData.Services.IConnectionScope.HasTransaction">
            <summary>
            Gets a value indicating whether this instance has transaction.
            </summary>
            <value>
            	<c>true</c> if this instance has transaction; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:RTStockData.Services.IConnectionScope.TransactionManager">
            <summary>
            Gets or sets the transaction manager.
            </summary>
            <value>The transaction manager.</value>
        </member>
        <member name="M:RTStockData.Services.ConnectionScopeBase.#ctor">
            <summary>
            Initializes a new instance of the ConnectionScope class.
            </summary>
        </member>
        <member name="F:RTStockData.Services.ConnectionScopeBase.connectionStringKey">
            <summary>
            The ConnectionStringKey member variable.
            </summary>
        </member>
        <member name="F:RTStockData.Services.ConnectionScopeBase.dynamicConnectionString">
            <summary>
            The DynamicConnectionString member variable.
            </summary>
        </member>
        <member name="F:RTStockData.Services.ConnectionScopeBase.transactionManager">
            <summary>
            The TransactionManager member variable.
            </summary>
        </member>
        <member name="F:RTStockData.Services.ConnectionScopeBase.dataProvider">
            <summary>
            The NetTiersProvider member variable.
            </summary>
        </member>
        <member name="P:RTStockData.Services.ConnectionScopeBase.ConnectionStringKey">
            <summary>
            Gets or sets the ConnectionStringKey property.
            </summary>
        </member>
        <member name="P:RTStockData.Services.ConnectionScopeBase.DynamicConnectionString">
            <summary>
            Gets or sets the DynamicConnectionString property.
            </summary>
        </member>
        <member name="P:RTStockData.Services.ConnectionScopeBase.TransactionManager">
            <summary>
            Gets or sets the TransactionManager property.
            </summary>
        </member>
        <member name="P:RTStockData.Services.ConnectionScopeBase.DataProvider">
             <summary>
             Gets or Sets the Current DataProvider property of the <c>ConnectionScope</c> Object.
             </summary>
             <remarks>
             To use a dynamic connection, you must set both the 
             DynamicConnectionString and a unique ConnectionStringKey properties;
            </remarks>
        </member>
        <member name="P:RTStockData.Services.ConnectionScopeBase.HasTransaction">
            <summary>
            Determines if Current Connections is in a Transaction.
            </summary>
        </member>
        <member name="T:RTStockData.Services.ConnectionScope">
            <summary>
            Provides storage of global database connection information.
            </summary>
        </member>
        <member name="M:RTStockData.Services.ConnectionScope.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:RTStockData.Services.ConnectionScope.NewThread(System.Threading.ThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:RTStockData.Services.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:RTStockData.Services.ConnectionScope.NewThread(System.Threading.ParameterizedThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:RTStockData.Services.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:RTStockData.Services.ConnectionScope.EnqueueOnThreadPool(System.Threading.ThreadStart)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:RTStockData.Services.ConnectionScope.EnqueueOnThreadPool(System.Threading.ParameterizedThreadStart,System.Object)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <param name="state">An object containing data to be used by the method.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:RTStockData.Services.ConnectionScope.Copy(RTStockData.Services.ConnectionScope)">
            <summary>
            Copies the values from the specified <paramref name="scope"/> object
            to the <see cref="T:RTStockData.Services.ConnectionScope"/> used by the current thread.
            </summary>
            <param name="scope">A <see cref="T:RTStockData.Services.ConnectionScope"/> object.</param>
        </member>
        <member name="M:RTStockData.Services.ConnectionScope.ValidateOrCreateTransaction">
            <summary>
            Validates an existing <c cref="T:RTStockData.Data.TransactionManager"/> if one exists,
            otherwise creates a new <c cref="T:RTStockData.Data.TransactionManager"/> to use.
            </summary>
        </member>
        <member name="M:RTStockData.Services.ConnectionScope.ValidateOrCreateTransaction(System.Boolean)">
            <summary>
            Validates an existing <c cref="T:RTStockData.Data.TransactionManager"/> if one exists,
            otherwise creates a new <c cref="T:RTStockData.Data.TransactionManager"/> to use.
            </summary>
            <param name="createTransaction">determines whether to create a new transaction</param>
        </member>
        <member name="M:RTStockData.Services.ConnectionScope.CreateTransaction">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>.
            </summary>
        </member>
        <member name="M:RTStockData.Services.ConnectionScope.CreateTransaction(System.Data.IsolationLevel)">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>
            with the specified <c cref="T:System.Data.IsolationLevel"/>.
            </summary>
            <param name="level">Determines which <c cref="T:System.Data.IsolationLevel"/> to use for the transaction.</param>
        </member>
        <member name="M:RTStockData.Services.ConnectionScope.Complete">
            <summary>
            Completes this transaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Services.ConnectionScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:RTStockData.Services.ConnectionScope.Current">
            <summary>
            Gets a reference to the ConnectionScope object for the current thread.
            </summary>
        </member>
        <member name="P:RTStockData.Services.ConnectionScope.HasTransaction">
            <summary>
            Determines if Current Connections is in a Transaction.
            </summary>
        </member>
        <member name="T:RTStockData.Services.IProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:RTStockData.Services.IProcessorResult.AddBrokenRulesList(System.Type,RTStockData.Entities.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:RTStockData.Services.IProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:RTStockData.Services.IProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:RTStockData.Services.IProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation.
            </summary>
        </member>
        <member name="T:RTStockData.Services.LeService">
            <summary>
            An component type implementation of the 'le' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:RTStockData.Services.LeService.#ctor">
            <summary>
            Initializes a new instance of the LeService class.
            </summary>
        </member>
        <member name="T:RTStockData.Services.CompanyInfoService">
            <summary>
            An component type implementation of the 'CompanyInfo' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:RTStockData.Services.CompanyInfoServiceBase">
            <summary>
             An object representation of the 'CompanyInfo' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the CompanyInfo.cs file instead.
             All custom implementations should be done in the <see cref="T:RTStockData.Entities.CompanyInfo"/> class.
             </remarks>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RTStockData.Entities.CompanyInfo"/> instance .
            </summary>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.CreateCompanyInfo(System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Guid},System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RTStockData.Entities.CompanyInfo"/> instance.
            </summary>
            <param name="_code"></param>
            <param name="_shortName"></param>
            <param name="_phone"></param>
            <param name="_email"></param>
            <param name="_fax"></param>
            <param name="_website"></param>
            <param name="_lastModified"></param>
            <param name="_isPublished"></param>
            <param name="_authorId"></param>
            <param name="_sectorId"></param>
            <param name="_marketId"></param>
            <param name="_pageView"></param>
            <param name="_industryGroup"></param>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.Get(RTStockData.Entities.CompanyInfoKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.GetByCompanyId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_CompanyInfo index.
            </summary>
            <param name="_companyId"></param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.CompanyInfo"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.GetByCompanyId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_CompanyInfo index.
            </summary>
            <param name="_companyId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.CompanyInfo"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RTStockData.Entities.CompanyInfo"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RTStockData.Entities.CompanyInfo"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RTStockData.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CompanyInfo</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CompanyInfo</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RTStockData.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CompanyInfo</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{CompanyInfo} of <c>CompanyInfo</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.Find(RTStockData.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>CompanyInfo</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>CompanyInfo</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>CompanyInfo</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CompanyInfo</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CompanyInfo</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.Insert(RTStockData.Entities.CompanyInfo)">
            <summary>
            public virtual method that Inserts a CompanyInfo object into the datasource using a transaction.
            </summary>
            <param name="entity">CompanyInfo object to Insert.</param>
            <remarks>After Inserting into the datasource, the CompanyInfo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            CompanyInfo entity = new CompanyInfo();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CompanyInfoService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.Insert(RTStockData.Entities.TList{RTStockData.Entities.CompanyInfo})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CompanyInfo</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>CompanyInfo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of CompanyInfo.
             <code><![CDATA[
             TList<CompanyInfo> list = new TList<CompanyInfo>();
             CompanyInfo entity = new CompanyInfo();
             entity.StringProperty = "foo";
             CompanyInfo entity2 = new CompanyInfo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CompanyInfoService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.Update(RTStockData.Entities.CompanyInfo)">
            <summary>
            public virtual method that Updates a CompanyInfo object into the datasource using a transaction.
            </summary>
            <param name="entity">CompanyInfo object to Update.</param>
            <remarks>After Updateing into the datasource, the CompanyInfo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            CompanyInfo entity = CompanyInfoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CompanyInfoService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.Update(RTStockData.Entities.TList{RTStockData.Entities.CompanyInfo})">
             <summary>
             public virtual method that Updates rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CompanyInfo</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>CompanyInfo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of CompanyInfo.
             <code><![CDATA[
             TList<CompanyInfo> list = new TList<CompanyInfo>();
             CompanyInfo entity = new CompanyInfo();
             entity.StringProperty = "foo";
             CompanyInfo entity2 = new CompanyInfo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CompanyInfoService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.Save(RTStockData.Entities.CompanyInfo)">
            <summary>
            public virtual method that Saves a CompanyInfo object into the datasource using a transaction.
            </summary>
            <param name="entity">CompanyInfo object to Save.</param>
            <remarks>After Saveing into the datasource, the CompanyInfo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            CompanyInfo entity = CompanyInfoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CompanyInfoService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.Save(RTStockData.Entities.TList{RTStockData.Entities.CompanyInfo})">
             <summary>
             public virtual method that Saves rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CompanyInfo</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>CompanyInfo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of CompanyInfo.
             <code><![CDATA[
             TList<CompanyInfo> list = new TList<CompanyInfo>();
             CompanyInfo entity = new CompanyInfo();
             entity.StringProperty = "foo";
             CompanyInfo entity2 = new CompanyInfo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CompanyInfoService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.Delete(RTStockData.Entities.CompanyInfo)">
            <summary>
            public virtual method that Deletes a CompanyInfo object into the datasource using a transaction.
            </summary>
            <param name="entity">CompanyInfo object to Delete.</param>
            <remarks>After Deleteing into the datasource, the CompanyInfo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            CompanyInfo entity = CompanyInfoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CompanyInfoService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.Delete(RTStockData.Entities.TList{RTStockData.Entities.CompanyInfo})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CompanyInfo</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>CompanyInfo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of CompanyInfo.
             <code><![CDATA[
             TList<CompanyInfo> list = new TList<CompanyInfo>();
             CompanyInfo entity = new CompanyInfo();
             entity.StringProperty = "foo";
             CompanyInfo entity2 = new CompanyInfo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CompanyInfoService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.Delete(RTStockData.Entities.CompanyInfoKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _companyId
            </summary>
            <param name="_companyId">CompanyInfo pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.GetCompanyInfoByLanguageId(System.String)">
            <summary>
            This method wrap the '_CompanyInfo_GetCompanyInfoByLanguageId' stored procedure. 
            </summary>
            <param name="languageId"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.GetCompanyInfoByLanguageId(System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the '_CompanyInfo_GetCompanyInfoByLanguageId' stored procedure. 
            </summary>
            <param name="languageId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.GetAllCompanyInfoLanguageByCode(System.String)">
            <summary>
            Get List Company info By Code. 
            </summary>
            <param name="code">Code</param>
            <returns>return DataSet</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.DeepLoadByCompanyId(System.Int32,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RTStockData.Entities.CompanyInfo"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <param name="_companyId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CompanyInfo Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.CompanyInfo"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.DeepLoad(RTStockData.Entities.CompanyInfo)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">CompanyInfo Object</param>
            <remarks>
            <seealso cref="M:RTStockData.Services.CompanyInfoServiceBase.DeepLoad(RTStockData.Entities.CompanyInfo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.DeepLoad(RTStockData.Entities.CompanyInfo,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.CompanyInfoServiceBase.DeepLoad(RTStockData.Entities.CompanyInfo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">CompanyInfo Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.DeepLoad(RTStockData.Entities.CompanyInfo,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RTStockData.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RTStockData.Entities.CompanyInfo"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CompanyInfo Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.CompanyInfo})">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.CompanyInfoServiceBase.DeepLoad(RTStockData.Entities.CompanyInfo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.CompanyInfo},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.CompanyInfoServiceBase.DeepLoad(RTStockData.Entities.CompanyInfo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.CompanyInfo},System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RTStockData.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RTStockData.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RTStockData.Entities.CompanyInfo"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.DeepSave(RTStockData.Entities.CompanyInfo)">
            <summary>
            public virtualDeep Saves the <see cref="T:RTStockData.Entities.CompanyInfo"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">CompanyInfo Object</param>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.DeepSave(RTStockData.Entities.CompanyInfo,RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the CompanyInfo object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">CompanyInfo Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>CompanyInfo</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.CompanyInfo})">
            <summary>
            Deep Save the entire <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{CompanyInfo} Object</param>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.CompanyInfo},RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RTStockData.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CompanyInfo Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RTStockData.Services.CompanyInfoServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoService.#ctor">
            <summary>
            Initializes a new instance of the CompanyInfoService class.
            </summary>
        </member>
        <member name="T:RTStockData.Services.ProcessStartingHandler">
            <summary>
            ProcessStartingHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:RTStockData.Services.ProcessEndedHandler">
            <summary>
            ProcessEndedHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:RTStockData.Services.ProcessorEventArgs">
            <summary>
            Processor Event Args
            </summary>
        </member>
        <member name="M:RTStockData.Services.ProcessorEventArgs.#ctor(RTStockData.Services.ProcessorBase)">
            <summary>
            Initializes a new instance of the ProcessorEventArgs class.
            </summary>
            <param name="processor"></param>
        </member>
        <member name="P:RTStockData.Services.ProcessorEventArgs.Processor">
            <summary>
            Gets or sets the processor.
            </summary>
            <value>The processor.</value>
        </member>
        <member name="T:RTStockData.Services.GenericProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary> 
        </member>
        <member name="M:RTStockData.Services.GenericProcessorResult.#ctor">
            <summary>
            Initializes a new instance of the GenericProcessorResult class.
            </summary>
        </member>
        <member name="M:RTStockData.Services.GenericProcessorResult.AddBrokenRulesList(System.Type,RTStockData.Entities.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:RTStockData.Services.GenericProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:RTStockData.Services.GenericProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:RTStockData.Services.GenericProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation. 
            This is set by the processor.
            </summary>
        </member>
        <member name="T:RTStockData.Services.MatchedServiceBase">
            <summary>
             An object representation of the 'Matched' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Matched.cs file instead.
             All custom implementations should be done in the <see cref="T:RTStockData.Entities.Matched"/> class.
             </remarks>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RTStockData.Entities.Matched"/> instance .
            </summary>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.CreateMatched(System.String,System.Nullable{System.DateTime},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Nullable{System.Double})">
            <summary>
             A simple factory method to create a new <see cref="T:RTStockData.Entities.Matched"/> instance.
            </summary>
            <param name="_code"></param>
            <param name="_tradedDate"></param>
            <param name="_ceiling"></param>
            <param name="_floor"></param>
            <param name="_refPrice"></param>
            <param name="_closePrice"></param>
            <param name="_change"></param>
            <param name="_percent"></param>
            <param name="_volume"></param>
            <param name="_putThrough"></param>
            <param name="_foreignBuy"></param>
            <param name="_foreignSell"></param>
            <param name="_openPrice"></param>
            <param name="_highestPrice"></param>
            <param name="_lowestPrice"></param>
            <param name="_marketId"></param>
            <param name="_value"></param>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.Get(RTStockData.Entities.MatchedKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.GetById(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_Matched index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.Matched"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.GetById(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_Matched index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.Matched"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RTStockData.Entities.Matched"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RTStockData.Entities.Matched"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RTStockData.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Matched</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Matched</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RTStockData.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Matched</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Matched} of <c>Matched</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.Find(RTStockData.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Matched</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Matched</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Matched</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Matched</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Matched</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.Insert(RTStockData.Entities.Matched)">
            <summary>
            public virtual method that Inserts a Matched object into the datasource using a transaction.
            </summary>
            <param name="entity">Matched object to Insert.</param>
            <remarks>After Inserting into the datasource, the Matched object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Matched entity = new Matched();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	MatchedService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.Insert(RTStockData.Entities.TList{RTStockData.Entities.Matched})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Matched</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Matched</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Matched.
             <code><![CDATA[
             TList<Matched> list = new TList<Matched>();
             Matched entity = new Matched();
             entity.StringProperty = "foo";
             Matched entity2 = new Matched();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MatchedService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.Update(RTStockData.Entities.Matched)">
            <summary>
            public virtual method that Updates a Matched object into the datasource using a transaction.
            </summary>
            <param name="entity">Matched object to Update.</param>
            <remarks>After Updateing into the datasource, the Matched object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Matched entity = MatchedService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	MatchedService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.Update(RTStockData.Entities.TList{RTStockData.Entities.Matched})">
             <summary>
             public virtual method that Updates rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Matched</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Matched</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Matched.
             <code><![CDATA[
             TList<Matched> list = new TList<Matched>();
             Matched entity = new Matched();
             entity.StringProperty = "foo";
             Matched entity2 = new Matched();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MatchedService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.Save(RTStockData.Entities.Matched)">
            <summary>
            public virtual method that Saves a Matched object into the datasource using a transaction.
            </summary>
            <param name="entity">Matched object to Save.</param>
            <remarks>After Saveing into the datasource, the Matched object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Matched entity = MatchedService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	MatchedService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.Save(RTStockData.Entities.TList{RTStockData.Entities.Matched})">
             <summary>
             public virtual method that Saves rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Matched</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Matched</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Matched.
             <code><![CDATA[
             TList<Matched> list = new TList<Matched>();
             Matched entity = new Matched();
             entity.StringProperty = "foo";
             Matched entity2 = new Matched();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MatchedService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.Delete(RTStockData.Entities.Matched)">
            <summary>
            public virtual method that Deletes a Matched object into the datasource using a transaction.
            </summary>
            <param name="entity">Matched object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Matched object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Matched entity = MatchedService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	MatchedService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.Delete(RTStockData.Entities.TList{RTStockData.Entities.Matched})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Matched</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Matched</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Matched.
             <code><![CDATA[
             TList<Matched> list = new TList<Matched>();
             Matched entity = new Matched();
             entity.StringProperty = "foo";
             Matched entity2 = new Matched();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MatchedService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.Delete(RTStockData.Entities.MatchedKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 _id
            </summary>
            <param name="_id">Matched pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.DeepLoadById(System.Int64,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RTStockData.Entities.Matched"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Matched Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.Matched"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.DeepLoad(RTStockData.Entities.Matched)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Matched Object</param>
            <remarks>
            <seealso cref="M:RTStockData.Services.MatchedServiceBase.DeepLoad(RTStockData.Entities.Matched)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.DeepLoad(RTStockData.Entities.Matched,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.MatchedServiceBase.DeepLoad(RTStockData.Entities.Matched)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Matched Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.DeepLoad(RTStockData.Entities.Matched,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RTStockData.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RTStockData.Entities.Matched"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Matched Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.Matched})">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.MatchedServiceBase.DeepLoad(RTStockData.Entities.Matched)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.Matched},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.MatchedServiceBase.DeepLoad(RTStockData.Entities.Matched)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.Matched},System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RTStockData.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RTStockData.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RTStockData.Entities.Matched"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.DeepSave(RTStockData.Entities.Matched)">
            <summary>
            public virtualDeep Saves the <see cref="T:RTStockData.Entities.Matched"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Matched Object</param>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.DeepSave(RTStockData.Entities.Matched,RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Matched object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Matched Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Matched</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.Matched})">
            <summary>
            Deep Save the entire <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Matched} Object</param>
        </member>
        <member name="M:RTStockData.Services.MatchedServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.Matched},RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RTStockData.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Matched Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RTStockData.Services.MatchedServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RTStockData.Services.IndexsService">
            <summary>
            An component type implementation of the 'Indexs' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:RTStockData.Services.IndexsServiceBase">
            <summary>
             An object representation of the 'Indexs' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Indexs.cs file instead.
             All custom implementations should be done in the <see cref="T:RTStockData.Entities.Indexs"/> class.
             </remarks>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RTStockData.Entities.Indexs"/> instance .
            </summary>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.CreateIndexs(System.Nullable{System.DateTime},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double},System.String,System.Nullable{System.Double},System.Nullable{System.DateTime},System.String,System.Nullable{System.Int16},System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Double},System.Nullable{System.Double})">
            <summary>
             A simple factory method to create a new <see cref="T:RTStockData.Entities.Indexs"/> instance.
            </summary>
            <param name="_tradedDate"></param>
            <param name="_open"></param>
            <param name="_close"></param>
            <param name="_change"></param>
            <param name="_unchange"></param>
            <param name="_high"></param>
            <param name="_low"></param>
            <param name="_up"></param>
            <param name="_down"></param>
            <param name="_average"></param>
            <param name="_vol"></param>
            <param name="_val"></param>
            <param name="_attribute1"></param>
            <param name="_totaltrade"></param>
            <param name="_attribute3"></param>
            <param name="_marketId"></param>
            <param name="_status"></param>
            <param name="_trans"></param>
            <param name="_upvolume"></param>
            <param name="_downvolume"></param>
            <param name="_nochangevolume"></param>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.Get(RTStockData.Entities.IndexsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.GetByVnindexId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_Indexs index.
            </summary>
            <param name="_vnindexId"></param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.Indexs"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.GetByVnindexId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_Indexs index.
            </summary>
            <param name="_vnindexId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.Indexs"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RTStockData.Entities.Indexs"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RTStockData.Entities.Indexs"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RTStockData.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Indexs</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Indexs</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RTStockData.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Indexs</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Indexs} of <c>Indexs</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.Find(RTStockData.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Indexs</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Indexs</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Indexs</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Indexs</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Indexs</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.Insert(RTStockData.Entities.Indexs)">
            <summary>
            public virtual method that Inserts a Indexs object into the datasource using a transaction.
            </summary>
            <param name="entity">Indexs object to Insert.</param>
            <remarks>After Inserting into the datasource, the Indexs object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Indexs entity = new Indexs();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	IndexsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.Insert(RTStockData.Entities.TList{RTStockData.Entities.Indexs})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Indexs</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Indexs</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Indexs.
             <code><![CDATA[
             TList<Indexs> list = new TList<Indexs>();
             Indexs entity = new Indexs();
             entity.StringProperty = "foo";
             Indexs entity2 = new Indexs();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IndexsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.Update(RTStockData.Entities.Indexs)">
            <summary>
            public virtual method that Updates a Indexs object into the datasource using a transaction.
            </summary>
            <param name="entity">Indexs object to Update.</param>
            <remarks>After Updateing into the datasource, the Indexs object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Indexs entity = IndexsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	IndexsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.Update(RTStockData.Entities.TList{RTStockData.Entities.Indexs})">
             <summary>
             public virtual method that Updates rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Indexs</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Indexs</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Indexs.
             <code><![CDATA[
             TList<Indexs> list = new TList<Indexs>();
             Indexs entity = new Indexs();
             entity.StringProperty = "foo";
             Indexs entity2 = new Indexs();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IndexsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.Save(RTStockData.Entities.Indexs)">
            <summary>
            public virtual method that Saves a Indexs object into the datasource using a transaction.
            </summary>
            <param name="entity">Indexs object to Save.</param>
            <remarks>After Saveing into the datasource, the Indexs object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Indexs entity = IndexsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	IndexsService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.Save(RTStockData.Entities.TList{RTStockData.Entities.Indexs})">
             <summary>
             public virtual method that Saves rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Indexs</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Indexs</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Indexs.
             <code><![CDATA[
             TList<Indexs> list = new TList<Indexs>();
             Indexs entity = new Indexs();
             entity.StringProperty = "foo";
             Indexs entity2 = new Indexs();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IndexsService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.Delete(RTStockData.Entities.Indexs)">
            <summary>
            public virtual method that Deletes a Indexs object into the datasource using a transaction.
            </summary>
            <param name="entity">Indexs object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Indexs object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Indexs entity = IndexsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	IndexsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.Delete(RTStockData.Entities.TList{RTStockData.Entities.Indexs})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Indexs</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Indexs</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Indexs.
             <code><![CDATA[
             TList<Indexs> list = new TList<Indexs>();
             Indexs entity = new Indexs();
             entity.StringProperty = "foo";
             Indexs entity2 = new Indexs();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	IndexsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.Delete(RTStockData.Entities.IndexsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _vnindexId
            </summary>
            <param name="_vnindexId">Indexs pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.DeepLoadByVnindexId(System.Int32,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RTStockData.Entities.Indexs"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <param name="_vnindexId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Indexs Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.Indexs"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.DeepLoad(RTStockData.Entities.Indexs)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Indexs Object</param>
            <remarks>
            <seealso cref="M:RTStockData.Services.IndexsServiceBase.DeepLoad(RTStockData.Entities.Indexs)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.DeepLoad(RTStockData.Entities.Indexs,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.IndexsServiceBase.DeepLoad(RTStockData.Entities.Indexs)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Indexs Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.DeepLoad(RTStockData.Entities.Indexs,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RTStockData.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RTStockData.Entities.Indexs"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Indexs Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.Indexs})">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.IndexsServiceBase.DeepLoad(RTStockData.Entities.Indexs)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.Indexs},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.IndexsServiceBase.DeepLoad(RTStockData.Entities.Indexs)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.Indexs},System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RTStockData.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RTStockData.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RTStockData.Entities.Indexs"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.DeepSave(RTStockData.Entities.Indexs)">
            <summary>
            public virtualDeep Saves the <see cref="T:RTStockData.Entities.Indexs"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Indexs Object</param>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.DeepSave(RTStockData.Entities.Indexs,RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Indexs object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Indexs Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Indexs</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.Indexs})">
            <summary>
            Deep Save the entire <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Indexs} Object</param>
        </member>
        <member name="M:RTStockData.Services.IndexsServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.Indexs},RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RTStockData.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Indexs Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RTStockData.Services.IndexsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RTStockData.Services.IndexsService.#ctor">
            <summary>
            Initializes a new instance of the IndexsService class.
            </summary>
        </member>
        <member name="T:RTStockData.Services.ProcessorBase">
            <summary>
            The interface that each complex business unit of work processor will use.
            </summary>
        </member>
        <member name="T:RTStockData.Services.IProcessor">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:RTStockData.Services.IProcessor.Process">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:RTStockData.Services.IProcessor.ChangeProcessorState(RTStockData.Services.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="P:RTStockData.Services.IProcessor.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:RTStockData.Services.IProcessor.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="M:RTStockData.Services.ProcessorBase.Process">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:RTStockData.Services.ProcessorBase.ChangeProcessorState(RTStockData.Services.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:RTStockData.Services.ProcessorBase.OnNotifyProcessorStateChanging(RTStockData.Services.ProcessorState)">
            <summary>
            Raises the ProcessorStateChanging event.
            </summary>
            <param name="newProcessorState"></param>
        </member>
        <member name="P:RTStockData.Services.ProcessorBase.ProcessResult">
            <summary>
            Provides the current process result of it's operation.
            </summary>
        </member>
        <member name="P:RTStockData.Services.ProcessorBase.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>The name of the type of the processors to execute</value>
        </member>
        <member name="P:RTStockData.Services.ProcessorBase.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="E:RTStockData.Services.ProcessorBase.ProcessorStateChanging">
            <summary>
            The ProcessorStateChanging event.
            </summary>
        </member>
        <member name="T:RTStockData.Services.ProcessorBase.ProcessorStateChangingEventHandler">
            <summary>
            The ProcessorStateChangingEventHandler event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:RTStockData.Services.NearestWorkingDatesServiceBase">
            <summary>
             An object representation of the 'NearestWorkingDates' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the NearestWorkingDates.cs file instead.
             All custom implementations should be done in the <see cref="T:RTStockData.Entities.NearestWorkingDates"/> class.
             </remarks>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RTStockData.Entities.NearestWorkingDates"/> instance .
            </summary>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.CreateNearestWorkingDates(System.Int32,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
             A simple factory method to create a new <see cref="T:RTStockData.Entities.NearestWorkingDates"/> instance.
            </summary>
            <param name="_marketId"></param>
            <param name="_t"></param>
            <param name="_t1"></param>
            <param name="_t2"></param>
            <param name="_t3"></param>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.Get(RTStockData.Entities.NearestWorkingDatesKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.GetByMarketId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_NearestWorkingDates index.
            </summary>
            <param name="_marketId"></param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.NearestWorkingDates"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.GetByMarketId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_NearestWorkingDates index.
            </summary>
            <param name="_marketId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.NearestWorkingDates"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RTStockData.Entities.NearestWorkingDates"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RTStockData.Entities.NearestWorkingDates"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RTStockData.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>NearestWorkingDates</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>NearestWorkingDates</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RTStockData.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>NearestWorkingDates</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{NearestWorkingDates} of <c>NearestWorkingDates</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.Find(RTStockData.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>NearestWorkingDates</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>NearestWorkingDates</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>NearestWorkingDates</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>NearestWorkingDates</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>NearestWorkingDates</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.Insert(RTStockData.Entities.NearestWorkingDates)">
            <summary>
            public virtual method that Inserts a NearestWorkingDates object into the datasource using a transaction.
            </summary>
            <param name="entity">NearestWorkingDates object to Insert.</param>
            <remarks>After Inserting into the datasource, the NearestWorkingDates object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            NearestWorkingDates entity = new NearestWorkingDates();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	NearestWorkingDatesService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.Insert(RTStockData.Entities.TList{RTStockData.Entities.NearestWorkingDates})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>NearestWorkingDates</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>NearestWorkingDates</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of NearestWorkingDates.
             <code><![CDATA[
             TList<NearestWorkingDates> list = new TList<NearestWorkingDates>();
             NearestWorkingDates entity = new NearestWorkingDates();
             entity.StringProperty = "foo";
             NearestWorkingDates entity2 = new NearestWorkingDates();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NearestWorkingDatesService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.Update(RTStockData.Entities.NearestWorkingDates)">
            <summary>
            public virtual method that Updates a NearestWorkingDates object into the datasource using a transaction.
            </summary>
            <param name="entity">NearestWorkingDates object to Update.</param>
            <remarks>After Updateing into the datasource, the NearestWorkingDates object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            NearestWorkingDates entity = NearestWorkingDatesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	NearestWorkingDatesService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.Update(RTStockData.Entities.TList{RTStockData.Entities.NearestWorkingDates})">
             <summary>
             public virtual method that Updates rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>NearestWorkingDates</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>NearestWorkingDates</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of NearestWorkingDates.
             <code><![CDATA[
             TList<NearestWorkingDates> list = new TList<NearestWorkingDates>();
             NearestWorkingDates entity = new NearestWorkingDates();
             entity.StringProperty = "foo";
             NearestWorkingDates entity2 = new NearestWorkingDates();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NearestWorkingDatesService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.Save(RTStockData.Entities.NearestWorkingDates)">
            <summary>
            public virtual method that Saves a NearestWorkingDates object into the datasource using a transaction.
            </summary>
            <param name="entity">NearestWorkingDates object to Save.</param>
            <remarks>After Saveing into the datasource, the NearestWorkingDates object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            NearestWorkingDates entity = NearestWorkingDatesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	NearestWorkingDatesService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.Save(RTStockData.Entities.TList{RTStockData.Entities.NearestWorkingDates})">
             <summary>
             public virtual method that Saves rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>NearestWorkingDates</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>NearestWorkingDates</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of NearestWorkingDates.
             <code><![CDATA[
             TList<NearestWorkingDates> list = new TList<NearestWorkingDates>();
             NearestWorkingDates entity = new NearestWorkingDates();
             entity.StringProperty = "foo";
             NearestWorkingDates entity2 = new NearestWorkingDates();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NearestWorkingDatesService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.Delete(RTStockData.Entities.NearestWorkingDates)">
            <summary>
            public virtual method that Deletes a NearestWorkingDates object into the datasource using a transaction.
            </summary>
            <param name="entity">NearestWorkingDates object to Delete.</param>
            <remarks>After Deleteing into the datasource, the NearestWorkingDates object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            NearestWorkingDates entity = NearestWorkingDatesService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	NearestWorkingDatesService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.Delete(RTStockData.Entities.TList{RTStockData.Entities.NearestWorkingDates})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>NearestWorkingDates</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>NearestWorkingDates</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of NearestWorkingDates.
             <code><![CDATA[
             TList<NearestWorkingDates> list = new TList<NearestWorkingDates>();
             NearestWorkingDates entity = new NearestWorkingDates();
             entity.StringProperty = "foo";
             NearestWorkingDates entity2 = new NearestWorkingDates();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	NearestWorkingDatesService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.Delete(RTStockData.Entities.NearestWorkingDatesKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _marketId
            </summary>
            <param name="_marketId">NearestWorkingDates pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.DeepLoadByMarketId(System.Int32,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RTStockData.Entities.NearestWorkingDates"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <param name="_marketId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">NearestWorkingDates Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.NearestWorkingDates"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.DeepLoad(RTStockData.Entities.NearestWorkingDates)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">NearestWorkingDates Object</param>
            <remarks>
            <seealso cref="M:RTStockData.Services.NearestWorkingDatesServiceBase.DeepLoad(RTStockData.Entities.NearestWorkingDates)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.DeepLoad(RTStockData.Entities.NearestWorkingDates,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.NearestWorkingDatesServiceBase.DeepLoad(RTStockData.Entities.NearestWorkingDates)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">NearestWorkingDates Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.DeepLoad(RTStockData.Entities.NearestWorkingDates,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RTStockData.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RTStockData.Entities.NearestWorkingDates"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">NearestWorkingDates Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.NearestWorkingDates})">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.NearestWorkingDatesServiceBase.DeepLoad(RTStockData.Entities.NearestWorkingDates)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.NearestWorkingDates},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.NearestWorkingDatesServiceBase.DeepLoad(RTStockData.Entities.NearestWorkingDates)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.NearestWorkingDates},System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RTStockData.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RTStockData.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RTStockData.Entities.NearestWorkingDates"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.DeepSave(RTStockData.Entities.NearestWorkingDates)">
            <summary>
            public virtualDeep Saves the <see cref="T:RTStockData.Entities.NearestWorkingDates"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">NearestWorkingDates Object</param>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.DeepSave(RTStockData.Entities.NearestWorkingDates,RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the NearestWorkingDates object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">NearestWorkingDates Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>NearestWorkingDates</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.NearestWorkingDates})">
            <summary>
            Deep Save the entire <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{NearestWorkingDates} Object</param>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.NearestWorkingDates},RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RTStockData.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">NearestWorkingDates Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RTStockData.Services.NearestWorkingDatesServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RTStockData.Services.SecurityRealtimeService">
            <summary>
            An component type implementation of the 'security_realtime' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:RTStockData.Services.SecurityRealtimeService.#ctor">
            <summary>
            Initializes a new instance of the SecurityRealtimeService class.
            </summary>
        </member>
        <member name="T:RTStockData.Services.MatchedService">
            <summary>
            An component type implementation of the 'Matched' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:RTStockData.Services.MatchedService.#ctor">
            <summary>
            Initializes a new instance of the MatchedService class.
            </summary>
        </member>
        <member name="T:RTStockData.Services.IndexInfoHistoryService">
            <summary>
            An component type implementation of the 'IndexInfoHistory' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:RTStockData.Services.IndexInfoHistoryService.#ctor">
            <summary>
            Initializes a new instance of the IndexInfoHistoryService class.
            </summary>
        </member>
        <member name="T:RTStockData.Services.ServiceViewBase`1">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:RTStockData.Services.ContextView`2">
            <summary>
            Used to create a general view of the current context.  
            Useful for firing events and giving the UI a picture of 
            current State of Operation.
            </summary>
            <typeparam name="Entity">The Entity object</typeparam>
            <typeparam name="Domain">Type that holds </typeparam>
        </member>
        <member name="M:RTStockData.Services.ContextView`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RTStockData.Services.ContextView`2"/> class.
            </summary>
        </member>
        <member name="M:RTStockData.Services.ContextView`2.#ctor(`0,RTStockData.Services.SecurityContext{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:RTStockData.Services.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
        </member>
        <member name="M:RTStockData.Services.ContextView`2.#ctor(`0,RTStockData.Services.SecurityContext{`0},RTStockData.Data.TransactionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:RTStockData.Services.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
            <param name="transactionManager">The transaction manager.</param>
        </member>
        <member name="P:RTStockData.Services.ContextView`2.PersistingObject">
            <summary>
            Gets or sets the persisting object.
            </summary>
            <value>The persisting object.</value>
        </member>
        <member name="P:RTStockData.Services.ContextView`2.SecurityContext">
            <summary>
            Gets or sets the security context.
            </summary>
            <value>The security context.</value>
        </member>
        <member name="P:RTStockData.Services.ContextView`2.TransactionManager">
            <summary>
            Gets or sets the transaction manager.
            </summary>
            <value>The transaction manager.</value>
        </member>
        <member name="T:RTStockData.Services.LanguageServiceBase">
            <summary>
             An object representation of the 'Language' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Language.cs file instead.
             All custom implementations should be done in the <see cref="T:RTStockData.Entities.Language"/> class.
             </remarks>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RTStockData.Entities.Language"/> instance .
            </summary>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.CreateLanguage(System.String,System.String,System.String,System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:RTStockData.Entities.Language"/> instance.
            </summary>
            <param name="_languageId"></param>
            <param name="_languageName"></param>
            <param name="_languageCode"></param>
            <param name="_order"></param>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.Get(RTStockData.Entities.LanguageKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.GetByLanguageId(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_Language index.
            </summary>
            <param name="_languageId"></param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.Language"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.GetByLanguageId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_Language index.
            </summary>
            <param name="_languageId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.Language"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RTStockData.Entities.Language"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RTStockData.Entities.Language"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RTStockData.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Language</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Language</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RTStockData.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Language</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Language} of <c>Language</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.Find(RTStockData.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Language</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Language</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Language</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Language</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Language</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.Insert(RTStockData.Entities.Language)">
            <summary>
            public virtual method that Inserts a Language object into the datasource using a transaction.
            </summary>
            <param name="entity">Language object to Insert.</param>
            <remarks>After Inserting into the datasource, the Language object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Language entity = new Language();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	LanguageService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.Insert(RTStockData.Entities.TList{RTStockData.Entities.Language})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Language</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Language</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Language.
             <code><![CDATA[
             TList<Language> list = new TList<Language>();
             Language entity = new Language();
             entity.StringProperty = "foo";
             Language entity2 = new Language();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LanguageService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.Update(RTStockData.Entities.Language)">
            <summary>
            public virtual method that Updates a Language object into the datasource using a transaction.
            </summary>
            <param name="entity">Language object to Update.</param>
            <remarks>After Updateing into the datasource, the Language object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Language entity = LanguageService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	LanguageService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.Update(RTStockData.Entities.TList{RTStockData.Entities.Language})">
             <summary>
             public virtual method that Updates rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Language</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Language</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Language.
             <code><![CDATA[
             TList<Language> list = new TList<Language>();
             Language entity = new Language();
             entity.StringProperty = "foo";
             Language entity2 = new Language();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LanguageService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.Save(RTStockData.Entities.Language)">
            <summary>
            public virtual method that Saves a Language object into the datasource using a transaction.
            </summary>
            <param name="entity">Language object to Save.</param>
            <remarks>After Saveing into the datasource, the Language object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Language entity = LanguageService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	LanguageService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.Save(RTStockData.Entities.TList{RTStockData.Entities.Language})">
             <summary>
             public virtual method that Saves rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Language</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Language</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Language.
             <code><![CDATA[
             TList<Language> list = new TList<Language>();
             Language entity = new Language();
             entity.StringProperty = "foo";
             Language entity2 = new Language();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LanguageService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.Delete(RTStockData.Entities.Language)">
            <summary>
            public virtual method that Deletes a Language object into the datasource using a transaction.
            </summary>
            <param name="entity">Language object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Language object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Language entity = LanguageService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	LanguageService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.Delete(RTStockData.Entities.TList{RTStockData.Entities.Language})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Language</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Language</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Language.
             <code><![CDATA[
             TList<Language> list = new TList<Language>();
             Language entity = new Language();
             entity.StringProperty = "foo";
             Language entity2 = new Language();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LanguageService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.Delete(RTStockData.Entities.LanguageKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _languageId
            </summary>
            <param name="_languageId">Language pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.DeepLoadByLanguageId(System.String,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RTStockData.Entities.Language"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <param name="_languageId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Language Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.Language"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.DeepLoad(RTStockData.Entities.Language)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Language Object</param>
            <remarks>
            <seealso cref="M:RTStockData.Services.LanguageServiceBase.DeepLoad(RTStockData.Entities.Language)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.DeepLoad(RTStockData.Entities.Language,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.LanguageServiceBase.DeepLoad(RTStockData.Entities.Language)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Language Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.DeepLoad(RTStockData.Entities.Language,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RTStockData.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RTStockData.Entities.Language"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Language Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.Language})">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.LanguageServiceBase.DeepLoad(RTStockData.Entities.Language)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.Language},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.LanguageServiceBase.DeepLoad(RTStockData.Entities.Language)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.Language},System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RTStockData.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RTStockData.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RTStockData.Entities.Language"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.DeepSave(RTStockData.Entities.Language)">
            <summary>
            public virtualDeep Saves the <see cref="T:RTStockData.Entities.Language"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Language Object</param>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.DeepSave(RTStockData.Entities.Language,RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Language object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Language Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Language</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.Language})">
            <summary>
            Deep Save the entire <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Language} Object</param>
        </member>
        <member name="M:RTStockData.Services.LanguageServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.Language},RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RTStockData.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Language Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RTStockData.Services.LanguageServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:RTStockData.Services.IndexVn30Service">
            <summary>
            An component type implementation of the 'Index_VN30' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:RTStockData.Services.IndexVn30Service.#ctor">
            <summary>
            Initializes a new instance of the IndexVn30Service class.
            </summary>
        </member>
        <member name="T:RTStockData.Services.CompanyInfoLanguageService">
            <summary>
            An component type implementation of the 'CompanyInfoLanguage' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:RTStockData.Services.CompanyInfoLanguageServiceBase">
            <summary>
             An object representation of the 'CompanyInfoLanguage' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the CompanyInfoLanguage.cs file instead.
             All custom implementations should be done in the <see cref="T:RTStockData.Entities.CompanyInfoLanguage"/> class.
             </remarks>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:RTStockData.Entities.CompanyInfoLanguage"/> instance .
            </summary>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.CreateCompanyInfoLanguage(System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:RTStockData.Entities.CompanyInfoLanguage"/> instance.
            </summary>
            <param name="_companyId"></param>
            <param name="_languageId"></param>
            <param name="_companyName"></param>
            <param name="_description"></param>
            <param name="_address"></param>
            <param name="_businessArea"></param>
            <param name="_strategy"></param>
            <param name="_marketPosition"></param>
            <param name="_contactInformation"></param>
            <param name="_director"></param>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.Get(RTStockData.Entities.CompanyInfoLanguageKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.GetByCompanyIdLanguageId(System.Int32,System.String)">
            <summary>
             method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_CompanyInfoLanguage index.
            </summary>
            <param name="_companyId"></param>
            <param name="_languageId"></param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.CompanyInfoLanguage"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.GetByCompanyIdLanguageId(System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:RTStockData.Entities.TList`1"/> from the datasource based on the primary key PK_CompanyInfoLanguage index.
            </summary>
            <param name="_companyId"></param>
            <param name="_languageId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.CompanyInfoLanguage"/> class.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:RTStockData.Entities.CompanyInfoLanguage"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:RTStockData.Entities.CompanyInfoLanguage"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:RTStockData.Entities.TList`1"/> </returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CompanyInfoLanguage</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:RTStockData.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CompanyInfoLanguage</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:RTStockData.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CompanyInfoLanguage</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{CompanyInfoLanguage} of <c>CompanyInfoLanguage</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.Find(RTStockData.Data.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>CompanyInfoLanguage</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>CompanyInfoLanguage</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>CompanyInfoLanguage</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.Find(RTStockData.Data.IFilterParameterCollection,RTStockData.Data.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:RTStockData.Data.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CompanyInfoLanguage</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.Find(RTStockData.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:RTStockData.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CompanyInfoLanguage</c> objects.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.Insert(RTStockData.Entities.CompanyInfoLanguage)">
            <summary>
            public virtual method that Inserts a CompanyInfoLanguage object into the datasource using a transaction.
            </summary>
            <param name="entity">CompanyInfoLanguage object to Insert.</param>
            <remarks>After Inserting into the datasource, the CompanyInfoLanguage object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            CompanyInfoLanguage entity = new CompanyInfoLanguage();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CompanyInfoLanguageService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.Insert(RTStockData.Entities.TList{RTStockData.Entities.CompanyInfoLanguage})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CompanyInfoLanguage</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>CompanyInfoLanguage</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of CompanyInfoLanguage.
             <code><![CDATA[
             TList<CompanyInfoLanguage> list = new TList<CompanyInfoLanguage>();
             CompanyInfoLanguage entity = new CompanyInfoLanguage();
             entity.StringProperty = "foo";
             CompanyInfoLanguage entity2 = new CompanyInfoLanguage();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CompanyInfoLanguageService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.Update(RTStockData.Entities.CompanyInfoLanguage)">
            <summary>
            public virtual method that Updates a CompanyInfoLanguage object into the datasource using a transaction.
            </summary>
            <param name="entity">CompanyInfoLanguage object to Update.</param>
            <remarks>After Updateing into the datasource, the CompanyInfoLanguage object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            CompanyInfoLanguage entity = CompanyInfoLanguageService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CompanyInfoLanguageService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.Update(RTStockData.Entities.TList{RTStockData.Entities.CompanyInfoLanguage})">
             <summary>
             public virtual method that Updates rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CompanyInfoLanguage</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>CompanyInfoLanguage</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of CompanyInfoLanguage.
             <code><![CDATA[
             TList<CompanyInfoLanguage> list = new TList<CompanyInfoLanguage>();
             CompanyInfoLanguage entity = new CompanyInfoLanguage();
             entity.StringProperty = "foo";
             CompanyInfoLanguage entity2 = new CompanyInfoLanguage();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CompanyInfoLanguageService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.Save(RTStockData.Entities.CompanyInfoLanguage)">
            <summary>
            public virtual method that Saves a CompanyInfoLanguage object into the datasource using a transaction.
            </summary>
            <param name="entity">CompanyInfoLanguage object to Save.</param>
            <remarks>After Saveing into the datasource, the CompanyInfoLanguage object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            CompanyInfoLanguage entity = CompanyInfoLanguageService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CompanyInfoLanguageService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.Save(RTStockData.Entities.TList{RTStockData.Entities.CompanyInfoLanguage})">
             <summary>
             public virtual method that Saves rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CompanyInfoLanguage</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>CompanyInfoLanguage</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of CompanyInfoLanguage.
             <code><![CDATA[
             TList<CompanyInfoLanguage> list = new TList<CompanyInfoLanguage>();
             CompanyInfoLanguage entity = new CompanyInfoLanguage();
             entity.StringProperty = "foo";
             CompanyInfoLanguage entity2 = new CompanyInfoLanguage();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CompanyInfoLanguageService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.Delete(RTStockData.Entities.CompanyInfoLanguage)">
            <summary>
            public virtual method that Deletes a CompanyInfoLanguage object into the datasource using a transaction.
            </summary>
            <param name="entity">CompanyInfoLanguage object to Delete.</param>
            <remarks>After Deleteing into the datasource, the CompanyInfoLanguage object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            CompanyInfoLanguage entity = CompanyInfoLanguageService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CompanyInfoLanguageService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.Delete(RTStockData.Entities.TList{RTStockData.Entities.CompanyInfoLanguage})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:RTStockData.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CompanyInfoLanguage</c> objects in a <see cref="T:RTStockData.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>CompanyInfoLanguage</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of CompanyInfoLanguage.
             <code><![CDATA[
             TList<CompanyInfoLanguage> list = new TList<CompanyInfoLanguage>();
             CompanyInfoLanguage entity = new CompanyInfoLanguage();
             entity.StringProperty = "foo";
             CompanyInfoLanguage entity2 = new CompanyInfoLanguage();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CompanyInfoLanguageService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.Delete(RTStockData.Entities.CompanyInfoLanguageKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.Delete(System.Int32,System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _companyId, System.String _languageId
            </summary>
            <param name="_companyId">CompanyInfoLanguage pk id.</param>
            <param name="_languageId">CompanyInfoLanguage pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.DeepLoadByCompanyIdLanguageId(System.Int32,System.String,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:RTStockData.Entities.CompanyInfoLanguage"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <param name="_companyId"></param>
            <param name="_languageId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CompanyInfoLanguage Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:RTStockData.Entities.CompanyInfoLanguage"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.DeepLoad(RTStockData.Entities.CompanyInfoLanguage)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">CompanyInfoLanguage Object</param>
            <remarks>
            <seealso cref="M:RTStockData.Services.CompanyInfoLanguageServiceBase.DeepLoad(RTStockData.Entities.CompanyInfoLanguage)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.DeepLoad(RTStockData.Entities.CompanyInfoLanguage,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.CompanyInfoLanguageServiceBase.DeepLoad(RTStockData.Entities.CompanyInfoLanguage)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">CompanyInfoLanguage Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.DeepLoad(RTStockData.Entities.CompanyInfoLanguage,System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:RTStockData.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:RTStockData.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:RTStockData.Entities.CompanyInfoLanguage"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CompanyInfoLanguage Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.CompanyInfoLanguage})">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.CompanyInfoLanguageServiceBase.DeepLoad(RTStockData.Entities.CompanyInfoLanguage)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.CompanyInfoLanguage},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:RTStockData.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:RTStockData.Services.CompanyInfoLanguageServiceBase.DeepLoad(RTStockData.Entities.CompanyInfoLanguage)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:RTStockData.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.DeepLoad(RTStockData.Entities.TList{RTStockData.Entities.CompanyInfoLanguage},System.Boolean,RTStockData.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:RTStockData.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:RTStockData.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:RTStockData.Entities.CompanyInfoLanguage"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.DeepSave(RTStockData.Entities.CompanyInfoLanguage)">
            <summary>
            public virtualDeep Saves the <see cref="T:RTStockData.Entities.CompanyInfoLanguage"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">CompanyInfoLanguage Object</param>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.DeepSave(RTStockData.Entities.CompanyInfoLanguage,RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the CompanyInfoLanguage object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">CompanyInfoLanguage Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>CompanyInfoLanguage</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.CompanyInfoLanguage})">
            <summary>
            Deep Save the entire <see cref="T:RTStockData.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{CompanyInfoLanguage} Object</param>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageServiceBase.DeepSave(RTStockData.Entities.TList{RTStockData.Entities.CompanyInfoLanguage},RTStockData.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:RTStockData.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:RTStockData.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CompanyInfoLanguage Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:RTStockData.Services.CompanyInfoLanguageServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:RTStockData.Services.CompanyInfoLanguageService.#ctor">
            <summary>
            Initializes a new instance of the CompanyInfoLanguageService class.
            </summary>
        </member>
        <member name="T:RTStockData.Services.DomainUtil">
            <summary>
            DomainUtil class.
            </summary>
        </member>
        <member name="M:RTStockData.Services.DomainUtil.GetErrorsFromList``1(RTStockData.Entities.TList{``0})">
            <summary>
            Aggregates all the errors in a collection
            </summary>
        </member>
        <member name="M:RTStockData.Services.DomainUtil.HandleException(System.Exception,System.String)">
            <summary>
            Wraps call to tohe <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy"/> class which handles all exceptions based on the security policy.
            </summary>
        </member>
        <member name="M:RTStockData.Services.DomainUtil.GetDefaultByType(System.Data.DbType)">
            <summary>
            Get a default value for a given data type
            </summary>
            <param name="dataType">Data type for which to get the default value</param>
            <returns>An object of the default value.</returns>
        </member>
        <member name="M:RTStockData.Services.DomainUtil.GetDataValue(System.Data.IDataParameter)">
            <summary>
            Get Value or Default Value from an IDataParamater
            Based on DbType
            </summary>
            <param name="p">The IDataParameter instance type is used to determine the default value.</param>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Services.DomainUtil.DefaultToDBNull(System.Object,System.Data.DbType)">
            <summary>
            Checks to see if the Default Value has been set to the parameter.
            If it's the default value, then create.
            </summary>
            <param name="val">The value we want to check.</param>
            <param name="dbtype">The DbType from wich we take the default value.</param>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Services.DomainUtil.GetParameterValue``1(System.Data.IDataParameter)">
            <summary>
            Generic method to return the value of a nullable parameter
            </summary>
            <typeparam name="T">Type of value to return</typeparam>
            <param name="parameter">Parameter from which to extract the value</param>
            <returns></returns>
        </member>
        <member name="M:RTStockData.Services.DomainUtil.ConvertDataReaderToDataSet(System.Data.IDataReader)">
            <summary>
            Converts a IDataReader to a DataSet.  For use when a custom stored procedure returns an <see cref="T:System.Data.IDataReader"/>, it will
            convert all result sets returned as a DataSet.
            </summary>
            <param name="reader">The reader to convert</param>
            <returns>A dataset with one table per result in the reader</returns>
        </member>
        <member name="T:RTStockData.Services.ProcessorState">
            <summary>
            ProcessorState enumeration.
            </summary>
        </member>
        <member name="F:RTStockData.Services.ProcessorState.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:RTStockData.Services.ProcessorState.Running">
            <summary>
            Running
            </summary>
        </member>
        <member name="F:RTStockData.Services.ProcessorState.Stopped">
            <summary>
            Stopped
            </summary>
        </member>
        <member name="F:RTStockData.Services.ProcessorState.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="T:RTStockData.Services.NearestWorkingDatesService">
            <summary>
            An component type implementation of the 'NearestWorkingDates' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:RTStockData.Services.NearestWorkingDatesService.#ctor">
            <summary>
            Initializes a new instance of the NearestWorkingDatesService class.
            </summary>
        </member>
        <member name="T:RTStockData.Services.LanguageService">
            <summary>
            An component type implementation of the 'Language' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:RTStockData.Services.LanguageService.#ctor">
            <summary>
            Initializes a new instance of the LanguageService class.
            </summary>
        </member>
    </members>
</doc>
