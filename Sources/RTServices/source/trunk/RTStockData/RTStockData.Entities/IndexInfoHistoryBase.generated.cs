
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file IndexInfoHistory.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Web.Script.Serialization;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using RTStockData.Entities.Validation;
#endregion

namespace RTStockData.Entities
{
	///<summary>
	/// An object representation of the 'IndexInfoHistory' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class IndexInfoHistoryBase : EntityBase, IIndexInfoHistory, IEntityId<IndexInfoHistoryKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private IndexInfoHistoryEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private IndexInfoHistoryEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private IndexInfoHistoryEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<IndexInfoHistory> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event IndexInfoHistoryEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event IndexInfoHistoryEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="IndexInfoHistoryBase"/> instance.
		///</summary>
		public IndexInfoHistoryBase()
		{
			this.entityData = new IndexInfoHistoryEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="IndexInfoHistoryBase"/> instance.
		///</summary>
		///<param name="_indexId"></param>
		///<param name="_indexCode"></param>
		///<param name="_name"></param>
		///<param name="_description"></param>
		///<param name="_tradingDate"></param>
		///<param name="_time"></param>
		///<param name="_currentStatus"></param>
		///<param name="_totalStock"></param>
		///<param name="_advances"></param>
		///<param name="_nochange"></param>
		///<param name="_declines"></param>
		///<param name="_totalQtty"></param>
		///<param name="_totalValue"></param>
		///<param name="_priorIndexVal"></param>
		///<param name="_chgIndex"></param>
		///<param name="_pctIndex"></param>
		///<param name="_currentIndex"></param>
		///<param name="_highestIndex"></param>
		///<param name="_lowestIndex"></param>
		///<param name="_sessionNo"></param>
		///<param name="_typeIndex"></param>
		///<param name="_closeIndex"></param>
		///<param name="_tradeDate"></param>
		public IndexInfoHistoryBase(System.Int64? _indexId, System.String _indexCode, 
			System.String _name, System.String _description, System.DateTime? _tradingDate, 
			System.Int64? _time, System.Decimal? _currentStatus, System.Decimal? _totalStock, 
			System.Decimal? _advances, System.Decimal? _nochange, System.Decimal? _declines, 
			System.Decimal? _totalQtty, System.Decimal? _totalValue, System.Decimal? _priorIndexVal, 
			System.Decimal? _chgIndex, System.Decimal? _pctIndex, System.Decimal? _currentIndex, 
			System.Decimal? _highestIndex, System.Decimal? _lowestIndex, System.Decimal? _sessionNo, 
			System.Decimal? _typeIndex, System.Decimal? _closeIndex, System.DateTime? _tradeDate)
		{
			this.entityData = new IndexInfoHistoryEntityData();
			this.backupData = null;

			this.IndexId = _indexId;
			this.IndexCode = _indexCode;
			this.Name = _name;
			this.Description = _description;
			this.TradingDate = _tradingDate;
			this.Time = _time;
			this.CurrentStatus = _currentStatus;
			this.TotalStock = _totalStock;
			this.Advances = _advances;
			this.Nochange = _nochange;
			this.Declines = _declines;
			this.TotalQtty = _totalQtty;
			this.TotalValue = _totalValue;
			this.PriorIndexVal = _priorIndexVal;
			this.ChgIndex = _chgIndex;
			this.PctIndex = _pctIndex;
			this.CurrentIndex = _currentIndex;
			this.HighestIndex = _highestIndex;
			this.LowestIndex = _lowestIndex;
			this.SessionNo = _sessionNo;
			this.TypeIndex = _typeIndex;
			this.CloseIndex = _closeIndex;
			this.TradeDate = _tradeDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="IndexInfoHistory"/> instance.
		///</summary>
		///<param name="_indexId"></param>
		///<param name="_indexCode"></param>
		///<param name="_name"></param>
		///<param name="_description"></param>
		///<param name="_tradingDate"></param>
		///<param name="_time"></param>
		///<param name="_currentStatus"></param>
		///<param name="_totalStock"></param>
		///<param name="_advances"></param>
		///<param name="_nochange"></param>
		///<param name="_declines"></param>
		///<param name="_totalQtty"></param>
		///<param name="_totalValue"></param>
		///<param name="_priorIndexVal"></param>
		///<param name="_chgIndex"></param>
		///<param name="_pctIndex"></param>
		///<param name="_currentIndex"></param>
		///<param name="_highestIndex"></param>
		///<param name="_lowestIndex"></param>
		///<param name="_sessionNo"></param>
		///<param name="_typeIndex"></param>
		///<param name="_closeIndex"></param>
		///<param name="_tradeDate"></param>
		public static IndexInfoHistory CreateIndexInfoHistory(System.Int64? _indexId, System.String _indexCode, 
			System.String _name, System.String _description, System.DateTime? _tradingDate, 
			System.Int64? _time, System.Decimal? _currentStatus, System.Decimal? _totalStock, 
			System.Decimal? _advances, System.Decimal? _nochange, System.Decimal? _declines, 
			System.Decimal? _totalQtty, System.Decimal? _totalValue, System.Decimal? _priorIndexVal, 
			System.Decimal? _chgIndex, System.Decimal? _pctIndex, System.Decimal? _currentIndex, 
			System.Decimal? _highestIndex, System.Decimal? _lowestIndex, System.Decimal? _sessionNo, 
			System.Decimal? _typeIndex, System.Decimal? _closeIndex, System.DateTime? _tradeDate)
		{
			IndexInfoHistory newIndexInfoHistory = new IndexInfoHistory();
			newIndexInfoHistory.IndexId = _indexId;
			newIndexInfoHistory.IndexCode = _indexCode;
			newIndexInfoHistory.Name = _name;
			newIndexInfoHistory.Description = _description;
			newIndexInfoHistory.TradingDate = _tradingDate;
			newIndexInfoHistory.Time = _time;
			newIndexInfoHistory.CurrentStatus = _currentStatus;
			newIndexInfoHistory.TotalStock = _totalStock;
			newIndexInfoHistory.Advances = _advances;
			newIndexInfoHistory.Nochange = _nochange;
			newIndexInfoHistory.Declines = _declines;
			newIndexInfoHistory.TotalQtty = _totalQtty;
			newIndexInfoHistory.TotalValue = _totalValue;
			newIndexInfoHistory.PriorIndexVal = _priorIndexVal;
			newIndexInfoHistory.ChgIndex = _chgIndex;
			newIndexInfoHistory.PctIndex = _pctIndex;
			newIndexInfoHistory.CurrentIndex = _currentIndex;
			newIndexInfoHistory.HighestIndex = _highestIndex;
			newIndexInfoHistory.LowestIndex = _lowestIndex;
			newIndexInfoHistory.SessionNo = _sessionNo;
			newIndexInfoHistory.TypeIndex = _typeIndex;
			newIndexInfoHistory.CloseIndex = _closeIndex;
			newIndexInfoHistory.TradeDate = _tradeDate;
			return newIndexInfoHistory;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int64 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(IndexInfoHistoryColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexInfoHistoryColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IndexId property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsIndexIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? IndexId
		{
			get
			{
				return this.entityData.IndexId; 
			}
			
			set
			{
				if (this.entityData.IndexId == value)
					return;
					
				OnColumnChanging(IndexInfoHistoryColumn.IndexId, this.entityData.IndexId);
				this.entityData.IndexId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexInfoHistoryColumn.IndexId, this.entityData.IndexId);
				OnPropertyChanged("IndexId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IndexCode property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String IndexCode
		{
			get
			{
				return this.entityData.IndexCode; 
			}
			
			set
			{
				if (this.entityData.IndexCode == value)
					return;
					
				OnColumnChanging(IndexInfoHistoryColumn.IndexCode, this.entityData.IndexCode);
				this.entityData.IndexCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexInfoHistoryColumn.IndexCode, this.entityData.IndexCode);
				OnPropertyChanged("IndexCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String Name
		{
			get
			{
				return this.entityData.Name; 
			}
			
			set
			{
				if (this.entityData.Name == value)
					return;
					
				OnColumnChanging(IndexInfoHistoryColumn.Name, this.entityData.Name);
				this.entityData.Name = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexInfoHistoryColumn.Name, this.entityData.Name);
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Description property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String Description
		{
			get
			{
				return this.entityData.Description; 
			}
			
			set
			{
				if (this.entityData.Description == value)
					return;
					
				OnColumnChanging(IndexInfoHistoryColumn.Description, this.entityData.Description);
				this.entityData.Description = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexInfoHistoryColumn.Description, this.entityData.Description);
				OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TradingDate property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsTradingDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? TradingDate
		{
			get
			{
				return this.entityData.TradingDate; 
			}
			
			set
			{
				if (this.entityData.TradingDate == value)
					return;
					
				OnColumnChanging(IndexInfoHistoryColumn.TradingDate, this.entityData.TradingDate);
				this.entityData.TradingDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexInfoHistoryColumn.TradingDate, this.entityData.TradingDate);
				OnPropertyChanged("TradingDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Time property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsTimeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Time
		{
			get
			{
				return this.entityData.Time; 
			}
			
			set
			{
				if (this.entityData.Time == value)
					return;
					
				OnColumnChanging(IndexInfoHistoryColumn.Time, this.entityData.Time);
				this.entityData.Time = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexInfoHistoryColumn.Time, this.entityData.Time);
				OnPropertyChanged("Time");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CurrentStatus property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCurrentStatusNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CurrentStatus
		{
			get
			{
				return this.entityData.CurrentStatus; 
			}
			
			set
			{
				if (this.entityData.CurrentStatus == value)
					return;
					
				OnColumnChanging(IndexInfoHistoryColumn.CurrentStatus, this.entityData.CurrentStatus);
				this.entityData.CurrentStatus = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexInfoHistoryColumn.CurrentStatus, this.entityData.CurrentStatus);
				OnPropertyChanged("CurrentStatus");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalStock property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTotalStockNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TotalStock
		{
			get
			{
				return this.entityData.TotalStock; 
			}
			
			set
			{
				if (this.entityData.TotalStock == value)
					return;
					
				OnColumnChanging(IndexInfoHistoryColumn.TotalStock, this.entityData.TotalStock);
				this.entityData.TotalStock = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexInfoHistoryColumn.TotalStock, this.entityData.TotalStock);
				OnPropertyChanged("TotalStock");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Advances property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdvancesNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Advances
		{
			get
			{
				return this.entityData.Advances; 
			}
			
			set
			{
				if (this.entityData.Advances == value)
					return;
					
				OnColumnChanging(IndexInfoHistoryColumn.Advances, this.entityData.Advances);
				this.entityData.Advances = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexInfoHistoryColumn.Advances, this.entityData.Advances);
				OnPropertyChanged("Advances");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Nochange property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsNochangeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Nochange
		{
			get
			{
				return this.entityData.Nochange; 
			}
			
			set
			{
				if (this.entityData.Nochange == value)
					return;
					
				OnColumnChanging(IndexInfoHistoryColumn.Nochange, this.entityData.Nochange);
				this.entityData.Nochange = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexInfoHistoryColumn.Nochange, this.entityData.Nochange);
				OnPropertyChanged("Nochange");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Declines property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsDeclinesNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Declines
		{
			get
			{
				return this.entityData.Declines; 
			}
			
			set
			{
				if (this.entityData.Declines == value)
					return;
					
				OnColumnChanging(IndexInfoHistoryColumn.Declines, this.entityData.Declines);
				this.entityData.Declines = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexInfoHistoryColumn.Declines, this.entityData.Declines);
				OnPropertyChanged("Declines");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalQtty property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTotalQttyNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TotalQtty
		{
			get
			{
				return this.entityData.TotalQtty; 
			}
			
			set
			{
				if (this.entityData.TotalQtty == value)
					return;
					
				OnColumnChanging(IndexInfoHistoryColumn.TotalQtty, this.entityData.TotalQtty);
				this.entityData.TotalQtty = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexInfoHistoryColumn.TotalQtty, this.entityData.TotalQtty);
				OnPropertyChanged("TotalQtty");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalValue property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTotalValueNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TotalValue
		{
			get
			{
				return this.entityData.TotalValue; 
			}
			
			set
			{
				if (this.entityData.TotalValue == value)
					return;
					
				OnColumnChanging(IndexInfoHistoryColumn.TotalValue, this.entityData.TotalValue);
				this.entityData.TotalValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexInfoHistoryColumn.TotalValue, this.entityData.TotalValue);
				OnPropertyChanged("TotalValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PriorIndexVal property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsPriorIndexValNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? PriorIndexVal
		{
			get
			{
				return this.entityData.PriorIndexVal; 
			}
			
			set
			{
				if (this.entityData.PriorIndexVal == value)
					return;
					
				OnColumnChanging(IndexInfoHistoryColumn.PriorIndexVal, this.entityData.PriorIndexVal);
				this.entityData.PriorIndexVal = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexInfoHistoryColumn.PriorIndexVal, this.entityData.PriorIndexVal);
				OnPropertyChanged("PriorIndexVal");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ChgIndex property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsChgIndexNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ChgIndex
		{
			get
			{
				return this.entityData.ChgIndex; 
			}
			
			set
			{
				if (this.entityData.ChgIndex == value)
					return;
					
				OnColumnChanging(IndexInfoHistoryColumn.ChgIndex, this.entityData.ChgIndex);
				this.entityData.ChgIndex = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexInfoHistoryColumn.ChgIndex, this.entityData.ChgIndex);
				OnPropertyChanged("ChgIndex");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PctIndex property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsPctIndexNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? PctIndex
		{
			get
			{
				return this.entityData.PctIndex; 
			}
			
			set
			{
				if (this.entityData.PctIndex == value)
					return;
					
				OnColumnChanging(IndexInfoHistoryColumn.PctIndex, this.entityData.PctIndex);
				this.entityData.PctIndex = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexInfoHistoryColumn.PctIndex, this.entityData.PctIndex);
				OnPropertyChanged("PctIndex");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CurrentIndex property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCurrentIndexNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CurrentIndex
		{
			get
			{
				return this.entityData.CurrentIndex; 
			}
			
			set
			{
				if (this.entityData.CurrentIndex == value)
					return;
					
				OnColumnChanging(IndexInfoHistoryColumn.CurrentIndex, this.entityData.CurrentIndex);
				this.entityData.CurrentIndex = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexInfoHistoryColumn.CurrentIndex, this.entityData.CurrentIndex);
				OnPropertyChanged("CurrentIndex");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HighestIndex property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsHighestIndexNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? HighestIndex
		{
			get
			{
				return this.entityData.HighestIndex; 
			}
			
			set
			{
				if (this.entityData.HighestIndex == value)
					return;
					
				OnColumnChanging(IndexInfoHistoryColumn.HighestIndex, this.entityData.HighestIndex);
				this.entityData.HighestIndex = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexInfoHistoryColumn.HighestIndex, this.entityData.HighestIndex);
				OnPropertyChanged("HighestIndex");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LowestIndex property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsLowestIndexNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? LowestIndex
		{
			get
			{
				return this.entityData.LowestIndex; 
			}
			
			set
			{
				if (this.entityData.LowestIndex == value)
					return;
					
				OnColumnChanging(IndexInfoHistoryColumn.LowestIndex, this.entityData.LowestIndex);
				this.entityData.LowestIndex = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexInfoHistoryColumn.LowestIndex, this.entityData.LowestIndex);
				OnPropertyChanged("LowestIndex");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SessionNo property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSessionNoNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SessionNo
		{
			get
			{
				return this.entityData.SessionNo; 
			}
			
			set
			{
				if (this.entityData.SessionNo == value)
					return;
					
				OnColumnChanging(IndexInfoHistoryColumn.SessionNo, this.entityData.SessionNo);
				this.entityData.SessionNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexInfoHistoryColumn.SessionNo, this.entityData.SessionNo);
				OnPropertyChanged("SessionNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TypeIndex property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTypeIndexNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TypeIndex
		{
			get
			{
				return this.entityData.TypeIndex; 
			}
			
			set
			{
				if (this.entityData.TypeIndex == value)
					return;
					
				OnColumnChanging(IndexInfoHistoryColumn.TypeIndex, this.entityData.TypeIndex);
				this.entityData.TypeIndex = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexInfoHistoryColumn.TypeIndex, this.entityData.TypeIndex);
				OnPropertyChanged("TypeIndex");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CloseIndex property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCloseIndexNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CloseIndex
		{
			get
			{
				return this.entityData.CloseIndex; 
			}
			
			set
			{
				if (this.entityData.CloseIndex == value)
					return;
					
				OnColumnChanging(IndexInfoHistoryColumn.CloseIndex, this.entityData.CloseIndex);
				this.entityData.CloseIndex = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexInfoHistoryColumn.CloseIndex, this.entityData.CloseIndex);
				OnPropertyChanged("CloseIndex");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TradeDate property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsTradeDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? TradeDate
		{
			get
			{
				return this.entityData.TradeDate; 
			}
			
			set
			{
				if (this.entityData.TradeDate == value)
					return;
					
				OnColumnChanging(IndexInfoHistoryColumn.TradeDate, this.entityData.TradeDate);
				this.entityData.TradeDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexInfoHistoryColumn.TradeDate, this.entityData.TradeDate);
				OnPropertyChanged("TradeDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("IndexCode", "Index Code", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Name", "Name", 200));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Description", "Description", 200));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public override string TableName
		{
			get { return "IndexInfoHistory"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "IndexId", "IndexCode", "Name", "Description", "TradingDate", "Time", "CurrentStatus", "TotalStock", "Advances", "Nochange", "Declines", "TotalQtty", "TotalValue", "PriorIndexVal", "ChgIndex", "PctIndex", "CurrentIndex", "HighestIndex", "LowestIndex", "SessionNo", "TypeIndex", "CloseIndex", "TradeDate"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as IndexInfoHistoryEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (IndexInfoHistory) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
        [ScriptIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<IndexInfoHistory>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as IndexInfoHistory);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed IndexInfoHistory Entity 
		///</summary>
		protected virtual IndexInfoHistory Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			IndexInfoHistory copy = new IndexInfoHistory();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.IndexId = this.IndexId;
				copy.IndexCode = this.IndexCode;
				copy.Name = this.Name;
				copy.Description = this.Description;
				copy.TradingDate = this.TradingDate;
				copy.Time = this.Time;
				copy.CurrentStatus = this.CurrentStatus;
				copy.TotalStock = this.TotalStock;
				copy.Advances = this.Advances;
				copy.Nochange = this.Nochange;
				copy.Declines = this.Declines;
				copy.TotalQtty = this.TotalQtty;
				copy.TotalValue = this.TotalValue;
				copy.PriorIndexVal = this.PriorIndexVal;
				copy.ChgIndex = this.ChgIndex;
				copy.PctIndex = this.PctIndex;
				copy.CurrentIndex = this.CurrentIndex;
				copy.HighestIndex = this.HighestIndex;
				copy.LowestIndex = this.LowestIndex;
				copy.SessionNo = this.SessionNo;
				copy.TypeIndex = this.TypeIndex;
				copy.CloseIndex = this.CloseIndex;
				copy.TradeDate = this.TradeDate;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed IndexInfoHistory Entity 
		///</summary>
		public virtual IndexInfoHistory Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed IndexInfoHistory Entity which is a deep copy of the current entity.
		///</summary>
		public virtual IndexInfoHistory DeepCopy()
		{
			return EntityHelper.Clone<IndexInfoHistory>(this as IndexInfoHistory);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as IndexInfoHistoryEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new IndexInfoHistoryEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as IndexInfoHistoryEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(IndexInfoHistoryColumn column)
		{
			switch(column)
			{
					case IndexInfoHistoryColumn.Id:
					return entityData.Id != _originalData.Id;
					case IndexInfoHistoryColumn.IndexId:
					return entityData.IndexId != _originalData.IndexId;
					case IndexInfoHistoryColumn.IndexCode:
					return entityData.IndexCode != _originalData.IndexCode;
					case IndexInfoHistoryColumn.Name:
					return entityData.Name != _originalData.Name;
					case IndexInfoHistoryColumn.Description:
					return entityData.Description != _originalData.Description;
					case IndexInfoHistoryColumn.TradingDate:
					return entityData.TradingDate != _originalData.TradingDate;
					case IndexInfoHistoryColumn.Time:
					return entityData.Time != _originalData.Time;
					case IndexInfoHistoryColumn.CurrentStatus:
					return entityData.CurrentStatus != _originalData.CurrentStatus;
					case IndexInfoHistoryColumn.TotalStock:
					return entityData.TotalStock != _originalData.TotalStock;
					case IndexInfoHistoryColumn.Advances:
					return entityData.Advances != _originalData.Advances;
					case IndexInfoHistoryColumn.Nochange:
					return entityData.Nochange != _originalData.Nochange;
					case IndexInfoHistoryColumn.Declines:
					return entityData.Declines != _originalData.Declines;
					case IndexInfoHistoryColumn.TotalQtty:
					return entityData.TotalQtty != _originalData.TotalQtty;
					case IndexInfoHistoryColumn.TotalValue:
					return entityData.TotalValue != _originalData.TotalValue;
					case IndexInfoHistoryColumn.PriorIndexVal:
					return entityData.PriorIndexVal != _originalData.PriorIndexVal;
					case IndexInfoHistoryColumn.ChgIndex:
					return entityData.ChgIndex != _originalData.ChgIndex;
					case IndexInfoHistoryColumn.PctIndex:
					return entityData.PctIndex != _originalData.PctIndex;
					case IndexInfoHistoryColumn.CurrentIndex:
					return entityData.CurrentIndex != _originalData.CurrentIndex;
					case IndexInfoHistoryColumn.HighestIndex:
					return entityData.HighestIndex != _originalData.HighestIndex;
					case IndexInfoHistoryColumn.LowestIndex:
					return entityData.LowestIndex != _originalData.LowestIndex;
					case IndexInfoHistoryColumn.SessionNo:
					return entityData.SessionNo != _originalData.SessionNo;
					case IndexInfoHistoryColumn.TypeIndex:
					return entityData.TypeIndex != _originalData.TypeIndex;
					case IndexInfoHistoryColumn.CloseIndex:
					return entityData.CloseIndex != _originalData.CloseIndex;
					case IndexInfoHistoryColumn.TradeDate:
					return entityData.TradeDate != _originalData.TradeDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< IndexInfoHistoryColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.IndexId != _originalData.IndexId;
			result = result || entityData.IndexCode != _originalData.IndexCode;
			result = result || entityData.Name != _originalData.Name;
			result = result || entityData.Description != _originalData.Description;
			result = result || entityData.TradingDate != _originalData.TradingDate;
			result = result || entityData.Time != _originalData.Time;
			result = result || entityData.CurrentStatus != _originalData.CurrentStatus;
			result = result || entityData.TotalStock != _originalData.TotalStock;
			result = result || entityData.Advances != _originalData.Advances;
			result = result || entityData.Nochange != _originalData.Nochange;
			result = result || entityData.Declines != _originalData.Declines;
			result = result || entityData.TotalQtty != _originalData.TotalQtty;
			result = result || entityData.TotalValue != _originalData.TotalValue;
			result = result || entityData.PriorIndexVal != _originalData.PriorIndexVal;
			result = result || entityData.ChgIndex != _originalData.ChgIndex;
			result = result || entityData.PctIndex != _originalData.PctIndex;
			result = result || entityData.CurrentIndex != _originalData.CurrentIndex;
			result = result || entityData.HighestIndex != _originalData.HighestIndex;
			result = result || entityData.LowestIndex != _originalData.LowestIndex;
			result = result || entityData.SessionNo != _originalData.SessionNo;
			result = result || entityData.TypeIndex != _originalData.TypeIndex;
			result = result || entityData.CloseIndex != _originalData.CloseIndex;
			result = result || entityData.TradeDate != _originalData.TradeDate;
			return result;
		}	
		
		///<summary>
		///  Returns a IndexInfoHistory Entity with the original data.
		///</summary>
		public IndexInfoHistory GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateIndexInfoHistory(
				_originalData.IndexId,
				_originalData.IndexCode,
				_originalData.Name,
				_originalData.Description,
				_originalData.TradingDate,
				_originalData.Time,
				_originalData.CurrentStatus,
				_originalData.TotalStock,
				_originalData.Advances,
				_originalData.Nochange,
				_originalData.Declines,
				_originalData.TotalQtty,
				_originalData.TotalValue,
				_originalData.PriorIndexVal,
				_originalData.ChgIndex,
				_originalData.PctIndex,
				_originalData.CurrentIndex,
				_originalData.HighestIndex,
				_originalData.LowestIndex,
				_originalData.SessionNo,
				_originalData.TypeIndex,
				_originalData.CloseIndex,
				_originalData.TradeDate
				);
				
			return (IndexInfoHistory)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="IndexInfoHistoryBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is IndexInfoHistoryBase)
				return ValueEquals(this, (IndexInfoHistoryBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="IndexInfoHistoryBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.IndexId == null) ? string.Empty : this.IndexId.ToString()).GetHashCode() ^ 
					((this.IndexCode == null) ? string.Empty : this.IndexCode.ToString()).GetHashCode() ^ 
					((this.Name == null) ? string.Empty : this.Name.ToString()).GetHashCode() ^ 
					((this.Description == null) ? string.Empty : this.Description.ToString()).GetHashCode() ^ 
					((this.TradingDate == null) ? string.Empty : this.TradingDate.ToString()).GetHashCode() ^ 
					((this.Time == null) ? string.Empty : this.Time.ToString()).GetHashCode() ^ 
					((this.CurrentStatus == null) ? string.Empty : this.CurrentStatus.ToString()).GetHashCode() ^ 
					((this.TotalStock == null) ? string.Empty : this.TotalStock.ToString()).GetHashCode() ^ 
					((this.Advances == null) ? string.Empty : this.Advances.ToString()).GetHashCode() ^ 
					((this.Nochange == null) ? string.Empty : this.Nochange.ToString()).GetHashCode() ^ 
					((this.Declines == null) ? string.Empty : this.Declines.ToString()).GetHashCode() ^ 
					((this.TotalQtty == null) ? string.Empty : this.TotalQtty.ToString()).GetHashCode() ^ 
					((this.TotalValue == null) ? string.Empty : this.TotalValue.ToString()).GetHashCode() ^ 
					((this.PriorIndexVal == null) ? string.Empty : this.PriorIndexVal.ToString()).GetHashCode() ^ 
					((this.ChgIndex == null) ? string.Empty : this.ChgIndex.ToString()).GetHashCode() ^ 
					((this.PctIndex == null) ? string.Empty : this.PctIndex.ToString()).GetHashCode() ^ 
					((this.CurrentIndex == null) ? string.Empty : this.CurrentIndex.ToString()).GetHashCode() ^ 
					((this.HighestIndex == null) ? string.Empty : this.HighestIndex.ToString()).GetHashCode() ^ 
					((this.LowestIndex == null) ? string.Empty : this.LowestIndex.ToString()).GetHashCode() ^ 
					((this.SessionNo == null) ? string.Empty : this.SessionNo.ToString()).GetHashCode() ^ 
					((this.TypeIndex == null) ? string.Empty : this.TypeIndex.ToString()).GetHashCode() ^ 
					((this.CloseIndex == null) ? string.Empty : this.CloseIndex.ToString()).GetHashCode() ^ 
					((this.TradeDate == null) ? string.Empty : this.TradeDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="IndexInfoHistoryBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(IndexInfoHistoryBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="IndexInfoHistoryBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="IndexInfoHistoryBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="IndexInfoHistoryBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(IndexInfoHistoryBase Object1, IndexInfoHistoryBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.IndexId != null && Object2.IndexId != null )
			{
				if (Object1.IndexId != Object2.IndexId)
					equal = false;
			}
			else if (Object1.IndexId == null ^ Object2.IndexId == null )
			{
				equal = false;
			}
			if ( Object1.IndexCode != null && Object2.IndexCode != null )
			{
				if (Object1.IndexCode != Object2.IndexCode)
					equal = false;
			}
			else if (Object1.IndexCode == null ^ Object2.IndexCode == null )
			{
				equal = false;
			}
			if ( Object1.Name != null && Object2.Name != null )
			{
				if (Object1.Name != Object2.Name)
					equal = false;
			}
			else if (Object1.Name == null ^ Object2.Name == null )
			{
				equal = false;
			}
			if ( Object1.Description != null && Object2.Description != null )
			{
				if (Object1.Description != Object2.Description)
					equal = false;
			}
			else if (Object1.Description == null ^ Object2.Description == null )
			{
				equal = false;
			}
			if ( Object1.TradingDate != null && Object2.TradingDate != null )
			{
				if (Object1.TradingDate != Object2.TradingDate)
					equal = false;
			}
			else if (Object1.TradingDate == null ^ Object2.TradingDate == null )
			{
				equal = false;
			}
			if ( Object1.Time != null && Object2.Time != null )
			{
				if (Object1.Time != Object2.Time)
					equal = false;
			}
			else if (Object1.Time == null ^ Object2.Time == null )
			{
				equal = false;
			}
			if ( Object1.CurrentStatus != null && Object2.CurrentStatus != null )
			{
				if (Object1.CurrentStatus != Object2.CurrentStatus)
					equal = false;
			}
			else if (Object1.CurrentStatus == null ^ Object2.CurrentStatus == null )
			{
				equal = false;
			}
			if ( Object1.TotalStock != null && Object2.TotalStock != null )
			{
				if (Object1.TotalStock != Object2.TotalStock)
					equal = false;
			}
			else if (Object1.TotalStock == null ^ Object2.TotalStock == null )
			{
				equal = false;
			}
			if ( Object1.Advances != null && Object2.Advances != null )
			{
				if (Object1.Advances != Object2.Advances)
					equal = false;
			}
			else if (Object1.Advances == null ^ Object2.Advances == null )
			{
				equal = false;
			}
			if ( Object1.Nochange != null && Object2.Nochange != null )
			{
				if (Object1.Nochange != Object2.Nochange)
					equal = false;
			}
			else if (Object1.Nochange == null ^ Object2.Nochange == null )
			{
				equal = false;
			}
			if ( Object1.Declines != null && Object2.Declines != null )
			{
				if (Object1.Declines != Object2.Declines)
					equal = false;
			}
			else if (Object1.Declines == null ^ Object2.Declines == null )
			{
				equal = false;
			}
			if ( Object1.TotalQtty != null && Object2.TotalQtty != null )
			{
				if (Object1.TotalQtty != Object2.TotalQtty)
					equal = false;
			}
			else if (Object1.TotalQtty == null ^ Object2.TotalQtty == null )
			{
				equal = false;
			}
			if ( Object1.TotalValue != null && Object2.TotalValue != null )
			{
				if (Object1.TotalValue != Object2.TotalValue)
					equal = false;
			}
			else if (Object1.TotalValue == null ^ Object2.TotalValue == null )
			{
				equal = false;
			}
			if ( Object1.PriorIndexVal != null && Object2.PriorIndexVal != null )
			{
				if (Object1.PriorIndexVal != Object2.PriorIndexVal)
					equal = false;
			}
			else if (Object1.PriorIndexVal == null ^ Object2.PriorIndexVal == null )
			{
				equal = false;
			}
			if ( Object1.ChgIndex != null && Object2.ChgIndex != null )
			{
				if (Object1.ChgIndex != Object2.ChgIndex)
					equal = false;
			}
			else if (Object1.ChgIndex == null ^ Object2.ChgIndex == null )
			{
				equal = false;
			}
			if ( Object1.PctIndex != null && Object2.PctIndex != null )
			{
				if (Object1.PctIndex != Object2.PctIndex)
					equal = false;
			}
			else if (Object1.PctIndex == null ^ Object2.PctIndex == null )
			{
				equal = false;
			}
			if ( Object1.CurrentIndex != null && Object2.CurrentIndex != null )
			{
				if (Object1.CurrentIndex != Object2.CurrentIndex)
					equal = false;
			}
			else if (Object1.CurrentIndex == null ^ Object2.CurrentIndex == null )
			{
				equal = false;
			}
			if ( Object1.HighestIndex != null && Object2.HighestIndex != null )
			{
				if (Object1.HighestIndex != Object2.HighestIndex)
					equal = false;
			}
			else if (Object1.HighestIndex == null ^ Object2.HighestIndex == null )
			{
				equal = false;
			}
			if ( Object1.LowestIndex != null && Object2.LowestIndex != null )
			{
				if (Object1.LowestIndex != Object2.LowestIndex)
					equal = false;
			}
			else if (Object1.LowestIndex == null ^ Object2.LowestIndex == null )
			{
				equal = false;
			}
			if ( Object1.SessionNo != null && Object2.SessionNo != null )
			{
				if (Object1.SessionNo != Object2.SessionNo)
					equal = false;
			}
			else if (Object1.SessionNo == null ^ Object2.SessionNo == null )
			{
				equal = false;
			}
			if ( Object1.TypeIndex != null && Object2.TypeIndex != null )
			{
				if (Object1.TypeIndex != Object2.TypeIndex)
					equal = false;
			}
			else if (Object1.TypeIndex == null ^ Object2.TypeIndex == null )
			{
				equal = false;
			}
			if ( Object1.CloseIndex != null && Object2.CloseIndex != null )
			{
				if (Object1.CloseIndex != Object2.CloseIndex)
					equal = false;
			}
			else if (Object1.CloseIndex == null ^ Object2.CloseIndex == null )
			{
				equal = false;
			}
			if ( Object1.TradeDate != null && Object2.TradeDate != null )
			{
				if (Object1.TradeDate != Object2.TradeDate)
					equal = false;
			}
			else if (Object1.TradeDate == null ^ Object2.TradeDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((IndexInfoHistoryBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static IndexInfoHistoryComparer GetComparer()
        {
            return new IndexInfoHistoryComparer();
        }
        */

        // Comparer delegates back to IndexInfoHistory
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(IndexInfoHistory rhs, IndexInfoHistoryColumn which)
        {
            switch (which)
            {
            	
            	
            	case IndexInfoHistoryColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case IndexInfoHistoryColumn.IndexId:
            		return this.IndexId.Value.CompareTo(rhs.IndexId.Value);
            		
            		                 
            	
            	
            	case IndexInfoHistoryColumn.IndexCode:
            		return this.IndexCode.CompareTo(rhs.IndexCode);
            		
            		                 
            	
            	
            	case IndexInfoHistoryColumn.Name:
            		return this.Name.CompareTo(rhs.Name);
            		
            		                 
            	
            	
            	case IndexInfoHistoryColumn.Description:
            		return this.Description.CompareTo(rhs.Description);
            		
            		                 
            	
            	
            	case IndexInfoHistoryColumn.TradingDate:
            		return this.TradingDate.Value.CompareTo(rhs.TradingDate.Value);
            		
            		                 
            	
            	
            	case IndexInfoHistoryColumn.Time:
            		return this.Time.Value.CompareTo(rhs.Time.Value);
            		
            		                 
            	
            	
            	case IndexInfoHistoryColumn.CurrentStatus:
            		return this.CurrentStatus.Value.CompareTo(rhs.CurrentStatus.Value);
            		
            		                 
            	
            	
            	case IndexInfoHistoryColumn.TotalStock:
            		return this.TotalStock.Value.CompareTo(rhs.TotalStock.Value);
            		
            		                 
            	
            	
            	case IndexInfoHistoryColumn.Advances:
            		return this.Advances.Value.CompareTo(rhs.Advances.Value);
            		
            		                 
            	
            	
            	case IndexInfoHistoryColumn.Nochange:
            		return this.Nochange.Value.CompareTo(rhs.Nochange.Value);
            		
            		                 
            	
            	
            	case IndexInfoHistoryColumn.Declines:
            		return this.Declines.Value.CompareTo(rhs.Declines.Value);
            		
            		                 
            	
            	
            	case IndexInfoHistoryColumn.TotalQtty:
            		return this.TotalQtty.Value.CompareTo(rhs.TotalQtty.Value);
            		
            		                 
            	
            	
            	case IndexInfoHistoryColumn.TotalValue:
            		return this.TotalValue.Value.CompareTo(rhs.TotalValue.Value);
            		
            		                 
            	
            	
            	case IndexInfoHistoryColumn.PriorIndexVal:
            		return this.PriorIndexVal.Value.CompareTo(rhs.PriorIndexVal.Value);
            		
            		                 
            	
            	
            	case IndexInfoHistoryColumn.ChgIndex:
            		return this.ChgIndex.Value.CompareTo(rhs.ChgIndex.Value);
            		
            		                 
            	
            	
            	case IndexInfoHistoryColumn.PctIndex:
            		return this.PctIndex.Value.CompareTo(rhs.PctIndex.Value);
            		
            		                 
            	
            	
            	case IndexInfoHistoryColumn.CurrentIndex:
            		return this.CurrentIndex.Value.CompareTo(rhs.CurrentIndex.Value);
            		
            		                 
            	
            	
            	case IndexInfoHistoryColumn.HighestIndex:
            		return this.HighestIndex.Value.CompareTo(rhs.HighestIndex.Value);
            		
            		                 
            	
            	
            	case IndexInfoHistoryColumn.LowestIndex:
            		return this.LowestIndex.Value.CompareTo(rhs.LowestIndex.Value);
            		
            		                 
            	
            	
            	case IndexInfoHistoryColumn.SessionNo:
            		return this.SessionNo.Value.CompareTo(rhs.SessionNo.Value);
            		
            		                 
            	
            	
            	case IndexInfoHistoryColumn.TypeIndex:
            		return this.TypeIndex.Value.CompareTo(rhs.TypeIndex.Value);
            		
            		                 
            	
            	
            	case IndexInfoHistoryColumn.CloseIndex:
            		return this.CloseIndex.Value.CompareTo(rhs.CloseIndex.Value);
            		
            		                 
            	
            	
            	case IndexInfoHistoryColumn.TradeDate:
            		return this.TradeDate.Value.CompareTo(rhs.TradeDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
        [ScriptIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<IndexInfoHistoryKey> Members
		
		// member variable for the EntityId property
		private IndexInfoHistoryKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
        [ScriptIgnore]
		public virtual IndexInfoHistoryKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new IndexInfoHistoryKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute(), ScriptIgnore()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
        [ScriptIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("IndexInfoHistory")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{25}{24}- Id: {0}{24}- IndexId: {1}{24}- IndexCode: {2}{24}- Name: {3}{24}- Description: {4}{24}- TradingDate: {5}{24}- Time: {6}{24}- CurrentStatus: {7}{24}- TotalStock: {8}{24}- Advances: {9}{24}- Nochange: {10}{24}- Declines: {11}{24}- TotalQtty: {12}{24}- TotalValue: {13}{24}- PriorIndexVal: {14}{24}- ChgIndex: {15}{24}- PctIndex: {16}{24}- CurrentIndex: {17}{24}- HighestIndex: {18}{24}- LowestIndex: {19}{24}- SessionNo: {20}{24}- TypeIndex: {21}{24}- CloseIndex: {22}{24}- TradeDate: {23}{24}{26}", 
				this.Id,
				(this.IndexId == null) ? string.Empty : this.IndexId.ToString(),
				(this.IndexCode == null) ? string.Empty : this.IndexCode.ToString(),
				(this.Name == null) ? string.Empty : this.Name.ToString(),
				(this.Description == null) ? string.Empty : this.Description.ToString(),
				(this.TradingDate == null) ? string.Empty : this.TradingDate.ToString(),
				(this.Time == null) ? string.Empty : this.Time.ToString(),
				(this.CurrentStatus == null) ? string.Empty : this.CurrentStatus.ToString(),
				(this.TotalStock == null) ? string.Empty : this.TotalStock.ToString(),
				(this.Advances == null) ? string.Empty : this.Advances.ToString(),
				(this.Nochange == null) ? string.Empty : this.Nochange.ToString(),
				(this.Declines == null) ? string.Empty : this.Declines.ToString(),
				(this.TotalQtty == null) ? string.Empty : this.TotalQtty.ToString(),
				(this.TotalValue == null) ? string.Empty : this.TotalValue.ToString(),
				(this.PriorIndexVal == null) ? string.Empty : this.PriorIndexVal.ToString(),
				(this.ChgIndex == null) ? string.Empty : this.ChgIndex.ToString(),
				(this.PctIndex == null) ? string.Empty : this.PctIndex.ToString(),
				(this.CurrentIndex == null) ? string.Empty : this.CurrentIndex.ToString(),
				(this.HighestIndex == null) ? string.Empty : this.HighestIndex.ToString(),
				(this.LowestIndex == null) ? string.Empty : this.LowestIndex.ToString(),
				(this.SessionNo == null) ? string.Empty : this.SessionNo.ToString(),
				(this.TypeIndex == null) ? string.Empty : this.TypeIndex.ToString(),
				(this.CloseIndex == null) ? string.Empty : this.CloseIndex.ToString(),
				(this.TradeDate == null) ? string.Empty : this.TradeDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'IndexInfoHistory' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class IndexInfoHistoryEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "IndexInfoHistory"</remarks>
		public System.Int64 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// IndexId : 
		/// </summary>
		public System.Int64?		  IndexId = null;
		
		/// <summary>
		/// IndexCode : 
		/// </summary>
		public System.String		  IndexCode = null;
		
		/// <summary>
		/// Name : 
		/// </summary>
		public System.String		  Name = null;
		
		/// <summary>
		/// Description : 
		/// </summary>
		public System.String		  Description = null;
		
		/// <summary>
		/// TradingDate : 
		/// </summary>
		public System.DateTime?		  TradingDate = null;
		
		/// <summary>
		/// Time : 
		/// </summary>
		public System.Int64?		  Time = null;
		
		/// <summary>
		/// CurrentStatus : 
		/// </summary>
		public System.Decimal?		  CurrentStatus = null;
		
		/// <summary>
		/// TotalStock : 
		/// </summary>
		public System.Decimal?		  TotalStock = null;
		
		/// <summary>
		/// Advances : 
		/// </summary>
		public System.Decimal?		  Advances = null;
		
		/// <summary>
		/// Nochange : 
		/// </summary>
		public System.Decimal?		  Nochange = null;
		
		/// <summary>
		/// Declines : 
		/// </summary>
		public System.Decimal?		  Declines = null;
		
		/// <summary>
		/// TotalQtty : 
		/// </summary>
		public System.Decimal?		  TotalQtty = null;
		
		/// <summary>
		/// TotalValue : 
		/// </summary>
		public System.Decimal?		  TotalValue = null;
		
		/// <summary>
		/// PriorIndexVal : 
		/// </summary>
		public System.Decimal?		  PriorIndexVal = null;
		
		/// <summary>
		/// ChgIndex : 
		/// </summary>
		public System.Decimal?		  ChgIndex = null;
		
		/// <summary>
		/// PctIndex : 
		/// </summary>
		public System.Decimal?		  PctIndex = null;
		
		/// <summary>
		/// CurrentIndex : 
		/// </summary>
		public System.Decimal?		  CurrentIndex = null;
		
		/// <summary>
		/// HighestIndex : 
		/// </summary>
		public System.Decimal?		  HighestIndex = null;
		
		/// <summary>
		/// LowestIndex : 
		/// </summary>
		public System.Decimal?		  LowestIndex = null;
		
		/// <summary>
		/// SessionNo : 
		/// </summary>
		public System.Decimal?		  SessionNo = null;
		
		/// <summary>
		/// TypeIndex : 
		/// </summary>
		public System.Decimal?		  TypeIndex = null;
		
		/// <summary>
		/// CloseIndex : 
		/// </summary>
		public System.Decimal?		  CloseIndex = null;
		
		/// <summary>
		/// TradeDate : 
		/// </summary>
		public System.DateTime?		  TradeDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			IndexInfoHistoryEntityData _tmp = new IndexInfoHistoryEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.IndexId = this.IndexId;
			_tmp.IndexCode = this.IndexCode;
			_tmp.Name = this.Name;
			_tmp.Description = this.Description;
			_tmp.TradingDate = this.TradingDate;
			_tmp.Time = this.Time;
			_tmp.CurrentStatus = this.CurrentStatus;
			_tmp.TotalStock = this.TotalStock;
			_tmp.Advances = this.Advances;
			_tmp.Nochange = this.Nochange;
			_tmp.Declines = this.Declines;
			_tmp.TotalQtty = this.TotalQtty;
			_tmp.TotalValue = this.TotalValue;
			_tmp.PriorIndexVal = this.PriorIndexVal;
			_tmp.ChgIndex = this.ChgIndex;
			_tmp.PctIndex = this.PctIndex;
			_tmp.CurrentIndex = this.CurrentIndex;
			_tmp.HighestIndex = this.HighestIndex;
			_tmp.LowestIndex = this.LowestIndex;
			_tmp.SessionNo = this.SessionNo;
			_tmp.TypeIndex = this.TypeIndex;
			_tmp.CloseIndex = this.CloseIndex;
			_tmp.TradeDate = this.TradeDate;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			IndexInfoHistoryEntityData _tmp = new IndexInfoHistoryEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.IndexId = this.IndexId;
			_tmp.IndexCode = this.IndexCode;
			_tmp.Name = this.Name;
			_tmp.Description = this.Description;
			_tmp.TradingDate = this.TradingDate;
			_tmp.Time = this.Time;
			_tmp.CurrentStatus = this.CurrentStatus;
			_tmp.TotalStock = this.TotalStock;
			_tmp.Advances = this.Advances;
			_tmp.Nochange = this.Nochange;
			_tmp.Declines = this.Declines;
			_tmp.TotalQtty = this.TotalQtty;
			_tmp.TotalValue = this.TotalValue;
			_tmp.PriorIndexVal = this.PriorIndexVal;
			_tmp.ChgIndex = this.ChgIndex;
			_tmp.PctIndex = this.PctIndex;
			_tmp.CurrentIndex = this.CurrentIndex;
			_tmp.HighestIndex = this.HighestIndex;
			_tmp.LowestIndex = this.LowestIndex;
			_tmp.SessionNo = this.SessionNo;
			_tmp.TypeIndex = this.TypeIndex;
			_tmp.CloseIndex = this.CloseIndex;
			_tmp.TradeDate = this.TradeDate;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IndexInfoHistoryColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(IndexInfoHistoryColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IndexInfoHistoryColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(IndexInfoHistoryColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IndexInfoHistoryColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(IndexInfoHistoryColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				IndexInfoHistoryEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new IndexInfoHistoryEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IndexInfoHistoryColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(IndexInfoHistoryColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				IndexInfoHistoryEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new IndexInfoHistoryEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region IndexInfoHistoryEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="IndexInfoHistory"/> object.
	/// </remarks>
	public class IndexInfoHistoryEventArgs : System.EventArgs
	{
		private IndexInfoHistoryColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the IndexInfoHistoryEventArgs class.
		///</summary>
		public IndexInfoHistoryEventArgs(IndexInfoHistoryColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the IndexInfoHistoryEventArgs class.
		///</summary>
		public IndexInfoHistoryEventArgs(IndexInfoHistoryColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The IndexInfoHistoryColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="IndexInfoHistoryColumn" />
		public IndexInfoHistoryColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all IndexInfoHistory related events.
	///</summary>
	public delegate void IndexInfoHistoryEventHandler(object sender, IndexInfoHistoryEventArgs e);
	
	#region IndexInfoHistoryComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class IndexInfoHistoryComparer : System.Collections.Generic.IComparer<IndexInfoHistory>
	{
		IndexInfoHistoryColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:IndexInfoHistoryComparer"/> class.
        /// </summary>
		public IndexInfoHistoryComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:IndexInfoHistoryComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public IndexInfoHistoryComparer(IndexInfoHistoryColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="IndexInfoHistory"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="IndexInfoHistory"/> to compare.</param>
        /// <param name="b">The second <c>IndexInfoHistory</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(IndexInfoHistory a, IndexInfoHistory b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(IndexInfoHistory entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(IndexInfoHistory a, IndexInfoHistory b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public IndexInfoHistoryColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region IndexInfoHistoryKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="IndexInfoHistory"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class IndexInfoHistoryKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the IndexInfoHistoryKey class.
		/// </summary>
		public IndexInfoHistoryKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the IndexInfoHistoryKey class.
		/// </summary>
		public IndexInfoHistoryKey(IndexInfoHistoryBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the IndexInfoHistoryKey class.
		/// </summary>
		public IndexInfoHistoryKey(System.Int64 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private IndexInfoHistoryBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public IndexInfoHistoryBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int64 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int64 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int64) EntityUtil.ChangeType(values["Id"], typeof(System.Int64)) : (long)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region IndexInfoHistoryColumn Enum
	
	/// <summary>
	/// Enumerate the IndexInfoHistory columns.
	/// </summary>
	[Serializable]
	public enum IndexInfoHistoryColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Int64), System.Data.DbType.Int64, true, true, false)]
		Id = 1,
		/// <summary>
		/// IndexId : 
		/// </summary>
		[EnumTextValue("IndexId")]
		[ColumnEnum("IndexId", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		IndexId = 2,
		/// <summary>
		/// IndexCode : 
		/// </summary>
		[EnumTextValue("IndexCode")]
		[ColumnEnum("IndexCode", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		IndexCode = 3,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		Name = 4,
		/// <summary>
		/// Description : 
		/// </summary>
		[EnumTextValue("Description")]
		[ColumnEnum("Description", typeof(System.String), System.Data.DbType.String, false, false, true, 200)]
		Description = 5,
		/// <summary>
		/// TradingDate : 
		/// </summary>
		[EnumTextValue("TradingDate")]
		[ColumnEnum("TradingDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		TradingDate = 6,
		/// <summary>
		/// Time : 
		/// </summary>
		[EnumTextValue("Time")]
		[ColumnEnum("Time", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Time = 7,
		/// <summary>
		/// CurrentStatus : 
		/// </summary>
		[EnumTextValue("CurrentStatus")]
		[ColumnEnum("CurrentStatus", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CurrentStatus = 8,
		/// <summary>
		/// TotalStock : 
		/// </summary>
		[EnumTextValue("TotalStock")]
		[ColumnEnum("TotalStock", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TotalStock = 9,
		/// <summary>
		/// Advances : 
		/// </summary>
		[EnumTextValue("Advances")]
		[ColumnEnum("Advances", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Advances = 10,
		/// <summary>
		/// Nochange : 
		/// </summary>
		[EnumTextValue("Nochange")]
		[ColumnEnum("Nochange", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Nochange = 11,
		/// <summary>
		/// Declines : 
		/// </summary>
		[EnumTextValue("Declines")]
		[ColumnEnum("Declines", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Declines = 12,
		/// <summary>
		/// TotalQtty : 
		/// </summary>
		[EnumTextValue("TotalQtty")]
		[ColumnEnum("TotalQtty", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TotalQtty = 13,
		/// <summary>
		/// TotalValue : 
		/// </summary>
		[EnumTextValue("TotalValue")]
		[ColumnEnum("TotalValue", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TotalValue = 14,
		/// <summary>
		/// PriorIndexVal : 
		/// </summary>
		[EnumTextValue("PriorIndexVal")]
		[ColumnEnum("PriorIndexVal", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		PriorIndexVal = 15,
		/// <summary>
		/// ChgIndex : 
		/// </summary>
		[EnumTextValue("ChgIndex")]
		[ColumnEnum("ChgIndex", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ChgIndex = 16,
		/// <summary>
		/// PctIndex : 
		/// </summary>
		[EnumTextValue("PctIndex")]
		[ColumnEnum("PctIndex", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		PctIndex = 17,
		/// <summary>
		/// CurrentIndex : 
		/// </summary>
		[EnumTextValue("CurrentIndex")]
		[ColumnEnum("CurrentIndex", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CurrentIndex = 18,
		/// <summary>
		/// HighestIndex : 
		/// </summary>
		[EnumTextValue("HighestIndex")]
		[ColumnEnum("HighestIndex", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		HighestIndex = 19,
		/// <summary>
		/// LowestIndex : 
		/// </summary>
		[EnumTextValue("LowestIndex")]
		[ColumnEnum("LowestIndex", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		LowestIndex = 20,
		/// <summary>
		/// SessionNo : 
		/// </summary>
		[EnumTextValue("SessionNo")]
		[ColumnEnum("SessionNo", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SessionNo = 21,
		/// <summary>
		/// TypeIndex : 
		/// </summary>
		[EnumTextValue("TypeIndex")]
		[ColumnEnum("TypeIndex", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TypeIndex = 22,
		/// <summary>
		/// CloseIndex : 
		/// </summary>
		[EnumTextValue("CloseIndex")]
		[ColumnEnum("CloseIndex", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CloseIndex = 23,
		/// <summary>
		/// TradeDate : 
		/// </summary>
		[EnumTextValue("TradeDate")]
		[ColumnEnum("TradeDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		TradeDate = 24
	}//End enum

	#endregion IndexInfoHistoryColumn Enum

} // end namespace
