using System;
using System.ComponentModel;

namespace RTStockData.Entities
{
	/// <summary>
	///		The data structure representation of the 'Matched' table via interface.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	public interface IMatched 
	{
		/// <summary>			
		/// ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Matched"</remarks>
		System.Int64 Id { get; set; }
				
		
		
		/// <summary>
		/// Code : 
		/// </summary>
		System.String  Code  { get; set; }
		
		/// <summary>
		/// TradedDate : 
		/// </summary>
		System.DateTime?  TradedDate  { get; set; }
		
		/// <summary>
		/// Ceiling : 
		/// </summary>
		System.Double?  Ceiling  { get; set; }
		
		/// <summary>
		/// Floor : 
		/// </summary>
		System.Double?  Floor  { get; set; }
		
		/// <summary>
		/// RefPrice : 
		/// </summary>
		System.Double?  RefPrice  { get; set; }
		
		/// <summary>
		/// ClosePrice : 
		/// </summary>
		System.Double?  ClosePrice  { get; set; }
		
		/// <summary>
		/// Change : 
		/// </summary>
		System.Double?  Change  { get; set; }
		
		/// <summary>
		/// Percent : 
		/// </summary>
		System.Double?  Percent  { get; set; }
		
		/// <summary>
		/// Volume : 
		/// </summary>
		System.Double?  Volume  { get; set; }
		
		/// <summary>
		/// PutThrough : 
		/// </summary>
		System.Double?  PutThrough  { get; set; }
		
		/// <summary>
		/// ForeignBuy : 
		/// </summary>
		System.Double?  ForeignBuy  { get; set; }
		
		/// <summary>
		/// ForeignSell : 
		/// </summary>
		System.Double?  ForeignSell  { get; set; }
		
		/// <summary>
		/// OpenPrice : 
		/// </summary>
		System.Double?  OpenPrice  { get; set; }
		
		/// <summary>
		/// HighestPrice : 
		/// </summary>
		System.Double?  HighestPrice  { get; set; }
		
		/// <summary>
		/// LowestPrice : 
		/// </summary>
		System.Double?  LowestPrice  { get; set; }
		
		/// <summary>
		/// Market_id : 
		/// </summary>
		System.String  MarketId  { get; set; }
		
		/// <summary>
		/// Value : 
		/// </summary>
		System.Double?  Value  { get; set; }
			
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		System.Object Clone();
		
		#region Data Properties

		#endregion Data Properties

	}
}


