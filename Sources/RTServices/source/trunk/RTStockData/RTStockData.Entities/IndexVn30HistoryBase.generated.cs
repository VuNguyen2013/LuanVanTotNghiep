
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file IndexVn30History.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using RTStockData.Entities.Validation;
#endregion

namespace RTStockData.Entities
{
    ///<summary>
    /// An object representation of the 'IndexVN30_History' table. [No description found the database]	
    ///</summary>
    [Serializable]
    [DataObject, CLSCompliant(true)]
    public abstract partial class IndexVn30HistoryBase : EntityBase, IIndexVn30History, IEntityId<IndexVn30HistoryKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
    {
        #region Variable Declarations

        /// <summary>
        ///  Hold the inner data of the entity.
        /// </summary>
        private IndexVn30HistoryEntityData entityData;

        /// <summary>
        /// 	Hold the original data of the entity, as loaded from the repository.
        /// </summary>
        private IndexVn30HistoryEntityData _originalData;

        /// <summary>
        /// 	Hold a backup of the inner data of the entity.
        /// </summary>
        private IndexVn30HistoryEntityData backupData;

        /// <summary>
        /// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
        /// </summary>
        private string entityTrackingKey;

        /// <summary>
        /// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
        /// </summary>
        /// <remark>Mostly used for databinding</remark>
        [NonSerialized]
        private TList<IndexVn30History> parentCollection;

        private bool inTxn = false;

        /// <summary>
        /// Occurs when a value is being changed for the specified column.
        /// </summary>
        [field: NonSerialized]
        public event IndexVn30HistoryEventHandler ColumnChanging;

        /// <summary>
        /// Occurs after a value has been changed for the specified column.
        /// </summary>
        [field: NonSerialized]
        public event IndexVn30HistoryEventHandler ColumnChanged;

        #endregion Variable Declarations

        #region Constructors
        ///<summary>
        /// Creates a new <see cref="IndexVn30HistoryBase"/> instance.
        ///</summary>
        public IndexVn30HistoryBase()
        {
            this.entityData = new IndexVn30HistoryEntityData();
            this.backupData = null;
        }

        ///<summary>
        /// Creates a new <see cref="IndexVn30HistoryBase"/> instance.
        ///</summary>
        ///<param name="_tradeDate"></param>
        ///<param name="_index"></param>
        ///<param name="_totalShares"></param>
        ///<param name="_totalValues"></param>
        ///<param name="_up"></param>
        ///<param name="_down"></param>
        ///<param name="_noChange"></param>
        ///<param name="_time"></param>
        ///<param name="_change"></param>
        ///<param name="_perChange"></param>
        public IndexVn30HistoryBase(System.DateTime? _tradeDate, System.Int64? _index,
            System.Int64? _totalShares, System.Int64? _totalValues, System.Int64? _up,
            System.Int64? _down, System.Int64? _noChange, System.Int64? _time, System.Int64? _change,
            System.Double? _perChange)
        {
            this.entityData = new IndexVn30HistoryEntityData();
            this.backupData = null;

            this.TradeDate = _tradeDate;
            this.Index = _index;
            this.TotalShares = _totalShares;
            this.TotalValues = _totalValues;
            this.Up = _up;
            this.Down = _down;
            this.NoChange = _noChange;
            this.Time = _time;
            this.Change = _change;
            this.PerChange = _perChange;
        }

        ///<summary>
        /// A simple factory method to create a new <see cref="IndexVn30History"/> instance.
        ///</summary>
        ///<param name="_tradeDate"></param>
        ///<param name="_index"></param>
        ///<param name="_totalShares"></param>
        ///<param name="_totalValues"></param>
        ///<param name="_up"></param>
        ///<param name="_down"></param>
        ///<param name="_noChange"></param>
        ///<param name="_time"></param>
        ///<param name="_change"></param>
        ///<param name="_perChange"></param>
        public static IndexVn30History CreateIndexVn30History(System.DateTime? _tradeDate, System.Int64? _index,
            System.Int64? _totalShares, System.Int64? _totalValues, System.Int64? _up,
            System.Int64? _down, System.Int64? _noChange, System.Int64? _time, System.Int64? _change,
            System.Double? _perChange)
        {
            IndexVn30History newIndexVn30History = new IndexVn30History();
            newIndexVn30History.TradeDate = _tradeDate;
            newIndexVn30History.Index = _index;
            newIndexVn30History.TotalShares = _totalShares;
            newIndexVn30History.TotalValues = _totalValues;
            newIndexVn30History.Up = _up;
            newIndexVn30History.Down = _down;
            newIndexVn30History.NoChange = _noChange;
            newIndexVn30History.Time = _time;
            newIndexVn30History.Change = _change;
            newIndexVn30History.PerChange = _perChange;
            return newIndexVn30History;
        }

        #endregion Constructors

        #region Properties

        #region Data Properties
        /// <summary>
        /// 	Gets or sets the Id property. 
        ///		
        /// </summary>
        /// <value>This type is bigint.</value>
        /// <remarks>
        /// This property can not be set to null. 
        /// </remarks>




        [ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
        [DataObjectField(true, true, false)]
        public virtual System.Int64 Id
        {
            get
            {
                return this.entityData.Id;
            }

            set
            {
                if (this.entityData.Id == value)
                    return;

                OnColumnChanging(IndexVn30HistoryColumn.Id, this.entityData.Id);
                this.entityData.Id = value;
                this.EntityId.Id = value;
                if (this.EntityState == EntityState.Unchanged)
                    this.EntityState = EntityState.Changed;
                OnColumnChanged(IndexVn30HistoryColumn.Id, this.entityData.Id);
                OnPropertyChanged("Id");
            }
        }

        /// <summary>
        /// 	Gets or sets the TradeDate property. 
        ///		
        /// </summary>
        /// <value>This type is datetime.</value>
        /// <remarks>
        /// This property can be set to null. 
        /// If this column is null, this property will return DateTime.MinValue. It is up to the developer
        /// to check the value of IsTradeDateNull() and perform business logic appropriately.
        /// </remarks>




        [DescriptionAttribute(@""), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
        [DataObjectField(false, false, true)]
        public virtual System.DateTime? TradeDate
        {
            get
            {
                return this.entityData.TradeDate;
            }

            set
            {
                if (this.entityData.TradeDate == value)
                    return;

                OnColumnChanging(IndexVn30HistoryColumn.TradeDate, this.entityData.TradeDate);
                this.entityData.TradeDate = value;
                if (this.EntityState == EntityState.Unchanged)
                    this.EntityState = EntityState.Changed;
                OnColumnChanged(IndexVn30HistoryColumn.TradeDate, this.entityData.TradeDate);
                OnPropertyChanged("TradeDate");
            }
        }

        /// <summary>
        /// 	Gets or sets the Index property. 
        ///		
        /// </summary>
        /// <value>This type is bigint.</value>
        /// <remarks>
        /// This property can be set to null. 
        /// If this column is null, this property will return (long)0. It is up to the developer
        /// to check the value of IsIndexNull() and perform business logic appropriately.
        /// </remarks>




        [DescriptionAttribute(@""), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
        [DataObjectField(false, false, true)]
        public virtual System.Int64? Index
        {
            get
            {
                return this.entityData.Index;
            }

            set
            {
                if (this.entityData.Index == value)
                    return;

                OnColumnChanging(IndexVn30HistoryColumn.Index, this.entityData.Index);
                this.entityData.Index = value;
                if (this.EntityState == EntityState.Unchanged)
                    this.EntityState = EntityState.Changed;
                OnColumnChanged(IndexVn30HistoryColumn.Index, this.entityData.Index);
                OnPropertyChanged("Index");
            }
        }

        /// <summary>
        /// 	Gets or sets the TotalShares property. 
        ///		
        /// </summary>
        /// <value>This type is bigint.</value>
        /// <remarks>
        /// This property can be set to null. 
        /// If this column is null, this property will return (long)0. It is up to the developer
        /// to check the value of IsTotalSharesNull() and perform business logic appropriately.
        /// </remarks>




        [DescriptionAttribute(@""), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
        [DataObjectField(false, false, true)]
        public virtual System.Int64? TotalShares
        {
            get
            {
                return this.entityData.TotalShares;
            }

            set
            {
                if (this.entityData.TotalShares == value)
                    return;

                OnColumnChanging(IndexVn30HistoryColumn.TotalShares, this.entityData.TotalShares);
                this.entityData.TotalShares = value;
                if (this.EntityState == EntityState.Unchanged)
                    this.EntityState = EntityState.Changed;
                OnColumnChanged(IndexVn30HistoryColumn.TotalShares, this.entityData.TotalShares);
                OnPropertyChanged("TotalShares");
            }
        }

        /// <summary>
        /// 	Gets or sets the TotalValues property. 
        ///		
        /// </summary>
        /// <value>This type is bigint.</value>
        /// <remarks>
        /// This property can be set to null. 
        /// If this column is null, this property will return (long)0. It is up to the developer
        /// to check the value of IsTotalValuesNull() and perform business logic appropriately.
        /// </remarks>




        [DescriptionAttribute(@""), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
        [DataObjectField(false, false, true)]
        public virtual System.Int64? TotalValues
        {
            get
            {
                return this.entityData.TotalValues;
            }

            set
            {
                if (this.entityData.TotalValues == value)
                    return;

                OnColumnChanging(IndexVn30HistoryColumn.TotalValues, this.entityData.TotalValues);
                this.entityData.TotalValues = value;
                if (this.EntityState == EntityState.Unchanged)
                    this.EntityState = EntityState.Changed;
                OnColumnChanged(IndexVn30HistoryColumn.TotalValues, this.entityData.TotalValues);
                OnPropertyChanged("TotalValues");
            }
        }

        /// <summary>
        /// 	Gets or sets the Up property. 
        ///		
        /// </summary>
        /// <value>This type is bigint.</value>
        /// <remarks>
        /// This property can be set to null. 
        /// If this column is null, this property will return (long)0. It is up to the developer
        /// to check the value of IsUpNull() and perform business logic appropriately.
        /// </remarks>




        [DescriptionAttribute(@""), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
        [DataObjectField(false, false, true)]
        public virtual System.Int64? Up
        {
            get
            {
                return this.entityData.Up;
            }

            set
            {
                if (this.entityData.Up == value)
                    return;

                OnColumnChanging(IndexVn30HistoryColumn.Up, this.entityData.Up);
                this.entityData.Up = value;
                if (this.EntityState == EntityState.Unchanged)
                    this.EntityState = EntityState.Changed;
                OnColumnChanged(IndexVn30HistoryColumn.Up, this.entityData.Up);
                OnPropertyChanged("Up");
            }
        }

        /// <summary>
        /// 	Gets or sets the Down property. 
        ///		
        /// </summary>
        /// <value>This type is bigint.</value>
        /// <remarks>
        /// This property can be set to null. 
        /// If this column is null, this property will return (long)0. It is up to the developer
        /// to check the value of IsDownNull() and perform business logic appropriately.
        /// </remarks>




        [DescriptionAttribute(@""), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
        [DataObjectField(false, false, true)]
        public virtual System.Int64? Down
        {
            get
            {
                return this.entityData.Down;
            }

            set
            {
                if (this.entityData.Down == value)
                    return;

                OnColumnChanging(IndexVn30HistoryColumn.Down, this.entityData.Down);
                this.entityData.Down = value;
                if (this.EntityState == EntityState.Unchanged)
                    this.EntityState = EntityState.Changed;
                OnColumnChanged(IndexVn30HistoryColumn.Down, this.entityData.Down);
                OnPropertyChanged("Down");
            }
        }

        /// <summary>
        /// 	Gets or sets the NoChange property. 
        ///		
        /// </summary>
        /// <value>This type is bigint.</value>
        /// <remarks>
        /// This property can be set to null. 
        /// If this column is null, this property will return (long)0. It is up to the developer
        /// to check the value of IsNoChangeNull() and perform business logic appropriately.
        /// </remarks>




        [DescriptionAttribute(@""), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
        [DataObjectField(false, false, true)]
        public virtual System.Int64? NoChange
        {
            get
            {
                return this.entityData.NoChange;
            }

            set
            {
                if (this.entityData.NoChange == value)
                    return;

                OnColumnChanging(IndexVn30HistoryColumn.NoChange, this.entityData.NoChange);
                this.entityData.NoChange = value;
                if (this.EntityState == EntityState.Unchanged)
                    this.EntityState = EntityState.Changed;
                OnColumnChanged(IndexVn30HistoryColumn.NoChange, this.entityData.NoChange);
                OnPropertyChanged("NoChange");
            }
        }

        /// <summary>
        /// 	Gets or sets the Time property. 
        ///		
        /// </summary>
        /// <value>This type is bigint.</value>
        /// <remarks>
        /// This property can be set to null. 
        /// If this column is null, this property will return (long)0. It is up to the developer
        /// to check the value of IsTimeNull() and perform business logic appropriately.
        /// </remarks>




        [DescriptionAttribute(@""), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
        [DataObjectField(false, false, true)]
        public virtual System.Int64? Time
        {
            get
            {
                return this.entityData.Time;
            }

            set
            {
                if (this.entityData.Time == value)
                    return;

                OnColumnChanging(IndexVn30HistoryColumn.Time, this.entityData.Time);
                this.entityData.Time = value;
                if (this.EntityState == EntityState.Unchanged)
                    this.EntityState = EntityState.Changed;
                OnColumnChanged(IndexVn30HistoryColumn.Time, this.entityData.Time);
                OnPropertyChanged("Time");
            }
        }

        /// <summary>
        /// 	Gets or sets the Change property. 
        ///		
        /// </summary>
        /// <value>This type is bigint.</value>
        /// <remarks>
        /// This property can be set to null. 
        /// If this column is null, this property will return (long)0. It is up to the developer
        /// to check the value of IsChangeNull() and perform business logic appropriately.
        /// </remarks>




        [DescriptionAttribute(@""), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
        [DataObjectField(false, false, true)]
        public virtual System.Int64? Change
        {
            get
            {
                return this.entityData.Change;
            }

            set
            {
                if (this.entityData.Change == value)
                    return;

                OnColumnChanging(IndexVn30HistoryColumn.Change, this.entityData.Change);
                this.entityData.Change = value;
                if (this.EntityState == EntityState.Unchanged)
                    this.EntityState = EntityState.Changed;
                OnColumnChanged(IndexVn30HistoryColumn.Change, this.entityData.Change);
                OnPropertyChanged("Change");
            }
        }

        /// <summary>
        /// 	Gets or sets the PerChange property. 
        ///		
        /// </summary>
        /// <value>This type is float.</value>
        /// <remarks>
        /// This property can be set to null. 
        /// If this column is null, this property will return 0.0f. It is up to the developer
        /// to check the value of IsPerChangeNull() and perform business logic appropriately.
        /// </remarks>




        [DescriptionAttribute(@""), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
        [DataObjectField(false, false, true)]
        public virtual System.Double? PerChange
        {
            get
            {
                return this.entityData.PerChange;
            }

            set
            {
                if (this.entityData.PerChange == value)
                    return;

                OnColumnChanging(IndexVn30HistoryColumn.PerChange, this.entityData.PerChange);
                this.entityData.PerChange = value;
                if (this.EntityState == EntityState.Unchanged)
                    this.EntityState = EntityState.Changed;
                OnColumnChanged(IndexVn30HistoryColumn.PerChange, this.entityData.PerChange);
                OnPropertyChanged("PerChange");
            }
        }

        #endregion Data Properties

        #region Source Foreign Key Property

        #endregion

        #region Children Collections
        #endregion Children Collections

        #endregion
        #region Validation

        /// <summary>
        /// Assigns validation rules to this object based on model definition.
        /// </summary>
        /// <remarks>This method overrides the base class to add schema related validation.</remarks>
        protected override void AddValidationRules()
        {
            //Validation rules based on database schema.
        }
        #endregion

        #region Table Meta Data
        /// <summary>
        ///		The name of the underlying database table.
        /// </summary>
        [BrowsableAttribute(false), XmlIgnoreAttribute()]
        public override string TableName
        {
            get { return "IndexVN30_History"; }
        }

        /// <summary>
        ///		The name of the underlying database table's columns.
        /// </summary>
        [BrowsableAttribute(false), XmlIgnoreAttribute()]
        public override string[] TableColumns
        {
            get
            {
                return new string[] { "ID", "TradeDate", "Index", "TotalShares", "TotalValues", "Up", "Down", "NoChange", "Time", "Change", "PerChange" };
            }
        }
        #endregion

        #region IEditableObject

        #region  CancelAddNew Event
        /// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public delegate void CancelAddNewEventHandler(object sender, EventArgs e);

        /// <summary>
        /// The CancelAddNew event.
        /// </summary>
        [field: NonSerialized]
        public event CancelAddNewEventHandler CancelAddNew;

        /// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {
            if (!SuppressEntityEvents)
            {
                CancelAddNewEventHandler handler = CancelAddNew;
                if (handler != null)
                {
                    handler(this, EventArgs.Empty);
                }
            }
        }
        #endregion

        /// <summary>
        /// Begins an edit on an object.
        /// </summary>
        void IEditableObject.BeginEdit()
        {
            //Console.WriteLine("Start BeginEdit");
            if (!inTxn)
            {
                this.backupData = this.entityData.Clone() as IndexVn30HistoryEntityData;
                inTxn = true;
                //Console.WriteLine("BeginEdit");
            }
            //Console.WriteLine("End BeginEdit");
        }

        /// <summary>
        /// Discards changes since the last <c>BeginEdit</c> call.
        /// </summary>
        void IEditableObject.CancelEdit()
        {
            //Console.WriteLine("Start CancelEdit");
            if (this.inTxn)
            {
                this.entityData = this.backupData;
                this.backupData = null;
                this.inTxn = false;

                if (this.bindingIsNew)
                //if (this.EntityState == EntityState.Added)
                {
                    if (this.parentCollection != null)
                        this.parentCollection.Remove((IndexVn30History)this);
                }
            }
            //Console.WriteLine("End CancelEdit");
        }

        /// <summary>
        /// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
        /// </summary>
        void IEditableObject.EndEdit()
        {
            //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
            if (this.inTxn)
            {
                this.backupData = null;
                if (this.IsDirty)
                {
                    if (this.bindingIsNew)
                    {
                        this.EntityState = EntityState.Added;
                        this.bindingIsNew = false;
                    }
                    else
                        if (this.EntityState == EntityState.Unchanged)
                            this.EntityState = EntityState.Changed;
                }

                this.bindingIsNew = false;
                this.inTxn = false;
            }
            //Console.WriteLine("End EndEdit");
        }

        /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
        [XmlIgnore]
        [Browsable(false)]
        public override object ParentCollection
        {
            get
            {
                return this.parentCollection;
            }
            set
            {
                this.parentCollection = value as TList<IndexVn30History>;
            }
        }

        /// <summary>
        /// Called when the entity is changed.
        /// </summary>
        private void OnEntityChanged()
        {
            if (!SuppressEntityEvents && !inTxn && this.parentCollection != null)
            {
                this.parentCollection.EntityChanged(this as IndexVn30History);
            }
        }


        #endregion

        #region ICloneable Members
        ///<summary>
        ///  Returns a Typed IndexVn30History Entity 
        ///</summary>
        protected virtual IndexVn30History Copy(IDictionary existingCopies)
        {
            if (existingCopies == null)
            {
                // This is the root of the tree to be copied!
                existingCopies = new Hashtable();
            }

            //shallow copy entity
            IndexVn30History copy = new IndexVn30History();
            existingCopies.Add(this, copy);
            copy.SuppressEntityEvents = true;
            copy.Id = this.Id;
            copy.TradeDate = this.TradeDate;
            copy.Index = this.Index;
            copy.TotalShares = this.TotalShares;
            copy.TotalValues = this.TotalValues;
            copy.Up = this.Up;
            copy.Down = this.Down;
            copy.NoChange = this.NoChange;
            copy.Time = this.Time;
            copy.Change = this.Change;
            copy.PerChange = this.PerChange;


            copy.EntityState = this.EntityState;
            copy.SuppressEntityEvents = false;
            return copy;
        }



        ///<summary>
        ///  Returns a Typed IndexVn30History Entity 
        ///</summary>
        public virtual IndexVn30History Copy()
        {
            return this.Copy(null);
        }

        ///<summary>
        /// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
        ///</summary>
        public object Clone()
        {
            return this.Copy(null);
        }

        ///<summary>
        /// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
        ///</summary>
        public object Clone(IDictionary existingCopies)
        {
            return this.Copy(existingCopies);
        }

        ///<summary>
        /// Returns a deep copy of the child collection object passed in.
        ///</summary>
        public static object MakeCopyOf(object x)
        {
            if (x == null)
                return null;

            if (x is ICloneable)
            {
                // Return a deep copy of the object
                return ((ICloneable)x).Clone();
            }
            else
                throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
        }

        ///<summary>
        /// Returns a deep copy of the child collection object passed in.
        ///</summary>
        public static object MakeCopyOf(object x, IDictionary existingCopies)
        {
            if (x == null)
                return null;

            if (x is ICloneableEx)
            {
                // Return a deep copy of the object
                return ((ICloneableEx)x).Clone(existingCopies);
            }
            else if (x is ICloneable)
            {
                // Return a deep copy of the object
                return ((ICloneable)x).Clone();
            }
            else
                throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
        }


        ///<summary>
        ///  Returns a Typed IndexVn30History Entity which is a deep copy of the current entity.
        ///</summary>
        public virtual IndexVn30History DeepCopy()
        {
            return EntityHelper.Clone<IndexVn30History>(this as IndexVn30History);
        }
        #endregion

        #region Methods

        ///<summary>
        /// Revert all changes and restore original values.
        ///</summary>
        public override void CancelChanges()
        {
            IEditableObject obj = (IEditableObject)this;
            obj.CancelEdit();

            this.entityData = null;
            if (this._originalData != null)
            {
                this.entityData = this._originalData.Clone() as IndexVn30HistoryEntityData;
            }
            else
            {
                //Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
                this.entityData = new IndexVn30HistoryEntityData();
            }
        }

        /// <summary>
        /// Accepts the changes made to this object.
        /// </summary>
        /// <remarks>
        /// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
        /// </remarks>
        public override void AcceptChanges()
        {
            base.AcceptChanges();

            // we keep of the original version of the data
            this._originalData = null;
            this._originalData = this.entityData.Clone() as IndexVn30HistoryEntityData;
        }

        #region Comparision with original data

        /// <summary>
        /// Determines whether the property value has changed from the original data.
        /// </summary>
        /// <param name="column">The column.</param>
        /// <returns>
        /// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
        /// </returns>
        public bool IsPropertyChanged(IndexVn30HistoryColumn column)
        {
            switch (column)
            {
                case IndexVn30HistoryColumn.Id:
                    return entityData.Id != _originalData.Id;
                case IndexVn30HistoryColumn.TradeDate:
                    return entityData.TradeDate != _originalData.TradeDate;
                case IndexVn30HistoryColumn.Index:
                    return entityData.Index != _originalData.Index;
                case IndexVn30HistoryColumn.TotalShares:
                    return entityData.TotalShares != _originalData.TotalShares;
                case IndexVn30HistoryColumn.TotalValues:
                    return entityData.TotalValues != _originalData.TotalValues;
                case IndexVn30HistoryColumn.Up:
                    return entityData.Up != _originalData.Up;
                case IndexVn30HistoryColumn.Down:
                    return entityData.Down != _originalData.Down;
                case IndexVn30HistoryColumn.NoChange:
                    return entityData.NoChange != _originalData.NoChange;
                case IndexVn30HistoryColumn.Time:
                    return entityData.Time != _originalData.Time;
                case IndexVn30HistoryColumn.Change:
                    return entityData.Change != _originalData.Change;
                case IndexVn30HistoryColumn.PerChange:
                    return entityData.PerChange != _originalData.PerChange;

                default:
                    return false;
            }
        }

        /// <summary>
        /// Determines whether the property value has changed from the original data.
        /// </summary>
        /// <param name="columnName">The column name.</param>
        /// <returns>
        /// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
        /// </returns>
        public override bool IsPropertyChanged(string columnName)
        {
            return IsPropertyChanged(EntityHelper.GetEnumValue<IndexVn30HistoryColumn>(columnName));
        }

        /// <summary>
        /// Determines whether the data has changed from original.
        /// </summary>
        /// <returns>
        /// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
        /// </returns>
        public bool HasDataChanged()
        {
            bool result = false;
            result = result || entityData.Id != _originalData.Id;
            result = result || entityData.TradeDate != _originalData.TradeDate;
            result = result || entityData.Index != _originalData.Index;
            result = result || entityData.TotalShares != _originalData.TotalShares;
            result = result || entityData.TotalValues != _originalData.TotalValues;
            result = result || entityData.Up != _originalData.Up;
            result = result || entityData.Down != _originalData.Down;
            result = result || entityData.NoChange != _originalData.NoChange;
            result = result || entityData.Time != _originalData.Time;
            result = result || entityData.Change != _originalData.Change;
            result = result || entityData.PerChange != _originalData.PerChange;
            return result;
        }

        ///<summary>
        ///  Returns a IndexVn30History Entity with the original data.
        ///</summary>
        public IndexVn30History GetOriginalEntity()
        {
            if (_originalData != null)
                return CreateIndexVn30History(
                _originalData.TradeDate,
                _originalData.Index,
                _originalData.TotalShares,
                _originalData.TotalValues,
                _originalData.Up,
                _originalData.Down,
                _originalData.NoChange,
                _originalData.Time,
                _originalData.Change,
                _originalData.PerChange
                );

            return (IndexVn30History)this.Clone();
        }
        #endregion

        #region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="IndexVn30HistoryBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
            // Cast exception if Object1 is null or DbNull
            if (Object1 != null && Object1 != DBNull.Value && Object1 is IndexVn30HistoryBase)
                return ValueEquals(this, (IndexVn30HistoryBase)Object1);
            else
                return false;
        }

        /// <summary>
        /// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="IndexVn30HistoryBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
            return this.Id.GetHashCode() ^
                    ((this.TradeDate == null) ? string.Empty : this.TradeDate.ToString()).GetHashCode() ^
                    ((this.Index == null) ? string.Empty : this.Index.ToString()).GetHashCode() ^
                    ((this.TotalShares == null) ? string.Empty : this.TotalShares.ToString()).GetHashCode() ^
                    ((this.TotalValues == null) ? string.Empty : this.TotalValues.ToString()).GetHashCode() ^
                    ((this.Up == null) ? string.Empty : this.Up.ToString()).GetHashCode() ^
                    ((this.Down == null) ? string.Empty : this.Down.ToString()).GetHashCode() ^
                    ((this.NoChange == null) ? string.Empty : this.NoChange.ToString()).GetHashCode() ^
                    ((this.Time == null) ? string.Empty : this.Time.ToString()).GetHashCode() ^
                    ((this.Change == null) ? string.Empty : this.Change.ToString()).GetHashCode() ^
                    ((this.PerChange == null) ? string.Empty : this.PerChange.ToString()).GetHashCode();
        }

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="toObject">An object to compare to this instance.</param>
        ///<returns>true if toObject is a <see cref="IndexVn30HistoryBase"/> and has the same value as this instance; otherwise, false.</returns>
        public virtual bool Equals(IndexVn30HistoryBase toObject)
        {
            if (toObject == null)
                return false;
            return ValueEquals(this, toObject);
        }
        #endregion

        ///<summary>
        /// Determines whether the specified <see cref="IndexVn30HistoryBase"/> instances are considered equal using value semantics.
        ///</summary>
        ///<param name="Object1">The first <see cref="IndexVn30HistoryBase"/> to compare.</param>
        ///<param name="Object2">The second <see cref="IndexVn30HistoryBase"/> to compare. </param>
        ///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public static bool ValueEquals(IndexVn30HistoryBase Object1, IndexVn30HistoryBase Object2)
        {
            // both are null
            if (Object1 == null && Object2 == null)
                return true;

            // one or the other is null, but not both
            if (Object1 == null ^ Object2 == null)
                return false;

            bool equal = true;
            if (Object1.Id != Object2.Id)
                equal = false;
            if (Object1.TradeDate != null && Object2.TradeDate != null)
            {
                if (Object1.TradeDate != Object2.TradeDate)
                    equal = false;
            }
            else if (Object1.TradeDate == null ^ Object2.TradeDate == null)
            {
                equal = false;
            }
            if (Object1.Index != null && Object2.Index != null)
            {
                if (Object1.Index != Object2.Index)
                    equal = false;
            }
            else if (Object1.Index == null ^ Object2.Index == null)
            {
                equal = false;
            }
            if (Object1.TotalShares != null && Object2.TotalShares != null)
            {
                if (Object1.TotalShares != Object2.TotalShares)
                    equal = false;
            }
            else if (Object1.TotalShares == null ^ Object2.TotalShares == null)
            {
                equal = false;
            }
            if (Object1.TotalValues != null && Object2.TotalValues != null)
            {
                if (Object1.TotalValues != Object2.TotalValues)
                    equal = false;
            }
            else if (Object1.TotalValues == null ^ Object2.TotalValues == null)
            {
                equal = false;
            }
            if (Object1.Up != null && Object2.Up != null)
            {
                if (Object1.Up != Object2.Up)
                    equal = false;
            }
            else if (Object1.Up == null ^ Object2.Up == null)
            {
                equal = false;
            }
            if (Object1.Down != null && Object2.Down != null)
            {
                if (Object1.Down != Object2.Down)
                    equal = false;
            }
            else if (Object1.Down == null ^ Object2.Down == null)
            {
                equal = false;
            }
            if (Object1.NoChange != null && Object2.NoChange != null)
            {
                if (Object1.NoChange != Object2.NoChange)
                    equal = false;
            }
            else if (Object1.NoChange == null ^ Object2.NoChange == null)
            {
                equal = false;
            }
            if (Object1.Time != null && Object2.Time != null)
            {
                if (Object1.Time != Object2.Time)
                    equal = false;
            }
            else if (Object1.Time == null ^ Object2.Time == null)
            {
                equal = false;
            }
            if (Object1.Change != null && Object2.Change != null)
            {
                if (Object1.Change != Object2.Change)
                    equal = false;
            }
            else if (Object1.Change == null ^ Object2.Change == null)
            {
                equal = false;
            }
            if (Object1.PerChange != null && Object2.PerChange != null)
            {
                if (Object1.PerChange != Object2.PerChange)
                    equal = false;
            }
            else if (Object1.PerChange == null ^ Object2.PerChange == null)
            {
                equal = false;
            }

            return equal;
        }

        #endregion

        #region IComparable Members
        ///<summary>
        /// Compares this instance to a specified object and returns an indication of their relative values.
        ///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
        ///</summary>
        ///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
        public virtual int CompareTo(object obj)
        {
            throw new NotImplementedException();
            //return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((IndexVn30HistoryBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
        }

        /*
        // static method to get a Comparer object
        public static IndexVn30HistoryComparer GetComparer()
        {
            return new IndexVn30HistoryComparer();
        }
        */

        // Comparer delegates back to IndexVn30History
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

        /*
                // Special implementation to be called by custom comparer
                public int CompareTo(IndexVn30History rhs, IndexVn30HistoryColumn which)
                {
                    switch (which)
                    {
            	
            	
                        case IndexVn30HistoryColumn.Id:
                            return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
                        case IndexVn30HistoryColumn.TradeDate:
                            return this.TradeDate.Value.CompareTo(rhs.TradeDate.Value);
            		
            		                 
            	
            	
                        case IndexVn30HistoryColumn.Index:
                            return this.Index.Value.CompareTo(rhs.Index.Value);
            		
            		                 
            	
            	
                        case IndexVn30HistoryColumn.TotalShares:
                            return this.TotalShares.Value.CompareTo(rhs.TotalShares.Value);
            		
            		                 
            	
            	
                        case IndexVn30HistoryColumn.TotalValues:
                            return this.TotalValues.Value.CompareTo(rhs.TotalValues.Value);
            		
            		                 
            	
            	
                        case IndexVn30HistoryColumn.Up:
                            return this.Up.Value.CompareTo(rhs.Up.Value);
            		
            		                 
            	
            	
                        case IndexVn30HistoryColumn.Down:
                            return this.Down.Value.CompareTo(rhs.Down.Value);
            		
            		                 
            	
            	
                        case IndexVn30HistoryColumn.NoChange:
                            return this.NoChange.Value.CompareTo(rhs.NoChange.Value);
            		
            		                 
            	
            	
                        case IndexVn30HistoryColumn.Time:
                            return this.Time.Value.CompareTo(rhs.Time.Value);
            		
            		                 
            	
            	
                        case IndexVn30HistoryColumn.Change:
                            return this.Change.Value.CompareTo(rhs.Change.Value);
            		
            		                 
            	
            	
                        case IndexVn30HistoryColumn.PerChange:
                            return this.PerChange.Value.CompareTo(rhs.PerChange.Value);
            		
            		                 
                    }
                    return 0;
                }
                */

        #endregion

        #region IComponent Members

        private ISite _site = null;

        /// <summary>
        /// Gets or Sets the site where this data is located.
        /// </summary>
        [XmlIgnore]
        [SoapIgnore]
        [Browsable(false)]
        public ISite Site
        {
            get { return this._site; }
            set { this._site = value; }
        }

        #endregion

        #region IDisposable Members

        /// <summary>
        /// Notify those that care when we dispose.
        /// </summary>
        [field: NonSerialized]
        public event System.EventHandler Disposed;

        /// <summary>
        /// Clean up. Nothing here though.
        /// </summary>
        public virtual void Dispose()
        {
            this.parentCollection = null;
            this.Dispose(true);
            GC.SuppressFinalize(this);
        }

        /// <summary>
        /// Clean up.
        /// </summary>
        protected virtual void Dispose(bool disposing)
        {
            if (disposing)
            {
                EventHandler handler = Disposed;
                if (handler != null)
                    handler(this, EventArgs.Empty);
            }
        }

        #endregion

        #region IEntityKey<IndexVn30HistoryKey> Members

        // member variable for the EntityId property
        private IndexVn30HistoryKey _entityId;

        /// <summary>
        /// Gets or sets the EntityId property.
        /// </summary>
        [XmlIgnore]
        public virtual IndexVn30HistoryKey EntityId
        {
            get
            {
                if (_entityId == null)
                {
                    _entityId = new IndexVn30HistoryKey(this);
                }

                return _entityId;
            }
            set
            {
                if (value != null)
                {
                    value.Entity = this;
                }

                _entityId = value;
            }
        }

        #endregion

        #region EntityState
        /// <summary>
        ///		Indicates state of object
        /// </summary>
        /// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
        [BrowsableAttribute(false), XmlIgnoreAttribute()]
        public override EntityState EntityState
        {
            get { return entityData.EntityState; }
            set { entityData.EntityState = value; }
        }
        #endregion

        #region EntityTrackingKey
        ///<summary>
        /// Provides the tracking key for the <see cref="EntityLocator"/>
        ///</summary>
        [XmlIgnore]
        public override string EntityTrackingKey
        {
            get
            {
                if (entityTrackingKey == null)
                    entityTrackingKey = new System.Text.StringBuilder("IndexVn30History")
                    .Append("|").Append(this.Id.ToString()).ToString();
                return entityTrackingKey;
            }
            set
            {
                if (value != null)
                    entityTrackingKey = value;
            }
        }
        #endregion

        #region ToString Method

        ///<summary>
        /// Returns a String that represents the current object.
        ///</summary>
        public override string ToString()
        {
            return string.Format(System.Globalization.CultureInfo.InvariantCulture,
                "{12}{11}- Id: {0}{11}- TradeDate: {1}{11}- Index: {2}{11}- TotalShares: {3}{11}- TotalValues: {4}{11}- Up: {5}{11}- Down: {6}{11}- NoChange: {7}{11}- Time: {8}{11}- Change: {9}{11}- PerChange: {10}{11}{13}",
                this.Id,
                (this.TradeDate == null) ? string.Empty : this.TradeDate.ToString(),
                (this.Index == null) ? string.Empty : this.Index.ToString(),
                (this.TotalShares == null) ? string.Empty : this.TotalShares.ToString(),
                (this.TotalValues == null) ? string.Empty : this.TotalValues.ToString(),
                (this.Up == null) ? string.Empty : this.Up.ToString(),
                (this.Down == null) ? string.Empty : this.Down.ToString(),
                (this.NoChange == null) ? string.Empty : this.NoChange.ToString(),
                (this.Time == null) ? string.Empty : this.Time.ToString(),
                (this.Change == null) ? string.Empty : this.Change.ToString(),
                (this.PerChange == null) ? string.Empty : this.PerChange.ToString(),
                System.Environment.NewLine,
                this.GetType(),
                this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n", this.Error));
        }

        #endregion ToString Method

        #region Inner data class

        /// <summary>
        ///		The data structure representation of the 'IndexVN30_History' table.
        /// </summary>
        /// <remarks>
        /// 	This struct is generated by a tool and should never be modified.
        /// </remarks>
        [EditorBrowsable(EditorBrowsableState.Never)]
        [Serializable]
        internal protected class IndexVn30HistoryEntityData : ICloneable, ICloneableEx
        {
            #region Variable Declarations
            private EntityState currentEntityState = EntityState.Added;

            #region Primary key(s)
            /// <summary>			
            /// ID : 
            /// </summary>
            /// <remarks>Member of the primary key of the underlying table "IndexVN30_History"</remarks>
            public System.Int64 Id;

            #endregion

            #region Non Primary key(s)


            /// <summary>
            /// TradeDate : 
            /// </summary>
            public System.DateTime? TradeDate = null;

            /// <summary>
            /// Index : 
            /// </summary>
            public System.Int64? Index = null;

            /// <summary>
            /// TotalShares : 
            /// </summary>
            public System.Int64? TotalShares = null;

            /// <summary>
            /// TotalValues : 
            /// </summary>
            public System.Int64? TotalValues = null;

            /// <summary>
            /// Up : 
            /// </summary>
            public System.Int64? Up = null;

            /// <summary>
            /// Down : 
            /// </summary>
            public System.Int64? Down = null;

            /// <summary>
            /// NoChange : 
            /// </summary>
            public System.Int64? NoChange = null;

            /// <summary>
            /// Time : 
            /// </summary>
            public System.Int64? Time = null;

            /// <summary>
            /// Change : 
            /// </summary>
            public System.Int64? Change = null;

            /// <summary>
            /// PerChange : 
            /// </summary>
            public System.Double? PerChange = null;
            #endregion

            #region Source Foreign Key Property

            #endregion
            #endregion Variable Declarations

            #region Data Properties

            #endregion Data Properties

            #region Clone Method

            /// <summary>
            /// Creates a new object that is a copy of the current instance.
            /// </summary>
            /// <returns>A new object that is a copy of this instance.</returns>
            public Object Clone()
            {
                IndexVn30HistoryEntityData _tmp = new IndexVn30HistoryEntityData();

                _tmp.Id = this.Id;

                _tmp.TradeDate = this.TradeDate;
                _tmp.Index = this.Index;
                _tmp.TotalShares = this.TotalShares;
                _tmp.TotalValues = this.TotalValues;
                _tmp.Up = this.Up;
                _tmp.Down = this.Down;
                _tmp.NoChange = this.NoChange;
                _tmp.Time = this.Time;
                _tmp.Change = this.Change;
                _tmp.PerChange = this.PerChange;

                #region Source Parent Composite Entities
                #endregion

                #region Child Collections
                #endregion Child Collections

                //EntityState
                _tmp.EntityState = this.EntityState;

                return _tmp;
            }

            /// <summary>
            /// Creates a new object that is a copy of the current instance.
            /// </summary>
            /// <returns>A new object that is a copy of this instance.</returns>
            public object Clone(IDictionary existingCopies)
            {
                if (existingCopies == null)
                    existingCopies = new Hashtable();

                IndexVn30HistoryEntityData _tmp = new IndexVn30HistoryEntityData();

                _tmp.Id = this.Id;

                _tmp.TradeDate = this.TradeDate;
                _tmp.Index = this.Index;
                _tmp.TotalShares = this.TotalShares;
                _tmp.TotalValues = this.TotalValues;
                _tmp.Up = this.Up;
                _tmp.Down = this.Down;
                _tmp.NoChange = this.NoChange;
                _tmp.Time = this.Time;
                _tmp.Change = this.Change;
                _tmp.PerChange = this.PerChange;

                #region Source Parent Composite Entities
                #endregion

                #region Child Collections
                #endregion Child Collections

                //EntityState
                _tmp.EntityState = this.EntityState;

                return _tmp;
            }

            #endregion Clone Method

            /// <summary>
            ///		Indicates state of object
            /// </summary>
            /// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
            [BrowsableAttribute(false), XmlIgnoreAttribute()]
            public EntityState EntityState
            {
                get { return currentEntityState; }
                set { currentEntityState = value; }
            }

        }//End struct











        #endregion



        #region Events trigger
        /// <summary>
        /// Raises the <see cref="ColumnChanging" /> event.
        /// </summary>
        /// <param name="column">The <see cref="IndexVn30HistoryColumn"/> which has raised the event.</param>
        public virtual void OnColumnChanging(IndexVn30HistoryColumn column)
        {
            OnColumnChanging(column, null);
            return;
        }

        /// <summary>
        /// Raises the <see cref="ColumnChanged" /> event.
        /// </summary>
        /// <param name="column">The <see cref="IndexVn30HistoryColumn"/> which has raised the event.</param>
        public virtual void OnColumnChanged(IndexVn30HistoryColumn column)
        {
            OnColumnChanged(column, null);
            return;
        }


        /// <summary>
        /// Raises the <see cref="ColumnChanging" /> event.
        /// </summary>
        /// <param name="column">The <see cref="IndexVn30HistoryColumn"/> which has raised the event.</param>
        /// <param name="value">The changed value.</param>
        public virtual void OnColumnChanging(IndexVn30HistoryColumn column, object value)
        {
            if (IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);

            if (!SuppressEntityEvents)
            {
                IndexVn30HistoryEventHandler handler = ColumnChanging;
                if (handler != null)
                {
                    handler(this, new IndexVn30HistoryEventArgs(column, value));
                }
            }
        }

        /// <summary>
        /// Raises the <see cref="ColumnChanged" /> event.
        /// </summary>
        /// <param name="column">The <see cref="IndexVn30HistoryColumn"/> which has raised the event.</param>
        /// <param name="value">The changed value.</param>
        public virtual void OnColumnChanged(IndexVn30HistoryColumn column, object value)
        {
            if (!SuppressEntityEvents)
            {
                IndexVn30HistoryEventHandler handler = ColumnChanged;
                if (handler != null)
                {
                    handler(this, new IndexVn30HistoryEventArgs(column, value));
                }

                // warn the parent list that i have changed
                OnEntityChanged();
            }
        }
        #endregion

    } // End Class


    #region IndexVn30HistoryEventArgs class
    /// <summary>
    /// Provides data for the ColumnChanging and ColumnChanged events.
    /// </summary>
    /// <remarks>
    /// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
    /// of a property of a <see cref="IndexVn30History"/> object.
    /// </remarks>
    public class IndexVn30HistoryEventArgs : System.EventArgs
    {
        private IndexVn30HistoryColumn column;
        private object value;

        ///<summary>
        /// Initalizes a new Instance of the IndexVn30HistoryEventArgs class.
        ///</summary>
        public IndexVn30HistoryEventArgs(IndexVn30HistoryColumn column)
        {
            this.column = column;
        }

        ///<summary>
        /// Initalizes a new Instance of the IndexVn30HistoryEventArgs class.
        ///</summary>
        public IndexVn30HistoryEventArgs(IndexVn30HistoryColumn column, object value)
        {
            this.column = column;
            this.value = value;
        }

        ///<summary>
        /// The IndexVn30HistoryColumn that was modified, which has raised the event.
        ///</summary>
        ///<value cref="IndexVn30HistoryColumn" />
        public IndexVn30HistoryColumn Column { get { return this.column; } }

        /// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
        public object Value { get { return this.value; } }

    }
    #endregion

    ///<summary>
    /// Define a delegate for all IndexVn30History related events.
    ///</summary>
    public delegate void IndexVn30HistoryEventHandler(object sender, IndexVn30HistoryEventArgs e);

    #region IndexVn30HistoryComparer

    /// <summary>
    ///	Strongly Typed IComparer
    /// </summary>
    public class IndexVn30HistoryComparer : System.Collections.Generic.IComparer<IndexVn30History>
    {
        IndexVn30HistoryColumn whichComparison;

        /// <summary>
        /// Initializes a new instance of the <see cref="T:IndexVn30HistoryComparer"/> class.
        /// </summary>
        public IndexVn30HistoryComparer()
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="T:IndexVn30HistoryComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public IndexVn30HistoryComparer(IndexVn30HistoryColumn column)
        {
            this.whichComparison = column;
        }

        /// <summary>
        /// Determines whether the specified <c cref="IndexVn30History"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="IndexVn30History"/> to compare.</param>
        /// <param name="b">The second <c>IndexVn30History</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(IndexVn30History a, IndexVn30History b)
        {
            return this.Compare(a, b) == 0;
        }

        /// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(IndexVn30History entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(IndexVn30History a, IndexVn30History b)
        {
            EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
            return entityPropertyComparer.Compare(a, b);
        }

        /// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public IndexVn30HistoryColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
    }

    #endregion

    #region IndexVn30HistoryKey Class

    /// <summary>
    /// Wraps the unique identifier values for the <see cref="IndexVn30History"/> object.
    /// </summary>
    [Serializable]
    [CLSCompliant(true)]
    public class IndexVn30HistoryKey : EntityKeyBase
    {
        #region Constructors

        /// <summary>
        /// Initializes a new instance of the IndexVn30HistoryKey class.
        /// </summary>
        public IndexVn30HistoryKey()
        {
        }

        /// <summary>
        /// Initializes a new instance of the IndexVn30HistoryKey class.
        /// </summary>
        public IndexVn30HistoryKey(IndexVn30HistoryBase entity)
        {
            this.Entity = entity;

            #region Init Properties

            if (entity != null)
            {
                this.Id = entity.Id;
            }

            #endregion
        }

        /// <summary>
        /// Initializes a new instance of the IndexVn30HistoryKey class.
        /// </summary>
        public IndexVn30HistoryKey(System.Int64 _id)
        {
            #region Init Properties

            this.Id = _id;

            #endregion
        }

        #endregion Constructors

        #region Properties

        // member variable for the Entity property
        private IndexVn30HistoryBase _entity;

        /// <summary>
        /// Gets or sets the Entity property.
        /// </summary>
        public IndexVn30HistoryBase Entity
        {
            get { return _entity; }
            set { _entity = value; }
        }

        // member variable for the Id property
        private System.Int64 _id;

        /// <summary>
        /// Gets or sets the Id property.
        /// </summary>
        public System.Int64 Id
        {
            get { return _id; }
            set
            {
                if (this.Entity != null)
                    this.Entity.Id = value;

                _id = value;
            }
        }

        #endregion

        #region Methods

        /// <summary>
        /// Reads values from the supplied <see cref="IDictionary"/> object into
        /// properties of the current object.
        /// </summary>
        /// <param name="values">An <see cref="IDictionary"/> instance that contains
        /// the key/value pairs to be used as property values.</param>
        public override void Load(IDictionary values)
        {
            #region Init Properties

            if (values != null)
            {
                Id = (values["Id"] != null) ? (System.Int64)EntityUtil.ChangeType(values["Id"], typeof(System.Int64)) : (long)0;
            }

            #endregion
        }

        /// <summary>
        /// Creates a new <see cref="IDictionary"/> object and populates it
        /// with the property values of the current object.
        /// </summary>
        /// <returns>A collection of name/value pairs.</returns>
        public override IDictionary ToDictionary()
        {
            IDictionary values = new Hashtable();

            #region Init Dictionary

            values.Add("Id", Id);

            #endregion Init Dictionary

            return values;
        }

        ///<summary>
        /// Returns a String that represents the current object.
        ///</summary>
        public override string ToString()
        {
            return String.Format("Id: {0}{1}",
                                Id,
                                System.Environment.NewLine);
        }

        #endregion Methods
    }

    #endregion

    #region IndexVn30HistoryColumn Enum

    /// <summary>
    /// Enumerate the IndexVn30History columns.
    /// </summary>
    [Serializable]
    public enum IndexVn30HistoryColumn : int
    {
        /// <summary>
        /// Id : 
        /// </summary>
        [EnumTextValue("ID")]
        [ColumnEnum("ID", typeof(System.Int64), System.Data.DbType.Int64, true, true, false)]
        Id = 1,
        /// <summary>
        /// TradeDate : 
        /// </summary>
        [EnumTextValue("TradeDate")]
        [ColumnEnum("TradeDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
        TradeDate = 2,
        /// <summary>
        /// Index : 
        /// </summary>
        [EnumTextValue("Index")]
        [ColumnEnum("Index", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
        Index = 3,
        /// <summary>
        /// TotalShares : 
        /// </summary>
        [EnumTextValue("TotalShares")]
        [ColumnEnum("TotalShares", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
        TotalShares = 4,
        /// <summary>
        /// TotalValues : 
        /// </summary>
        [EnumTextValue("TotalValues")]
        [ColumnEnum("TotalValues", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
        TotalValues = 5,
        /// <summary>
        /// Up : 
        /// </summary>
        [EnumTextValue("Up")]
        [ColumnEnum("Up", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
        Up = 6,
        /// <summary>
        /// Down : 
        /// </summary>
        [EnumTextValue("Down")]
        [ColumnEnum("Down", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
        Down = 7,
        /// <summary>
        /// NoChange : 
        /// </summary>
        [EnumTextValue("NoChange")]
        [ColumnEnum("NoChange", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
        NoChange = 8,
        /// <summary>
        /// Time : 
        /// </summary>
        [EnumTextValue("Time")]
        [ColumnEnum("Time", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
        Time = 9,
        /// <summary>
        /// Change : 
        /// </summary>
        [EnumTextValue("Change")]
        [ColumnEnum("Change", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
        Change = 10,
        /// <summary>
        /// PerChange : 
        /// </summary>
        [EnumTextValue("PerChange")]
        [ColumnEnum("PerChange", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
        PerChange = 11
    }//End enum

    #endregion IndexVn30HistoryColumn Enum

} // end namespace
