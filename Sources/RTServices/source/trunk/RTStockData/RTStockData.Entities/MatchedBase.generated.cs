
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Matched.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using RTStockData.Entities.Validation;
#endregion

namespace RTStockData.Entities
{
	///<summary>
	/// An object representation of the 'Matched' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class MatchedBase : EntityBase, IMatched, IEntityId<MatchedKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private MatchedEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private MatchedEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private MatchedEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Matched> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MatchedEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MatchedEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="MatchedBase"/> instance.
		///</summary>
		public MatchedBase()
		{
			this.entityData = new MatchedEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="MatchedBase"/> instance.
		///</summary>
		///<param name="_code"></param>
		///<param name="_tradedDate"></param>
		///<param name="_ceiling"></param>
		///<param name="_floor"></param>
		///<param name="_refPrice"></param>
		///<param name="_closePrice"></param>
		///<param name="_change"></param>
		///<param name="_percent"></param>
		///<param name="_volume"></param>
		///<param name="_putThrough"></param>
		///<param name="_foreignBuy"></param>
		///<param name="_foreignSell"></param>
		///<param name="_openPrice"></param>
		///<param name="_highestPrice"></param>
		///<param name="_lowestPrice"></param>
		///<param name="_marketId"></param>
		///<param name="_value"></param>
		public MatchedBase(System.String _code, System.DateTime? _tradedDate, System.Double? _ceiling, 
			System.Double? _floor, System.Double? _refPrice, System.Double? _closePrice, System.Double? _change, 
			System.Double? _percent, System.Double? _volume, System.Double? _putThrough, System.Double? _foreignBuy, 
			System.Double? _foreignSell, System.Double? _openPrice, System.Double? _highestPrice, System.Double? _lowestPrice, 
			System.String _marketId, System.Double? _value)
		{
			this.entityData = new MatchedEntityData();
			this.backupData = null;

			this.Code = _code;
			this.TradedDate = _tradedDate;
			this.Ceiling = _ceiling;
			this.Floor = _floor;
			this.RefPrice = _refPrice;
			this.ClosePrice = _closePrice;
			this.Change = _change;
			this.Percent = _percent;
			this.Volume = _volume;
			this.PutThrough = _putThrough;
			this.ForeignBuy = _foreignBuy;
			this.ForeignSell = _foreignSell;
			this.OpenPrice = _openPrice;
			this.HighestPrice = _highestPrice;
			this.LowestPrice = _lowestPrice;
			this.MarketId = _marketId;
			this.Value = _value;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Matched"/> instance.
		///</summary>
		///<param name="_code"></param>
		///<param name="_tradedDate"></param>
		///<param name="_ceiling"></param>
		///<param name="_floor"></param>
		///<param name="_refPrice"></param>
		///<param name="_closePrice"></param>
		///<param name="_change"></param>
		///<param name="_percent"></param>
		///<param name="_volume"></param>
		///<param name="_putThrough"></param>
		///<param name="_foreignBuy"></param>
		///<param name="_foreignSell"></param>
		///<param name="_openPrice"></param>
		///<param name="_highestPrice"></param>
		///<param name="_lowestPrice"></param>
		///<param name="_marketId"></param>
		///<param name="_value"></param>
		public static Matched CreateMatched(System.String _code, System.DateTime? _tradedDate, System.Double? _ceiling, 
			System.Double? _floor, System.Double? _refPrice, System.Double? _closePrice, System.Double? _change, 
			System.Double? _percent, System.Double? _volume, System.Double? _putThrough, System.Double? _foreignBuy, 
			System.Double? _foreignSell, System.Double? _openPrice, System.Double? _highestPrice, System.Double? _lowestPrice, 
			System.String _marketId, System.Double? _value)
		{
			Matched newMatched = new Matched();
			newMatched.Code = _code;
			newMatched.TradedDate = _tradedDate;
			newMatched.Ceiling = _ceiling;
			newMatched.Floor = _floor;
			newMatched.RefPrice = _refPrice;
			newMatched.ClosePrice = _closePrice;
			newMatched.Change = _change;
			newMatched.Percent = _percent;
			newMatched.Volume = _volume;
			newMatched.PutThrough = _putThrough;
			newMatched.ForeignBuy = _foreignBuy;
			newMatched.ForeignSell = _foreignSell;
			newMatched.OpenPrice = _openPrice;
			newMatched.HighestPrice = _highestPrice;
			newMatched.LowestPrice = _lowestPrice;
			newMatched.MarketId = _marketId;
			newMatched.Value = _value;
			return newMatched;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int64 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(MatchedColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MatchedColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Code property. 
		///		
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String Code
		{
			get
			{
				return this.entityData.Code; 
			}
			
			set
			{
				if (this.entityData.Code == value)
					return;
					
				OnColumnChanging(MatchedColumn.Code, this.entityData.Code);
				this.entityData.Code = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MatchedColumn.Code, this.entityData.Code);
				OnPropertyChanged("Code");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TradedDate property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsTradedDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? TradedDate
		{
			get
			{
				return this.entityData.TradedDate; 
			}
			
			set
			{
				if (this.entityData.TradedDate == value)
					return;
					
				OnColumnChanging(MatchedColumn.TradedDate, this.entityData.TradedDate);
				this.entityData.TradedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MatchedColumn.TradedDate, this.entityData.TradedDate);
				OnPropertyChanged("TradedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Ceiling property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsCeilingNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Ceiling
		{
			get
			{
				return this.entityData.Ceiling; 
			}
			
			set
			{
				if (this.entityData.Ceiling == value)
					return;
					
				OnColumnChanging(MatchedColumn.Ceiling, this.entityData.Ceiling);
				this.entityData.Ceiling = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MatchedColumn.Ceiling, this.entityData.Ceiling);
				OnPropertyChanged("Ceiling");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Floor property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsFloorNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Floor
		{
			get
			{
				return this.entityData.Floor; 
			}
			
			set
			{
				if (this.entityData.Floor == value)
					return;
					
				OnColumnChanging(MatchedColumn.Floor, this.entityData.Floor);
				this.entityData.Floor = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MatchedColumn.Floor, this.entityData.Floor);
				OnPropertyChanged("Floor");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RefPrice property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsRefPriceNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? RefPrice
		{
			get
			{
				return this.entityData.RefPrice; 
			}
			
			set
			{
				if (this.entityData.RefPrice == value)
					return;
					
				OnColumnChanging(MatchedColumn.RefPrice, this.entityData.RefPrice);
				this.entityData.RefPrice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MatchedColumn.RefPrice, this.entityData.RefPrice);
				OnPropertyChanged("RefPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ClosePrice property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsClosePriceNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? ClosePrice
		{
			get
			{
				return this.entityData.ClosePrice; 
			}
			
			set
			{
				if (this.entityData.ClosePrice == value)
					return;
					
				OnColumnChanging(MatchedColumn.ClosePrice, this.entityData.ClosePrice);
				this.entityData.ClosePrice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MatchedColumn.ClosePrice, this.entityData.ClosePrice);
				OnPropertyChanged("ClosePrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Change property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsChangeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Change
		{
			get
			{
				return this.entityData.Change; 
			}
			
			set
			{
				if (this.entityData.Change == value)
					return;
					
				OnColumnChanging(MatchedColumn.Change, this.entityData.Change);
				this.entityData.Change = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MatchedColumn.Change, this.entityData.Change);
				OnPropertyChanged("Change");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Percent property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsPercentNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Percent
		{
			get
			{
				return this.entityData.Percent; 
			}
			
			set
			{
				if (this.entityData.Percent == value)
					return;
					
				OnColumnChanging(MatchedColumn.Percent, this.entityData.Percent);
				this.entityData.Percent = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MatchedColumn.Percent, this.entityData.Percent);
				OnPropertyChanged("Percent");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Volume property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsVolumeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Volume
		{
			get
			{
				return this.entityData.Volume; 
			}
			
			set
			{
				if (this.entityData.Volume == value)
					return;
					
				OnColumnChanging(MatchedColumn.Volume, this.entityData.Volume);
				this.entityData.Volume = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MatchedColumn.Volume, this.entityData.Volume);
				OnPropertyChanged("Volume");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PutThrough property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsPutThroughNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? PutThrough
		{
			get
			{
				return this.entityData.PutThrough; 
			}
			
			set
			{
				if (this.entityData.PutThrough == value)
					return;
					
				OnColumnChanging(MatchedColumn.PutThrough, this.entityData.PutThrough);
				this.entityData.PutThrough = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MatchedColumn.PutThrough, this.entityData.PutThrough);
				OnPropertyChanged("PutThrough");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ForeignBuy property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsForeignBuyNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? ForeignBuy
		{
			get
			{
				return this.entityData.ForeignBuy; 
			}
			
			set
			{
				if (this.entityData.ForeignBuy == value)
					return;
					
				OnColumnChanging(MatchedColumn.ForeignBuy, this.entityData.ForeignBuy);
				this.entityData.ForeignBuy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MatchedColumn.ForeignBuy, this.entityData.ForeignBuy);
				OnPropertyChanged("ForeignBuy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ForeignSell property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsForeignSellNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? ForeignSell
		{
			get
			{
				return this.entityData.ForeignSell; 
			}
			
			set
			{
				if (this.entityData.ForeignSell == value)
					return;
					
				OnColumnChanging(MatchedColumn.ForeignSell, this.entityData.ForeignSell);
				this.entityData.ForeignSell = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MatchedColumn.ForeignSell, this.entityData.ForeignSell);
				OnPropertyChanged("ForeignSell");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OpenPrice property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsOpenPriceNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? OpenPrice
		{
			get
			{
				return this.entityData.OpenPrice; 
			}
			
			set
			{
				if (this.entityData.OpenPrice == value)
					return;
					
				OnColumnChanging(MatchedColumn.OpenPrice, this.entityData.OpenPrice);
				this.entityData.OpenPrice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MatchedColumn.OpenPrice, this.entityData.OpenPrice);
				OnPropertyChanged("OpenPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HighestPrice property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsHighestPriceNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? HighestPrice
		{
			get
			{
				return this.entityData.HighestPrice; 
			}
			
			set
			{
				if (this.entityData.HighestPrice == value)
					return;
					
				OnColumnChanging(MatchedColumn.HighestPrice, this.entityData.HighestPrice);
				this.entityData.HighestPrice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MatchedColumn.HighestPrice, this.entityData.HighestPrice);
				OnPropertyChanged("HighestPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LowestPrice property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsLowestPriceNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? LowestPrice
		{
			get
			{
				return this.entityData.LowestPrice; 
			}
			
			set
			{
				if (this.entityData.LowestPrice == value)
					return;
					
				OnColumnChanging(MatchedColumn.LowestPrice, this.entityData.LowestPrice);
				this.entityData.LowestPrice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MatchedColumn.LowestPrice, this.entityData.LowestPrice);
				OnPropertyChanged("LowestPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MarketId property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String MarketId
		{
			get
			{
				return this.entityData.MarketId; 
			}
			
			set
			{
				if (this.entityData.MarketId == value)
					return;
					
				OnColumnChanging(MatchedColumn.MarketId, this.entityData.MarketId);
				this.entityData.MarketId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MatchedColumn.MarketId, this.entityData.MarketId);
				OnPropertyChanged("MarketId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Value property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsValueNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Value
		{
			get
			{
				return this.entityData.Value; 
			}
			
			set
			{
				if (this.entityData.Value == value)
					return;
					
				OnColumnChanging(MatchedColumn.Value, this.entityData.Value);
				this.entityData.Value = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MatchedColumn.Value, this.entityData.Value);
				OnPropertyChanged("Value");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Code", "Code", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MarketId", "Market Id", 30));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Matched"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "Code", "TradedDate", "Ceiling", "Floor", "RefPrice", "ClosePrice", "Change", "Percent", "Volume", "PutThrough", "ForeignBuy", "ForeignSell", "OpenPrice", "HighestPrice", "LowestPrice", "Market_id", "Value"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as MatchedEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Matched) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Matched>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Matched);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Matched Entity 
		///</summary>
		protected virtual Matched Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Matched copy = new Matched();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.Code = this.Code;
				copy.TradedDate = this.TradedDate;
				copy.Ceiling = this.Ceiling;
				copy.Floor = this.Floor;
				copy.RefPrice = this.RefPrice;
				copy.ClosePrice = this.ClosePrice;
				copy.Change = this.Change;
				copy.Percent = this.Percent;
				copy.Volume = this.Volume;
				copy.PutThrough = this.PutThrough;
				copy.ForeignBuy = this.ForeignBuy;
				copy.ForeignSell = this.ForeignSell;
				copy.OpenPrice = this.OpenPrice;
				copy.HighestPrice = this.HighestPrice;
				copy.LowestPrice = this.LowestPrice;
				copy.MarketId = this.MarketId;
				copy.Value = this.Value;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Matched Entity 
		///</summary>
		public virtual Matched Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Matched Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Matched DeepCopy()
		{
			return EntityHelper.Clone<Matched>(this as Matched);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as MatchedEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new MatchedEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as MatchedEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(MatchedColumn column)
		{
			switch(column)
			{
					case MatchedColumn.Id:
					return entityData.Id != _originalData.Id;
					case MatchedColumn.Code:
					return entityData.Code != _originalData.Code;
					case MatchedColumn.TradedDate:
					return entityData.TradedDate != _originalData.TradedDate;
					case MatchedColumn.Ceiling:
					return entityData.Ceiling != _originalData.Ceiling;
					case MatchedColumn.Floor:
					return entityData.Floor != _originalData.Floor;
					case MatchedColumn.RefPrice:
					return entityData.RefPrice != _originalData.RefPrice;
					case MatchedColumn.ClosePrice:
					return entityData.ClosePrice != _originalData.ClosePrice;
					case MatchedColumn.Change:
					return entityData.Change != _originalData.Change;
					case MatchedColumn.Percent:
					return entityData.Percent != _originalData.Percent;
					case MatchedColumn.Volume:
					return entityData.Volume != _originalData.Volume;
					case MatchedColumn.PutThrough:
					return entityData.PutThrough != _originalData.PutThrough;
					case MatchedColumn.ForeignBuy:
					return entityData.ForeignBuy != _originalData.ForeignBuy;
					case MatchedColumn.ForeignSell:
					return entityData.ForeignSell != _originalData.ForeignSell;
					case MatchedColumn.OpenPrice:
					return entityData.OpenPrice != _originalData.OpenPrice;
					case MatchedColumn.HighestPrice:
					return entityData.HighestPrice != _originalData.HighestPrice;
					case MatchedColumn.LowestPrice:
					return entityData.LowestPrice != _originalData.LowestPrice;
					case MatchedColumn.MarketId:
					return entityData.MarketId != _originalData.MarketId;
					case MatchedColumn.Value:
					return entityData.Value != _originalData.Value;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< MatchedColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.Code != _originalData.Code;
			result = result || entityData.TradedDate != _originalData.TradedDate;
			result = result || entityData.Ceiling != _originalData.Ceiling;
			result = result || entityData.Floor != _originalData.Floor;
			result = result || entityData.RefPrice != _originalData.RefPrice;
			result = result || entityData.ClosePrice != _originalData.ClosePrice;
			result = result || entityData.Change != _originalData.Change;
			result = result || entityData.Percent != _originalData.Percent;
			result = result || entityData.Volume != _originalData.Volume;
			result = result || entityData.PutThrough != _originalData.PutThrough;
			result = result || entityData.ForeignBuy != _originalData.ForeignBuy;
			result = result || entityData.ForeignSell != _originalData.ForeignSell;
			result = result || entityData.OpenPrice != _originalData.OpenPrice;
			result = result || entityData.HighestPrice != _originalData.HighestPrice;
			result = result || entityData.LowestPrice != _originalData.LowestPrice;
			result = result || entityData.MarketId != _originalData.MarketId;
			result = result || entityData.Value != _originalData.Value;
			return result;
		}	
		
		///<summary>
		///  Returns a Matched Entity with the original data.
		///</summary>
		public Matched GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateMatched(
				_originalData.Code,
				_originalData.TradedDate,
				_originalData.Ceiling,
				_originalData.Floor,
				_originalData.RefPrice,
				_originalData.ClosePrice,
				_originalData.Change,
				_originalData.Percent,
				_originalData.Volume,
				_originalData.PutThrough,
				_originalData.ForeignBuy,
				_originalData.ForeignSell,
				_originalData.OpenPrice,
				_originalData.HighestPrice,
				_originalData.LowestPrice,
				_originalData.MarketId,
				_originalData.Value
				);
				
			return (Matched)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="MatchedBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is MatchedBase)
				return ValueEquals(this, (MatchedBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="MatchedBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.Code == null) ? string.Empty : this.Code.ToString()).GetHashCode() ^ 
					((this.TradedDate == null) ? string.Empty : this.TradedDate.ToString()).GetHashCode() ^ 
					((this.Ceiling == null) ? string.Empty : this.Ceiling.ToString()).GetHashCode() ^ 
					((this.Floor == null) ? string.Empty : this.Floor.ToString()).GetHashCode() ^ 
					((this.RefPrice == null) ? string.Empty : this.RefPrice.ToString()).GetHashCode() ^ 
					((this.ClosePrice == null) ? string.Empty : this.ClosePrice.ToString()).GetHashCode() ^ 
					((this.Change == null) ? string.Empty : this.Change.ToString()).GetHashCode() ^ 
					((this.Percent == null) ? string.Empty : this.Percent.ToString()).GetHashCode() ^ 
					((this.Volume == null) ? string.Empty : this.Volume.ToString()).GetHashCode() ^ 
					((this.PutThrough == null) ? string.Empty : this.PutThrough.ToString()).GetHashCode() ^ 
					((this.ForeignBuy == null) ? string.Empty : this.ForeignBuy.ToString()).GetHashCode() ^ 
					((this.ForeignSell == null) ? string.Empty : this.ForeignSell.ToString()).GetHashCode() ^ 
					((this.OpenPrice == null) ? string.Empty : this.OpenPrice.ToString()).GetHashCode() ^ 
					((this.HighestPrice == null) ? string.Empty : this.HighestPrice.ToString()).GetHashCode() ^ 
					((this.LowestPrice == null) ? string.Empty : this.LowestPrice.ToString()).GetHashCode() ^ 
					((this.MarketId == null) ? string.Empty : this.MarketId.ToString()).GetHashCode() ^ 
					((this.Value == null) ? string.Empty : this.Value.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="MatchedBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(MatchedBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="MatchedBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="MatchedBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="MatchedBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(MatchedBase Object1, MatchedBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.Code != null && Object2.Code != null )
			{
				if (Object1.Code != Object2.Code)
					equal = false;
			}
			else if (Object1.Code == null ^ Object2.Code == null )
			{
				equal = false;
			}
			if ( Object1.TradedDate != null && Object2.TradedDate != null )
			{
				if (Object1.TradedDate != Object2.TradedDate)
					equal = false;
			}
			else if (Object1.TradedDate == null ^ Object2.TradedDate == null )
			{
				equal = false;
			}
			if ( Object1.Ceiling != null && Object2.Ceiling != null )
			{
				if (Object1.Ceiling != Object2.Ceiling)
					equal = false;
			}
			else if (Object1.Ceiling == null ^ Object2.Ceiling == null )
			{
				equal = false;
			}
			if ( Object1.Floor != null && Object2.Floor != null )
			{
				if (Object1.Floor != Object2.Floor)
					equal = false;
			}
			else if (Object1.Floor == null ^ Object2.Floor == null )
			{
				equal = false;
			}
			if ( Object1.RefPrice != null && Object2.RefPrice != null )
			{
				if (Object1.RefPrice != Object2.RefPrice)
					equal = false;
			}
			else if (Object1.RefPrice == null ^ Object2.RefPrice == null )
			{
				equal = false;
			}
			if ( Object1.ClosePrice != null && Object2.ClosePrice != null )
			{
				if (Object1.ClosePrice != Object2.ClosePrice)
					equal = false;
			}
			else if (Object1.ClosePrice == null ^ Object2.ClosePrice == null )
			{
				equal = false;
			}
			if ( Object1.Change != null && Object2.Change != null )
			{
				if (Object1.Change != Object2.Change)
					equal = false;
			}
			else if (Object1.Change == null ^ Object2.Change == null )
			{
				equal = false;
			}
			if ( Object1.Percent != null && Object2.Percent != null )
			{
				if (Object1.Percent != Object2.Percent)
					equal = false;
			}
			else if (Object1.Percent == null ^ Object2.Percent == null )
			{
				equal = false;
			}
			if ( Object1.Volume != null && Object2.Volume != null )
			{
				if (Object1.Volume != Object2.Volume)
					equal = false;
			}
			else if (Object1.Volume == null ^ Object2.Volume == null )
			{
				equal = false;
			}
			if ( Object1.PutThrough != null && Object2.PutThrough != null )
			{
				if (Object1.PutThrough != Object2.PutThrough)
					equal = false;
			}
			else if (Object1.PutThrough == null ^ Object2.PutThrough == null )
			{
				equal = false;
			}
			if ( Object1.ForeignBuy != null && Object2.ForeignBuy != null )
			{
				if (Object1.ForeignBuy != Object2.ForeignBuy)
					equal = false;
			}
			else if (Object1.ForeignBuy == null ^ Object2.ForeignBuy == null )
			{
				equal = false;
			}
			if ( Object1.ForeignSell != null && Object2.ForeignSell != null )
			{
				if (Object1.ForeignSell != Object2.ForeignSell)
					equal = false;
			}
			else if (Object1.ForeignSell == null ^ Object2.ForeignSell == null )
			{
				equal = false;
			}
			if ( Object1.OpenPrice != null && Object2.OpenPrice != null )
			{
				if (Object1.OpenPrice != Object2.OpenPrice)
					equal = false;
			}
			else if (Object1.OpenPrice == null ^ Object2.OpenPrice == null )
			{
				equal = false;
			}
			if ( Object1.HighestPrice != null && Object2.HighestPrice != null )
			{
				if (Object1.HighestPrice != Object2.HighestPrice)
					equal = false;
			}
			else if (Object1.HighestPrice == null ^ Object2.HighestPrice == null )
			{
				equal = false;
			}
			if ( Object1.LowestPrice != null && Object2.LowestPrice != null )
			{
				if (Object1.LowestPrice != Object2.LowestPrice)
					equal = false;
			}
			else if (Object1.LowestPrice == null ^ Object2.LowestPrice == null )
			{
				equal = false;
			}
			if ( Object1.MarketId != null && Object2.MarketId != null )
			{
				if (Object1.MarketId != Object2.MarketId)
					equal = false;
			}
			else if (Object1.MarketId == null ^ Object2.MarketId == null )
			{
				equal = false;
			}
			if ( Object1.Value != null && Object2.Value != null )
			{
				if (Object1.Value != Object2.Value)
					equal = false;
			}
			else if (Object1.Value == null ^ Object2.Value == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((MatchedBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static MatchedComparer GetComparer()
        {
            return new MatchedComparer();
        }
        */

        // Comparer delegates back to Matched
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Matched rhs, MatchedColumn which)
        {
            switch (which)
            {
            	
            	
            	case MatchedColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case MatchedColumn.Code:
            		return this.Code.CompareTo(rhs.Code);
            		
            		                 
            	
            	
            	case MatchedColumn.TradedDate:
            		return this.TradedDate.Value.CompareTo(rhs.TradedDate.Value);
            		
            		                 
            	
            	
            	case MatchedColumn.Ceiling:
            		return this.Ceiling.Value.CompareTo(rhs.Ceiling.Value);
            		
            		                 
            	
            	
            	case MatchedColumn.Floor:
            		return this.Floor.Value.CompareTo(rhs.Floor.Value);
            		
            		                 
            	
            	
            	case MatchedColumn.RefPrice:
            		return this.RefPrice.Value.CompareTo(rhs.RefPrice.Value);
            		
            		                 
            	
            	
            	case MatchedColumn.ClosePrice:
            		return this.ClosePrice.Value.CompareTo(rhs.ClosePrice.Value);
            		
            		                 
            	
            	
            	case MatchedColumn.Change:
            		return this.Change.Value.CompareTo(rhs.Change.Value);
            		
            		                 
            	
            	
            	case MatchedColumn.Percent:
            		return this.Percent.Value.CompareTo(rhs.Percent.Value);
            		
            		                 
            	
            	
            	case MatchedColumn.Volume:
            		return this.Volume.Value.CompareTo(rhs.Volume.Value);
            		
            		                 
            	
            	
            	case MatchedColumn.PutThrough:
            		return this.PutThrough.Value.CompareTo(rhs.PutThrough.Value);
            		
            		                 
            	
            	
            	case MatchedColumn.ForeignBuy:
            		return this.ForeignBuy.Value.CompareTo(rhs.ForeignBuy.Value);
            		
            		                 
            	
            	
            	case MatchedColumn.ForeignSell:
            		return this.ForeignSell.Value.CompareTo(rhs.ForeignSell.Value);
            		
            		                 
            	
            	
            	case MatchedColumn.OpenPrice:
            		return this.OpenPrice.Value.CompareTo(rhs.OpenPrice.Value);
            		
            		                 
            	
            	
            	case MatchedColumn.HighestPrice:
            		return this.HighestPrice.Value.CompareTo(rhs.HighestPrice.Value);
            		
            		                 
            	
            	
            	case MatchedColumn.LowestPrice:
            		return this.LowestPrice.Value.CompareTo(rhs.LowestPrice.Value);
            		
            		                 
            	
            	
            	case MatchedColumn.MarketId:
            		return this.MarketId.CompareTo(rhs.MarketId);
            		
            		                 
            	
            	
            	case MatchedColumn.Value:
            		return this.Value.Value.CompareTo(rhs.Value.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<MatchedKey> Members
		
		// member variable for the EntityId property
		private MatchedKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual MatchedKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new MatchedKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Matched")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{19}{18}- Id: {0}{18}- Code: {1}{18}- TradedDate: {2}{18}- Ceiling: {3}{18}- Floor: {4}{18}- RefPrice: {5}{18}- ClosePrice: {6}{18}- Change: {7}{18}- Percent: {8}{18}- Volume: {9}{18}- PutThrough: {10}{18}- ForeignBuy: {11}{18}- ForeignSell: {12}{18}- OpenPrice: {13}{18}- HighestPrice: {14}{18}- LowestPrice: {15}{18}- MarketId: {16}{18}- Value: {17}{18}{20}", 
				this.Id,
				(this.Code == null) ? string.Empty : this.Code.ToString(),
				(this.TradedDate == null) ? string.Empty : this.TradedDate.ToString(),
				(this.Ceiling == null) ? string.Empty : this.Ceiling.ToString(),
				(this.Floor == null) ? string.Empty : this.Floor.ToString(),
				(this.RefPrice == null) ? string.Empty : this.RefPrice.ToString(),
				(this.ClosePrice == null) ? string.Empty : this.ClosePrice.ToString(),
				(this.Change == null) ? string.Empty : this.Change.ToString(),
				(this.Percent == null) ? string.Empty : this.Percent.ToString(),
				(this.Volume == null) ? string.Empty : this.Volume.ToString(),
				(this.PutThrough == null) ? string.Empty : this.PutThrough.ToString(),
				(this.ForeignBuy == null) ? string.Empty : this.ForeignBuy.ToString(),
				(this.ForeignSell == null) ? string.Empty : this.ForeignSell.ToString(),
				(this.OpenPrice == null) ? string.Empty : this.OpenPrice.ToString(),
				(this.HighestPrice == null) ? string.Empty : this.HighestPrice.ToString(),
				(this.LowestPrice == null) ? string.Empty : this.LowestPrice.ToString(),
				(this.MarketId == null) ? string.Empty : this.MarketId.ToString(),
				(this.Value == null) ? string.Empty : this.Value.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Matched' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class MatchedEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Matched"</remarks>
		public System.Int64 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// Code : 
		/// </summary>
		public System.String		  Code = null;
		
		/// <summary>
		/// TradedDate : 
		/// </summary>
		public System.DateTime?		  TradedDate = null;
		
		/// <summary>
		/// Ceiling : 
		/// </summary>
		public System.Double?		  Ceiling = null;
		
		/// <summary>
		/// Floor : 
		/// </summary>
		public System.Double?		  Floor = null;
		
		/// <summary>
		/// RefPrice : 
		/// </summary>
		public System.Double?		  RefPrice = null;
		
		/// <summary>
		/// ClosePrice : 
		/// </summary>
		public System.Double?		  ClosePrice = null;
		
		/// <summary>
		/// Change : 
		/// </summary>
		public System.Double?		  Change = null;
		
		/// <summary>
		/// Percent : 
		/// </summary>
		public System.Double?		  Percent = null;
		
		/// <summary>
		/// Volume : 
		/// </summary>
		public System.Double?		  Volume = null;
		
		/// <summary>
		/// PutThrough : 
		/// </summary>
		public System.Double?		  PutThrough = null;
		
		/// <summary>
		/// ForeignBuy : 
		/// </summary>
		public System.Double?		  ForeignBuy = null;
		
		/// <summary>
		/// ForeignSell : 
		/// </summary>
		public System.Double?		  ForeignSell = null;
		
		/// <summary>
		/// OpenPrice : 
		/// </summary>
		public System.Double?		  OpenPrice = null;
		
		/// <summary>
		/// HighestPrice : 
		/// </summary>
		public System.Double?		  HighestPrice = null;
		
		/// <summary>
		/// LowestPrice : 
		/// </summary>
		public System.Double?		  LowestPrice = null;
		
		/// <summary>
		/// Market_id : 
		/// </summary>
		public System.String		  MarketId = null;
		
		/// <summary>
		/// Value : 
		/// </summary>
		public System.Double?		  Value = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			MatchedEntityData _tmp = new MatchedEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.Code = this.Code;
			_tmp.TradedDate = this.TradedDate;
			_tmp.Ceiling = this.Ceiling;
			_tmp.Floor = this.Floor;
			_tmp.RefPrice = this.RefPrice;
			_tmp.ClosePrice = this.ClosePrice;
			_tmp.Change = this.Change;
			_tmp.Percent = this.Percent;
			_tmp.Volume = this.Volume;
			_tmp.PutThrough = this.PutThrough;
			_tmp.ForeignBuy = this.ForeignBuy;
			_tmp.ForeignSell = this.ForeignSell;
			_tmp.OpenPrice = this.OpenPrice;
			_tmp.HighestPrice = this.HighestPrice;
			_tmp.LowestPrice = this.LowestPrice;
			_tmp.MarketId = this.MarketId;
			_tmp.Value = this.Value;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			MatchedEntityData _tmp = new MatchedEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.Code = this.Code;
			_tmp.TradedDate = this.TradedDate;
			_tmp.Ceiling = this.Ceiling;
			_tmp.Floor = this.Floor;
			_tmp.RefPrice = this.RefPrice;
			_tmp.ClosePrice = this.ClosePrice;
			_tmp.Change = this.Change;
			_tmp.Percent = this.Percent;
			_tmp.Volume = this.Volume;
			_tmp.PutThrough = this.PutThrough;
			_tmp.ForeignBuy = this.ForeignBuy;
			_tmp.ForeignSell = this.ForeignSell;
			_tmp.OpenPrice = this.OpenPrice;
			_tmp.HighestPrice = this.HighestPrice;
			_tmp.LowestPrice = this.LowestPrice;
			_tmp.MarketId = this.MarketId;
			_tmp.Value = this.Value;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MatchedColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(MatchedColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MatchedColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(MatchedColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MatchedColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(MatchedColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				MatchedEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new MatchedEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MatchedColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(MatchedColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				MatchedEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new MatchedEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region MatchedEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Matched"/> object.
	/// </remarks>
	public class MatchedEventArgs : System.EventArgs
	{
		private MatchedColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the MatchedEventArgs class.
		///</summary>
		public MatchedEventArgs(MatchedColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the MatchedEventArgs class.
		///</summary>
		public MatchedEventArgs(MatchedColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The MatchedColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="MatchedColumn" />
		public MatchedColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Matched related events.
	///</summary>
	public delegate void MatchedEventHandler(object sender, MatchedEventArgs e);
	
	#region MatchedComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class MatchedComparer : System.Collections.Generic.IComparer<Matched>
	{
		MatchedColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:MatchedComparer"/> class.
        /// </summary>
		public MatchedComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:MatchedComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public MatchedComparer(MatchedColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Matched"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Matched"/> to compare.</param>
        /// <param name="b">The second <c>Matched</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Matched a, Matched b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Matched entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Matched a, Matched b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public MatchedColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region MatchedKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Matched"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class MatchedKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the MatchedKey class.
		/// </summary>
		public MatchedKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the MatchedKey class.
		/// </summary>
		public MatchedKey(MatchedBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the MatchedKey class.
		/// </summary>
		public MatchedKey(System.Int64 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private MatchedBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public MatchedBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int64 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int64 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int64) EntityUtil.ChangeType(values["Id"], typeof(System.Int64)) : (long)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region MatchedColumn Enum
	
	/// <summary>
	/// Enumerate the Matched columns.
	/// </summary>
	[Serializable]
	public enum MatchedColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Int64), System.Data.DbType.Int64, true, true, false)]
		Id = 1,
		/// <summary>
		/// Code : 
		/// </summary>
		[EnumTextValue("Code")]
		[ColumnEnum("Code", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, true, 10)]
		Code = 2,
		/// <summary>
		/// TradedDate : 
		/// </summary>
		[EnumTextValue("TradedDate")]
		[ColumnEnum("TradedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		TradedDate = 3,
		/// <summary>
		/// Ceiling : 
		/// </summary>
		[EnumTextValue("Ceiling")]
		[ColumnEnum("Ceiling", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Ceiling = 4,
		/// <summary>
		/// Floor : 
		/// </summary>
		[EnumTextValue("Floor")]
		[ColumnEnum("Floor", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Floor = 5,
		/// <summary>
		/// RefPrice : 
		/// </summary>
		[EnumTextValue("RefPrice")]
		[ColumnEnum("RefPrice", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		RefPrice = 6,
		/// <summary>
		/// ClosePrice : 
		/// </summary>
		[EnumTextValue("ClosePrice")]
		[ColumnEnum("ClosePrice", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		ClosePrice = 7,
		/// <summary>
		/// Change : 
		/// </summary>
		[EnumTextValue("Change")]
		[ColumnEnum("Change", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Change = 8,
		/// <summary>
		/// Percent : 
		/// </summary>
		[EnumTextValue("Percent")]
		[ColumnEnum("Percent", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Percent = 9,
		/// <summary>
		/// Volume : 
		/// </summary>
		[EnumTextValue("Volume")]
		[ColumnEnum("Volume", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Volume = 10,
		/// <summary>
		/// PutThrough : 
		/// </summary>
		[EnumTextValue("PutThrough")]
		[ColumnEnum("PutThrough", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		PutThrough = 11,
		/// <summary>
		/// ForeignBuy : 
		/// </summary>
		[EnumTextValue("ForeignBuy")]
		[ColumnEnum("ForeignBuy", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		ForeignBuy = 12,
		/// <summary>
		/// ForeignSell : 
		/// </summary>
		[EnumTextValue("ForeignSell")]
		[ColumnEnum("ForeignSell", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		ForeignSell = 13,
		/// <summary>
		/// OpenPrice : 
		/// </summary>
		[EnumTextValue("OpenPrice")]
		[ColumnEnum("OpenPrice", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		OpenPrice = 14,
		/// <summary>
		/// HighestPrice : 
		/// </summary>
		[EnumTextValue("HighestPrice")]
		[ColumnEnum("HighestPrice", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		HighestPrice = 15,
		/// <summary>
		/// LowestPrice : 
		/// </summary>
		[EnumTextValue("LowestPrice")]
		[ColumnEnum("LowestPrice", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		LowestPrice = 16,
		/// <summary>
		/// MarketId : 
		/// </summary>
		[EnumTextValue("Market_id")]
		[ColumnEnum("Market_id", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		MarketId = 17,
		/// <summary>
		/// Value : 
		/// </summary>
		[EnumTextValue("Value")]
		[ColumnEnum("Value", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Value = 18
	}//End enum

	#endregion MatchedColumn Enum

} // end namespace
