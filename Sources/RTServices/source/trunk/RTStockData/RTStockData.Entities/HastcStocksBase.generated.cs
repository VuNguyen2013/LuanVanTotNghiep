
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file HastcStocks.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using RTStockData.Entities.Validation;
#endregion

namespace RTStockData.Entities
{
	///<summary>
	/// An object representation of the 'hastc_stocks' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class HastcStocksBase : EntityBase, IHastcStocks, IEntityId<HastcStocksKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private HastcStocksEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private HastcStocksEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private HastcStocksEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<HastcStocks> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event HastcStocksEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event HastcStocksEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="HastcStocksBase"/> instance.
		///</summary>
		public HastcStocksBase()
		{
			this.entityData = new HastcStocksEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="HastcStocksBase"/> instance.
		///</summary>
		///<param name="_tradeDate"></param>
		///<param name="_stockno"></param>
		///<param name="_stockSymbol"></param>
		///<param name="_stockType"></param>
		///<param name="_ceiling"></param>
		///<param name="_floor"></param>
		///<param name="_securityName"></param>
		///<param name="_priorClosePrice"></param>
		///<param name="_last"></param>
		///<param name="_lastVol"></param>
		///<param name="_lastVal"></param>
		///<param name="_highest"></param>
		///<param name="_average"></param>
		///<param name="_lowest"></param>
		///<param name="_totalshares"></param>
		///<param name="_totalValue"></param>
		///<param name="_best1Bid"></param>
		///<param name="_best1BidVolume"></param>
		///<param name="_best2Bid"></param>
		///<param name="_best2BidVolume"></param>
		///<param name="_best3Bid"></param>
		///<param name="_best3BidVolume"></param>
		///<param name="_best1Offer"></param>
		///<param name="_best1OfferVolume"></param>
		///<param name="_best2Offer"></param>
		///<param name="_best2OfferVolume"></param>
		///<param name="_best3Offer"></param>
		///<param name="_best3OfferVolume"></param>
		///<param name="_nmTotalTradedQtty"></param>
		///<param name="_prevPriorPrice"></param>
		///<param name="_sellCount"></param>
		///<param name="_buyCount"></param>
		///<param name="_nmTotalTradedValue"></param>
		///<param name="_totalBidQtty"></param>
		///<param name="_totalSellTradingQtty"></param>
		///<param name="_totalOfferQtty"></param>
		///<param name="_totalBuyTradingQtty"></param>
		///<param name="_bidCount"></param>
		///<param name="_offerCount"></param>
		///<param name="_buyForeignQtty"></param>
		///<param name="_buyForeignValue"></param>
		///<param name="_sellForeignQtty"></param>
		///<param name="_sellForeignValue"></param>
		///<param name="_remainForeignQtty"></param>
		///<param name="_ptMatchPrice"></param>
		///<param name="_ptMatchQtty"></param>
		///<param name="_ptTotalTradedQtty"></param>
		///<param name="_ptTotalTradedValue"></param>
		///<param name="_totalListingQtty"></param>
		///<param name="_openPrice"></param>
		///<param name="_closePrice"></param>
		///<param name="_averagePrice"></param>
		///<param name="_status"></param>
		///<param name="_sequence"></param>
		public HastcStocksBase(System.DateTime? _tradeDate, System.Int16? _stockno, System.String _stockSymbol, 
			System.String _stockType, System.Int64? _ceiling, System.Int64? _floor, System.String _securityName, 
			System.Int64? _priorClosePrice, System.Int64? _last, System.Int64? _lastVol, System.Int64? _lastVal, 
			System.Int64? _highest, System.Int64? _average, System.Int64? _lowest, System.Int64? _totalshares, 
			System.Int64? _totalValue, System.Int64? _best1Bid, System.Int64? _best1BidVolume, System.Int64? _best2Bid, 
			System.Int64? _best2BidVolume, System.Int64? _best3Bid, System.Int64? _best3BidVolume, 
			System.Int64? _best1Offer, System.Int64? _best1OfferVolume, System.Int64? _best2Offer, 
			System.Int64? _best2OfferVolume, System.Int64? _best3Offer, System.Int64? _best3OfferVolume, 
			System.Int64? _nmTotalTradedQtty, System.Int64? _prevPriorPrice, System.Int64? _sellCount, 
			System.Int64? _buyCount, System.Int64? _nmTotalTradedValue, System.Int64? _totalBidQtty, 
			System.Int64? _totalSellTradingQtty, System.Int64? _totalOfferQtty, System.Int64? _totalBuyTradingQtty, 
			System.Int64? _bidCount, System.Int64? _offerCount, System.Int64? _buyForeignQtty, System.Int64? _buyForeignValue, 
			System.Int64? _sellForeignQtty, System.Int64? _sellForeignValue, System.Int64? _remainForeignQtty, 
			System.Int64? _ptMatchPrice, System.Int64? _ptMatchQtty, System.Int64? _ptTotalTradedQtty, 
			System.Int64? _ptTotalTradedValue, System.Int64? _totalListingQtty, System.Int64? _openPrice, 
			System.Int64? _closePrice, System.Int64? _averagePrice, System.String _status, System.Int64? _sequence)
		{
			this.entityData = new HastcStocksEntityData();
			this.backupData = null;

			this.TradeDate = _tradeDate;
			this.Stockno = _stockno;
			this.StockSymbol = _stockSymbol;
			this.StockType = _stockType;
			this.Ceiling = _ceiling;
			this.Floor = _floor;
			this.SecurityName = _securityName;
			this.PriorClosePrice = _priorClosePrice;
			this.Last = _last;
			this.LastVol = _lastVol;
			this.LastVal = _lastVal;
			this.Highest = _highest;
			this.Average = _average;
			this.Lowest = _lowest;
			this.Totalshares = _totalshares;
			this.TotalValue = _totalValue;
			this.Best1Bid = _best1Bid;
			this.Best1BidVolume = _best1BidVolume;
			this.Best2Bid = _best2Bid;
			this.Best2BidVolume = _best2BidVolume;
			this.Best3Bid = _best3Bid;
			this.Best3BidVolume = _best3BidVolume;
			this.Best1Offer = _best1Offer;
			this.Best1OfferVolume = _best1OfferVolume;
			this.Best2Offer = _best2Offer;
			this.Best2OfferVolume = _best2OfferVolume;
			this.Best3Offer = _best3Offer;
			this.Best3OfferVolume = _best3OfferVolume;
			this.NmTotalTradedQtty = _nmTotalTradedQtty;
			this.PrevPriorPrice = _prevPriorPrice;
			this.SellCount = _sellCount;
			this.BuyCount = _buyCount;
			this.NmTotalTradedValue = _nmTotalTradedValue;
			this.TotalBidQtty = _totalBidQtty;
			this.TotalSellTradingQtty = _totalSellTradingQtty;
			this.TotalOfferQtty = _totalOfferQtty;
			this.TotalBuyTradingQtty = _totalBuyTradingQtty;
			this.BidCount = _bidCount;
			this.OfferCount = _offerCount;
			this.BuyForeignQtty = _buyForeignQtty;
			this.BuyForeignValue = _buyForeignValue;
			this.SellForeignQtty = _sellForeignQtty;
			this.SellForeignValue = _sellForeignValue;
			this.RemainForeignQtty = _remainForeignQtty;
			this.PtMatchPrice = _ptMatchPrice;
			this.PtMatchQtty = _ptMatchQtty;
			this.PtTotalTradedQtty = _ptTotalTradedQtty;
			this.PtTotalTradedValue = _ptTotalTradedValue;
			this.TotalListingQtty = _totalListingQtty;
			this.OpenPrice = _openPrice;
			this.ClosePrice = _closePrice;
			this.AveragePrice = _averagePrice;
			this.Status = _status;
			this.Sequence = _sequence;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="HastcStocks"/> instance.
		///</summary>
		///<param name="_tradeDate"></param>
		///<param name="_stockno"></param>
		///<param name="_stockSymbol"></param>
		///<param name="_stockType"></param>
		///<param name="_ceiling"></param>
		///<param name="_floor"></param>
		///<param name="_securityName"></param>
		///<param name="_priorClosePrice"></param>
		///<param name="_last"></param>
		///<param name="_lastVol"></param>
		///<param name="_lastVal"></param>
		///<param name="_highest"></param>
		///<param name="_average"></param>
		///<param name="_lowest"></param>
		///<param name="_totalshares"></param>
		///<param name="_totalValue"></param>
		///<param name="_best1Bid"></param>
		///<param name="_best1BidVolume"></param>
		///<param name="_best2Bid"></param>
		///<param name="_best2BidVolume"></param>
		///<param name="_best3Bid"></param>
		///<param name="_best3BidVolume"></param>
		///<param name="_best1Offer"></param>
		///<param name="_best1OfferVolume"></param>
		///<param name="_best2Offer"></param>
		///<param name="_best2OfferVolume"></param>
		///<param name="_best3Offer"></param>
		///<param name="_best3OfferVolume"></param>
		///<param name="_nmTotalTradedQtty"></param>
		///<param name="_prevPriorPrice"></param>
		///<param name="_sellCount"></param>
		///<param name="_buyCount"></param>
		///<param name="_nmTotalTradedValue"></param>
		///<param name="_totalBidQtty"></param>
		///<param name="_totalSellTradingQtty"></param>
		///<param name="_totalOfferQtty"></param>
		///<param name="_totalBuyTradingQtty"></param>
		///<param name="_bidCount"></param>
		///<param name="_offerCount"></param>
		///<param name="_buyForeignQtty"></param>
		///<param name="_buyForeignValue"></param>
		///<param name="_sellForeignQtty"></param>
		///<param name="_sellForeignValue"></param>
		///<param name="_remainForeignQtty"></param>
		///<param name="_ptMatchPrice"></param>
		///<param name="_ptMatchQtty"></param>
		///<param name="_ptTotalTradedQtty"></param>
		///<param name="_ptTotalTradedValue"></param>
		///<param name="_totalListingQtty"></param>
		///<param name="_openPrice"></param>
		///<param name="_closePrice"></param>
		///<param name="_averagePrice"></param>
		///<param name="_status"></param>
		///<param name="_sequence"></param>
		public static HastcStocks CreateHastcStocks(System.DateTime? _tradeDate, System.Int16? _stockno, System.String _stockSymbol, 
			System.String _stockType, System.Int64? _ceiling, System.Int64? _floor, System.String _securityName, 
			System.Int64? _priorClosePrice, System.Int64? _last, System.Int64? _lastVol, System.Int64? _lastVal, 
			System.Int64? _highest, System.Int64? _average, System.Int64? _lowest, System.Int64? _totalshares, 
			System.Int64? _totalValue, System.Int64? _best1Bid, System.Int64? _best1BidVolume, System.Int64? _best2Bid, 
			System.Int64? _best2BidVolume, System.Int64? _best3Bid, System.Int64? _best3BidVolume, 
			System.Int64? _best1Offer, System.Int64? _best1OfferVolume, System.Int64? _best2Offer, 
			System.Int64? _best2OfferVolume, System.Int64? _best3Offer, System.Int64? _best3OfferVolume, 
			System.Int64? _nmTotalTradedQtty, System.Int64? _prevPriorPrice, System.Int64? _sellCount, 
			System.Int64? _buyCount, System.Int64? _nmTotalTradedValue, System.Int64? _totalBidQtty, 
			System.Int64? _totalSellTradingQtty, System.Int64? _totalOfferQtty, System.Int64? _totalBuyTradingQtty, 
			System.Int64? _bidCount, System.Int64? _offerCount, System.Int64? _buyForeignQtty, System.Int64? _buyForeignValue, 
			System.Int64? _sellForeignQtty, System.Int64? _sellForeignValue, System.Int64? _remainForeignQtty, 
			System.Int64? _ptMatchPrice, System.Int64? _ptMatchQtty, System.Int64? _ptTotalTradedQtty, 
			System.Int64? _ptTotalTradedValue, System.Int64? _totalListingQtty, System.Int64? _openPrice, 
			System.Int64? _closePrice, System.Int64? _averagePrice, System.String _status, System.Int64? _sequence)
		{
			HastcStocks newHastcStocks = new HastcStocks();
			newHastcStocks.TradeDate = _tradeDate;
			newHastcStocks.Stockno = _stockno;
			newHastcStocks.StockSymbol = _stockSymbol;
			newHastcStocks.StockType = _stockType;
			newHastcStocks.Ceiling = _ceiling;
			newHastcStocks.Floor = _floor;
			newHastcStocks.SecurityName = _securityName;
			newHastcStocks.PriorClosePrice = _priorClosePrice;
			newHastcStocks.Last = _last;
			newHastcStocks.LastVol = _lastVol;
			newHastcStocks.LastVal = _lastVal;
			newHastcStocks.Highest = _highest;
			newHastcStocks.Average = _average;
			newHastcStocks.Lowest = _lowest;
			newHastcStocks.Totalshares = _totalshares;
			newHastcStocks.TotalValue = _totalValue;
			newHastcStocks.Best1Bid = _best1Bid;
			newHastcStocks.Best1BidVolume = _best1BidVolume;
			newHastcStocks.Best2Bid = _best2Bid;
			newHastcStocks.Best2BidVolume = _best2BidVolume;
			newHastcStocks.Best3Bid = _best3Bid;
			newHastcStocks.Best3BidVolume = _best3BidVolume;
			newHastcStocks.Best1Offer = _best1Offer;
			newHastcStocks.Best1OfferVolume = _best1OfferVolume;
			newHastcStocks.Best2Offer = _best2Offer;
			newHastcStocks.Best2OfferVolume = _best2OfferVolume;
			newHastcStocks.Best3Offer = _best3Offer;
			newHastcStocks.Best3OfferVolume = _best3OfferVolume;
			newHastcStocks.NmTotalTradedQtty = _nmTotalTradedQtty;
			newHastcStocks.PrevPriorPrice = _prevPriorPrice;
			newHastcStocks.SellCount = _sellCount;
			newHastcStocks.BuyCount = _buyCount;
			newHastcStocks.NmTotalTradedValue = _nmTotalTradedValue;
			newHastcStocks.TotalBidQtty = _totalBidQtty;
			newHastcStocks.TotalSellTradingQtty = _totalSellTradingQtty;
			newHastcStocks.TotalOfferQtty = _totalOfferQtty;
			newHastcStocks.TotalBuyTradingQtty = _totalBuyTradingQtty;
			newHastcStocks.BidCount = _bidCount;
			newHastcStocks.OfferCount = _offerCount;
			newHastcStocks.BuyForeignQtty = _buyForeignQtty;
			newHastcStocks.BuyForeignValue = _buyForeignValue;
			newHastcStocks.SellForeignQtty = _sellForeignQtty;
			newHastcStocks.SellForeignValue = _sellForeignValue;
			newHastcStocks.RemainForeignQtty = _remainForeignQtty;
			newHastcStocks.PtMatchPrice = _ptMatchPrice;
			newHastcStocks.PtMatchQtty = _ptMatchQtty;
			newHastcStocks.PtTotalTradedQtty = _ptTotalTradedQtty;
			newHastcStocks.PtTotalTradedValue = _ptTotalTradedValue;
			newHastcStocks.TotalListingQtty = _totalListingQtty;
			newHastcStocks.OpenPrice = _openPrice;
			newHastcStocks.ClosePrice = _closePrice;
			newHastcStocks.AveragePrice = _averagePrice;
			newHastcStocks.Status = _status;
			newHastcStocks.Sequence = _sequence;
			return newHastcStocks;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int64 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TradeDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsTradeDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? TradeDate
		{
			get
			{
				return this.entityData.TradeDate; 
			}
			
			set
			{
				if (this.entityData.TradeDate == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.TradeDate, this.entityData.TradeDate);
				this.entityData.TradeDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.TradeDate, this.entityData.TradeDate);
				OnPropertyChanged("TradeDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Stockno property. 
		///		
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsStocknoNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? Stockno
		{
			get
			{
				return this.entityData.Stockno; 
			}
			
			set
			{
				if (this.entityData.Stockno == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.Stockno, this.entityData.Stockno);
				this.entityData.Stockno = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.Stockno, this.entityData.Stockno);
				OnPropertyChanged("Stockno");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StockSymbol property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String StockSymbol
		{
			get
			{
				return this.entityData.StockSymbol; 
			}
			
			set
			{
				if (this.entityData.StockSymbol == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.StockSymbol, this.entityData.StockSymbol);
				this.entityData.StockSymbol = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.StockSymbol, this.entityData.StockSymbol);
				OnPropertyChanged("StockSymbol");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StockType property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String StockType
		{
			get
			{
				return this.entityData.StockType; 
			}
			
			set
			{
				if (this.entityData.StockType == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.StockType, this.entityData.StockType);
				this.entityData.StockType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.StockType, this.entityData.StockType);
				OnPropertyChanged("StockType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Ceiling property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsCeilingNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Ceiling
		{
			get
			{
				return this.entityData.Ceiling; 
			}
			
			set
			{
				if (this.entityData.Ceiling == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.Ceiling, this.entityData.Ceiling);
				this.entityData.Ceiling = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.Ceiling, this.entityData.Ceiling);
				OnPropertyChanged("Ceiling");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Floor property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsFloorNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Floor
		{
			get
			{
				return this.entityData.Floor; 
			}
			
			set
			{
				if (this.entityData.Floor == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.Floor, this.entityData.Floor);
				this.entityData.Floor = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.Floor, this.entityData.Floor);
				OnPropertyChanged("Floor");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SecurityName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String SecurityName
		{
			get
			{
				return this.entityData.SecurityName; 
			}
			
			set
			{
				if (this.entityData.SecurityName == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.SecurityName, this.entityData.SecurityName);
				this.entityData.SecurityName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.SecurityName, this.entityData.SecurityName);
				OnPropertyChanged("SecurityName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PriorClosePrice property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsPriorClosePriceNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? PriorClosePrice
		{
			get
			{
				return this.entityData.PriorClosePrice; 
			}
			
			set
			{
				if (this.entityData.PriorClosePrice == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.PriorClosePrice, this.entityData.PriorClosePrice);
				this.entityData.PriorClosePrice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.PriorClosePrice, this.entityData.PriorClosePrice);
				OnPropertyChanged("PriorClosePrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Last property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsLastNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Last
		{
			get
			{
				return this.entityData.Last; 
			}
			
			set
			{
				if (this.entityData.Last == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.Last, this.entityData.Last);
				this.entityData.Last = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.Last, this.entityData.Last);
				OnPropertyChanged("Last");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastVol property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsLastVolNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? LastVol
		{
			get
			{
				return this.entityData.LastVol; 
			}
			
			set
			{
				if (this.entityData.LastVol == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.LastVol, this.entityData.LastVol);
				this.entityData.LastVol = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.LastVol, this.entityData.LastVol);
				OnPropertyChanged("LastVol");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastVal property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsLastValNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? LastVal
		{
			get
			{
				return this.entityData.LastVal; 
			}
			
			set
			{
				if (this.entityData.LastVal == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.LastVal, this.entityData.LastVal);
				this.entityData.LastVal = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.LastVal, this.entityData.LastVal);
				OnPropertyChanged("LastVal");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Highest property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsHighestNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Highest
		{
			get
			{
				return this.entityData.Highest; 
			}
			
			set
			{
				if (this.entityData.Highest == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.Highest, this.entityData.Highest);
				this.entityData.Highest = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.Highest, this.entityData.Highest);
				OnPropertyChanged("Highest");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Average property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsAverageNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Average
		{
			get
			{
				return this.entityData.Average; 
			}
			
			set
			{
				if (this.entityData.Average == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.Average, this.entityData.Average);
				this.entityData.Average = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.Average, this.entityData.Average);
				OnPropertyChanged("Average");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Lowest property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsLowestNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Lowest
		{
			get
			{
				return this.entityData.Lowest; 
			}
			
			set
			{
				if (this.entityData.Lowest == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.Lowest, this.entityData.Lowest);
				this.entityData.Lowest = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.Lowest, this.entityData.Lowest);
				OnPropertyChanged("Lowest");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Totalshares property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsTotalsharesNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Totalshares
		{
			get
			{
				return this.entityData.Totalshares; 
			}
			
			set
			{
				if (this.entityData.Totalshares == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.Totalshares, this.entityData.Totalshares);
				this.entityData.Totalshares = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.Totalshares, this.entityData.Totalshares);
				OnPropertyChanged("Totalshares");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalValue property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsTotalValueNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? TotalValue
		{
			get
			{
				return this.entityData.TotalValue; 
			}
			
			set
			{
				if (this.entityData.TotalValue == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.TotalValue, this.entityData.TotalValue);
				this.entityData.TotalValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.TotalValue, this.entityData.TotalValue);
				OnPropertyChanged("TotalValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Best1Bid property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsBest1BidNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Best1Bid
		{
			get
			{
				return this.entityData.Best1Bid; 
			}
			
			set
			{
				if (this.entityData.Best1Bid == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.Best1Bid, this.entityData.Best1Bid);
				this.entityData.Best1Bid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.Best1Bid, this.entityData.Best1Bid);
				OnPropertyChanged("Best1Bid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Best1BidVolume property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsBest1BidVolumeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Best1BidVolume
		{
			get
			{
				return this.entityData.Best1BidVolume; 
			}
			
			set
			{
				if (this.entityData.Best1BidVolume == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.Best1BidVolume, this.entityData.Best1BidVolume);
				this.entityData.Best1BidVolume = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.Best1BidVolume, this.entityData.Best1BidVolume);
				OnPropertyChanged("Best1BidVolume");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Best2Bid property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsBest2BidNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Best2Bid
		{
			get
			{
				return this.entityData.Best2Bid; 
			}
			
			set
			{
				if (this.entityData.Best2Bid == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.Best2Bid, this.entityData.Best2Bid);
				this.entityData.Best2Bid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.Best2Bid, this.entityData.Best2Bid);
				OnPropertyChanged("Best2Bid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Best2BidVolume property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsBest2BidVolumeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Best2BidVolume
		{
			get
			{
				return this.entityData.Best2BidVolume; 
			}
			
			set
			{
				if (this.entityData.Best2BidVolume == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.Best2BidVolume, this.entityData.Best2BidVolume);
				this.entityData.Best2BidVolume = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.Best2BidVolume, this.entityData.Best2BidVolume);
				OnPropertyChanged("Best2BidVolume");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Best3Bid property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsBest3BidNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Best3Bid
		{
			get
			{
				return this.entityData.Best3Bid; 
			}
			
			set
			{
				if (this.entityData.Best3Bid == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.Best3Bid, this.entityData.Best3Bid);
				this.entityData.Best3Bid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.Best3Bid, this.entityData.Best3Bid);
				OnPropertyChanged("Best3Bid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Best3BidVolume property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsBest3BidVolumeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Best3BidVolume
		{
			get
			{
				return this.entityData.Best3BidVolume; 
			}
			
			set
			{
				if (this.entityData.Best3BidVolume == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.Best3BidVolume, this.entityData.Best3BidVolume);
				this.entityData.Best3BidVolume = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.Best3BidVolume, this.entityData.Best3BidVolume);
				OnPropertyChanged("Best3BidVolume");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Best1Offer property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsBest1OfferNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Best1Offer
		{
			get
			{
				return this.entityData.Best1Offer; 
			}
			
			set
			{
				if (this.entityData.Best1Offer == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.Best1Offer, this.entityData.Best1Offer);
				this.entityData.Best1Offer = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.Best1Offer, this.entityData.Best1Offer);
				OnPropertyChanged("Best1Offer");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Best1OfferVolume property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsBest1OfferVolumeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Best1OfferVolume
		{
			get
			{
				return this.entityData.Best1OfferVolume; 
			}
			
			set
			{
				if (this.entityData.Best1OfferVolume == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.Best1OfferVolume, this.entityData.Best1OfferVolume);
				this.entityData.Best1OfferVolume = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.Best1OfferVolume, this.entityData.Best1OfferVolume);
				OnPropertyChanged("Best1OfferVolume");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Best2Offer property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsBest2OfferNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Best2Offer
		{
			get
			{
				return this.entityData.Best2Offer; 
			}
			
			set
			{
				if (this.entityData.Best2Offer == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.Best2Offer, this.entityData.Best2Offer);
				this.entityData.Best2Offer = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.Best2Offer, this.entityData.Best2Offer);
				OnPropertyChanged("Best2Offer");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Best2OfferVolume property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsBest2OfferVolumeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Best2OfferVolume
		{
			get
			{
				return this.entityData.Best2OfferVolume; 
			}
			
			set
			{
				if (this.entityData.Best2OfferVolume == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.Best2OfferVolume, this.entityData.Best2OfferVolume);
				this.entityData.Best2OfferVolume = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.Best2OfferVolume, this.entityData.Best2OfferVolume);
				OnPropertyChanged("Best2OfferVolume");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Best3Offer property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsBest3OfferNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Best3Offer
		{
			get
			{
				return this.entityData.Best3Offer; 
			}
			
			set
			{
				if (this.entityData.Best3Offer == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.Best3Offer, this.entityData.Best3Offer);
				this.entityData.Best3Offer = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.Best3Offer, this.entityData.Best3Offer);
				OnPropertyChanged("Best3Offer");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Best3OfferVolume property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsBest3OfferVolumeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Best3OfferVolume
		{
			get
			{
				return this.entityData.Best3OfferVolume; 
			}
			
			set
			{
				if (this.entityData.Best3OfferVolume == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.Best3OfferVolume, this.entityData.Best3OfferVolume);
				this.entityData.Best3OfferVolume = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.Best3OfferVolume, this.entityData.Best3OfferVolume);
				OnPropertyChanged("Best3OfferVolume");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NmTotalTradedQtty property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsNmTotalTradedQttyNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? NmTotalTradedQtty
		{
			get
			{
				return this.entityData.NmTotalTradedQtty; 
			}
			
			set
			{
				if (this.entityData.NmTotalTradedQtty == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.NmTotalTradedQtty, this.entityData.NmTotalTradedQtty);
				this.entityData.NmTotalTradedQtty = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.NmTotalTradedQtty, this.entityData.NmTotalTradedQtty);
				OnPropertyChanged("NmTotalTradedQtty");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrevPriorPrice property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsPrevPriorPriceNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? PrevPriorPrice
		{
			get
			{
				return this.entityData.PrevPriorPrice; 
			}
			
			set
			{
				if (this.entityData.PrevPriorPrice == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.PrevPriorPrice, this.entityData.PrevPriorPrice);
				this.entityData.PrevPriorPrice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.PrevPriorPrice, this.entityData.PrevPriorPrice);
				OnPropertyChanged("PrevPriorPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SellCount property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsSellCountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? SellCount
		{
			get
			{
				return this.entityData.SellCount; 
			}
			
			set
			{
				if (this.entityData.SellCount == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.SellCount, this.entityData.SellCount);
				this.entityData.SellCount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.SellCount, this.entityData.SellCount);
				OnPropertyChanged("SellCount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BuyCount property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsBuyCountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? BuyCount
		{
			get
			{
				return this.entityData.BuyCount; 
			}
			
			set
			{
				if (this.entityData.BuyCount == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.BuyCount, this.entityData.BuyCount);
				this.entityData.BuyCount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.BuyCount, this.entityData.BuyCount);
				OnPropertyChanged("BuyCount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NmTotalTradedValue property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsNmTotalTradedValueNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? NmTotalTradedValue
		{
			get
			{
				return this.entityData.NmTotalTradedValue; 
			}
			
			set
			{
				if (this.entityData.NmTotalTradedValue == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.NmTotalTradedValue, this.entityData.NmTotalTradedValue);
				this.entityData.NmTotalTradedValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.NmTotalTradedValue, this.entityData.NmTotalTradedValue);
				OnPropertyChanged("NmTotalTradedValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalBidQtty property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsTotalBidQttyNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? TotalBidQtty
		{
			get
			{
				return this.entityData.TotalBidQtty; 
			}
			
			set
			{
				if (this.entityData.TotalBidQtty == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.TotalBidQtty, this.entityData.TotalBidQtty);
				this.entityData.TotalBidQtty = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.TotalBidQtty, this.entityData.TotalBidQtty);
				OnPropertyChanged("TotalBidQtty");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalSellTradingQtty property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsTotalSellTradingQttyNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? TotalSellTradingQtty
		{
			get
			{
				return this.entityData.TotalSellTradingQtty; 
			}
			
			set
			{
				if (this.entityData.TotalSellTradingQtty == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.TotalSellTradingQtty, this.entityData.TotalSellTradingQtty);
				this.entityData.TotalSellTradingQtty = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.TotalSellTradingQtty, this.entityData.TotalSellTradingQtty);
				OnPropertyChanged("TotalSellTradingQtty");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalOfferQtty property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsTotalOfferQttyNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? TotalOfferQtty
		{
			get
			{
				return this.entityData.TotalOfferQtty; 
			}
			
			set
			{
				if (this.entityData.TotalOfferQtty == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.TotalOfferQtty, this.entityData.TotalOfferQtty);
				this.entityData.TotalOfferQtty = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.TotalOfferQtty, this.entityData.TotalOfferQtty);
				OnPropertyChanged("TotalOfferQtty");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalBuyTradingQtty property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsTotalBuyTradingQttyNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? TotalBuyTradingQtty
		{
			get
			{
				return this.entityData.TotalBuyTradingQtty; 
			}
			
			set
			{
				if (this.entityData.TotalBuyTradingQtty == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.TotalBuyTradingQtty, this.entityData.TotalBuyTradingQtty);
				this.entityData.TotalBuyTradingQtty = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.TotalBuyTradingQtty, this.entityData.TotalBuyTradingQtty);
				OnPropertyChanged("TotalBuyTradingQtty");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BidCount property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsBidCountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? BidCount
		{
			get
			{
				return this.entityData.BidCount; 
			}
			
			set
			{
				if (this.entityData.BidCount == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.BidCount, this.entityData.BidCount);
				this.entityData.BidCount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.BidCount, this.entityData.BidCount);
				OnPropertyChanged("BidCount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OfferCount property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsOfferCountNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? OfferCount
		{
			get
			{
				return this.entityData.OfferCount; 
			}
			
			set
			{
				if (this.entityData.OfferCount == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.OfferCount, this.entityData.OfferCount);
				this.entityData.OfferCount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.OfferCount, this.entityData.OfferCount);
				OnPropertyChanged("OfferCount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BuyForeignQtty property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsBuyForeignQttyNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? BuyForeignQtty
		{
			get
			{
				return this.entityData.BuyForeignQtty; 
			}
			
			set
			{
				if (this.entityData.BuyForeignQtty == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.BuyForeignQtty, this.entityData.BuyForeignQtty);
				this.entityData.BuyForeignQtty = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.BuyForeignQtty, this.entityData.BuyForeignQtty);
				OnPropertyChanged("BuyForeignQtty");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BuyForeignValue property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsBuyForeignValueNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? BuyForeignValue
		{
			get
			{
				return this.entityData.BuyForeignValue; 
			}
			
			set
			{
				if (this.entityData.BuyForeignValue == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.BuyForeignValue, this.entityData.BuyForeignValue);
				this.entityData.BuyForeignValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.BuyForeignValue, this.entityData.BuyForeignValue);
				OnPropertyChanged("BuyForeignValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SellForeignQtty property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsSellForeignQttyNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? SellForeignQtty
		{
			get
			{
				return this.entityData.SellForeignQtty; 
			}
			
			set
			{
				if (this.entityData.SellForeignQtty == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.SellForeignQtty, this.entityData.SellForeignQtty);
				this.entityData.SellForeignQtty = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.SellForeignQtty, this.entityData.SellForeignQtty);
				OnPropertyChanged("SellForeignQtty");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SellForeignValue property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsSellForeignValueNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? SellForeignValue
		{
			get
			{
				return this.entityData.SellForeignValue; 
			}
			
			set
			{
				if (this.entityData.SellForeignValue == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.SellForeignValue, this.entityData.SellForeignValue);
				this.entityData.SellForeignValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.SellForeignValue, this.entityData.SellForeignValue);
				OnPropertyChanged("SellForeignValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RemainForeignQtty property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsRemainForeignQttyNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? RemainForeignQtty
		{
			get
			{
				return this.entityData.RemainForeignQtty; 
			}
			
			set
			{
				if (this.entityData.RemainForeignQtty == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.RemainForeignQtty, this.entityData.RemainForeignQtty);
				this.entityData.RemainForeignQtty = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.RemainForeignQtty, this.entityData.RemainForeignQtty);
				OnPropertyChanged("RemainForeignQtty");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PtMatchPrice property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsPtMatchPriceNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? PtMatchPrice
		{
			get
			{
				return this.entityData.PtMatchPrice; 
			}
			
			set
			{
				if (this.entityData.PtMatchPrice == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.PtMatchPrice, this.entityData.PtMatchPrice);
				this.entityData.PtMatchPrice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.PtMatchPrice, this.entityData.PtMatchPrice);
				OnPropertyChanged("PtMatchPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PtMatchQtty property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsPtMatchQttyNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? PtMatchQtty
		{
			get
			{
				return this.entityData.PtMatchQtty; 
			}
			
			set
			{
				if (this.entityData.PtMatchQtty == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.PtMatchQtty, this.entityData.PtMatchQtty);
				this.entityData.PtMatchQtty = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.PtMatchQtty, this.entityData.PtMatchQtty);
				OnPropertyChanged("PtMatchQtty");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PtTotalTradedQtty property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsPtTotalTradedQttyNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? PtTotalTradedQtty
		{
			get
			{
				return this.entityData.PtTotalTradedQtty; 
			}
			
			set
			{
				if (this.entityData.PtTotalTradedQtty == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.PtTotalTradedQtty, this.entityData.PtTotalTradedQtty);
				this.entityData.PtTotalTradedQtty = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.PtTotalTradedQtty, this.entityData.PtTotalTradedQtty);
				OnPropertyChanged("PtTotalTradedQtty");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PtTotalTradedValue property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsPtTotalTradedValueNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? PtTotalTradedValue
		{
			get
			{
				return this.entityData.PtTotalTradedValue; 
			}
			
			set
			{
				if (this.entityData.PtTotalTradedValue == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.PtTotalTradedValue, this.entityData.PtTotalTradedValue);
				this.entityData.PtTotalTradedValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.PtTotalTradedValue, this.entityData.PtTotalTradedValue);
				OnPropertyChanged("PtTotalTradedValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalListingQtty property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsTotalListingQttyNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? TotalListingQtty
		{
			get
			{
				return this.entityData.TotalListingQtty; 
			}
			
			set
			{
				if (this.entityData.TotalListingQtty == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.TotalListingQtty, this.entityData.TotalListingQtty);
				this.entityData.TotalListingQtty = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.TotalListingQtty, this.entityData.TotalListingQtty);
				OnPropertyChanged("TotalListingQtty");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OpenPrice property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsOpenPriceNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? OpenPrice
		{
			get
			{
				return this.entityData.OpenPrice; 
			}
			
			set
			{
				if (this.entityData.OpenPrice == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.OpenPrice, this.entityData.OpenPrice);
				this.entityData.OpenPrice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.OpenPrice, this.entityData.OpenPrice);
				OnPropertyChanged("OpenPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ClosePrice property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsClosePriceNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? ClosePrice
		{
			get
			{
				return this.entityData.ClosePrice; 
			}
			
			set
			{
				if (this.entityData.ClosePrice == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.ClosePrice, this.entityData.ClosePrice);
				this.entityData.ClosePrice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.ClosePrice, this.entityData.ClosePrice);
				OnPropertyChanged("ClosePrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AveragePrice property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsAveragePriceNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? AveragePrice
		{
			get
			{
				return this.entityData.AveragePrice; 
			}
			
			set
			{
				if (this.entityData.AveragePrice == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.AveragePrice, this.entityData.AveragePrice);
				this.entityData.AveragePrice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.AveragePrice, this.entityData.AveragePrice);
				OnPropertyChanged("AveragePrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Sequence property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsSequenceNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Sequence
		{
			get
			{
				return this.entityData.Sequence; 
			}
			
			set
			{
				if (this.entityData.Sequence == value)
					return;
					
				OnColumnChanging(HastcStocksColumn.Sequence, this.entityData.Sequence);
				this.entityData.Sequence = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HastcStocksColumn.Sequence, this.entityData.Sequence);
				OnPropertyChanged("Sequence");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("StockSymbol", "Stock Symbol", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("StockType", "Stock Type", 1));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SecurityName", "Security Name", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Status", "Status", 1));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "hastc_stocks"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "TradeDate", "Stockno", "StockSymbol", "StockType", "Ceiling", "Floor", "SecurityName", "PriorClosePrice", "Last", "LastVol", "LastVal", "Highest", "Average", "Lowest", "Totalshares", "TotalValue", "Best1Bid", "Best1BidVolume", "Best2Bid", "Best2BidVolume", "Best3Bid", "Best3BidVolume", "Best1Offer", "Best1OfferVolume", "Best2Offer", "Best2OfferVolume", "Best3Offer", "Best3OfferVolume", "NM_TOTAL_TRADED_QTTY", "PREV_PRIOR_PRICE", "SELL_COUNT", "BUY_COUNT", "NM_TOTAL_TRADED_VALUE", "TOTAL_BID_QTTY", "TOTAL_SELL_TRADING_QTTY", "TOTAL_OFFER_QTTY", "TOTAL_BUY_TRADING_QTTY", "BID_COUNT", "OFFER_COUNT", "BUY_FOREIGN_QTTY", "BUY_FOREIGN_VALUE", "SELL_FOREIGN_QTTY", "SELL_FOREIGN_VALUE", "REMAIN_FOREIGN_QTTY", "PT_MATCH_PRICE", "PT_MATCH_QTTY", "PT_TOTAL_TRADED_QTTY", "PT_TOTAL_TRADED_VALUE", "TOTAL_LISTING_QTTY", "OPEN_PRICE", "CLOSE_PRICE", "AVERAGE_PRICE", "STATUS", "Sequence"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as HastcStocksEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (HastcStocks) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<HastcStocks>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as HastcStocks);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed HastcStocks Entity 
		///</summary>
		protected virtual HastcStocks Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			HastcStocks copy = new HastcStocks();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.TradeDate = this.TradeDate;
				copy.Stockno = this.Stockno;
				copy.StockSymbol = this.StockSymbol;
				copy.StockType = this.StockType;
				copy.Ceiling = this.Ceiling;
				copy.Floor = this.Floor;
				copy.SecurityName = this.SecurityName;
				copy.PriorClosePrice = this.PriorClosePrice;
				copy.Last = this.Last;
				copy.LastVol = this.LastVol;
				copy.LastVal = this.LastVal;
				copy.Highest = this.Highest;
				copy.Average = this.Average;
				copy.Lowest = this.Lowest;
				copy.Totalshares = this.Totalshares;
				copy.TotalValue = this.TotalValue;
				copy.Best1Bid = this.Best1Bid;
				copy.Best1BidVolume = this.Best1BidVolume;
				copy.Best2Bid = this.Best2Bid;
				copy.Best2BidVolume = this.Best2BidVolume;
				copy.Best3Bid = this.Best3Bid;
				copy.Best3BidVolume = this.Best3BidVolume;
				copy.Best1Offer = this.Best1Offer;
				copy.Best1OfferVolume = this.Best1OfferVolume;
				copy.Best2Offer = this.Best2Offer;
				copy.Best2OfferVolume = this.Best2OfferVolume;
				copy.Best3Offer = this.Best3Offer;
				copy.Best3OfferVolume = this.Best3OfferVolume;
				copy.NmTotalTradedQtty = this.NmTotalTradedQtty;
				copy.PrevPriorPrice = this.PrevPriorPrice;
				copy.SellCount = this.SellCount;
				copy.BuyCount = this.BuyCount;
				copy.NmTotalTradedValue = this.NmTotalTradedValue;
				copy.TotalBidQtty = this.TotalBidQtty;
				copy.TotalSellTradingQtty = this.TotalSellTradingQtty;
				copy.TotalOfferQtty = this.TotalOfferQtty;
				copy.TotalBuyTradingQtty = this.TotalBuyTradingQtty;
				copy.BidCount = this.BidCount;
				copy.OfferCount = this.OfferCount;
				copy.BuyForeignQtty = this.BuyForeignQtty;
				copy.BuyForeignValue = this.BuyForeignValue;
				copy.SellForeignQtty = this.SellForeignQtty;
				copy.SellForeignValue = this.SellForeignValue;
				copy.RemainForeignQtty = this.RemainForeignQtty;
				copy.PtMatchPrice = this.PtMatchPrice;
				copy.PtMatchQtty = this.PtMatchQtty;
				copy.PtTotalTradedQtty = this.PtTotalTradedQtty;
				copy.PtTotalTradedValue = this.PtTotalTradedValue;
				copy.TotalListingQtty = this.TotalListingQtty;
				copy.OpenPrice = this.OpenPrice;
				copy.ClosePrice = this.ClosePrice;
				copy.AveragePrice = this.AveragePrice;
				copy.Status = this.Status;
				copy.Sequence = this.Sequence;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed HastcStocks Entity 
		///</summary>
		public virtual HastcStocks Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed HastcStocks Entity which is a deep copy of the current entity.
		///</summary>
		public virtual HastcStocks DeepCopy()
		{
			return EntityHelper.Clone<HastcStocks>(this as HastcStocks);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as HastcStocksEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new HastcStocksEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as HastcStocksEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(HastcStocksColumn column)
		{
			switch(column)
			{
					case HastcStocksColumn.Id:
					return entityData.Id != _originalData.Id;
					case HastcStocksColumn.TradeDate:
					return entityData.TradeDate != _originalData.TradeDate;
					case HastcStocksColumn.Stockno:
					return entityData.Stockno != _originalData.Stockno;
					case HastcStocksColumn.StockSymbol:
					return entityData.StockSymbol != _originalData.StockSymbol;
					case HastcStocksColumn.StockType:
					return entityData.StockType != _originalData.StockType;
					case HastcStocksColumn.Ceiling:
					return entityData.Ceiling != _originalData.Ceiling;
					case HastcStocksColumn.Floor:
					return entityData.Floor != _originalData.Floor;
					case HastcStocksColumn.SecurityName:
					return entityData.SecurityName != _originalData.SecurityName;
					case HastcStocksColumn.PriorClosePrice:
					return entityData.PriorClosePrice != _originalData.PriorClosePrice;
					case HastcStocksColumn.Last:
					return entityData.Last != _originalData.Last;
					case HastcStocksColumn.LastVol:
					return entityData.LastVol != _originalData.LastVol;
					case HastcStocksColumn.LastVal:
					return entityData.LastVal != _originalData.LastVal;
					case HastcStocksColumn.Highest:
					return entityData.Highest != _originalData.Highest;
					case HastcStocksColumn.Average:
					return entityData.Average != _originalData.Average;
					case HastcStocksColumn.Lowest:
					return entityData.Lowest != _originalData.Lowest;
					case HastcStocksColumn.Totalshares:
					return entityData.Totalshares != _originalData.Totalshares;
					case HastcStocksColumn.TotalValue:
					return entityData.TotalValue != _originalData.TotalValue;
					case HastcStocksColumn.Best1Bid:
					return entityData.Best1Bid != _originalData.Best1Bid;
					case HastcStocksColumn.Best1BidVolume:
					return entityData.Best1BidVolume != _originalData.Best1BidVolume;
					case HastcStocksColumn.Best2Bid:
					return entityData.Best2Bid != _originalData.Best2Bid;
					case HastcStocksColumn.Best2BidVolume:
					return entityData.Best2BidVolume != _originalData.Best2BidVolume;
					case HastcStocksColumn.Best3Bid:
					return entityData.Best3Bid != _originalData.Best3Bid;
					case HastcStocksColumn.Best3BidVolume:
					return entityData.Best3BidVolume != _originalData.Best3BidVolume;
					case HastcStocksColumn.Best1Offer:
					return entityData.Best1Offer != _originalData.Best1Offer;
					case HastcStocksColumn.Best1OfferVolume:
					return entityData.Best1OfferVolume != _originalData.Best1OfferVolume;
					case HastcStocksColumn.Best2Offer:
					return entityData.Best2Offer != _originalData.Best2Offer;
					case HastcStocksColumn.Best2OfferVolume:
					return entityData.Best2OfferVolume != _originalData.Best2OfferVolume;
					case HastcStocksColumn.Best3Offer:
					return entityData.Best3Offer != _originalData.Best3Offer;
					case HastcStocksColumn.Best3OfferVolume:
					return entityData.Best3OfferVolume != _originalData.Best3OfferVolume;
					case HastcStocksColumn.NmTotalTradedQtty:
					return entityData.NmTotalTradedQtty != _originalData.NmTotalTradedQtty;
					case HastcStocksColumn.PrevPriorPrice:
					return entityData.PrevPriorPrice != _originalData.PrevPriorPrice;
					case HastcStocksColumn.SellCount:
					return entityData.SellCount != _originalData.SellCount;
					case HastcStocksColumn.BuyCount:
					return entityData.BuyCount != _originalData.BuyCount;
					case HastcStocksColumn.NmTotalTradedValue:
					return entityData.NmTotalTradedValue != _originalData.NmTotalTradedValue;
					case HastcStocksColumn.TotalBidQtty:
					return entityData.TotalBidQtty != _originalData.TotalBidQtty;
					case HastcStocksColumn.TotalSellTradingQtty:
					return entityData.TotalSellTradingQtty != _originalData.TotalSellTradingQtty;
					case HastcStocksColumn.TotalOfferQtty:
					return entityData.TotalOfferQtty != _originalData.TotalOfferQtty;
					case HastcStocksColumn.TotalBuyTradingQtty:
					return entityData.TotalBuyTradingQtty != _originalData.TotalBuyTradingQtty;
					case HastcStocksColumn.BidCount:
					return entityData.BidCount != _originalData.BidCount;
					case HastcStocksColumn.OfferCount:
					return entityData.OfferCount != _originalData.OfferCount;
					case HastcStocksColumn.BuyForeignQtty:
					return entityData.BuyForeignQtty != _originalData.BuyForeignQtty;
					case HastcStocksColumn.BuyForeignValue:
					return entityData.BuyForeignValue != _originalData.BuyForeignValue;
					case HastcStocksColumn.SellForeignQtty:
					return entityData.SellForeignQtty != _originalData.SellForeignQtty;
					case HastcStocksColumn.SellForeignValue:
					return entityData.SellForeignValue != _originalData.SellForeignValue;
					case HastcStocksColumn.RemainForeignQtty:
					return entityData.RemainForeignQtty != _originalData.RemainForeignQtty;
					case HastcStocksColumn.PtMatchPrice:
					return entityData.PtMatchPrice != _originalData.PtMatchPrice;
					case HastcStocksColumn.PtMatchQtty:
					return entityData.PtMatchQtty != _originalData.PtMatchQtty;
					case HastcStocksColumn.PtTotalTradedQtty:
					return entityData.PtTotalTradedQtty != _originalData.PtTotalTradedQtty;
					case HastcStocksColumn.PtTotalTradedValue:
					return entityData.PtTotalTradedValue != _originalData.PtTotalTradedValue;
					case HastcStocksColumn.TotalListingQtty:
					return entityData.TotalListingQtty != _originalData.TotalListingQtty;
					case HastcStocksColumn.OpenPrice:
					return entityData.OpenPrice != _originalData.OpenPrice;
					case HastcStocksColumn.ClosePrice:
					return entityData.ClosePrice != _originalData.ClosePrice;
					case HastcStocksColumn.AveragePrice:
					return entityData.AveragePrice != _originalData.AveragePrice;
					case HastcStocksColumn.Status:
					return entityData.Status != _originalData.Status;
					case HastcStocksColumn.Sequence:
					return entityData.Sequence != _originalData.Sequence;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< HastcStocksColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.TradeDate != _originalData.TradeDate;
			result = result || entityData.Stockno != _originalData.Stockno;
			result = result || entityData.StockSymbol != _originalData.StockSymbol;
			result = result || entityData.StockType != _originalData.StockType;
			result = result || entityData.Ceiling != _originalData.Ceiling;
			result = result || entityData.Floor != _originalData.Floor;
			result = result || entityData.SecurityName != _originalData.SecurityName;
			result = result || entityData.PriorClosePrice != _originalData.PriorClosePrice;
			result = result || entityData.Last != _originalData.Last;
			result = result || entityData.LastVol != _originalData.LastVol;
			result = result || entityData.LastVal != _originalData.LastVal;
			result = result || entityData.Highest != _originalData.Highest;
			result = result || entityData.Average != _originalData.Average;
			result = result || entityData.Lowest != _originalData.Lowest;
			result = result || entityData.Totalshares != _originalData.Totalshares;
			result = result || entityData.TotalValue != _originalData.TotalValue;
			result = result || entityData.Best1Bid != _originalData.Best1Bid;
			result = result || entityData.Best1BidVolume != _originalData.Best1BidVolume;
			result = result || entityData.Best2Bid != _originalData.Best2Bid;
			result = result || entityData.Best2BidVolume != _originalData.Best2BidVolume;
			result = result || entityData.Best3Bid != _originalData.Best3Bid;
			result = result || entityData.Best3BidVolume != _originalData.Best3BidVolume;
			result = result || entityData.Best1Offer != _originalData.Best1Offer;
			result = result || entityData.Best1OfferVolume != _originalData.Best1OfferVolume;
			result = result || entityData.Best2Offer != _originalData.Best2Offer;
			result = result || entityData.Best2OfferVolume != _originalData.Best2OfferVolume;
			result = result || entityData.Best3Offer != _originalData.Best3Offer;
			result = result || entityData.Best3OfferVolume != _originalData.Best3OfferVolume;
			result = result || entityData.NmTotalTradedQtty != _originalData.NmTotalTradedQtty;
			result = result || entityData.PrevPriorPrice != _originalData.PrevPriorPrice;
			result = result || entityData.SellCount != _originalData.SellCount;
			result = result || entityData.BuyCount != _originalData.BuyCount;
			result = result || entityData.NmTotalTradedValue != _originalData.NmTotalTradedValue;
			result = result || entityData.TotalBidQtty != _originalData.TotalBidQtty;
			result = result || entityData.TotalSellTradingQtty != _originalData.TotalSellTradingQtty;
			result = result || entityData.TotalOfferQtty != _originalData.TotalOfferQtty;
			result = result || entityData.TotalBuyTradingQtty != _originalData.TotalBuyTradingQtty;
			result = result || entityData.BidCount != _originalData.BidCount;
			result = result || entityData.OfferCount != _originalData.OfferCount;
			result = result || entityData.BuyForeignQtty != _originalData.BuyForeignQtty;
			result = result || entityData.BuyForeignValue != _originalData.BuyForeignValue;
			result = result || entityData.SellForeignQtty != _originalData.SellForeignQtty;
			result = result || entityData.SellForeignValue != _originalData.SellForeignValue;
			result = result || entityData.RemainForeignQtty != _originalData.RemainForeignQtty;
			result = result || entityData.PtMatchPrice != _originalData.PtMatchPrice;
			result = result || entityData.PtMatchQtty != _originalData.PtMatchQtty;
			result = result || entityData.PtTotalTradedQtty != _originalData.PtTotalTradedQtty;
			result = result || entityData.PtTotalTradedValue != _originalData.PtTotalTradedValue;
			result = result || entityData.TotalListingQtty != _originalData.TotalListingQtty;
			result = result || entityData.OpenPrice != _originalData.OpenPrice;
			result = result || entityData.ClosePrice != _originalData.ClosePrice;
			result = result || entityData.AveragePrice != _originalData.AveragePrice;
			result = result || entityData.Status != _originalData.Status;
			result = result || entityData.Sequence != _originalData.Sequence;
			return result;
		}	
		
		///<summary>
		///  Returns a HastcStocks Entity with the original data.
		///</summary>
		public HastcStocks GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateHastcStocks(
				_originalData.TradeDate,
				_originalData.Stockno,
				_originalData.StockSymbol,
				_originalData.StockType,
				_originalData.Ceiling,
				_originalData.Floor,
				_originalData.SecurityName,
				_originalData.PriorClosePrice,
				_originalData.Last,
				_originalData.LastVol,
				_originalData.LastVal,
				_originalData.Highest,
				_originalData.Average,
				_originalData.Lowest,
				_originalData.Totalshares,
				_originalData.TotalValue,
				_originalData.Best1Bid,
				_originalData.Best1BidVolume,
				_originalData.Best2Bid,
				_originalData.Best2BidVolume,
				_originalData.Best3Bid,
				_originalData.Best3BidVolume,
				_originalData.Best1Offer,
				_originalData.Best1OfferVolume,
				_originalData.Best2Offer,
				_originalData.Best2OfferVolume,
				_originalData.Best3Offer,
				_originalData.Best3OfferVolume,
				_originalData.NmTotalTradedQtty,
				_originalData.PrevPriorPrice,
				_originalData.SellCount,
				_originalData.BuyCount,
				_originalData.NmTotalTradedValue,
				_originalData.TotalBidQtty,
				_originalData.TotalSellTradingQtty,
				_originalData.TotalOfferQtty,
				_originalData.TotalBuyTradingQtty,
				_originalData.BidCount,
				_originalData.OfferCount,
				_originalData.BuyForeignQtty,
				_originalData.BuyForeignValue,
				_originalData.SellForeignQtty,
				_originalData.SellForeignValue,
				_originalData.RemainForeignQtty,
				_originalData.PtMatchPrice,
				_originalData.PtMatchQtty,
				_originalData.PtTotalTradedQtty,
				_originalData.PtTotalTradedValue,
				_originalData.TotalListingQtty,
				_originalData.OpenPrice,
				_originalData.ClosePrice,
				_originalData.AveragePrice,
				_originalData.Status,
				_originalData.Sequence
				);
				
			return (HastcStocks)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="HastcStocksBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is HastcStocksBase)
				return ValueEquals(this, (HastcStocksBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="HastcStocksBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.TradeDate == null) ? string.Empty : this.TradeDate.ToString()).GetHashCode() ^ 
					((this.Stockno == null) ? string.Empty : this.Stockno.ToString()).GetHashCode() ^ 
					((this.StockSymbol == null) ? string.Empty : this.StockSymbol.ToString()).GetHashCode() ^ 
					((this.StockType == null) ? string.Empty : this.StockType.ToString()).GetHashCode() ^ 
					((this.Ceiling == null) ? string.Empty : this.Ceiling.ToString()).GetHashCode() ^ 
					((this.Floor == null) ? string.Empty : this.Floor.ToString()).GetHashCode() ^ 
					((this.SecurityName == null) ? string.Empty : this.SecurityName.ToString()).GetHashCode() ^ 
					((this.PriorClosePrice == null) ? string.Empty : this.PriorClosePrice.ToString()).GetHashCode() ^ 
					((this.Last == null) ? string.Empty : this.Last.ToString()).GetHashCode() ^ 
					((this.LastVol == null) ? string.Empty : this.LastVol.ToString()).GetHashCode() ^ 
					((this.LastVal == null) ? string.Empty : this.LastVal.ToString()).GetHashCode() ^ 
					((this.Highest == null) ? string.Empty : this.Highest.ToString()).GetHashCode() ^ 
					((this.Average == null) ? string.Empty : this.Average.ToString()).GetHashCode() ^ 
					((this.Lowest == null) ? string.Empty : this.Lowest.ToString()).GetHashCode() ^ 
					((this.Totalshares == null) ? string.Empty : this.Totalshares.ToString()).GetHashCode() ^ 
					((this.TotalValue == null) ? string.Empty : this.TotalValue.ToString()).GetHashCode() ^ 
					((this.Best1Bid == null) ? string.Empty : this.Best1Bid.ToString()).GetHashCode() ^ 
					((this.Best1BidVolume == null) ? string.Empty : this.Best1BidVolume.ToString()).GetHashCode() ^ 
					((this.Best2Bid == null) ? string.Empty : this.Best2Bid.ToString()).GetHashCode() ^ 
					((this.Best2BidVolume == null) ? string.Empty : this.Best2BidVolume.ToString()).GetHashCode() ^ 
					((this.Best3Bid == null) ? string.Empty : this.Best3Bid.ToString()).GetHashCode() ^ 
					((this.Best3BidVolume == null) ? string.Empty : this.Best3BidVolume.ToString()).GetHashCode() ^ 
					((this.Best1Offer == null) ? string.Empty : this.Best1Offer.ToString()).GetHashCode() ^ 
					((this.Best1OfferVolume == null) ? string.Empty : this.Best1OfferVolume.ToString()).GetHashCode() ^ 
					((this.Best2Offer == null) ? string.Empty : this.Best2Offer.ToString()).GetHashCode() ^ 
					((this.Best2OfferVolume == null) ? string.Empty : this.Best2OfferVolume.ToString()).GetHashCode() ^ 
					((this.Best3Offer == null) ? string.Empty : this.Best3Offer.ToString()).GetHashCode() ^ 
					((this.Best3OfferVolume == null) ? string.Empty : this.Best3OfferVolume.ToString()).GetHashCode() ^ 
					((this.NmTotalTradedQtty == null) ? string.Empty : this.NmTotalTradedQtty.ToString()).GetHashCode() ^ 
					((this.PrevPriorPrice == null) ? string.Empty : this.PrevPriorPrice.ToString()).GetHashCode() ^ 
					((this.SellCount == null) ? string.Empty : this.SellCount.ToString()).GetHashCode() ^ 
					((this.BuyCount == null) ? string.Empty : this.BuyCount.ToString()).GetHashCode() ^ 
					((this.NmTotalTradedValue == null) ? string.Empty : this.NmTotalTradedValue.ToString()).GetHashCode() ^ 
					((this.TotalBidQtty == null) ? string.Empty : this.TotalBidQtty.ToString()).GetHashCode() ^ 
					((this.TotalSellTradingQtty == null) ? string.Empty : this.TotalSellTradingQtty.ToString()).GetHashCode() ^ 
					((this.TotalOfferQtty == null) ? string.Empty : this.TotalOfferQtty.ToString()).GetHashCode() ^ 
					((this.TotalBuyTradingQtty == null) ? string.Empty : this.TotalBuyTradingQtty.ToString()).GetHashCode() ^ 
					((this.BidCount == null) ? string.Empty : this.BidCount.ToString()).GetHashCode() ^ 
					((this.OfferCount == null) ? string.Empty : this.OfferCount.ToString()).GetHashCode() ^ 
					((this.BuyForeignQtty == null) ? string.Empty : this.BuyForeignQtty.ToString()).GetHashCode() ^ 
					((this.BuyForeignValue == null) ? string.Empty : this.BuyForeignValue.ToString()).GetHashCode() ^ 
					((this.SellForeignQtty == null) ? string.Empty : this.SellForeignQtty.ToString()).GetHashCode() ^ 
					((this.SellForeignValue == null) ? string.Empty : this.SellForeignValue.ToString()).GetHashCode() ^ 
					((this.RemainForeignQtty == null) ? string.Empty : this.RemainForeignQtty.ToString()).GetHashCode() ^ 
					((this.PtMatchPrice == null) ? string.Empty : this.PtMatchPrice.ToString()).GetHashCode() ^ 
					((this.PtMatchQtty == null) ? string.Empty : this.PtMatchQtty.ToString()).GetHashCode() ^ 
					((this.PtTotalTradedQtty == null) ? string.Empty : this.PtTotalTradedQtty.ToString()).GetHashCode() ^ 
					((this.PtTotalTradedValue == null) ? string.Empty : this.PtTotalTradedValue.ToString()).GetHashCode() ^ 
					((this.TotalListingQtty == null) ? string.Empty : this.TotalListingQtty.ToString()).GetHashCode() ^ 
					((this.OpenPrice == null) ? string.Empty : this.OpenPrice.ToString()).GetHashCode() ^ 
					((this.ClosePrice == null) ? string.Empty : this.ClosePrice.ToString()).GetHashCode() ^ 
					((this.AveragePrice == null) ? string.Empty : this.AveragePrice.ToString()).GetHashCode() ^ 
					((this.Status == null) ? string.Empty : this.Status.ToString()).GetHashCode() ^ 
					((this.Sequence == null) ? string.Empty : this.Sequence.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="HastcStocksBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(HastcStocksBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="HastcStocksBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="HastcStocksBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="HastcStocksBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(HastcStocksBase Object1, HastcStocksBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.TradeDate != null && Object2.TradeDate != null )
			{
				if (Object1.TradeDate != Object2.TradeDate)
					equal = false;
			}
			else if (Object1.TradeDate == null ^ Object2.TradeDate == null )
			{
				equal = false;
			}
			if ( Object1.Stockno != null && Object2.Stockno != null )
			{
				if (Object1.Stockno != Object2.Stockno)
					equal = false;
			}
			else if (Object1.Stockno == null ^ Object2.Stockno == null )
			{
				equal = false;
			}
			if ( Object1.StockSymbol != null && Object2.StockSymbol != null )
			{
				if (Object1.StockSymbol != Object2.StockSymbol)
					equal = false;
			}
			else if (Object1.StockSymbol == null ^ Object2.StockSymbol == null )
			{
				equal = false;
			}
			if ( Object1.StockType != null && Object2.StockType != null )
			{
				if (Object1.StockType != Object2.StockType)
					equal = false;
			}
			else if (Object1.StockType == null ^ Object2.StockType == null )
			{
				equal = false;
			}
			if ( Object1.Ceiling != null && Object2.Ceiling != null )
			{
				if (Object1.Ceiling != Object2.Ceiling)
					equal = false;
			}
			else if (Object1.Ceiling == null ^ Object2.Ceiling == null )
			{
				equal = false;
			}
			if ( Object1.Floor != null && Object2.Floor != null )
			{
				if (Object1.Floor != Object2.Floor)
					equal = false;
			}
			else if (Object1.Floor == null ^ Object2.Floor == null )
			{
				equal = false;
			}
			if ( Object1.SecurityName != null && Object2.SecurityName != null )
			{
				if (Object1.SecurityName != Object2.SecurityName)
					equal = false;
			}
			else if (Object1.SecurityName == null ^ Object2.SecurityName == null )
			{
				equal = false;
			}
			if ( Object1.PriorClosePrice != null && Object2.PriorClosePrice != null )
			{
				if (Object1.PriorClosePrice != Object2.PriorClosePrice)
					equal = false;
			}
			else if (Object1.PriorClosePrice == null ^ Object2.PriorClosePrice == null )
			{
				equal = false;
			}
			if ( Object1.Last != null && Object2.Last != null )
			{
				if (Object1.Last != Object2.Last)
					equal = false;
			}
			else if (Object1.Last == null ^ Object2.Last == null )
			{
				equal = false;
			}
			if ( Object1.LastVol != null && Object2.LastVol != null )
			{
				if (Object1.LastVol != Object2.LastVol)
					equal = false;
			}
			else if (Object1.LastVol == null ^ Object2.LastVol == null )
			{
				equal = false;
			}
			if ( Object1.LastVal != null && Object2.LastVal != null )
			{
				if (Object1.LastVal != Object2.LastVal)
					equal = false;
			}
			else if (Object1.LastVal == null ^ Object2.LastVal == null )
			{
				equal = false;
			}
			if ( Object1.Highest != null && Object2.Highest != null )
			{
				if (Object1.Highest != Object2.Highest)
					equal = false;
			}
			else if (Object1.Highest == null ^ Object2.Highest == null )
			{
				equal = false;
			}
			if ( Object1.Average != null && Object2.Average != null )
			{
				if (Object1.Average != Object2.Average)
					equal = false;
			}
			else if (Object1.Average == null ^ Object2.Average == null )
			{
				equal = false;
			}
			if ( Object1.Lowest != null && Object2.Lowest != null )
			{
				if (Object1.Lowest != Object2.Lowest)
					equal = false;
			}
			else if (Object1.Lowest == null ^ Object2.Lowest == null )
			{
				equal = false;
			}
			if ( Object1.Totalshares != null && Object2.Totalshares != null )
			{
				if (Object1.Totalshares != Object2.Totalshares)
					equal = false;
			}
			else if (Object1.Totalshares == null ^ Object2.Totalshares == null )
			{
				equal = false;
			}
			if ( Object1.TotalValue != null && Object2.TotalValue != null )
			{
				if (Object1.TotalValue != Object2.TotalValue)
					equal = false;
			}
			else if (Object1.TotalValue == null ^ Object2.TotalValue == null )
			{
				equal = false;
			}
			if ( Object1.Best1Bid != null && Object2.Best1Bid != null )
			{
				if (Object1.Best1Bid != Object2.Best1Bid)
					equal = false;
			}
			else if (Object1.Best1Bid == null ^ Object2.Best1Bid == null )
			{
				equal = false;
			}
			if ( Object1.Best1BidVolume != null && Object2.Best1BidVolume != null )
			{
				if (Object1.Best1BidVolume != Object2.Best1BidVolume)
					equal = false;
			}
			else if (Object1.Best1BidVolume == null ^ Object2.Best1BidVolume == null )
			{
				equal = false;
			}
			if ( Object1.Best2Bid != null && Object2.Best2Bid != null )
			{
				if (Object1.Best2Bid != Object2.Best2Bid)
					equal = false;
			}
			else if (Object1.Best2Bid == null ^ Object2.Best2Bid == null )
			{
				equal = false;
			}
			if ( Object1.Best2BidVolume != null && Object2.Best2BidVolume != null )
			{
				if (Object1.Best2BidVolume != Object2.Best2BidVolume)
					equal = false;
			}
			else if (Object1.Best2BidVolume == null ^ Object2.Best2BidVolume == null )
			{
				equal = false;
			}
			if ( Object1.Best3Bid != null && Object2.Best3Bid != null )
			{
				if (Object1.Best3Bid != Object2.Best3Bid)
					equal = false;
			}
			else if (Object1.Best3Bid == null ^ Object2.Best3Bid == null )
			{
				equal = false;
			}
			if ( Object1.Best3BidVolume != null && Object2.Best3BidVolume != null )
			{
				if (Object1.Best3BidVolume != Object2.Best3BidVolume)
					equal = false;
			}
			else if (Object1.Best3BidVolume == null ^ Object2.Best3BidVolume == null )
			{
				equal = false;
			}
			if ( Object1.Best1Offer != null && Object2.Best1Offer != null )
			{
				if (Object1.Best1Offer != Object2.Best1Offer)
					equal = false;
			}
			else if (Object1.Best1Offer == null ^ Object2.Best1Offer == null )
			{
				equal = false;
			}
			if ( Object1.Best1OfferVolume != null && Object2.Best1OfferVolume != null )
			{
				if (Object1.Best1OfferVolume != Object2.Best1OfferVolume)
					equal = false;
			}
			else if (Object1.Best1OfferVolume == null ^ Object2.Best1OfferVolume == null )
			{
				equal = false;
			}
			if ( Object1.Best2Offer != null && Object2.Best2Offer != null )
			{
				if (Object1.Best2Offer != Object2.Best2Offer)
					equal = false;
			}
			else if (Object1.Best2Offer == null ^ Object2.Best2Offer == null )
			{
				equal = false;
			}
			if ( Object1.Best2OfferVolume != null && Object2.Best2OfferVolume != null )
			{
				if (Object1.Best2OfferVolume != Object2.Best2OfferVolume)
					equal = false;
			}
			else if (Object1.Best2OfferVolume == null ^ Object2.Best2OfferVolume == null )
			{
				equal = false;
			}
			if ( Object1.Best3Offer != null && Object2.Best3Offer != null )
			{
				if (Object1.Best3Offer != Object2.Best3Offer)
					equal = false;
			}
			else if (Object1.Best3Offer == null ^ Object2.Best3Offer == null )
			{
				equal = false;
			}
			if ( Object1.Best3OfferVolume != null && Object2.Best3OfferVolume != null )
			{
				if (Object1.Best3OfferVolume != Object2.Best3OfferVolume)
					equal = false;
			}
			else if (Object1.Best3OfferVolume == null ^ Object2.Best3OfferVolume == null )
			{
				equal = false;
			}
			if ( Object1.NmTotalTradedQtty != null && Object2.NmTotalTradedQtty != null )
			{
				if (Object1.NmTotalTradedQtty != Object2.NmTotalTradedQtty)
					equal = false;
			}
			else if (Object1.NmTotalTradedQtty == null ^ Object2.NmTotalTradedQtty == null )
			{
				equal = false;
			}
			if ( Object1.PrevPriorPrice != null && Object2.PrevPriorPrice != null )
			{
				if (Object1.PrevPriorPrice != Object2.PrevPriorPrice)
					equal = false;
			}
			else if (Object1.PrevPriorPrice == null ^ Object2.PrevPriorPrice == null )
			{
				equal = false;
			}
			if ( Object1.SellCount != null && Object2.SellCount != null )
			{
				if (Object1.SellCount != Object2.SellCount)
					equal = false;
			}
			else if (Object1.SellCount == null ^ Object2.SellCount == null )
			{
				equal = false;
			}
			if ( Object1.BuyCount != null && Object2.BuyCount != null )
			{
				if (Object1.BuyCount != Object2.BuyCount)
					equal = false;
			}
			else if (Object1.BuyCount == null ^ Object2.BuyCount == null )
			{
				equal = false;
			}
			if ( Object1.NmTotalTradedValue != null && Object2.NmTotalTradedValue != null )
			{
				if (Object1.NmTotalTradedValue != Object2.NmTotalTradedValue)
					equal = false;
			}
			else if (Object1.NmTotalTradedValue == null ^ Object2.NmTotalTradedValue == null )
			{
				equal = false;
			}
			if ( Object1.TotalBidQtty != null && Object2.TotalBidQtty != null )
			{
				if (Object1.TotalBidQtty != Object2.TotalBidQtty)
					equal = false;
			}
			else if (Object1.TotalBidQtty == null ^ Object2.TotalBidQtty == null )
			{
				equal = false;
			}
			if ( Object1.TotalSellTradingQtty != null && Object2.TotalSellTradingQtty != null )
			{
				if (Object1.TotalSellTradingQtty != Object2.TotalSellTradingQtty)
					equal = false;
			}
			else if (Object1.TotalSellTradingQtty == null ^ Object2.TotalSellTradingQtty == null )
			{
				equal = false;
			}
			if ( Object1.TotalOfferQtty != null && Object2.TotalOfferQtty != null )
			{
				if (Object1.TotalOfferQtty != Object2.TotalOfferQtty)
					equal = false;
			}
			else if (Object1.TotalOfferQtty == null ^ Object2.TotalOfferQtty == null )
			{
				equal = false;
			}
			if ( Object1.TotalBuyTradingQtty != null && Object2.TotalBuyTradingQtty != null )
			{
				if (Object1.TotalBuyTradingQtty != Object2.TotalBuyTradingQtty)
					equal = false;
			}
			else if (Object1.TotalBuyTradingQtty == null ^ Object2.TotalBuyTradingQtty == null )
			{
				equal = false;
			}
			if ( Object1.BidCount != null && Object2.BidCount != null )
			{
				if (Object1.BidCount != Object2.BidCount)
					equal = false;
			}
			else if (Object1.BidCount == null ^ Object2.BidCount == null )
			{
				equal = false;
			}
			if ( Object1.OfferCount != null && Object2.OfferCount != null )
			{
				if (Object1.OfferCount != Object2.OfferCount)
					equal = false;
			}
			else if (Object1.OfferCount == null ^ Object2.OfferCount == null )
			{
				equal = false;
			}
			if ( Object1.BuyForeignQtty != null && Object2.BuyForeignQtty != null )
			{
				if (Object1.BuyForeignQtty != Object2.BuyForeignQtty)
					equal = false;
			}
			else if (Object1.BuyForeignQtty == null ^ Object2.BuyForeignQtty == null )
			{
				equal = false;
			}
			if ( Object1.BuyForeignValue != null && Object2.BuyForeignValue != null )
			{
				if (Object1.BuyForeignValue != Object2.BuyForeignValue)
					equal = false;
			}
			else if (Object1.BuyForeignValue == null ^ Object2.BuyForeignValue == null )
			{
				equal = false;
			}
			if ( Object1.SellForeignQtty != null && Object2.SellForeignQtty != null )
			{
				if (Object1.SellForeignQtty != Object2.SellForeignQtty)
					equal = false;
			}
			else if (Object1.SellForeignQtty == null ^ Object2.SellForeignQtty == null )
			{
				equal = false;
			}
			if ( Object1.SellForeignValue != null && Object2.SellForeignValue != null )
			{
				if (Object1.SellForeignValue != Object2.SellForeignValue)
					equal = false;
			}
			else if (Object1.SellForeignValue == null ^ Object2.SellForeignValue == null )
			{
				equal = false;
			}
			if ( Object1.RemainForeignQtty != null && Object2.RemainForeignQtty != null )
			{
				if (Object1.RemainForeignQtty != Object2.RemainForeignQtty)
					equal = false;
			}
			else if (Object1.RemainForeignQtty == null ^ Object2.RemainForeignQtty == null )
			{
				equal = false;
			}
			if ( Object1.PtMatchPrice != null && Object2.PtMatchPrice != null )
			{
				if (Object1.PtMatchPrice != Object2.PtMatchPrice)
					equal = false;
			}
			else if (Object1.PtMatchPrice == null ^ Object2.PtMatchPrice == null )
			{
				equal = false;
			}
			if ( Object1.PtMatchQtty != null && Object2.PtMatchQtty != null )
			{
				if (Object1.PtMatchQtty != Object2.PtMatchQtty)
					equal = false;
			}
			else if (Object1.PtMatchQtty == null ^ Object2.PtMatchQtty == null )
			{
				equal = false;
			}
			if ( Object1.PtTotalTradedQtty != null && Object2.PtTotalTradedQtty != null )
			{
				if (Object1.PtTotalTradedQtty != Object2.PtTotalTradedQtty)
					equal = false;
			}
			else if (Object1.PtTotalTradedQtty == null ^ Object2.PtTotalTradedQtty == null )
			{
				equal = false;
			}
			if ( Object1.PtTotalTradedValue != null && Object2.PtTotalTradedValue != null )
			{
				if (Object1.PtTotalTradedValue != Object2.PtTotalTradedValue)
					equal = false;
			}
			else if (Object1.PtTotalTradedValue == null ^ Object2.PtTotalTradedValue == null )
			{
				equal = false;
			}
			if ( Object1.TotalListingQtty != null && Object2.TotalListingQtty != null )
			{
				if (Object1.TotalListingQtty != Object2.TotalListingQtty)
					equal = false;
			}
			else if (Object1.TotalListingQtty == null ^ Object2.TotalListingQtty == null )
			{
				equal = false;
			}
			if ( Object1.OpenPrice != null && Object2.OpenPrice != null )
			{
				if (Object1.OpenPrice != Object2.OpenPrice)
					equal = false;
			}
			else if (Object1.OpenPrice == null ^ Object2.OpenPrice == null )
			{
				equal = false;
			}
			if ( Object1.ClosePrice != null && Object2.ClosePrice != null )
			{
				if (Object1.ClosePrice != Object2.ClosePrice)
					equal = false;
			}
			else if (Object1.ClosePrice == null ^ Object2.ClosePrice == null )
			{
				equal = false;
			}
			if ( Object1.AveragePrice != null && Object2.AveragePrice != null )
			{
				if (Object1.AveragePrice != Object2.AveragePrice)
					equal = false;
			}
			else if (Object1.AveragePrice == null ^ Object2.AveragePrice == null )
			{
				equal = false;
			}
			if ( Object1.Status != null && Object2.Status != null )
			{
				if (Object1.Status != Object2.Status)
					equal = false;
			}
			else if (Object1.Status == null ^ Object2.Status == null )
			{
				equal = false;
			}
			if ( Object1.Sequence != null && Object2.Sequence != null )
			{
				if (Object1.Sequence != Object2.Sequence)
					equal = false;
			}
			else if (Object1.Sequence == null ^ Object2.Sequence == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((HastcStocksBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static HastcStocksComparer GetComparer()
        {
            return new HastcStocksComparer();
        }
        */

        // Comparer delegates back to HastcStocks
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(HastcStocks rhs, HastcStocksColumn which)
        {
            switch (which)
            {
            	
            	
            	case HastcStocksColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case HastcStocksColumn.TradeDate:
            		return this.TradeDate.Value.CompareTo(rhs.TradeDate.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.Stockno:
            		return this.Stockno.Value.CompareTo(rhs.Stockno.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.StockSymbol:
            		return this.StockSymbol.CompareTo(rhs.StockSymbol);
            		
            		                 
            	
            	
            	case HastcStocksColumn.StockType:
            		return this.StockType.CompareTo(rhs.StockType);
            		
            		                 
            	
            	
            	case HastcStocksColumn.Ceiling:
            		return this.Ceiling.Value.CompareTo(rhs.Ceiling.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.Floor:
            		return this.Floor.Value.CompareTo(rhs.Floor.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.SecurityName:
            		return this.SecurityName.CompareTo(rhs.SecurityName);
            		
            		                 
            	
            	
            	case HastcStocksColumn.PriorClosePrice:
            		return this.PriorClosePrice.Value.CompareTo(rhs.PriorClosePrice.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.Last:
            		return this.Last.Value.CompareTo(rhs.Last.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.LastVol:
            		return this.LastVol.Value.CompareTo(rhs.LastVol.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.LastVal:
            		return this.LastVal.Value.CompareTo(rhs.LastVal.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.Highest:
            		return this.Highest.Value.CompareTo(rhs.Highest.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.Average:
            		return this.Average.Value.CompareTo(rhs.Average.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.Lowest:
            		return this.Lowest.Value.CompareTo(rhs.Lowest.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.Totalshares:
            		return this.Totalshares.Value.CompareTo(rhs.Totalshares.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.TotalValue:
            		return this.TotalValue.Value.CompareTo(rhs.TotalValue.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.Best1Bid:
            		return this.Best1Bid.Value.CompareTo(rhs.Best1Bid.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.Best1BidVolume:
            		return this.Best1BidVolume.Value.CompareTo(rhs.Best1BidVolume.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.Best2Bid:
            		return this.Best2Bid.Value.CompareTo(rhs.Best2Bid.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.Best2BidVolume:
            		return this.Best2BidVolume.Value.CompareTo(rhs.Best2BidVolume.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.Best3Bid:
            		return this.Best3Bid.Value.CompareTo(rhs.Best3Bid.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.Best3BidVolume:
            		return this.Best3BidVolume.Value.CompareTo(rhs.Best3BidVolume.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.Best1Offer:
            		return this.Best1Offer.Value.CompareTo(rhs.Best1Offer.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.Best1OfferVolume:
            		return this.Best1OfferVolume.Value.CompareTo(rhs.Best1OfferVolume.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.Best2Offer:
            		return this.Best2Offer.Value.CompareTo(rhs.Best2Offer.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.Best2OfferVolume:
            		return this.Best2OfferVolume.Value.CompareTo(rhs.Best2OfferVolume.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.Best3Offer:
            		return this.Best3Offer.Value.CompareTo(rhs.Best3Offer.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.Best3OfferVolume:
            		return this.Best3OfferVolume.Value.CompareTo(rhs.Best3OfferVolume.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.NmTotalTradedQtty:
            		return this.NmTotalTradedQtty.Value.CompareTo(rhs.NmTotalTradedQtty.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.PrevPriorPrice:
            		return this.PrevPriorPrice.Value.CompareTo(rhs.PrevPriorPrice.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.SellCount:
            		return this.SellCount.Value.CompareTo(rhs.SellCount.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.BuyCount:
            		return this.BuyCount.Value.CompareTo(rhs.BuyCount.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.NmTotalTradedValue:
            		return this.NmTotalTradedValue.Value.CompareTo(rhs.NmTotalTradedValue.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.TotalBidQtty:
            		return this.TotalBidQtty.Value.CompareTo(rhs.TotalBidQtty.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.TotalSellTradingQtty:
            		return this.TotalSellTradingQtty.Value.CompareTo(rhs.TotalSellTradingQtty.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.TotalOfferQtty:
            		return this.TotalOfferQtty.Value.CompareTo(rhs.TotalOfferQtty.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.TotalBuyTradingQtty:
            		return this.TotalBuyTradingQtty.Value.CompareTo(rhs.TotalBuyTradingQtty.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.BidCount:
            		return this.BidCount.Value.CompareTo(rhs.BidCount.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.OfferCount:
            		return this.OfferCount.Value.CompareTo(rhs.OfferCount.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.BuyForeignQtty:
            		return this.BuyForeignQtty.Value.CompareTo(rhs.BuyForeignQtty.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.BuyForeignValue:
            		return this.BuyForeignValue.Value.CompareTo(rhs.BuyForeignValue.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.SellForeignQtty:
            		return this.SellForeignQtty.Value.CompareTo(rhs.SellForeignQtty.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.SellForeignValue:
            		return this.SellForeignValue.Value.CompareTo(rhs.SellForeignValue.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.RemainForeignQtty:
            		return this.RemainForeignQtty.Value.CompareTo(rhs.RemainForeignQtty.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.PtMatchPrice:
            		return this.PtMatchPrice.Value.CompareTo(rhs.PtMatchPrice.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.PtMatchQtty:
            		return this.PtMatchQtty.Value.CompareTo(rhs.PtMatchQtty.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.PtTotalTradedQtty:
            		return this.PtTotalTradedQtty.Value.CompareTo(rhs.PtTotalTradedQtty.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.PtTotalTradedValue:
            		return this.PtTotalTradedValue.Value.CompareTo(rhs.PtTotalTradedValue.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.TotalListingQtty:
            		return this.TotalListingQtty.Value.CompareTo(rhs.TotalListingQtty.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.OpenPrice:
            		return this.OpenPrice.Value.CompareTo(rhs.OpenPrice.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.ClosePrice:
            		return this.ClosePrice.Value.CompareTo(rhs.ClosePrice.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.AveragePrice:
            		return this.AveragePrice.Value.CompareTo(rhs.AveragePrice.Value);
            		
            		                 
            	
            	
            	case HastcStocksColumn.Status:
            		return this.Status.CompareTo(rhs.Status);
            		
            		                 
            	
            	
            	case HastcStocksColumn.Sequence:
            		return this.Sequence.Value.CompareTo(rhs.Sequence.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<HastcStocksKey> Members
		
		// member variable for the EntityId property
		private HastcStocksKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual HastcStocksKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new HastcStocksKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("HastcStocks")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{56}{55}- Id: {0}{55}- TradeDate: {1}{55}- Stockno: {2}{55}- StockSymbol: {3}{55}- StockType: {4}{55}- Ceiling: {5}{55}- Floor: {6}{55}- SecurityName: {7}{55}- PriorClosePrice: {8}{55}- Last: {9}{55}- LastVol: {10}{55}- LastVal: {11}{55}- Highest: {12}{55}- Average: {13}{55}- Lowest: {14}{55}- Totalshares: {15}{55}- TotalValue: {16}{55}- Best1Bid: {17}{55}- Best1BidVolume: {18}{55}- Best2Bid: {19}{55}- Best2BidVolume: {20}{55}- Best3Bid: {21}{55}- Best3BidVolume: {22}{55}- Best1Offer: {23}{55}- Best1OfferVolume: {24}{55}- Best2Offer: {25}{55}- Best2OfferVolume: {26}{55}- Best3Offer: {27}{55}- Best3OfferVolume: {28}{55}- NmTotalTradedQtty: {29}{55}- PrevPriorPrice: {30}{55}- SellCount: {31}{55}- BuyCount: {32}{55}- NmTotalTradedValue: {33}{55}- TotalBidQtty: {34}{55}- TotalSellTradingQtty: {35}{55}- TotalOfferQtty: {36}{55}- TotalBuyTradingQtty: {37}{55}- BidCount: {38}{55}- OfferCount: {39}{55}- BuyForeignQtty: {40}{55}- BuyForeignValue: {41}{55}- SellForeignQtty: {42}{55}- SellForeignValue: {43}{55}- RemainForeignQtty: {44}{55}- PtMatchPrice: {45}{55}- PtMatchQtty: {46}{55}- PtTotalTradedQtty: {47}{55}- PtTotalTradedValue: {48}{55}- TotalListingQtty: {49}{55}- OpenPrice: {50}{55}- ClosePrice: {51}{55}- AveragePrice: {52}{55}- Status: {53}{55}- Sequence: {54}{55}{57}", 
				this.Id,
				(this.TradeDate == null) ? string.Empty : this.TradeDate.ToString(),
				(this.Stockno == null) ? string.Empty : this.Stockno.ToString(),
				(this.StockSymbol == null) ? string.Empty : this.StockSymbol.ToString(),
				(this.StockType == null) ? string.Empty : this.StockType.ToString(),
				(this.Ceiling == null) ? string.Empty : this.Ceiling.ToString(),
				(this.Floor == null) ? string.Empty : this.Floor.ToString(),
				(this.SecurityName == null) ? string.Empty : this.SecurityName.ToString(),
				(this.PriorClosePrice == null) ? string.Empty : this.PriorClosePrice.ToString(),
				(this.Last == null) ? string.Empty : this.Last.ToString(),
				(this.LastVol == null) ? string.Empty : this.LastVol.ToString(),
				(this.LastVal == null) ? string.Empty : this.LastVal.ToString(),
				(this.Highest == null) ? string.Empty : this.Highest.ToString(),
				(this.Average == null) ? string.Empty : this.Average.ToString(),
				(this.Lowest == null) ? string.Empty : this.Lowest.ToString(),
				(this.Totalshares == null) ? string.Empty : this.Totalshares.ToString(),
				(this.TotalValue == null) ? string.Empty : this.TotalValue.ToString(),
				(this.Best1Bid == null) ? string.Empty : this.Best1Bid.ToString(),
				(this.Best1BidVolume == null) ? string.Empty : this.Best1BidVolume.ToString(),
				(this.Best2Bid == null) ? string.Empty : this.Best2Bid.ToString(),
				(this.Best2BidVolume == null) ? string.Empty : this.Best2BidVolume.ToString(),
				(this.Best3Bid == null) ? string.Empty : this.Best3Bid.ToString(),
				(this.Best3BidVolume == null) ? string.Empty : this.Best3BidVolume.ToString(),
				(this.Best1Offer == null) ? string.Empty : this.Best1Offer.ToString(),
				(this.Best1OfferVolume == null) ? string.Empty : this.Best1OfferVolume.ToString(),
				(this.Best2Offer == null) ? string.Empty : this.Best2Offer.ToString(),
				(this.Best2OfferVolume == null) ? string.Empty : this.Best2OfferVolume.ToString(),
				(this.Best3Offer == null) ? string.Empty : this.Best3Offer.ToString(),
				(this.Best3OfferVolume == null) ? string.Empty : this.Best3OfferVolume.ToString(),
				(this.NmTotalTradedQtty == null) ? string.Empty : this.NmTotalTradedQtty.ToString(),
				(this.PrevPriorPrice == null) ? string.Empty : this.PrevPriorPrice.ToString(),
				(this.SellCount == null) ? string.Empty : this.SellCount.ToString(),
				(this.BuyCount == null) ? string.Empty : this.BuyCount.ToString(),
				(this.NmTotalTradedValue == null) ? string.Empty : this.NmTotalTradedValue.ToString(),
				(this.TotalBidQtty == null) ? string.Empty : this.TotalBidQtty.ToString(),
				(this.TotalSellTradingQtty == null) ? string.Empty : this.TotalSellTradingQtty.ToString(),
				(this.TotalOfferQtty == null) ? string.Empty : this.TotalOfferQtty.ToString(),
				(this.TotalBuyTradingQtty == null) ? string.Empty : this.TotalBuyTradingQtty.ToString(),
				(this.BidCount == null) ? string.Empty : this.BidCount.ToString(),
				(this.OfferCount == null) ? string.Empty : this.OfferCount.ToString(),
				(this.BuyForeignQtty == null) ? string.Empty : this.BuyForeignQtty.ToString(),
				(this.BuyForeignValue == null) ? string.Empty : this.BuyForeignValue.ToString(),
				(this.SellForeignQtty == null) ? string.Empty : this.SellForeignQtty.ToString(),
				(this.SellForeignValue == null) ? string.Empty : this.SellForeignValue.ToString(),
				(this.RemainForeignQtty == null) ? string.Empty : this.RemainForeignQtty.ToString(),
				(this.PtMatchPrice == null) ? string.Empty : this.PtMatchPrice.ToString(),
				(this.PtMatchQtty == null) ? string.Empty : this.PtMatchQtty.ToString(),
				(this.PtTotalTradedQtty == null) ? string.Empty : this.PtTotalTradedQtty.ToString(),
				(this.PtTotalTradedValue == null) ? string.Empty : this.PtTotalTradedValue.ToString(),
				(this.TotalListingQtty == null) ? string.Empty : this.TotalListingQtty.ToString(),
				(this.OpenPrice == null) ? string.Empty : this.OpenPrice.ToString(),
				(this.ClosePrice == null) ? string.Empty : this.ClosePrice.ToString(),
				(this.AveragePrice == null) ? string.Empty : this.AveragePrice.ToString(),
				(this.Status == null) ? string.Empty : this.Status.ToString(),
				(this.Sequence == null) ? string.Empty : this.Sequence.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'hastc_stocks' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class HastcStocksEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "hastc_stocks"</remarks>
		public System.Int64 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// TradeDate : 
		/// </summary>
		public System.DateTime?		  TradeDate = null;
		
		/// <summary>
		/// Stockno : 
		/// </summary>
		public System.Int16?		  Stockno = null;
		
		/// <summary>
		/// StockSymbol : 
		/// </summary>
		public System.String		  StockSymbol = null;
		
		/// <summary>
		/// StockType : 
		/// </summary>
		public System.String		  StockType = null;
		
		/// <summary>
		/// Ceiling : 
		/// </summary>
		public System.Int64?		  Ceiling = null;
		
		/// <summary>
		/// Floor : 
		/// </summary>
		public System.Int64?		  Floor = null;
		
		/// <summary>
		/// SecurityName : 
		/// </summary>
		public System.String		  SecurityName = null;
		
		/// <summary>
		/// PriorClosePrice : 
		/// </summary>
		public System.Int64?		  PriorClosePrice = null;
		
		/// <summary>
		/// Last : 
		/// </summary>
		public System.Int64?		  Last = null;
		
		/// <summary>
		/// LastVol : 
		/// </summary>
		public System.Int64?		  LastVol = null;
		
		/// <summary>
		/// LastVal : 
		/// </summary>
		public System.Int64?		  LastVal = null;
		
		/// <summary>
		/// Highest : 
		/// </summary>
		public System.Int64?		  Highest = null;
		
		/// <summary>
		/// Average : 
		/// </summary>
		public System.Int64?		  Average = null;
		
		/// <summary>
		/// Lowest : 
		/// </summary>
		public System.Int64?		  Lowest = null;
		
		/// <summary>
		/// Totalshares : 
		/// </summary>
		public System.Int64?		  Totalshares = null;
		
		/// <summary>
		/// TotalValue : 
		/// </summary>
		public System.Int64?		  TotalValue = null;
		
		/// <summary>
		/// Best1Bid : 
		/// </summary>
		public System.Int64?		  Best1Bid = null;
		
		/// <summary>
		/// Best1BidVolume : 
		/// </summary>
		public System.Int64?		  Best1BidVolume = null;
		
		/// <summary>
		/// Best2Bid : 
		/// </summary>
		public System.Int64?		  Best2Bid = null;
		
		/// <summary>
		/// Best2BidVolume : 
		/// </summary>
		public System.Int64?		  Best2BidVolume = null;
		
		/// <summary>
		/// Best3Bid : 
		/// </summary>
		public System.Int64?		  Best3Bid = null;
		
		/// <summary>
		/// Best3BidVolume : 
		/// </summary>
		public System.Int64?		  Best3BidVolume = null;
		
		/// <summary>
		/// Best1Offer : 
		/// </summary>
		public System.Int64?		  Best1Offer = null;
		
		/// <summary>
		/// Best1OfferVolume : 
		/// </summary>
		public System.Int64?		  Best1OfferVolume = null;
		
		/// <summary>
		/// Best2Offer : 
		/// </summary>
		public System.Int64?		  Best2Offer = null;
		
		/// <summary>
		/// Best2OfferVolume : 
		/// </summary>
		public System.Int64?		  Best2OfferVolume = null;
		
		/// <summary>
		/// Best3Offer : 
		/// </summary>
		public System.Int64?		  Best3Offer = null;
		
		/// <summary>
		/// Best3OfferVolume : 
		/// </summary>
		public System.Int64?		  Best3OfferVolume = null;
		
		/// <summary>
		/// NM_TOTAL_TRADED_QTTY : 
		/// </summary>
		public System.Int64?		  NmTotalTradedQtty = null;
		
		/// <summary>
		/// PREV_PRIOR_PRICE : 
		/// </summary>
		public System.Int64?		  PrevPriorPrice = null;
		
		/// <summary>
		/// SELL_COUNT : 
		/// </summary>
		public System.Int64?		  SellCount = null;
		
		/// <summary>
		/// BUY_COUNT : 
		/// </summary>
		public System.Int64?		  BuyCount = null;
		
		/// <summary>
		/// NM_TOTAL_TRADED_VALUE : 
		/// </summary>
		public System.Int64?		  NmTotalTradedValue = null;
		
		/// <summary>
		/// TOTAL_BID_QTTY : 
		/// </summary>
		public System.Int64?		  TotalBidQtty = null;
		
		/// <summary>
		/// TOTAL_SELL_TRADING_QTTY : 
		/// </summary>
		public System.Int64?		  TotalSellTradingQtty = null;
		
		/// <summary>
		/// TOTAL_OFFER_QTTY : 
		/// </summary>
		public System.Int64?		  TotalOfferQtty = null;
		
		/// <summary>
		/// TOTAL_BUY_TRADING_QTTY : 
		/// </summary>
		public System.Int64?		  TotalBuyTradingQtty = null;
		
		/// <summary>
		/// BID_COUNT : 
		/// </summary>
		public System.Int64?		  BidCount = null;
		
		/// <summary>
		/// OFFER_COUNT : 
		/// </summary>
		public System.Int64?		  OfferCount = null;
		
		/// <summary>
		/// BUY_FOREIGN_QTTY : 
		/// </summary>
		public System.Int64?		  BuyForeignQtty = null;
		
		/// <summary>
		/// BUY_FOREIGN_VALUE : 
		/// </summary>
		public System.Int64?		  BuyForeignValue = null;
		
		/// <summary>
		/// SELL_FOREIGN_QTTY : 
		/// </summary>
		public System.Int64?		  SellForeignQtty = null;
		
		/// <summary>
		/// SELL_FOREIGN_VALUE : 
		/// </summary>
		public System.Int64?		  SellForeignValue = null;
		
		/// <summary>
		/// REMAIN_FOREIGN_QTTY : 
		/// </summary>
		public System.Int64?		  RemainForeignQtty = null;
		
		/// <summary>
		/// PT_MATCH_PRICE : 
		/// </summary>
		public System.Int64?		  PtMatchPrice = null;
		
		/// <summary>
		/// PT_MATCH_QTTY : 
		/// </summary>
		public System.Int64?		  PtMatchQtty = null;
		
		/// <summary>
		/// PT_TOTAL_TRADED_QTTY : 
		/// </summary>
		public System.Int64?		  PtTotalTradedQtty = null;
		
		/// <summary>
		/// PT_TOTAL_TRADED_VALUE : 
		/// </summary>
		public System.Int64?		  PtTotalTradedValue = null;
		
		/// <summary>
		/// TOTAL_LISTING_QTTY : 
		/// </summary>
		public System.Int64?		  TotalListingQtty = null;
		
		/// <summary>
		/// OPEN_PRICE : 
		/// </summary>
		public System.Int64?		  OpenPrice = null;
		
		/// <summary>
		/// CLOSE_PRICE : 
		/// </summary>
		public System.Int64?		  ClosePrice = null;
		
		/// <summary>
		/// AVERAGE_PRICE : 
		/// </summary>
		public System.Int64?		  AveragePrice = null;
		
		/// <summary>
		/// STATUS : 
		/// </summary>
		public System.String		  Status = null;
		
		/// <summary>
		/// Sequence : 
		/// </summary>
		public System.Int64?		  Sequence = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			HastcStocksEntityData _tmp = new HastcStocksEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.TradeDate = this.TradeDate;
			_tmp.Stockno = this.Stockno;
			_tmp.StockSymbol = this.StockSymbol;
			_tmp.StockType = this.StockType;
			_tmp.Ceiling = this.Ceiling;
			_tmp.Floor = this.Floor;
			_tmp.SecurityName = this.SecurityName;
			_tmp.PriorClosePrice = this.PriorClosePrice;
			_tmp.Last = this.Last;
			_tmp.LastVol = this.LastVol;
			_tmp.LastVal = this.LastVal;
			_tmp.Highest = this.Highest;
			_tmp.Average = this.Average;
			_tmp.Lowest = this.Lowest;
			_tmp.Totalshares = this.Totalshares;
			_tmp.TotalValue = this.TotalValue;
			_tmp.Best1Bid = this.Best1Bid;
			_tmp.Best1BidVolume = this.Best1BidVolume;
			_tmp.Best2Bid = this.Best2Bid;
			_tmp.Best2BidVolume = this.Best2BidVolume;
			_tmp.Best3Bid = this.Best3Bid;
			_tmp.Best3BidVolume = this.Best3BidVolume;
			_tmp.Best1Offer = this.Best1Offer;
			_tmp.Best1OfferVolume = this.Best1OfferVolume;
			_tmp.Best2Offer = this.Best2Offer;
			_tmp.Best2OfferVolume = this.Best2OfferVolume;
			_tmp.Best3Offer = this.Best3Offer;
			_tmp.Best3OfferVolume = this.Best3OfferVolume;
			_tmp.NmTotalTradedQtty = this.NmTotalTradedQtty;
			_tmp.PrevPriorPrice = this.PrevPriorPrice;
			_tmp.SellCount = this.SellCount;
			_tmp.BuyCount = this.BuyCount;
			_tmp.NmTotalTradedValue = this.NmTotalTradedValue;
			_tmp.TotalBidQtty = this.TotalBidQtty;
			_tmp.TotalSellTradingQtty = this.TotalSellTradingQtty;
			_tmp.TotalOfferQtty = this.TotalOfferQtty;
			_tmp.TotalBuyTradingQtty = this.TotalBuyTradingQtty;
			_tmp.BidCount = this.BidCount;
			_tmp.OfferCount = this.OfferCount;
			_tmp.BuyForeignQtty = this.BuyForeignQtty;
			_tmp.BuyForeignValue = this.BuyForeignValue;
			_tmp.SellForeignQtty = this.SellForeignQtty;
			_tmp.SellForeignValue = this.SellForeignValue;
			_tmp.RemainForeignQtty = this.RemainForeignQtty;
			_tmp.PtMatchPrice = this.PtMatchPrice;
			_tmp.PtMatchQtty = this.PtMatchQtty;
			_tmp.PtTotalTradedQtty = this.PtTotalTradedQtty;
			_tmp.PtTotalTradedValue = this.PtTotalTradedValue;
			_tmp.TotalListingQtty = this.TotalListingQtty;
			_tmp.OpenPrice = this.OpenPrice;
			_tmp.ClosePrice = this.ClosePrice;
			_tmp.AveragePrice = this.AveragePrice;
			_tmp.Status = this.Status;
			_tmp.Sequence = this.Sequence;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			HastcStocksEntityData _tmp = new HastcStocksEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.TradeDate = this.TradeDate;
			_tmp.Stockno = this.Stockno;
			_tmp.StockSymbol = this.StockSymbol;
			_tmp.StockType = this.StockType;
			_tmp.Ceiling = this.Ceiling;
			_tmp.Floor = this.Floor;
			_tmp.SecurityName = this.SecurityName;
			_tmp.PriorClosePrice = this.PriorClosePrice;
			_tmp.Last = this.Last;
			_tmp.LastVol = this.LastVol;
			_tmp.LastVal = this.LastVal;
			_tmp.Highest = this.Highest;
			_tmp.Average = this.Average;
			_tmp.Lowest = this.Lowest;
			_tmp.Totalshares = this.Totalshares;
			_tmp.TotalValue = this.TotalValue;
			_tmp.Best1Bid = this.Best1Bid;
			_tmp.Best1BidVolume = this.Best1BidVolume;
			_tmp.Best2Bid = this.Best2Bid;
			_tmp.Best2BidVolume = this.Best2BidVolume;
			_tmp.Best3Bid = this.Best3Bid;
			_tmp.Best3BidVolume = this.Best3BidVolume;
			_tmp.Best1Offer = this.Best1Offer;
			_tmp.Best1OfferVolume = this.Best1OfferVolume;
			_tmp.Best2Offer = this.Best2Offer;
			_tmp.Best2OfferVolume = this.Best2OfferVolume;
			_tmp.Best3Offer = this.Best3Offer;
			_tmp.Best3OfferVolume = this.Best3OfferVolume;
			_tmp.NmTotalTradedQtty = this.NmTotalTradedQtty;
			_tmp.PrevPriorPrice = this.PrevPriorPrice;
			_tmp.SellCount = this.SellCount;
			_tmp.BuyCount = this.BuyCount;
			_tmp.NmTotalTradedValue = this.NmTotalTradedValue;
			_tmp.TotalBidQtty = this.TotalBidQtty;
			_tmp.TotalSellTradingQtty = this.TotalSellTradingQtty;
			_tmp.TotalOfferQtty = this.TotalOfferQtty;
			_tmp.TotalBuyTradingQtty = this.TotalBuyTradingQtty;
			_tmp.BidCount = this.BidCount;
			_tmp.OfferCount = this.OfferCount;
			_tmp.BuyForeignQtty = this.BuyForeignQtty;
			_tmp.BuyForeignValue = this.BuyForeignValue;
			_tmp.SellForeignQtty = this.SellForeignQtty;
			_tmp.SellForeignValue = this.SellForeignValue;
			_tmp.RemainForeignQtty = this.RemainForeignQtty;
			_tmp.PtMatchPrice = this.PtMatchPrice;
			_tmp.PtMatchQtty = this.PtMatchQtty;
			_tmp.PtTotalTradedQtty = this.PtTotalTradedQtty;
			_tmp.PtTotalTradedValue = this.PtTotalTradedValue;
			_tmp.TotalListingQtty = this.TotalListingQtty;
			_tmp.OpenPrice = this.OpenPrice;
			_tmp.ClosePrice = this.ClosePrice;
			_tmp.AveragePrice = this.AveragePrice;
			_tmp.Status = this.Status;
			_tmp.Sequence = this.Sequence;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="HastcStocksColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(HastcStocksColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="HastcStocksColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(HastcStocksColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="HastcStocksColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(HastcStocksColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				HastcStocksEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new HastcStocksEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="HastcStocksColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(HastcStocksColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				HastcStocksEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new HastcStocksEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region HastcStocksEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="HastcStocks"/> object.
	/// </remarks>
	public class HastcStocksEventArgs : System.EventArgs
	{
		private HastcStocksColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the HastcStocksEventArgs class.
		///</summary>
		public HastcStocksEventArgs(HastcStocksColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the HastcStocksEventArgs class.
		///</summary>
		public HastcStocksEventArgs(HastcStocksColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The HastcStocksColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="HastcStocksColumn" />
		public HastcStocksColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all HastcStocks related events.
	///</summary>
	public delegate void HastcStocksEventHandler(object sender, HastcStocksEventArgs e);
	
	#region HastcStocksComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class HastcStocksComparer : System.Collections.Generic.IComparer<HastcStocks>
	{
		HastcStocksColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:HastcStocksComparer"/> class.
        /// </summary>
		public HastcStocksComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:HastcStocksComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public HastcStocksComparer(HastcStocksColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="HastcStocks"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="HastcStocks"/> to compare.</param>
        /// <param name="b">The second <c>HastcStocks</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(HastcStocks a, HastcStocks b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(HastcStocks entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(HastcStocks a, HastcStocks b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public HastcStocksColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region HastcStocksKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="HastcStocks"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class HastcStocksKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the HastcStocksKey class.
		/// </summary>
		public HastcStocksKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the HastcStocksKey class.
		/// </summary>
		public HastcStocksKey(HastcStocksBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the HastcStocksKey class.
		/// </summary>
		public HastcStocksKey(System.Int64 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private HastcStocksBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public HastcStocksBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int64 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int64 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int64) EntityUtil.ChangeType(values["Id"], typeof(System.Int64)) : (long)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region HastcStocksColumn Enum
	
	/// <summary>
	/// Enumerate the HastcStocks columns.
	/// </summary>
	[Serializable]
	public enum HastcStocksColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Int64), System.Data.DbType.Int64, true, true, false)]
		Id = 1,
		/// <summary>
		/// TradeDate : 
		/// </summary>
		[EnumTextValue("TradeDate")]
		[ColumnEnum("TradeDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		TradeDate = 2,
		/// <summary>
		/// Stockno : 
		/// </summary>
		[EnumTextValue("Stockno")]
		[ColumnEnum("Stockno", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		Stockno = 3,
		/// <summary>
		/// StockSymbol : 
		/// </summary>
		[EnumTextValue("StockSymbol")]
		[ColumnEnum("StockSymbol", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		StockSymbol = 4,
		/// <summary>
		/// StockType : 
		/// </summary>
		[EnumTextValue("StockType")]
		[ColumnEnum("StockType", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 1)]
		StockType = 5,
		/// <summary>
		/// Ceiling : 
		/// </summary>
		[EnumTextValue("Ceiling")]
		[ColumnEnum("Ceiling", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Ceiling = 6,
		/// <summary>
		/// Floor : 
		/// </summary>
		[EnumTextValue("Floor")]
		[ColumnEnum("Floor", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Floor = 7,
		/// <summary>
		/// SecurityName : 
		/// </summary>
		[EnumTextValue("SecurityName")]
		[ColumnEnum("SecurityName", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		SecurityName = 8,
		/// <summary>
		/// PriorClosePrice : 
		/// </summary>
		[EnumTextValue("PriorClosePrice")]
		[ColumnEnum("PriorClosePrice", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		PriorClosePrice = 9,
		/// <summary>
		/// Last : 
		/// </summary>
		[EnumTextValue("Last")]
		[ColumnEnum("Last", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Last = 10,
		/// <summary>
		/// LastVol : 
		/// </summary>
		[EnumTextValue("LastVol")]
		[ColumnEnum("LastVol", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		LastVol = 11,
		/// <summary>
		/// LastVal : 
		/// </summary>
		[EnumTextValue("LastVal")]
		[ColumnEnum("LastVal", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		LastVal = 12,
		/// <summary>
		/// Highest : 
		/// </summary>
		[EnumTextValue("Highest")]
		[ColumnEnum("Highest", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Highest = 13,
		/// <summary>
		/// Average : 
		/// </summary>
		[EnumTextValue("Average")]
		[ColumnEnum("Average", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Average = 14,
		/// <summary>
		/// Lowest : 
		/// </summary>
		[EnumTextValue("Lowest")]
		[ColumnEnum("Lowest", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Lowest = 15,
		/// <summary>
		/// Totalshares : 
		/// </summary>
		[EnumTextValue("Totalshares")]
		[ColumnEnum("Totalshares", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Totalshares = 16,
		/// <summary>
		/// TotalValue : 
		/// </summary>
		[EnumTextValue("TotalValue")]
		[ColumnEnum("TotalValue", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		TotalValue = 17,
		/// <summary>
		/// Best1Bid : 
		/// </summary>
		[EnumTextValue("Best1Bid")]
		[ColumnEnum("Best1Bid", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Best1Bid = 18,
		/// <summary>
		/// Best1BidVolume : 
		/// </summary>
		[EnumTextValue("Best1BidVolume")]
		[ColumnEnum("Best1BidVolume", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Best1BidVolume = 19,
		/// <summary>
		/// Best2Bid : 
		/// </summary>
		[EnumTextValue("Best2Bid")]
		[ColumnEnum("Best2Bid", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Best2Bid = 20,
		/// <summary>
		/// Best2BidVolume : 
		/// </summary>
		[EnumTextValue("Best2BidVolume")]
		[ColumnEnum("Best2BidVolume", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Best2BidVolume = 21,
		/// <summary>
		/// Best3Bid : 
		/// </summary>
		[EnumTextValue("Best3Bid")]
		[ColumnEnum("Best3Bid", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Best3Bid = 22,
		/// <summary>
		/// Best3BidVolume : 
		/// </summary>
		[EnumTextValue("Best3BidVolume")]
		[ColumnEnum("Best3BidVolume", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Best3BidVolume = 23,
		/// <summary>
		/// Best1Offer : 
		/// </summary>
		[EnumTextValue("Best1Offer")]
		[ColumnEnum("Best1Offer", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Best1Offer = 24,
		/// <summary>
		/// Best1OfferVolume : 
		/// </summary>
		[EnumTextValue("Best1OfferVolume")]
		[ColumnEnum("Best1OfferVolume", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Best1OfferVolume = 25,
		/// <summary>
		/// Best2Offer : 
		/// </summary>
		[EnumTextValue("Best2Offer")]
		[ColumnEnum("Best2Offer", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Best2Offer = 26,
		/// <summary>
		/// Best2OfferVolume : 
		/// </summary>
		[EnumTextValue("Best2OfferVolume")]
		[ColumnEnum("Best2OfferVolume", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Best2OfferVolume = 27,
		/// <summary>
		/// Best3Offer : 
		/// </summary>
		[EnumTextValue("Best3Offer")]
		[ColumnEnum("Best3Offer", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Best3Offer = 28,
		/// <summary>
		/// Best3OfferVolume : 
		/// </summary>
		[EnumTextValue("Best3OfferVolume")]
		[ColumnEnum("Best3OfferVolume", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Best3OfferVolume = 29,
		/// <summary>
		/// NmTotalTradedQtty : 
		/// </summary>
		[EnumTextValue("NM_TOTAL_TRADED_QTTY")]
		[ColumnEnum("NM_TOTAL_TRADED_QTTY", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		NmTotalTradedQtty = 30,
		/// <summary>
		/// PrevPriorPrice : 
		/// </summary>
		[EnumTextValue("PREV_PRIOR_PRICE")]
		[ColumnEnum("PREV_PRIOR_PRICE", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		PrevPriorPrice = 31,
		/// <summary>
		/// SellCount : 
		/// </summary>
		[EnumTextValue("SELL_COUNT")]
		[ColumnEnum("SELL_COUNT", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		SellCount = 32,
		/// <summary>
		/// BuyCount : 
		/// </summary>
		[EnumTextValue("BUY_COUNT")]
		[ColumnEnum("BUY_COUNT", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		BuyCount = 33,
		/// <summary>
		/// NmTotalTradedValue : 
		/// </summary>
		[EnumTextValue("NM_TOTAL_TRADED_VALUE")]
		[ColumnEnum("NM_TOTAL_TRADED_VALUE", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		NmTotalTradedValue = 34,
		/// <summary>
		/// TotalBidQtty : 
		/// </summary>
		[EnumTextValue("TOTAL_BID_QTTY")]
		[ColumnEnum("TOTAL_BID_QTTY", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		TotalBidQtty = 35,
		/// <summary>
		/// TotalSellTradingQtty : 
		/// </summary>
		[EnumTextValue("TOTAL_SELL_TRADING_QTTY")]
		[ColumnEnum("TOTAL_SELL_TRADING_QTTY", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		TotalSellTradingQtty = 36,
		/// <summary>
		/// TotalOfferQtty : 
		/// </summary>
		[EnumTextValue("TOTAL_OFFER_QTTY")]
		[ColumnEnum("TOTAL_OFFER_QTTY", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		TotalOfferQtty = 37,
		/// <summary>
		/// TotalBuyTradingQtty : 
		/// </summary>
		[EnumTextValue("TOTAL_BUY_TRADING_QTTY")]
		[ColumnEnum("TOTAL_BUY_TRADING_QTTY", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		TotalBuyTradingQtty = 38,
		/// <summary>
		/// BidCount : 
		/// </summary>
		[EnumTextValue("BID_COUNT")]
		[ColumnEnum("BID_COUNT", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		BidCount = 39,
		/// <summary>
		/// OfferCount : 
		/// </summary>
		[EnumTextValue("OFFER_COUNT")]
		[ColumnEnum("OFFER_COUNT", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		OfferCount = 40,
		/// <summary>
		/// BuyForeignQtty : 
		/// </summary>
		[EnumTextValue("BUY_FOREIGN_QTTY")]
		[ColumnEnum("BUY_FOREIGN_QTTY", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		BuyForeignQtty = 41,
		/// <summary>
		/// BuyForeignValue : 
		/// </summary>
		[EnumTextValue("BUY_FOREIGN_VALUE")]
		[ColumnEnum("BUY_FOREIGN_VALUE", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		BuyForeignValue = 42,
		/// <summary>
		/// SellForeignQtty : 
		/// </summary>
		[EnumTextValue("SELL_FOREIGN_QTTY")]
		[ColumnEnum("SELL_FOREIGN_QTTY", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		SellForeignQtty = 43,
		/// <summary>
		/// SellForeignValue : 
		/// </summary>
		[EnumTextValue("SELL_FOREIGN_VALUE")]
		[ColumnEnum("SELL_FOREIGN_VALUE", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		SellForeignValue = 44,
		/// <summary>
		/// RemainForeignQtty : 
		/// </summary>
		[EnumTextValue("REMAIN_FOREIGN_QTTY")]
		[ColumnEnum("REMAIN_FOREIGN_QTTY", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		RemainForeignQtty = 45,
		/// <summary>
		/// PtMatchPrice : 
		/// </summary>
		[EnumTextValue("PT_MATCH_PRICE")]
		[ColumnEnum("PT_MATCH_PRICE", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		PtMatchPrice = 46,
		/// <summary>
		/// PtMatchQtty : 
		/// </summary>
		[EnumTextValue("PT_MATCH_QTTY")]
		[ColumnEnum("PT_MATCH_QTTY", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		PtMatchQtty = 47,
		/// <summary>
		/// PtTotalTradedQtty : 
		/// </summary>
		[EnumTextValue("PT_TOTAL_TRADED_QTTY")]
		[ColumnEnum("PT_TOTAL_TRADED_QTTY", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		PtTotalTradedQtty = 48,
		/// <summary>
		/// PtTotalTradedValue : 
		/// </summary>
		[EnumTextValue("PT_TOTAL_TRADED_VALUE")]
		[ColumnEnum("PT_TOTAL_TRADED_VALUE", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		PtTotalTradedValue = 49,
		/// <summary>
		/// TotalListingQtty : 
		/// </summary>
		[EnumTextValue("TOTAL_LISTING_QTTY")]
		[ColumnEnum("TOTAL_LISTING_QTTY", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		TotalListingQtty = 50,
		/// <summary>
		/// OpenPrice : 
		/// </summary>
		[EnumTextValue("OPEN_PRICE")]
		[ColumnEnum("OPEN_PRICE", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		OpenPrice = 51,
		/// <summary>
		/// ClosePrice : 
		/// </summary>
		[EnumTextValue("CLOSE_PRICE")]
		[ColumnEnum("CLOSE_PRICE", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		ClosePrice = 52,
		/// <summary>
		/// AveragePrice : 
		/// </summary>
		[EnumTextValue("AVERAGE_PRICE")]
		[ColumnEnum("AVERAGE_PRICE", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		AveragePrice = 53,
		/// <summary>
		/// Status : 
		/// </summary>
		[EnumTextValue("STATUS")]
		[ColumnEnum("STATUS", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 1)]
		Status = 54,
		/// <summary>
		/// Sequence : 
		/// </summary>
		[EnumTextValue("Sequence")]
		[ColumnEnum("Sequence", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Sequence = 55
	}//End enum

	#endregion HastcStocksColumn Enum

} // end namespace
