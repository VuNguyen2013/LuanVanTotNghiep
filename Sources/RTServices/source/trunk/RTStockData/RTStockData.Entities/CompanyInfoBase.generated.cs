
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file CompanyInfo.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using RTStockData.Entities.Validation;
#endregion

namespace RTStockData.Entities
{
	///<summary>
	/// An object representation of the 'CompanyInfo' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class CompanyInfoBase : EntityBase, ICompanyInfo, IEntityId<CompanyInfoKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private CompanyInfoEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private CompanyInfoEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private CompanyInfoEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<CompanyInfo> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CompanyInfoEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CompanyInfoEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="CompanyInfoBase"/> instance.
		///</summary>
		public CompanyInfoBase()
		{
			this.entityData = new CompanyInfoEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="CompanyInfoBase"/> instance.
		///</summary>
		///<param name="_code"></param>
		///<param name="_shortName"></param>
		///<param name="_phone"></param>
		///<param name="_email"></param>
		///<param name="_fax"></param>
		///<param name="_website"></param>
		///<param name="_lastModified"></param>
		///<param name="_isPublished"></param>
		///<param name="_authorId"></param>
		///<param name="_sectorId"></param>
		///<param name="_marketId"></param>
		///<param name="_pageView"></param>
		///<param name="_industryGroup"></param>
		public CompanyInfoBase(System.String _code, System.String _shortName, System.String _phone, 
			System.String _email, System.String _fax, System.String _website, System.DateTime? _lastModified, 
			System.Boolean? _isPublished, System.Int32? _authorId, System.Guid? _sectorId, System.Int32 _marketId, 
			System.Int32? _pageView, System.Int32? _industryGroup)
		{
			this.entityData = new CompanyInfoEntityData();
			this.backupData = null;

			this.Code = _code;
			this.ShortName = _shortName;
			this.Phone = _phone;
			this.Email = _email;
			this.Fax = _fax;
			this.Website = _website;
			this.LastModified = _lastModified;
			this.IsPublished = _isPublished;
			this.AuthorId = _authorId;
			this.SectorId = _sectorId;
			this.MarketId = _marketId;
			this.PageView = _pageView;
			this.IndustryGroup = _industryGroup;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="CompanyInfo"/> instance.
		///</summary>
		///<param name="_code"></param>
		///<param name="_shortName"></param>
		///<param name="_phone"></param>
		///<param name="_email"></param>
		///<param name="_fax"></param>
		///<param name="_website"></param>
		///<param name="_lastModified"></param>
		///<param name="_isPublished"></param>
		///<param name="_authorId"></param>
		///<param name="_sectorId"></param>
		///<param name="_marketId"></param>
		///<param name="_pageView"></param>
		///<param name="_industryGroup"></param>
		public static CompanyInfo CreateCompanyInfo(System.String _code, System.String _shortName, System.String _phone, 
			System.String _email, System.String _fax, System.String _website, System.DateTime? _lastModified, 
			System.Boolean? _isPublished, System.Int32? _authorId, System.Guid? _sectorId, System.Int32 _marketId, 
			System.Int32? _pageView, System.Int32? _industryGroup)
		{
			CompanyInfo newCompanyInfo = new CompanyInfo();
			newCompanyInfo.Code = _code;
			newCompanyInfo.ShortName = _shortName;
			newCompanyInfo.Phone = _phone;
			newCompanyInfo.Email = _email;
			newCompanyInfo.Fax = _fax;
			newCompanyInfo.Website = _website;
			newCompanyInfo.LastModified = _lastModified;
			newCompanyInfo.IsPublished = _isPublished;
			newCompanyInfo.AuthorId = _authorId;
			newCompanyInfo.SectorId = _sectorId;
			newCompanyInfo.MarketId = _marketId;
			newCompanyInfo.PageView = _pageView;
			newCompanyInfo.IndustryGroup = _industryGroup;
			return newCompanyInfo;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the CompanyId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 CompanyId
		{
			get
			{
				return this.entityData.CompanyId; 
			}
			
			set
			{
				if (this.entityData.CompanyId == value)
					return;
					
				OnColumnChanging(CompanyInfoColumn.CompanyId, this.entityData.CompanyId);
				this.entityData.CompanyId = value;
				this.EntityId.CompanyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyInfoColumn.CompanyId, this.entityData.CompanyId);
				OnPropertyChanged("CompanyId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Code property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String Code
		{
			get
			{
				return this.entityData.Code; 
			}
			
			set
			{
				if (this.entityData.Code == value)
					return;
					
				OnColumnChanging(CompanyInfoColumn.Code, this.entityData.Code);
				this.entityData.Code = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyInfoColumn.Code, this.entityData.Code);
				OnPropertyChanged("Code");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ShortName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String ShortName
		{
			get
			{
				return this.entityData.ShortName; 
			}
			
			set
			{
				if (this.entityData.ShortName == value)
					return;
					
				OnColumnChanging(CompanyInfoColumn.ShortName, this.entityData.ShortName);
				this.entityData.ShortName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyInfoColumn.ShortName, this.entityData.ShortName);
				OnPropertyChanged("ShortName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Phone property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Phone
		{
			get
			{
				return this.entityData.Phone; 
			}
			
			set
			{
				if (this.entityData.Phone == value)
					return;
					
				OnColumnChanging(CompanyInfoColumn.Phone, this.entityData.Phone);
				this.entityData.Phone = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyInfoColumn.Phone, this.entityData.Phone);
				OnPropertyChanged("Phone");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Email property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Email
		{
			get
			{
				return this.entityData.Email; 
			}
			
			set
			{
				if (this.entityData.Email == value)
					return;
					
				OnColumnChanging(CompanyInfoColumn.Email, this.entityData.Email);
				this.entityData.Email = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyInfoColumn.Email, this.entityData.Email);
				OnPropertyChanged("Email");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Fax property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Fax
		{
			get
			{
				return this.entityData.Fax; 
			}
			
			set
			{
				if (this.entityData.Fax == value)
					return;
					
				OnColumnChanging(CompanyInfoColumn.Fax, this.entityData.Fax);
				this.entityData.Fax = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyInfoColumn.Fax, this.entityData.Fax);
				OnPropertyChanged("Fax");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Website property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Website
		{
			get
			{
				return this.entityData.Website; 
			}
			
			set
			{
				if (this.entityData.Website == value)
					return;
					
				OnColumnChanging(CompanyInfoColumn.Website, this.entityData.Website);
				this.entityData.Website = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyInfoColumn.Website, this.entityData.Website);
				OnPropertyChanged("Website");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModified property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsLastModifiedNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? LastModified
		{
			get
			{
				return this.entityData.LastModified; 
			}
			
			set
			{
				if (this.entityData.LastModified == value)
					return;
					
				OnColumnChanging(CompanyInfoColumn.LastModified, this.entityData.LastModified);
				this.entityData.LastModified = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyInfoColumn.LastModified, this.entityData.LastModified);
				OnPropertyChanged("LastModified");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsPublished property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsPublishedNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsPublished
		{
			get
			{
				return this.entityData.IsPublished; 
			}
			
			set
			{
				if (this.entityData.IsPublished == value)
					return;
					
				OnColumnChanging(CompanyInfoColumn.IsPublished, this.entityData.IsPublished);
				this.entityData.IsPublished = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyInfoColumn.IsPublished, this.entityData.IsPublished);
				OnPropertyChanged("IsPublished");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AuthorId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsAuthorIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? AuthorId
		{
			get
			{
				return this.entityData.AuthorId; 
			}
			
			set
			{
				if (this.entityData.AuthorId == value)
					return;
					
				OnColumnChanging(CompanyInfoColumn.AuthorId, this.entityData.AuthorId);
				this.entityData.AuthorId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyInfoColumn.AuthorId, this.entityData.AuthorId);
				OnPropertyChanged("AuthorId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SectorId property. 
		///		
		/// </summary>
		/// <value>This type is uniqueidentifier.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return Guid.Empty. It is up to the developer
		/// to check the value of IsSectorIdNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Guid? SectorId
		{
			get
			{
				return this.entityData.SectorId; 
			}
			
			set
			{
				if (this.entityData.SectorId == value)
					return;
					
				OnColumnChanging(CompanyInfoColumn.SectorId, this.entityData.SectorId);
				this.entityData.SectorId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyInfoColumn.SectorId, this.entityData.SectorId);
				OnPropertyChanged("SectorId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MarketId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 MarketId
		{
			get
			{
				return this.entityData.MarketId; 
			}
			
			set
			{
				if (this.entityData.MarketId == value)
					return;
					
				OnColumnChanging(CompanyInfoColumn.MarketId, this.entityData.MarketId);
				this.entityData.MarketId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyInfoColumn.MarketId, this.entityData.MarketId);
				OnPropertyChanged("MarketId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PageView property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsPageViewNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? PageView
		{
			get
			{
				return this.entityData.PageView; 
			}
			
			set
			{
				if (this.entityData.PageView == value)
					return;
					
				OnColumnChanging(CompanyInfoColumn.PageView, this.entityData.PageView);
				this.entityData.PageView = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyInfoColumn.PageView, this.entityData.PageView);
				OnPropertyChanged("PageView");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IndustryGroup property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsIndustryGroupNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? IndustryGroup
		{
			get
			{
				return this.entityData.IndustryGroup; 
			}
			
			set
			{
				if (this.entityData.IndustryGroup == value)
					return;
					
				OnColumnChanging(CompanyInfoColumn.IndustryGroup, this.entityData.IndustryGroup);
				this.entityData.IndustryGroup = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyInfoColumn.IndustryGroup, this.entityData.IndustryGroup);
				OnPropertyChanged("IndustryGroup");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Code", "Code"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Code", "Code", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ShortName", "Short Name", 500));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Phone", "Phone", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Email", "Email", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Fax", "Fax", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Website", "Website", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "CompanyInfo"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"CompanyId", "Code", "ShortName", "Phone", "Email", "Fax", "Website", "LastModified", "IsPublished", "AuthorId", "SectorId", "MarketId", "PageView", "IndustryGroup"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as CompanyInfoEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (CompanyInfo) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<CompanyInfo>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as CompanyInfo);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed CompanyInfo Entity 
		///</summary>
		protected virtual CompanyInfo Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			CompanyInfo copy = new CompanyInfo();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.CompanyId = this.CompanyId;
				copy.Code = this.Code;
				copy.ShortName = this.ShortName;
				copy.Phone = this.Phone;
				copy.Email = this.Email;
				copy.Fax = this.Fax;
				copy.Website = this.Website;
				copy.LastModified = this.LastModified;
				copy.IsPublished = this.IsPublished;
				copy.AuthorId = this.AuthorId;
				copy.SectorId = this.SectorId;
				copy.MarketId = this.MarketId;
				copy.PageView = this.PageView;
				copy.IndustryGroup = this.IndustryGroup;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed CompanyInfo Entity 
		///</summary>
		public virtual CompanyInfo Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed CompanyInfo Entity which is a deep copy of the current entity.
		///</summary>
		public virtual CompanyInfo DeepCopy()
		{
			return EntityHelper.Clone<CompanyInfo>(this as CompanyInfo);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as CompanyInfoEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new CompanyInfoEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as CompanyInfoEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(CompanyInfoColumn column)
		{
			switch(column)
			{
					case CompanyInfoColumn.CompanyId:
					return entityData.CompanyId != _originalData.CompanyId;
					case CompanyInfoColumn.Code:
					return entityData.Code != _originalData.Code;
					case CompanyInfoColumn.ShortName:
					return entityData.ShortName != _originalData.ShortName;
					case CompanyInfoColumn.Phone:
					return entityData.Phone != _originalData.Phone;
					case CompanyInfoColumn.Email:
					return entityData.Email != _originalData.Email;
					case CompanyInfoColumn.Fax:
					return entityData.Fax != _originalData.Fax;
					case CompanyInfoColumn.Website:
					return entityData.Website != _originalData.Website;
					case CompanyInfoColumn.LastModified:
					return entityData.LastModified != _originalData.LastModified;
					case CompanyInfoColumn.IsPublished:
					return entityData.IsPublished != _originalData.IsPublished;
					case CompanyInfoColumn.AuthorId:
					return entityData.AuthorId != _originalData.AuthorId;
					case CompanyInfoColumn.SectorId:
					return entityData.SectorId != _originalData.SectorId;
					case CompanyInfoColumn.MarketId:
					return entityData.MarketId != _originalData.MarketId;
					case CompanyInfoColumn.PageView:
					return entityData.PageView != _originalData.PageView;
					case CompanyInfoColumn.IndustryGroup:
					return entityData.IndustryGroup != _originalData.IndustryGroup;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< CompanyInfoColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.CompanyId != _originalData.CompanyId;
			result = result || entityData.Code != _originalData.Code;
			result = result || entityData.ShortName != _originalData.ShortName;
			result = result || entityData.Phone != _originalData.Phone;
			result = result || entityData.Email != _originalData.Email;
			result = result || entityData.Fax != _originalData.Fax;
			result = result || entityData.Website != _originalData.Website;
			result = result || entityData.LastModified != _originalData.LastModified;
			result = result || entityData.IsPublished != _originalData.IsPublished;
			result = result || entityData.AuthorId != _originalData.AuthorId;
			result = result || entityData.SectorId != _originalData.SectorId;
			result = result || entityData.MarketId != _originalData.MarketId;
			result = result || entityData.PageView != _originalData.PageView;
			result = result || entityData.IndustryGroup != _originalData.IndustryGroup;
			return result;
		}	
		
		///<summary>
		///  Returns a CompanyInfo Entity with the original data.
		///</summary>
		public CompanyInfo GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateCompanyInfo(
				_originalData.Code,
				_originalData.ShortName,
				_originalData.Phone,
				_originalData.Email,
				_originalData.Fax,
				_originalData.Website,
				_originalData.LastModified,
				_originalData.IsPublished,
				_originalData.AuthorId,
				_originalData.SectorId,
				_originalData.MarketId,
				_originalData.PageView,
				_originalData.IndustryGroup
				);
				
			return (CompanyInfo)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="CompanyInfoBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is CompanyInfoBase)
				return ValueEquals(this, (CompanyInfoBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="CompanyInfoBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.CompanyId.GetHashCode() ^ 
					this.Code.GetHashCode() ^ 
					((this.ShortName == null) ? string.Empty : this.ShortName.ToString()).GetHashCode() ^ 
					((this.Phone == null) ? string.Empty : this.Phone.ToString()).GetHashCode() ^ 
					((this.Email == null) ? string.Empty : this.Email.ToString()).GetHashCode() ^ 
					((this.Fax == null) ? string.Empty : this.Fax.ToString()).GetHashCode() ^ 
					((this.Website == null) ? string.Empty : this.Website.ToString()).GetHashCode() ^ 
					((this.LastModified == null) ? string.Empty : this.LastModified.ToString()).GetHashCode() ^ 
					((this.IsPublished == null) ? string.Empty : this.IsPublished.ToString()).GetHashCode() ^ 
					((this.AuthorId == null) ? string.Empty : this.AuthorId.ToString()).GetHashCode() ^ 
					((this.SectorId == null) ? string.Empty : this.SectorId.ToString()).GetHashCode() ^ 
					this.MarketId.GetHashCode() ^ 
					((this.PageView == null) ? string.Empty : this.PageView.ToString()).GetHashCode() ^ 
					((this.IndustryGroup == null) ? string.Empty : this.IndustryGroup.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="CompanyInfoBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(CompanyInfoBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="CompanyInfoBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="CompanyInfoBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="CompanyInfoBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(CompanyInfoBase Object1, CompanyInfoBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.CompanyId != Object2.CompanyId)
				equal = false;
			if (Object1.Code != Object2.Code)
				equal = false;
			if ( Object1.ShortName != null && Object2.ShortName != null )
			{
				if (Object1.ShortName != Object2.ShortName)
					equal = false;
			}
			else if (Object1.ShortName == null ^ Object2.ShortName == null )
			{
				equal = false;
			}
			if ( Object1.Phone != null && Object2.Phone != null )
			{
				if (Object1.Phone != Object2.Phone)
					equal = false;
			}
			else if (Object1.Phone == null ^ Object2.Phone == null )
			{
				equal = false;
			}
			if ( Object1.Email != null && Object2.Email != null )
			{
				if (Object1.Email != Object2.Email)
					equal = false;
			}
			else if (Object1.Email == null ^ Object2.Email == null )
			{
				equal = false;
			}
			if ( Object1.Fax != null && Object2.Fax != null )
			{
				if (Object1.Fax != Object2.Fax)
					equal = false;
			}
			else if (Object1.Fax == null ^ Object2.Fax == null )
			{
				equal = false;
			}
			if ( Object1.Website != null && Object2.Website != null )
			{
				if (Object1.Website != Object2.Website)
					equal = false;
			}
			else if (Object1.Website == null ^ Object2.Website == null )
			{
				equal = false;
			}
			if ( Object1.LastModified != null && Object2.LastModified != null )
			{
				if (Object1.LastModified != Object2.LastModified)
					equal = false;
			}
			else if (Object1.LastModified == null ^ Object2.LastModified == null )
			{
				equal = false;
			}
			if ( Object1.IsPublished != null && Object2.IsPublished != null )
			{
				if (Object1.IsPublished != Object2.IsPublished)
					equal = false;
			}
			else if (Object1.IsPublished == null ^ Object2.IsPublished == null )
			{
				equal = false;
			}
			if ( Object1.AuthorId != null && Object2.AuthorId != null )
			{
				if (Object1.AuthorId != Object2.AuthorId)
					equal = false;
			}
			else if (Object1.AuthorId == null ^ Object2.AuthorId == null )
			{
				equal = false;
			}
			if ( Object1.SectorId != null && Object2.SectorId != null )
			{
				if (Object1.SectorId != Object2.SectorId)
					equal = false;
			}
			else if (Object1.SectorId == null ^ Object2.SectorId == null )
			{
				equal = false;
			}
			if (Object1.MarketId != Object2.MarketId)
				equal = false;
			if ( Object1.PageView != null && Object2.PageView != null )
			{
				if (Object1.PageView != Object2.PageView)
					equal = false;
			}
			else if (Object1.PageView == null ^ Object2.PageView == null )
			{
				equal = false;
			}
			if ( Object1.IndustryGroup != null && Object2.IndustryGroup != null )
			{
				if (Object1.IndustryGroup != Object2.IndustryGroup)
					equal = false;
			}
			else if (Object1.IndustryGroup == null ^ Object2.IndustryGroup == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((CompanyInfoBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static CompanyInfoComparer GetComparer()
        {
            return new CompanyInfoComparer();
        }
        */

        // Comparer delegates back to CompanyInfo
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(CompanyInfo rhs, CompanyInfoColumn which)
        {
            switch (which)
            {
            	
            	
            	case CompanyInfoColumn.CompanyId:
            		return this.CompanyId.CompareTo(rhs.CompanyId);
            		
            		                 
            	
            	
            	case CompanyInfoColumn.Code:
            		return this.Code.CompareTo(rhs.Code);
            		
            		                 
            	
            	
            	case CompanyInfoColumn.ShortName:
            		return this.ShortName.CompareTo(rhs.ShortName);
            		
            		                 
            	
            	
            	case CompanyInfoColumn.Phone:
            		return this.Phone.CompareTo(rhs.Phone);
            		
            		                 
            	
            	
            	case CompanyInfoColumn.Email:
            		return this.Email.CompareTo(rhs.Email);
            		
            		                 
            	
            	
            	case CompanyInfoColumn.Fax:
            		return this.Fax.CompareTo(rhs.Fax);
            		
            		                 
            	
            	
            	case CompanyInfoColumn.Website:
            		return this.Website.CompareTo(rhs.Website);
            		
            		                 
            	
            	
            	case CompanyInfoColumn.LastModified:
            		return this.LastModified.Value.CompareTo(rhs.LastModified.Value);
            		
            		                 
            	
            	
            	case CompanyInfoColumn.IsPublished:
            		return this.IsPublished.Value.CompareTo(rhs.IsPublished.Value);
            		
            		                 
            	
            	
            	case CompanyInfoColumn.AuthorId:
            		return this.AuthorId.Value.CompareTo(rhs.AuthorId.Value);
            		
            		                 
            	
            	
            	case CompanyInfoColumn.SectorId:
            		return this.SectorId.Value.CompareTo(rhs.SectorId.Value);
            		
            		                 
            	
            	
            	case CompanyInfoColumn.MarketId:
            		return this.MarketId.CompareTo(rhs.MarketId);
            		
            		                 
            	
            	
            	case CompanyInfoColumn.PageView:
            		return this.PageView.Value.CompareTo(rhs.PageView.Value);
            		
            		                 
            	
            	
            	case CompanyInfoColumn.IndustryGroup:
            		return this.IndustryGroup.Value.CompareTo(rhs.IndustryGroup.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<CompanyInfoKey> Members
		
		// member variable for the EntityId property
		private CompanyInfoKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual CompanyInfoKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new CompanyInfoKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("CompanyInfo")
					.Append("|").Append( this.CompanyId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{15}{14}- CompanyId: {0}{14}- Code: {1}{14}- ShortName: {2}{14}- Phone: {3}{14}- Email: {4}{14}- Fax: {5}{14}- Website: {6}{14}- LastModified: {7}{14}- IsPublished: {8}{14}- AuthorId: {9}{14}- SectorId: {10}{14}- MarketId: {11}{14}- PageView: {12}{14}- IndustryGroup: {13}{14}{16}", 
				this.CompanyId,
				this.Code,
				(this.ShortName == null) ? string.Empty : this.ShortName.ToString(),
				(this.Phone == null) ? string.Empty : this.Phone.ToString(),
				(this.Email == null) ? string.Empty : this.Email.ToString(),
				(this.Fax == null) ? string.Empty : this.Fax.ToString(),
				(this.Website == null) ? string.Empty : this.Website.ToString(),
				(this.LastModified == null) ? string.Empty : this.LastModified.ToString(),
				(this.IsPublished == null) ? string.Empty : this.IsPublished.ToString(),
				(this.AuthorId == null) ? string.Empty : this.AuthorId.ToString(),
				(this.SectorId == null) ? string.Empty : this.SectorId.ToString(),
				this.MarketId,
				(this.PageView == null) ? string.Empty : this.PageView.ToString(),
				(this.IndustryGroup == null) ? string.Empty : this.IndustryGroup.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'CompanyInfo' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class CompanyInfoEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// CompanyId : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "CompanyInfo"</remarks>
		public System.Int32 CompanyId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// Code : 
		/// </summary>
		public System.String		  Code = string.Empty;
		
		/// <summary>
		/// ShortName : 
		/// </summary>
		public System.String		  ShortName = null;
		
		/// <summary>
		/// Phone : 
		/// </summary>
		public System.String		  Phone = null;
		
		/// <summary>
		/// Email : 
		/// </summary>
		public System.String		  Email = null;
		
		/// <summary>
		/// Fax : 
		/// </summary>
		public System.String		  Fax = null;
		
		/// <summary>
		/// Website : 
		/// </summary>
		public System.String		  Website = null;
		
		/// <summary>
		/// LastModified : 
		/// </summary>
		public System.DateTime?		  LastModified = null;
		
		/// <summary>
		/// IsPublished : 
		/// </summary>
		public System.Boolean?		  IsPublished = null;
		
		/// <summary>
		/// AuthorId : 
		/// </summary>
		public System.Int32?		  AuthorId = null;
		
		/// <summary>
		/// SectorId : 
		/// </summary>
		public System.Guid?		  SectorId = null;
		
		/// <summary>
		/// MarketId : 
		/// </summary>
		public System.Int32		  MarketId = (int)0;
		
		/// <summary>
		/// PageView : 
		/// </summary>
		public System.Int32?		  PageView = null;
		
		/// <summary>
		/// IndustryGroup : 
		/// </summary>
		public System.Int32?		  IndustryGroup = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			CompanyInfoEntityData _tmp = new CompanyInfoEntityData();
						
			_tmp.CompanyId = this.CompanyId;
			
			_tmp.Code = this.Code;
			_tmp.ShortName = this.ShortName;
			_tmp.Phone = this.Phone;
			_tmp.Email = this.Email;
			_tmp.Fax = this.Fax;
			_tmp.Website = this.Website;
			_tmp.LastModified = this.LastModified;
			_tmp.IsPublished = this.IsPublished;
			_tmp.AuthorId = this.AuthorId;
			_tmp.SectorId = this.SectorId;
			_tmp.MarketId = this.MarketId;
			_tmp.PageView = this.PageView;
			_tmp.IndustryGroup = this.IndustryGroup;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			CompanyInfoEntityData _tmp = new CompanyInfoEntityData();
						
			_tmp.CompanyId = this.CompanyId;
			
			_tmp.Code = this.Code;
			_tmp.ShortName = this.ShortName;
			_tmp.Phone = this.Phone;
			_tmp.Email = this.Email;
			_tmp.Fax = this.Fax;
			_tmp.Website = this.Website;
			_tmp.LastModified = this.LastModified;
			_tmp.IsPublished = this.IsPublished;
			_tmp.AuthorId = this.AuthorId;
			_tmp.SectorId = this.SectorId;
			_tmp.MarketId = this.MarketId;
			_tmp.PageView = this.PageView;
			_tmp.IndustryGroup = this.IndustryGroup;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CompanyInfoColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(CompanyInfoColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CompanyInfoColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(CompanyInfoColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CompanyInfoColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(CompanyInfoColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				CompanyInfoEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new CompanyInfoEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CompanyInfoColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(CompanyInfoColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				CompanyInfoEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new CompanyInfoEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region CompanyInfoEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="CompanyInfo"/> object.
	/// </remarks>
	public class CompanyInfoEventArgs : System.EventArgs
	{
		private CompanyInfoColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the CompanyInfoEventArgs class.
		///</summary>
		public CompanyInfoEventArgs(CompanyInfoColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the CompanyInfoEventArgs class.
		///</summary>
		public CompanyInfoEventArgs(CompanyInfoColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The CompanyInfoColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="CompanyInfoColumn" />
		public CompanyInfoColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all CompanyInfo related events.
	///</summary>
	public delegate void CompanyInfoEventHandler(object sender, CompanyInfoEventArgs e);
	
	#region CompanyInfoComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class CompanyInfoComparer : System.Collections.Generic.IComparer<CompanyInfo>
	{
		CompanyInfoColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:CompanyInfoComparer"/> class.
        /// </summary>
		public CompanyInfoComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:CompanyInfoComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public CompanyInfoComparer(CompanyInfoColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="CompanyInfo"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="CompanyInfo"/> to compare.</param>
        /// <param name="b">The second <c>CompanyInfo</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(CompanyInfo a, CompanyInfo b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(CompanyInfo entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(CompanyInfo a, CompanyInfo b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public CompanyInfoColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region CompanyInfoKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="CompanyInfo"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class CompanyInfoKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the CompanyInfoKey class.
		/// </summary>
		public CompanyInfoKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the CompanyInfoKey class.
		/// </summary>
		public CompanyInfoKey(CompanyInfoBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.CompanyId = entity.CompanyId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the CompanyInfoKey class.
		/// </summary>
		public CompanyInfoKey(System.Int32 _companyId)
		{
			#region Init Properties

			this.CompanyId = _companyId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private CompanyInfoBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public CompanyInfoBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the CompanyId property
		private System.Int32 _companyId;
		
		/// <summary>
		/// Gets or sets the CompanyId property.
		/// </summary>
		public System.Int32 CompanyId
		{
			get { return _companyId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.CompanyId = value;
				
				_companyId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				CompanyId = ( values["CompanyId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["CompanyId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("CompanyId", CompanyId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("CompanyId: {0}{1}",
								CompanyId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region CompanyInfoColumn Enum
	
	/// <summary>
	/// Enumerate the CompanyInfo columns.
	/// </summary>
	[Serializable]
	public enum CompanyInfoColumn : int
	{
		/// <summary>
		/// CompanyId : 
		/// </summary>
		[EnumTextValue("CompanyId")]
		[ColumnEnum("CompanyId", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		CompanyId = 1,
		/// <summary>
		/// Code : 
		/// </summary>
		[EnumTextValue("Code")]
		[ColumnEnum("Code", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 10)]
		Code = 2,
		/// <summary>
		/// ShortName : 
		/// </summary>
		[EnumTextValue("ShortName")]
		[ColumnEnum("ShortName", typeof(System.String), System.Data.DbType.String, false, false, true, 500)]
		ShortName = 3,
		/// <summary>
		/// Phone : 
		/// </summary>
		[EnumTextValue("Phone")]
		[ColumnEnum("Phone", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Phone = 4,
		/// <summary>
		/// Email : 
		/// </summary>
		[EnumTextValue("Email")]
		[ColumnEnum("Email", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Email = 5,
		/// <summary>
		/// Fax : 
		/// </summary>
		[EnumTextValue("Fax")]
		[ColumnEnum("Fax", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Fax = 6,
		/// <summary>
		/// Website : 
		/// </summary>
		[EnumTextValue("Website")]
		[ColumnEnum("Website", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Website = 7,
		/// <summary>
		/// LastModified : 
		/// </summary>
		[EnumTextValue("LastModified")]
		[ColumnEnum("LastModified", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		LastModified = 8,
		/// <summary>
		/// IsPublished : 
		/// </summary>
		[EnumTextValue("IsPublished")]
		[ColumnEnum("IsPublished", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsPublished = 9,
		/// <summary>
		/// AuthorId : 
		/// </summary>
		[EnumTextValue("AuthorId")]
		[ColumnEnum("AuthorId", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		AuthorId = 10,
		/// <summary>
		/// SectorId : 
		/// </summary>
		[EnumTextValue("SectorId")]
		[ColumnEnum("SectorId", typeof(System.Guid), System.Data.DbType.Guid, false, false, true)]
		SectorId = 11,
		/// <summary>
		/// MarketId : 
		/// </summary>
		[EnumTextValue("MarketId")]
		[ColumnEnum("MarketId", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		MarketId = 12,
		/// <summary>
		/// PageView : 
		/// </summary>
		[EnumTextValue("PageView")]
		[ColumnEnum("PageView", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		PageView = 13,
		/// <summary>
		/// IndustryGroup : 
		/// </summary>
		[EnumTextValue("IndustryGroup")]
		[ColumnEnum("IndustryGroup", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		IndustryGroup = 14
	}//End enum

	#endregion CompanyInfoColumn Enum

} // end namespace
