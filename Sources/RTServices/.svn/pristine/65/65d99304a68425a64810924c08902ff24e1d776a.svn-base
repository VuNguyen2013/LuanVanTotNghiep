using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using Common.Logging;
using Db4objects.Db4o;
using Db4objects.Db4o.Config;
using Db4objects.Db4o.IO;
using Db4objects.Db4o.Linq;
using Db4objects.Db4o.Query;

using RTDataServices.Entities;

namespace RTDataServices
{
    public class Db4oManager
    {
        private static readonly ILog Logging = LogManager.GetLogger("Db4oManager");
        private static IObjectContainer _db;

        public static bool CreateDatabase()
        {
            IEmbeddedConfiguration config = Db4oEmbedded.NewConfiguration();
            config.File.Storage = new PagingMemoryStorage();
            
            _db = Db4oEmbedded.OpenFile(config, "inmemory");
            _db.Ext().Configure().WeakReferences(false);
            _db.Ext().Configure().ActivationDepth(1);
            _db.Ext().Configure().ObjectClass(typeof(HOSETransactionInfo)).ObjectField("Id").Indexed(true);
            _db.Ext().Configure().ObjectClass(typeof(HNXTransactionInfo)).ObjectField("Id").Indexed(true);
            _db.Ext().Configure().ObjectClass(typeof(UPCOMTransactionInfo)).ObjectField("Id").Indexed(true);
            if (_db == null)
                return false;
            return true;
        }

        public static void Insert<T>(T item)
        {
            _db.Store(item);
            _db.Commit();
        }

        public static void Update(HOSETransactionInfo transactionInfo)
        {
            IQuery query = _db.Query();

            IQuery queryTime = query.Descend("_time");

            query.Constrain(typeof(HOSETransactionInfo));

            query.Descend("_stockSymbol").Constrain(transactionInfo.StockSymbol).Equal().And(
                queryTime.Constrain(transactionInfo.Time).Equal());

            IObjectSet result = query.Execute();

            if (result.Count == 0)
            {
                Insert(transactionInfo);
            }
        }

        public static void Update(HNXTransactionInfo transactionInfo)
        {
            IQuery query = _db.Query();

            IQuery queryTime = query.Descend("_time");

            query.Constrain(typeof(HNXTransactionInfo));

            query.Descend("_stockSymbol").Constrain(transactionInfo.StockSymbol).Equal().And(
                queryTime.Constrain(transactionInfo.Time).Equal());

            IObjectSet result = query.Execute();

            if (result.Count == 0)
            {
                Insert(transactionInfo);
            }
        }

        public static List<MainMatchedPricesInfo> GetHOSEMainMatchedPrices(string stockSymbol)
        {
            var listMainMatchedPrices = new List<MainMatchedPricesInfo>();

            List<HOSETransactionInfo> listTransaction = GetHoseTransactionInfoListBySymbol(stockSymbol);

            var listResult = (from HOSETransactionInfo transactionInfo in listTransaction
                                group transactionInfo by transactionInfo.Price into g 
                        select new { Price = g.Key, Volume = g.Sum(transactionInfo => transactionInfo.Vol) }).ToList();

            foreach (var info in listResult)
            {
                var mainMatchedPrices = new MainMatchedPricesInfo();
                mainMatchedPrices.Price = info.Price;
                mainMatchedPrices.Volume = info.Volume;

                listMainMatchedPrices.Add(mainMatchedPrices);
            }

            return listMainMatchedPrices;
        }

        public static List<MainMatchedPricesInfo> GetHNXMainMatchedPrices(string stockSymbol)
        {
            var listMainMatchedPrices = new List<MainMatchedPricesInfo>();

            List<HNXTransactionInfo> listTransaction = GetHnxTransactionInfoListBySymbol(stockSymbol);

            var listResult = (from HNXTransactionInfo transactionInfo in listTransaction
                              group transactionInfo by transactionInfo.Price into g
                              select new { Price = g.Key, Volume = g.Sum(transactionInfo => transactionInfo.Vol) }).ToList();

            foreach (var info in listResult)
            {
                var mainMatchedPrices = new MainMatchedPricesInfo();
                mainMatchedPrices.Price = info.Price;
                mainMatchedPrices.Volume = info.Volume;

                listMainMatchedPrices.Add(mainMatchedPrices);
            }

            return listMainMatchedPrices;
        }

        public static List<MainMatchedPricesInfo> GetUPCOMMainMatchedPrices(string stockSymbol)
        {
            var listMainMatchedPrices = new List<MainMatchedPricesInfo>();

            List<UPCOMTransactionInfo> listTransaction = GetUpcomTransactionInfoListBySymbol(stockSymbol);

            var listResult = (from UPCOMTransactionInfo transactionInfo in listTransaction
                              group transactionInfo by transactionInfo.Price into g
                              select new { Price = g.Key, Volume = g.Where(transactionInfo => transactionInfo.StockSymbol == stockSymbol).Sum(transactionInfo => transactionInfo.Vol) }).ToList();

            foreach (var info in listResult)
            {
                var mainMatchedPrices = new MainMatchedPricesInfo();
                mainMatchedPrices.Price = info.Price;
                mainMatchedPrices.Volume = info.Volume;

                listMainMatchedPrices.Add(mainMatchedPrices);
            }

            return listMainMatchedPrices;
        }

        public static void Update(UPCOMTransactionInfo transactionInfo)
        {
            IQuery query = _db.Query();

            IQuery queryTime = query.Descend("_time");

            query.Constrain(typeof(UPCOMTransactionInfo));

            query.Descend("_stockSymbol").Constrain(transactionInfo.StockSymbol).Equal().And(
                queryTime.Constrain(transactionInfo.Time).Equal());

            IObjectSet result = query.Execute();

            if (result.Count == 0)
            {
                Insert(transactionInfo);
            }
        }

        public static List<HOSETransactionInfo> ListResult1(IObjectSet result)
        {
            var retList = new List<HOSETransactionInfo>();

            foreach (object item in result)
            {
                retList.Add((HOSETransactionInfo)item);
            }

            return retList;
        }

        public static List<HOSETransactionInfo> GetHoseTransactionInfoListBySymbol(string stockSymbol)
        {
            IQuery query = _db.Query();
            query.Constrain(typeof(HOSETransactionInfo));

            query.Descend("_stockSymbol").Constrain(stockSymbol).Equal();

            IObjectSet result = query.Execute();

            return ListResult1(result);
        }

        public static List<HOSETransactionInfo> GetHoseTransactionInfoListBySymbol(string stockSymbol, int time)
        {
            IQuery query = _db.Query();
            query.Constrain(typeof(HOSETransactionInfo));
            
            IConstraint constraint = query.Descend("_time").Constrain(time).Greater();
            query.Descend("_stockSymbol").Constrain(stockSymbol).Equal().And(constraint);
            query.Descend("_time").OrderDescending();

            IObjectSet result = query.Execute();

            return ListResult1(result);
        }

        public static List<TickerInfo> GetTickerListBySymbolAndId(string stockSymbol, int id, double refPrice, object type)
        {
            IQuery query = _db.Query();
            query.Constrain(type);

            IConstraint constraint = query.Descend("_id").Constrain(id).Greater();
            query.Descend("_stockSymbol").Constrain(stockSymbol).Equal().And(constraint);
            query.Descend("_id").OrderDescending();

            IObjectSet result = query.Execute();

            return GetTickerList(result, refPrice, type);
        }

        public static List<TickerInfo> GetTickerListById(int id, object type)
        {
            IQuery query = _db.Query();
            query.Constrain(type);

            query.Descend("_id").Constrain(id).Greater();
            query.Descend("_id").OrderDescending();

            IObjectSet result = query.Execute();

            return GetTickerList(result, type);
        }

        public static List<TickerInfo> GetTickerList(IObjectSet dataList, double refPrice, object type)
        {
            var retList = new List<TickerInfo>();

            foreach (object item in dataList)
            {
                if (type == typeof(HOSETransactionInfo))
                {
                    var transactionInfo = (HOSETransactionInfo)item;
                    var tickerInfo = new TickerInfo
                    {
                        Id = transactionInfo.Id,
                        StockSymbol = transactionInfo.StockSymbol,
                        Price = transactionInfo.Price,
                        Changed = System.Math.Round(transactionInfo.Price - refPrice, 2),
                        Vol = transactionInfo.Vol,
                        Side = transactionInfo.Side,
                    };

                    retList.Add(tickerInfo);
                }
                else if (type == typeof(HNXTransactionInfo))
                {
                    var transactionInfo = (HNXTransactionInfo)item;
                    var tickerInfo = new TickerInfo
                    {
                        Id = transactionInfo.Id,
                        StockSymbol = transactionInfo.StockSymbol,
                        Price = transactionInfo.Price,
                        Changed = System.Math.Round(transactionInfo.Price - refPrice, 2),
                        Vol = transactionInfo.Vol,
                        Side = transactionInfo.Side,
                    };

                    retList.Add(tickerInfo);
                }
                else if (type == typeof(UPCOMTransactionInfo))
                {
                    var transactionInfo = (UPCOMTransactionInfo)item;
                    var tickerInfo = new TickerInfo
                    {
                        Id = transactionInfo.Id,
                        StockSymbol = transactionInfo.StockSymbol,
                        Price = transactionInfo.Price,
                        Changed = System.Math.Round(transactionInfo.Price - refPrice, 2),
                        Vol = transactionInfo.Vol,
                        Side = transactionInfo.Side,
                    };

                    retList.Add(tickerInfo);
                }
            }

            return retList;
        }

        public static List<TickerInfo> GetTickerList(IObjectSet dataList, object type)
        {
            var retList = new List<TickerInfo>();

            foreach (object item in dataList)
            {
                try
                {
                    if (type == typeof (HOSETransactionInfo))
                    {
                        var transactionInfo = (HOSETransactionInfo) item;
                        StockInfo stockInfo = DBServices.GetStock(transactionInfo.StockSymbol);
                        var tickerInfo = new TickerInfo
                                             {
                                                 Id = transactionInfo.Id,
                                                 StockSymbol = transactionInfo.StockSymbol,
                                                 Price = transactionInfo.Price,
                                                 Changed =
                                                     System.Math.Round(transactionInfo.Price - stockInfo.RefPrice, 2),
                                                 Vol = transactionInfo.Vol,
                                                 Side = transactionInfo.Side,
                                             };

                        retList.Add(tickerInfo);
                    }
                    else if (type == typeof(HNXTransactionInfo))
                    {
                        var transactionInfo = (HNXTransactionInfo)item;
                        StockInfo stockInfo = DBServices.GetStock(transactionInfo.StockSymbol);
                        var tickerInfo = new TickerInfo
                                                {
                                                    Id = transactionInfo.Id,
                                                    StockSymbol = transactionInfo.StockSymbol,
                                                    Price = transactionInfo.Price,
                                                    Changed = System.Math.Round(transactionInfo.Price - stockInfo.RefPrice, 2),
                                                    Vol = transactionInfo.Vol,
                                                    Side = transactionInfo.Side,
                                                };

                        retList.Add(tickerInfo);
                    }
                    else if (type == typeof(UPCOMTransactionInfo))
                    {
                        var transactionInfo = (UPCOMTransactionInfo)item;
                        StockInfo stockInfo = DBServices.GetStock(transactionInfo.StockSymbol);
                        var tickerInfo = new TickerInfo
                                                {
                                                    Id = transactionInfo.Id,
                                                    StockSymbol = transactionInfo.StockSymbol,
                                                    Price = transactionInfo.Price,
                                                    Changed = System.Math.Round(transactionInfo.Price - stockInfo.RefPrice, 2),
                                                    Vol = transactionInfo.Vol,
                                                    Side = transactionInfo.Side,
                                                };

                        retList.Add(tickerInfo);
                    }
                }
                catch (Exception)
                {
                    continue;
                }
            }

            return retList;
        }

        public static List<HNXTransactionInfo> ListResult2(IObjectSet result)
        {
            var retList = new List<HNXTransactionInfo>();

            foreach (object item in result)
            {
                retList.Add((HNXTransactionInfo)item);
            }

            return retList;
        }

        public static List<HNXTransactionInfo> GetHnxTransactionInfoListBySymbol(string stockSymbol)
        {
            IQuery query = _db.Query();
            query.Constrain(typeof(HNXTransactionInfo));

            query.Descend("_stockSymbol").Constrain(stockSymbol).Equal();

            IObjectSet result = query.Execute();

            return ListResult2(result);
        }

        public static List<HNXTransactionInfo> GetHnxTransactionInfoListBySymbol(string stockSymbol, int time)
        {
            IQuery query = _db.Query();
            query.Constrain(typeof(HNXTransactionInfo));

            IConstraint constraint = query.Descend("_time").Constrain(time).Greater();
            query.Descend("_stockSymbol").Constrain(stockSymbol).Equal().And(constraint);
            query.Descend("_time").OrderDescending();

            IObjectSet result = query.Execute();

            return ListResult2(result);
        }

        public static List<UPCOMTransactionInfo> ListResult3(IObjectSet result)
        {
            var retList = new List<UPCOMTransactionInfo>();

            foreach (object item in result)
            {
                retList.Add((UPCOMTransactionInfo)item);
            }

            return retList;
        }

        public static List<UPCOMTransactionInfo> GetUpcomTransactionInfoListBySymbol(string stockSymbol)
        {
            IQuery query = _db.Query();
            query.Constrain(typeof(UPCOMTransactionInfo));

            query.Descend("_stockSymbol").Constrain(stockSymbol).Equal();

            IObjectSet result = query.Execute();

            return ListResult3(result);
        }

        public static List<UPCOMTransactionInfo> GetUpcomTransactionInfoListBySymbol(string stockSymbol, int time)
        {
            IQuery query = _db.Query();
            query.Constrain(typeof(UPCOMTransactionInfo));

            IConstraint constraint = query.Descend("_time").Constrain(time).Greater();
            query.Descend("_stockSymbol").Constrain(stockSymbol).Equal().And(constraint);
            query.Descend("_time").OrderDescending();

            IObjectSet result = query.Execute();

            return ListResult3(result);
        }

        //public static IList<TransactionInfo> GetTransactionInfoListBySymbol(string stockSymbol, int marketId)
        //{
        //    //Stopwatch stopwatch = new Stopwatch();
        //    //stopwatch.Start();
        //    IQuery query = _db.Query();

        //    switch (marketId)
        //    {
        //        case (int)RTDdataServices.Entities.MARKET_ID.HOSE:
        //            query.Constrain(typeof(HOSETransactionInfo));

        //            break;
        //        case (int)RTDdataServices.Entities.MARKET_ID.HASTC:
        //            query.Constrain(typeof(HNXTransactionInfo));

        //            break;
        //        case (int)RTDdataServices.Entities.MARKET_ID.UPCoM:
        //            query.Constrain(typeof(UPCOMTransactionInfo));

        //            break;
        //        default:
        //            break;
        //    }

        //    query.Descend("StockSymbol").Constrain(stockSymbol).Equal();
        //    IObjectSet result = query.Execute();

        //    return result;
        //}

        public static void ClearDatabase()
        {
            //Stopwatch stopwatch = new Stopwatch();
            //stopwatch.Start();
            Logging.Info("Clear database.............................");
            IObjectSet result = _db.QueryByExample(typeof(HOSETransactionInfo));
            while (result.HasNext())
            {
                _db.Delete(result.Next());
            }

            IObjectSet result1 = _db.QueryByExample(typeof(HNXTransactionInfo));
            while (result1.HasNext())
            {
                _db.Delete(result1.Next());
            }

            IObjectSet result2 = _db.QueryByExample(typeof(UPCOMTransactionInfo));
            while (result2.HasNext())
            {
                _db.Delete(result2.Next());
            }

            _db.Commit();
        }
    }
}
