
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Indexs.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using RTStockData.Entities.Validation;
#endregion

namespace RTStockData.Entities
{
	///<summary>
	/// An object representation of the 'Indexs' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class IndexsBase : EntityBase, IIndexs, IEntityId<IndexsKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private IndexsEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private IndexsEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private IndexsEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Indexs> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event IndexsEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event IndexsEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="IndexsBase"/> instance.
		///</summary>
		public IndexsBase()
		{
			this.entityData = new IndexsEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="IndexsBase"/> instance.
		///</summary>
		///<param name="_tradedDate"></param>
		///<param name="_open"></param>
		///<param name="_close"></param>
		///<param name="_change"></param>
		///<param name="_unchange"></param>
		///<param name="_high"></param>
		///<param name="_low"></param>
		///<param name="_up"></param>
		///<param name="_down"></param>
		///<param name="_average"></param>
		///<param name="_vol"></param>
		///<param name="_val"></param>
		///<param name="_attribute1"></param>
		///<param name="_totaltrade"></param>
		///<param name="_attribute3"></param>
		///<param name="_marketId"></param>
		///<param name="_status"></param>
		///<param name="_trans"></param>
		///<param name="_upvolume"></param>
		///<param name="_downvolume"></param>
		///<param name="_nochangevolume"></param>
		public IndexsBase(System.DateTime? _tradedDate, System.Double? _open, System.Double? _close, 
			System.Double? _change, System.Double? _unchange, System.Double? _high, System.Double? _low, System.Double? _up, 
			System.Double? _down, System.Double? _average, System.Double? _vol, System.Double? _val, System.String _attribute1, 
			System.Double? _totaltrade, System.DateTime? _attribute3, System.String _marketId, System.Int16? _status, 
			System.Int32? _trans, System.Double? _upvolume, System.Double? _downvolume, System.Double? _nochangevolume)
		{
			this.entityData = new IndexsEntityData();
			this.backupData = null;

			this.TradedDate = _tradedDate;
			this.Open = _open;
			this.Close = _close;
			this.Change = _change;
			this.Unchange = _unchange;
			this.High = _high;
			this.Low = _low;
			this.Up = _up;
			this.Down = _down;
			this.Average = _average;
			this.Vol = _vol;
			this.Val = _val;
			this.Attribute1 = _attribute1;
			this.Totaltrade = _totaltrade;
			this.Attribute3 = _attribute3;
			this.MarketId = _marketId;
			this.Status = _status;
			this.Trans = _trans;
			this.Upvolume = _upvolume;
			this.Downvolume = _downvolume;
			this.Nochangevolume = _nochangevolume;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Indexs"/> instance.
		///</summary>
		///<param name="_tradedDate"></param>
		///<param name="_open"></param>
		///<param name="_close"></param>
		///<param name="_change"></param>
		///<param name="_unchange"></param>
		///<param name="_high"></param>
		///<param name="_low"></param>
		///<param name="_up"></param>
		///<param name="_down"></param>
		///<param name="_average"></param>
		///<param name="_vol"></param>
		///<param name="_val"></param>
		///<param name="_attribute1"></param>
		///<param name="_totaltrade"></param>
		///<param name="_attribute3"></param>
		///<param name="_marketId"></param>
		///<param name="_status"></param>
		///<param name="_trans"></param>
		///<param name="_upvolume"></param>
		///<param name="_downvolume"></param>
		///<param name="_nochangevolume"></param>
		public static Indexs CreateIndexs(System.DateTime? _tradedDate, System.Double? _open, System.Double? _close, 
			System.Double? _change, System.Double? _unchange, System.Double? _high, System.Double? _low, System.Double? _up, 
			System.Double? _down, System.Double? _average, System.Double? _vol, System.Double? _val, System.String _attribute1, 
			System.Double? _totaltrade, System.DateTime? _attribute3, System.String _marketId, System.Int16? _status, 
			System.Int32? _trans, System.Double? _upvolume, System.Double? _downvolume, System.Double? _nochangevolume)
		{
			Indexs newIndexs = new Indexs();
			newIndexs.TradedDate = _tradedDate;
			newIndexs.Open = _open;
			newIndexs.Close = _close;
			newIndexs.Change = _change;
			newIndexs.Unchange = _unchange;
			newIndexs.High = _high;
			newIndexs.Low = _low;
			newIndexs.Up = _up;
			newIndexs.Down = _down;
			newIndexs.Average = _average;
			newIndexs.Vol = _vol;
			newIndexs.Val = _val;
			newIndexs.Attribute1 = _attribute1;
			newIndexs.Totaltrade = _totaltrade;
			newIndexs.Attribute3 = _attribute3;
			newIndexs.MarketId = _marketId;
			newIndexs.Status = _status;
			newIndexs.Trans = _trans;
			newIndexs.Upvolume = _upvolume;
			newIndexs.Downvolume = _downvolume;
			newIndexs.Nochangevolume = _nochangevolume;
			return newIndexs;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the VnindexId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 VnindexId
		{
			get
			{
				return this.entityData.VnindexId; 
			}
			
			set
			{
				if (this.entityData.VnindexId == value)
					return;
					
				OnColumnChanging(IndexsColumn.VnindexId, this.entityData.VnindexId);
				this.entityData.VnindexId = value;
				this.EntityId.VnindexId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexsColumn.VnindexId, this.entityData.VnindexId);
				OnPropertyChanged("VnindexId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TradedDate property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsTradedDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? TradedDate
		{
			get
			{
				return this.entityData.TradedDate; 
			}
			
			set
			{
				if (this.entityData.TradedDate == value)
					return;
					
				OnColumnChanging(IndexsColumn.TradedDate, this.entityData.TradedDate);
				this.entityData.TradedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexsColumn.TradedDate, this.entityData.TradedDate);
				OnPropertyChanged("TradedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Open property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsOpenNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Open
		{
			get
			{
				return this.entityData.Open; 
			}
			
			set
			{
				if (this.entityData.Open == value)
					return;
					
				OnColumnChanging(IndexsColumn.Open, this.entityData.Open);
				this.entityData.Open = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexsColumn.Open, this.entityData.Open);
				OnPropertyChanged("Open");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Close property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsCloseNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Close
		{
			get
			{
				return this.entityData.Close; 
			}
			
			set
			{
				if (this.entityData.Close == value)
					return;
					
				OnColumnChanging(IndexsColumn.Close, this.entityData.Close);
				this.entityData.Close = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexsColumn.Close, this.entityData.Close);
				OnPropertyChanged("Close");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Change property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsChangeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Change
		{
			get
			{
				return this.entityData.Change; 
			}
			
			set
			{
				if (this.entityData.Change == value)
					return;
					
				OnColumnChanging(IndexsColumn.Change, this.entityData.Change);
				this.entityData.Change = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexsColumn.Change, this.entityData.Change);
				OnPropertyChanged("Change");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Unchange property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsUnchangeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Unchange
		{
			get
			{
				return this.entityData.Unchange; 
			}
			
			set
			{
				if (this.entityData.Unchange == value)
					return;
					
				OnColumnChanging(IndexsColumn.Unchange, this.entityData.Unchange);
				this.entityData.Unchange = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexsColumn.Unchange, this.entityData.Unchange);
				OnPropertyChanged("Unchange");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the High property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsHighNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? High
		{
			get
			{
				return this.entityData.High; 
			}
			
			set
			{
				if (this.entityData.High == value)
					return;
					
				OnColumnChanging(IndexsColumn.High, this.entityData.High);
				this.entityData.High = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexsColumn.High, this.entityData.High);
				OnPropertyChanged("High");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Low property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsLowNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Low
		{
			get
			{
				return this.entityData.Low; 
			}
			
			set
			{
				if (this.entityData.Low == value)
					return;
					
				OnColumnChanging(IndexsColumn.Low, this.entityData.Low);
				this.entityData.Low = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexsColumn.Low, this.entityData.Low);
				OnPropertyChanged("Low");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Up property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsUpNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Up
		{
			get
			{
				return this.entityData.Up; 
			}
			
			set
			{
				if (this.entityData.Up == value)
					return;
					
				OnColumnChanging(IndexsColumn.Up, this.entityData.Up);
				this.entityData.Up = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexsColumn.Up, this.entityData.Up);
				OnPropertyChanged("Up");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Down property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsDownNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Down
		{
			get
			{
				return this.entityData.Down; 
			}
			
			set
			{
				if (this.entityData.Down == value)
					return;
					
				OnColumnChanging(IndexsColumn.Down, this.entityData.Down);
				this.entityData.Down = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexsColumn.Down, this.entityData.Down);
				OnPropertyChanged("Down");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Average property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsAverageNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Average
		{
			get
			{
				return this.entityData.Average; 
			}
			
			set
			{
				if (this.entityData.Average == value)
					return;
					
				OnColumnChanging(IndexsColumn.Average, this.entityData.Average);
				this.entityData.Average = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexsColumn.Average, this.entityData.Average);
				OnPropertyChanged("Average");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Vol property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsVolNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Vol
		{
			get
			{
				return this.entityData.Vol; 
			}
			
			set
			{
				if (this.entityData.Vol == value)
					return;
					
				OnColumnChanging(IndexsColumn.Vol, this.entityData.Vol);
				this.entityData.Vol = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexsColumn.Vol, this.entityData.Vol);
				OnPropertyChanged("Vol");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Val property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsValNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Val
		{
			get
			{
				return this.entityData.Val; 
			}
			
			set
			{
				if (this.entityData.Val == value)
					return;
					
				OnColumnChanging(IndexsColumn.Val, this.entityData.Val);
				this.entityData.Val = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexsColumn.Val, this.entityData.Val);
				OnPropertyChanged("Val");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Attribute1 property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String Attribute1
		{
			get
			{
				return this.entityData.Attribute1; 
			}
			
			set
			{
				if (this.entityData.Attribute1 == value)
					return;
					
				OnColumnChanging(IndexsColumn.Attribute1, this.entityData.Attribute1);
				this.entityData.Attribute1 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexsColumn.Attribute1, this.entityData.Attribute1);
				OnPropertyChanged("Attribute1");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Totaltrade property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsTotaltradeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Totaltrade
		{
			get
			{
				return this.entityData.Totaltrade; 
			}
			
			set
			{
				if (this.entityData.Totaltrade == value)
					return;
					
				OnColumnChanging(IndexsColumn.Totaltrade, this.entityData.Totaltrade);
				this.entityData.Totaltrade = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexsColumn.Totaltrade, this.entityData.Totaltrade);
				OnPropertyChanged("Totaltrade");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Attribute3 property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsAttribute3Null() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? Attribute3
		{
			get
			{
				return this.entityData.Attribute3; 
			}
			
			set
			{
				if (this.entityData.Attribute3 == value)
					return;
					
				OnColumnChanging(IndexsColumn.Attribute3, this.entityData.Attribute3);
				this.entityData.Attribute3 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexsColumn.Attribute3, this.entityData.Attribute3);
				OnPropertyChanged("Attribute3");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MarketId property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String MarketId
		{
			get
			{
				return this.entityData.MarketId; 
			}
			
			set
			{
				if (this.entityData.MarketId == value)
					return;
					
				OnColumnChanging(IndexsColumn.MarketId, this.entityData.MarketId);
				this.entityData.MarketId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexsColumn.MarketId, this.entityData.MarketId);
				OnPropertyChanged("MarketId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsStatusNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
					
				OnColumnChanging(IndexsColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexsColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Trans property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTransNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Trans
		{
			get
			{
				return this.entityData.Trans; 
			}
			
			set
			{
				if (this.entityData.Trans == value)
					return;
					
				OnColumnChanging(IndexsColumn.Trans, this.entityData.Trans);
				this.entityData.Trans = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexsColumn.Trans, this.entityData.Trans);
				OnPropertyChanged("Trans");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Upvolume property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsUpvolumeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Upvolume
		{
			get
			{
				return this.entityData.Upvolume; 
			}
			
			set
			{
				if (this.entityData.Upvolume == value)
					return;
					
				OnColumnChanging(IndexsColumn.Upvolume, this.entityData.Upvolume);
				this.entityData.Upvolume = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexsColumn.Upvolume, this.entityData.Upvolume);
				OnPropertyChanged("Upvolume");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Downvolume property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsDownvolumeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Downvolume
		{
			get
			{
				return this.entityData.Downvolume; 
			}
			
			set
			{
				if (this.entityData.Downvolume == value)
					return;
					
				OnColumnChanging(IndexsColumn.Downvolume, this.entityData.Downvolume);
				this.entityData.Downvolume = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexsColumn.Downvolume, this.entityData.Downvolume);
				OnPropertyChanged("Downvolume");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Nochangevolume property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsNochangevolumeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Double? Nochangevolume
		{
			get
			{
				return this.entityData.Nochangevolume; 
			}
			
			set
			{
				if (this.entityData.Nochangevolume == value)
					return;
					
				OnColumnChanging(IndexsColumn.Nochangevolume, this.entityData.Nochangevolume);
				this.entityData.Nochangevolume = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IndexsColumn.Nochangevolume, this.entityData.Nochangevolume);
				OnPropertyChanged("Nochangevolume");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Attribute1", "Attribute1", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MarketId", "Market Id", 30));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Indexs"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"VNINDEX_ID", "TRADED_DATE", "OPEN", "CLOSE", "CHANGE", "UNCHANGE", "HIGH", "LOW", "UP", "DOWN", "AVERAGE", "VOL", "VAL", "ATTRIBUTE1", "TOTALTRADE", "ATTRIBUTE3", "Market_ID", "STATUS", "TRANS", "UPVOLUME", "DOWNVOLUME", "NOCHANGEVOLUME"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as IndexsEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Indexs) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Indexs>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Indexs);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Indexs Entity 
		///</summary>
		protected virtual Indexs Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Indexs copy = new Indexs();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.VnindexId = this.VnindexId;
				copy.TradedDate = this.TradedDate;
				copy.Open = this.Open;
				copy.Close = this.Close;
				copy.Change = this.Change;
				copy.Unchange = this.Unchange;
				copy.High = this.High;
				copy.Low = this.Low;
				copy.Up = this.Up;
				copy.Down = this.Down;
				copy.Average = this.Average;
				copy.Vol = this.Vol;
				copy.Val = this.Val;
				copy.Attribute1 = this.Attribute1;
				copy.Totaltrade = this.Totaltrade;
				copy.Attribute3 = this.Attribute3;
				copy.MarketId = this.MarketId;
				copy.Status = this.Status;
				copy.Trans = this.Trans;
				copy.Upvolume = this.Upvolume;
				copy.Downvolume = this.Downvolume;
				copy.Nochangevolume = this.Nochangevolume;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Indexs Entity 
		///</summary>
		public virtual Indexs Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Indexs Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Indexs DeepCopy()
		{
			return EntityHelper.Clone<Indexs>(this as Indexs);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as IndexsEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new IndexsEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as IndexsEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(IndexsColumn column)
		{
			switch(column)
			{
					case IndexsColumn.VnindexId:
					return entityData.VnindexId != _originalData.VnindexId;
					case IndexsColumn.TradedDate:
					return entityData.TradedDate != _originalData.TradedDate;
					case IndexsColumn.Open:
					return entityData.Open != _originalData.Open;
					case IndexsColumn.Close:
					return entityData.Close != _originalData.Close;
					case IndexsColumn.Change:
					return entityData.Change != _originalData.Change;
					case IndexsColumn.Unchange:
					return entityData.Unchange != _originalData.Unchange;
					case IndexsColumn.High:
					return entityData.High != _originalData.High;
					case IndexsColumn.Low:
					return entityData.Low != _originalData.Low;
					case IndexsColumn.Up:
					return entityData.Up != _originalData.Up;
					case IndexsColumn.Down:
					return entityData.Down != _originalData.Down;
					case IndexsColumn.Average:
					return entityData.Average != _originalData.Average;
					case IndexsColumn.Vol:
					return entityData.Vol != _originalData.Vol;
					case IndexsColumn.Val:
					return entityData.Val != _originalData.Val;
					case IndexsColumn.Attribute1:
					return entityData.Attribute1 != _originalData.Attribute1;
					case IndexsColumn.Totaltrade:
					return entityData.Totaltrade != _originalData.Totaltrade;
					case IndexsColumn.Attribute3:
					return entityData.Attribute3 != _originalData.Attribute3;
					case IndexsColumn.MarketId:
					return entityData.MarketId != _originalData.MarketId;
					case IndexsColumn.Status:
					return entityData.Status != _originalData.Status;
					case IndexsColumn.Trans:
					return entityData.Trans != _originalData.Trans;
					case IndexsColumn.Upvolume:
					return entityData.Upvolume != _originalData.Upvolume;
					case IndexsColumn.Downvolume:
					return entityData.Downvolume != _originalData.Downvolume;
					case IndexsColumn.Nochangevolume:
					return entityData.Nochangevolume != _originalData.Nochangevolume;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< IndexsColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.VnindexId != _originalData.VnindexId;
			result = result || entityData.TradedDate != _originalData.TradedDate;
			result = result || entityData.Open != _originalData.Open;
			result = result || entityData.Close != _originalData.Close;
			result = result || entityData.Change != _originalData.Change;
			result = result || entityData.Unchange != _originalData.Unchange;
			result = result || entityData.High != _originalData.High;
			result = result || entityData.Low != _originalData.Low;
			result = result || entityData.Up != _originalData.Up;
			result = result || entityData.Down != _originalData.Down;
			result = result || entityData.Average != _originalData.Average;
			result = result || entityData.Vol != _originalData.Vol;
			result = result || entityData.Val != _originalData.Val;
			result = result || entityData.Attribute1 != _originalData.Attribute1;
			result = result || entityData.Totaltrade != _originalData.Totaltrade;
			result = result || entityData.Attribute3 != _originalData.Attribute3;
			result = result || entityData.MarketId != _originalData.MarketId;
			result = result || entityData.Status != _originalData.Status;
			result = result || entityData.Trans != _originalData.Trans;
			result = result || entityData.Upvolume != _originalData.Upvolume;
			result = result || entityData.Downvolume != _originalData.Downvolume;
			result = result || entityData.Nochangevolume != _originalData.Nochangevolume;
			return result;
		}	
		
		///<summary>
		///  Returns a Indexs Entity with the original data.
		///</summary>
		public Indexs GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateIndexs(
				_originalData.TradedDate,
				_originalData.Open,
				_originalData.Close,
				_originalData.Change,
				_originalData.Unchange,
				_originalData.High,
				_originalData.Low,
				_originalData.Up,
				_originalData.Down,
				_originalData.Average,
				_originalData.Vol,
				_originalData.Val,
				_originalData.Attribute1,
				_originalData.Totaltrade,
				_originalData.Attribute3,
				_originalData.MarketId,
				_originalData.Status,
				_originalData.Trans,
				_originalData.Upvolume,
				_originalData.Downvolume,
				_originalData.Nochangevolume
				);
				
			return (Indexs)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="IndexsBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is IndexsBase)
				return ValueEquals(this, (IndexsBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="IndexsBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.VnindexId.GetHashCode() ^ 
					((this.TradedDate == null) ? string.Empty : this.TradedDate.ToString()).GetHashCode() ^ 
					((this.Open == null) ? string.Empty : this.Open.ToString()).GetHashCode() ^ 
					((this.Close == null) ? string.Empty : this.Close.ToString()).GetHashCode() ^ 
					((this.Change == null) ? string.Empty : this.Change.ToString()).GetHashCode() ^ 
					((this.Unchange == null) ? string.Empty : this.Unchange.ToString()).GetHashCode() ^ 
					((this.High == null) ? string.Empty : this.High.ToString()).GetHashCode() ^ 
					((this.Low == null) ? string.Empty : this.Low.ToString()).GetHashCode() ^ 
					((this.Up == null) ? string.Empty : this.Up.ToString()).GetHashCode() ^ 
					((this.Down == null) ? string.Empty : this.Down.ToString()).GetHashCode() ^ 
					((this.Average == null) ? string.Empty : this.Average.ToString()).GetHashCode() ^ 
					((this.Vol == null) ? string.Empty : this.Vol.ToString()).GetHashCode() ^ 
					((this.Val == null) ? string.Empty : this.Val.ToString()).GetHashCode() ^ 
					((this.Attribute1 == null) ? string.Empty : this.Attribute1.ToString()).GetHashCode() ^ 
					((this.Totaltrade == null) ? string.Empty : this.Totaltrade.ToString()).GetHashCode() ^ 
					((this.Attribute3 == null) ? string.Empty : this.Attribute3.ToString()).GetHashCode() ^ 
					((this.MarketId == null) ? string.Empty : this.MarketId.ToString()).GetHashCode() ^ 
					((this.Status == null) ? string.Empty : this.Status.ToString()).GetHashCode() ^ 
					((this.Trans == null) ? string.Empty : this.Trans.ToString()).GetHashCode() ^ 
					((this.Upvolume == null) ? string.Empty : this.Upvolume.ToString()).GetHashCode() ^ 
					((this.Downvolume == null) ? string.Empty : this.Downvolume.ToString()).GetHashCode() ^ 
					((this.Nochangevolume == null) ? string.Empty : this.Nochangevolume.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="IndexsBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(IndexsBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="IndexsBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="IndexsBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="IndexsBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(IndexsBase Object1, IndexsBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.VnindexId != Object2.VnindexId)
				equal = false;
			if ( Object1.TradedDate != null && Object2.TradedDate != null )
			{
				if (Object1.TradedDate != Object2.TradedDate)
					equal = false;
			}
			else if (Object1.TradedDate == null ^ Object2.TradedDate == null )
			{
				equal = false;
			}
			if ( Object1.Open != null && Object2.Open != null )
			{
				if (Object1.Open != Object2.Open)
					equal = false;
			}
			else if (Object1.Open == null ^ Object2.Open == null )
			{
				equal = false;
			}
			if ( Object1.Close != null && Object2.Close != null )
			{
				if (Object1.Close != Object2.Close)
					equal = false;
			}
			else if (Object1.Close == null ^ Object2.Close == null )
			{
				equal = false;
			}
			if ( Object1.Change != null && Object2.Change != null )
			{
				if (Object1.Change != Object2.Change)
					equal = false;
			}
			else if (Object1.Change == null ^ Object2.Change == null )
			{
				equal = false;
			}
			if ( Object1.Unchange != null && Object2.Unchange != null )
			{
				if (Object1.Unchange != Object2.Unchange)
					equal = false;
			}
			else if (Object1.Unchange == null ^ Object2.Unchange == null )
			{
				equal = false;
			}
			if ( Object1.High != null && Object2.High != null )
			{
				if (Object1.High != Object2.High)
					equal = false;
			}
			else if (Object1.High == null ^ Object2.High == null )
			{
				equal = false;
			}
			if ( Object1.Low != null && Object2.Low != null )
			{
				if (Object1.Low != Object2.Low)
					equal = false;
			}
			else if (Object1.Low == null ^ Object2.Low == null )
			{
				equal = false;
			}
			if ( Object1.Up != null && Object2.Up != null )
			{
				if (Object1.Up != Object2.Up)
					equal = false;
			}
			else if (Object1.Up == null ^ Object2.Up == null )
			{
				equal = false;
			}
			if ( Object1.Down != null && Object2.Down != null )
			{
				if (Object1.Down != Object2.Down)
					equal = false;
			}
			else if (Object1.Down == null ^ Object2.Down == null )
			{
				equal = false;
			}
			if ( Object1.Average != null && Object2.Average != null )
			{
				if (Object1.Average != Object2.Average)
					equal = false;
			}
			else if (Object1.Average == null ^ Object2.Average == null )
			{
				equal = false;
			}
			if ( Object1.Vol != null && Object2.Vol != null )
			{
				if (Object1.Vol != Object2.Vol)
					equal = false;
			}
			else if (Object1.Vol == null ^ Object2.Vol == null )
			{
				equal = false;
			}
			if ( Object1.Val != null && Object2.Val != null )
			{
				if (Object1.Val != Object2.Val)
					equal = false;
			}
			else if (Object1.Val == null ^ Object2.Val == null )
			{
				equal = false;
			}
			if ( Object1.Attribute1 != null && Object2.Attribute1 != null )
			{
				if (Object1.Attribute1 != Object2.Attribute1)
					equal = false;
			}
			else if (Object1.Attribute1 == null ^ Object2.Attribute1 == null )
			{
				equal = false;
			}
			if ( Object1.Totaltrade != null && Object2.Totaltrade != null )
			{
				if (Object1.Totaltrade != Object2.Totaltrade)
					equal = false;
			}
			else if (Object1.Totaltrade == null ^ Object2.Totaltrade == null )
			{
				equal = false;
			}
			if ( Object1.Attribute3 != null && Object2.Attribute3 != null )
			{
				if (Object1.Attribute3 != Object2.Attribute3)
					equal = false;
			}
			else if (Object1.Attribute3 == null ^ Object2.Attribute3 == null )
			{
				equal = false;
			}
			if ( Object1.MarketId != null && Object2.MarketId != null )
			{
				if (Object1.MarketId != Object2.MarketId)
					equal = false;
			}
			else if (Object1.MarketId == null ^ Object2.MarketId == null )
			{
				equal = false;
			}
			if ( Object1.Status != null && Object2.Status != null )
			{
				if (Object1.Status != Object2.Status)
					equal = false;
			}
			else if (Object1.Status == null ^ Object2.Status == null )
			{
				equal = false;
			}
			if ( Object1.Trans != null && Object2.Trans != null )
			{
				if (Object1.Trans != Object2.Trans)
					equal = false;
			}
			else if (Object1.Trans == null ^ Object2.Trans == null )
			{
				equal = false;
			}
			if ( Object1.Upvolume != null && Object2.Upvolume != null )
			{
				if (Object1.Upvolume != Object2.Upvolume)
					equal = false;
			}
			else if (Object1.Upvolume == null ^ Object2.Upvolume == null )
			{
				equal = false;
			}
			if ( Object1.Downvolume != null && Object2.Downvolume != null )
			{
				if (Object1.Downvolume != Object2.Downvolume)
					equal = false;
			}
			else if (Object1.Downvolume == null ^ Object2.Downvolume == null )
			{
				equal = false;
			}
			if ( Object1.Nochangevolume != null && Object2.Nochangevolume != null )
			{
				if (Object1.Nochangevolume != Object2.Nochangevolume)
					equal = false;
			}
			else if (Object1.Nochangevolume == null ^ Object2.Nochangevolume == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((IndexsBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static IndexsComparer GetComparer()
        {
            return new IndexsComparer();
        }
        */

        // Comparer delegates back to Indexs
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Indexs rhs, IndexsColumn which)
        {
            switch (which)
            {
            	
            	
            	case IndexsColumn.VnindexId:
            		return this.VnindexId.CompareTo(rhs.VnindexId);
            		
            		                 
            	
            	
            	case IndexsColumn.TradedDate:
            		return this.TradedDate.Value.CompareTo(rhs.TradedDate.Value);
            		
            		                 
            	
            	
            	case IndexsColumn.Open:
            		return this.Open.Value.CompareTo(rhs.Open.Value);
            		
            		                 
            	
            	
            	case IndexsColumn.Close:
            		return this.Close.Value.CompareTo(rhs.Close.Value);
            		
            		                 
            	
            	
            	case IndexsColumn.Change:
            		return this.Change.Value.CompareTo(rhs.Change.Value);
            		
            		                 
            	
            	
            	case IndexsColumn.Unchange:
            		return this.Unchange.Value.CompareTo(rhs.Unchange.Value);
            		
            		                 
            	
            	
            	case IndexsColumn.High:
            		return this.High.Value.CompareTo(rhs.High.Value);
            		
            		                 
            	
            	
            	case IndexsColumn.Low:
            		return this.Low.Value.CompareTo(rhs.Low.Value);
            		
            		                 
            	
            	
            	case IndexsColumn.Up:
            		return this.Up.Value.CompareTo(rhs.Up.Value);
            		
            		                 
            	
            	
            	case IndexsColumn.Down:
            		return this.Down.Value.CompareTo(rhs.Down.Value);
            		
            		                 
            	
            	
            	case IndexsColumn.Average:
            		return this.Average.Value.CompareTo(rhs.Average.Value);
            		
            		                 
            	
            	
            	case IndexsColumn.Vol:
            		return this.Vol.Value.CompareTo(rhs.Vol.Value);
            		
            		                 
            	
            	
            	case IndexsColumn.Val:
            		return this.Val.Value.CompareTo(rhs.Val.Value);
            		
            		                 
            	
            	
            	case IndexsColumn.Attribute1:
            		return this.Attribute1.CompareTo(rhs.Attribute1);
            		
            		                 
            	
            	
            	case IndexsColumn.Totaltrade:
            		return this.Totaltrade.Value.CompareTo(rhs.Totaltrade.Value);
            		
            		                 
            	
            	
            	case IndexsColumn.Attribute3:
            		return this.Attribute3.Value.CompareTo(rhs.Attribute3.Value);
            		
            		                 
            	
            	
            	case IndexsColumn.MarketId:
            		return this.MarketId.CompareTo(rhs.MarketId);
            		
            		                 
            	
            	
            	case IndexsColumn.Status:
            		return this.Status.Value.CompareTo(rhs.Status.Value);
            		
            		                 
            	
            	
            	case IndexsColumn.Trans:
            		return this.Trans.Value.CompareTo(rhs.Trans.Value);
            		
            		                 
            	
            	
            	case IndexsColumn.Upvolume:
            		return this.Upvolume.Value.CompareTo(rhs.Upvolume.Value);
            		
            		                 
            	
            	
            	case IndexsColumn.Downvolume:
            		return this.Downvolume.Value.CompareTo(rhs.Downvolume.Value);
            		
            		                 
            	
            	
            	case IndexsColumn.Nochangevolume:
            		return this.Nochangevolume.Value.CompareTo(rhs.Nochangevolume.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<IndexsKey> Members
		
		// member variable for the EntityId property
		private IndexsKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual IndexsKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new IndexsKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Indexs")
					.Append("|").Append( this.VnindexId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{23}{22}- VnindexId: {0}{22}- TradedDate: {1}{22}- Open: {2}{22}- Close: {3}{22}- Change: {4}{22}- Unchange: {5}{22}- High: {6}{22}- Low: {7}{22}- Up: {8}{22}- Down: {9}{22}- Average: {10}{22}- Vol: {11}{22}- Val: {12}{22}- Attribute1: {13}{22}- Totaltrade: {14}{22}- Attribute3: {15}{22}- MarketId: {16}{22}- Status: {17}{22}- Trans: {18}{22}- Upvolume: {19}{22}- Downvolume: {20}{22}- Nochangevolume: {21}{22}{24}", 
				this.VnindexId,
				(this.TradedDate == null) ? string.Empty : this.TradedDate.ToString(),
				(this.Open == null) ? string.Empty : this.Open.ToString(),
				(this.Close == null) ? string.Empty : this.Close.ToString(),
				(this.Change == null) ? string.Empty : this.Change.ToString(),
				(this.Unchange == null) ? string.Empty : this.Unchange.ToString(),
				(this.High == null) ? string.Empty : this.High.ToString(),
				(this.Low == null) ? string.Empty : this.Low.ToString(),
				(this.Up == null) ? string.Empty : this.Up.ToString(),
				(this.Down == null) ? string.Empty : this.Down.ToString(),
				(this.Average == null) ? string.Empty : this.Average.ToString(),
				(this.Vol == null) ? string.Empty : this.Vol.ToString(),
				(this.Val == null) ? string.Empty : this.Val.ToString(),
				(this.Attribute1 == null) ? string.Empty : this.Attribute1.ToString(),
				(this.Totaltrade == null) ? string.Empty : this.Totaltrade.ToString(),
				(this.Attribute3 == null) ? string.Empty : this.Attribute3.ToString(),
				(this.MarketId == null) ? string.Empty : this.MarketId.ToString(),
				(this.Status == null) ? string.Empty : this.Status.ToString(),
				(this.Trans == null) ? string.Empty : this.Trans.ToString(),
				(this.Upvolume == null) ? string.Empty : this.Upvolume.ToString(),
				(this.Downvolume == null) ? string.Empty : this.Downvolume.ToString(),
				(this.Nochangevolume == null) ? string.Empty : this.Nochangevolume.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Indexs' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class IndexsEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// VNINDEX_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Indexs"</remarks>
		public System.Int32 VnindexId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// TRADED_DATE : 
		/// </summary>
		public System.DateTime?		  TradedDate = null;
		
		/// <summary>
		/// OPEN : 
		/// </summary>
		public System.Double?		  Open = null;
		
		/// <summary>
		/// CLOSE : 
		/// </summary>
		public System.Double?		  Close = null;
		
		/// <summary>
		/// CHANGE : 
		/// </summary>
		public System.Double?		  Change = null;
		
		/// <summary>
		/// UNCHANGE : 
		/// </summary>
		public System.Double?		  Unchange = null;
		
		/// <summary>
		/// HIGH : 
		/// </summary>
		public System.Double?		  High = null;
		
		/// <summary>
		/// LOW : 
		/// </summary>
		public System.Double?		  Low = null;
		
		/// <summary>
		/// UP : 
		/// </summary>
		public System.Double?		  Up = null;
		
		/// <summary>
		/// DOWN : 
		/// </summary>
		public System.Double?		  Down = null;
		
		/// <summary>
		/// AVERAGE : 
		/// </summary>
		public System.Double?		  Average = null;
		
		/// <summary>
		/// VOL : 
		/// </summary>
		public System.Double?		  Vol = null;
		
		/// <summary>
		/// VAL : 
		/// </summary>
		public System.Double?		  Val = null;
		
		/// <summary>
		/// ATTRIBUTE1 : 
		/// </summary>
		public System.String		  Attribute1 = null;
		
		/// <summary>
		/// TOTALTRADE : 
		/// </summary>
		public System.Double?		  Totaltrade = null;
		
		/// <summary>
		/// ATTRIBUTE3 : 
		/// </summary>
		public System.DateTime?		  Attribute3 = null;
		
		/// <summary>
		/// Market_ID : 
		/// </summary>
		public System.String		  MarketId = null;
		
		/// <summary>
		/// STATUS : 
		/// </summary>
		public System.Int16?		  Status = null;
		
		/// <summary>
		/// TRANS : 
		/// </summary>
		public System.Int32?		  Trans = null;
		
		/// <summary>
		/// UPVOLUME : 
		/// </summary>
		public System.Double?		  Upvolume = null;
		
		/// <summary>
		/// DOWNVOLUME : 
		/// </summary>
		public System.Double?		  Downvolume = null;
		
		/// <summary>
		/// NOCHANGEVOLUME : 
		/// </summary>
		public System.Double?		  Nochangevolume = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			IndexsEntityData _tmp = new IndexsEntityData();
						
			_tmp.VnindexId = this.VnindexId;
			
			_tmp.TradedDate = this.TradedDate;
			_tmp.Open = this.Open;
			_tmp.Close = this.Close;
			_tmp.Change = this.Change;
			_tmp.Unchange = this.Unchange;
			_tmp.High = this.High;
			_tmp.Low = this.Low;
			_tmp.Up = this.Up;
			_tmp.Down = this.Down;
			_tmp.Average = this.Average;
			_tmp.Vol = this.Vol;
			_tmp.Val = this.Val;
			_tmp.Attribute1 = this.Attribute1;
			_tmp.Totaltrade = this.Totaltrade;
			_tmp.Attribute3 = this.Attribute3;
			_tmp.MarketId = this.MarketId;
			_tmp.Status = this.Status;
			_tmp.Trans = this.Trans;
			_tmp.Upvolume = this.Upvolume;
			_tmp.Downvolume = this.Downvolume;
			_tmp.Nochangevolume = this.Nochangevolume;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			IndexsEntityData _tmp = new IndexsEntityData();
						
			_tmp.VnindexId = this.VnindexId;
			
			_tmp.TradedDate = this.TradedDate;
			_tmp.Open = this.Open;
			_tmp.Close = this.Close;
			_tmp.Change = this.Change;
			_tmp.Unchange = this.Unchange;
			_tmp.High = this.High;
			_tmp.Low = this.Low;
			_tmp.Up = this.Up;
			_tmp.Down = this.Down;
			_tmp.Average = this.Average;
			_tmp.Vol = this.Vol;
			_tmp.Val = this.Val;
			_tmp.Attribute1 = this.Attribute1;
			_tmp.Totaltrade = this.Totaltrade;
			_tmp.Attribute3 = this.Attribute3;
			_tmp.MarketId = this.MarketId;
			_tmp.Status = this.Status;
			_tmp.Trans = this.Trans;
			_tmp.Upvolume = this.Upvolume;
			_tmp.Downvolume = this.Downvolume;
			_tmp.Nochangevolume = this.Nochangevolume;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IndexsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(IndexsColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IndexsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(IndexsColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IndexsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(IndexsColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				IndexsEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new IndexsEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IndexsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(IndexsColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				IndexsEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new IndexsEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region IndexsEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Indexs"/> object.
	/// </remarks>
	public class IndexsEventArgs : System.EventArgs
	{
		private IndexsColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the IndexsEventArgs class.
		///</summary>
		public IndexsEventArgs(IndexsColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the IndexsEventArgs class.
		///</summary>
		public IndexsEventArgs(IndexsColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The IndexsColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="IndexsColumn" />
		public IndexsColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Indexs related events.
	///</summary>
	public delegate void IndexsEventHandler(object sender, IndexsEventArgs e);
	
	#region IndexsComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class IndexsComparer : System.Collections.Generic.IComparer<Indexs>
	{
		IndexsColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:IndexsComparer"/> class.
        /// </summary>
		public IndexsComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:IndexsComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public IndexsComparer(IndexsColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Indexs"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Indexs"/> to compare.</param>
        /// <param name="b">The second <c>Indexs</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Indexs a, Indexs b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Indexs entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Indexs a, Indexs b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public IndexsColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region IndexsKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Indexs"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class IndexsKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the IndexsKey class.
		/// </summary>
		public IndexsKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the IndexsKey class.
		/// </summary>
		public IndexsKey(IndexsBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.VnindexId = entity.VnindexId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the IndexsKey class.
		/// </summary>
		public IndexsKey(System.Int32 _vnindexId)
		{
			#region Init Properties

			this.VnindexId = _vnindexId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private IndexsBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public IndexsBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the VnindexId property
		private System.Int32 _vnindexId;
		
		/// <summary>
		/// Gets or sets the VnindexId property.
		/// </summary>
		public System.Int32 VnindexId
		{
			get { return _vnindexId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.VnindexId = value;
				
				_vnindexId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				VnindexId = ( values["VnindexId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["VnindexId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("VnindexId", VnindexId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("VnindexId: {0}{1}",
								VnindexId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region IndexsColumn Enum
	
	/// <summary>
	/// Enumerate the Indexs columns.
	/// </summary>
	[Serializable]
	public enum IndexsColumn : int
	{
		/// <summary>
		/// VnindexId : 
		/// </summary>
		[EnumTextValue("VNINDEX_ID")]
		[ColumnEnum("VNINDEX_ID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		VnindexId = 1,
		/// <summary>
		/// TradedDate : 
		/// </summary>
		[EnumTextValue("TRADED_DATE")]
		[ColumnEnum("TRADED_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		TradedDate = 2,
		/// <summary>
		/// Open : 
		/// </summary>
		[EnumTextValue("OPEN")]
		[ColumnEnum("OPEN", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Open = 3,
		/// <summary>
		/// Close : 
		/// </summary>
		[EnumTextValue("CLOSE")]
		[ColumnEnum("CLOSE", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Close = 4,
		/// <summary>
		/// Change : 
		/// </summary>
		[EnumTextValue("CHANGE")]
		[ColumnEnum("CHANGE", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Change = 5,
		/// <summary>
		/// Unchange : 
		/// </summary>
		[EnumTextValue("UNCHANGE")]
		[ColumnEnum("UNCHANGE", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Unchange = 6,
		/// <summary>
		/// High : 
		/// </summary>
		[EnumTextValue("HIGH")]
		[ColumnEnum("HIGH", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		High = 7,
		/// <summary>
		/// Low : 
		/// </summary>
		[EnumTextValue("LOW")]
		[ColumnEnum("LOW", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Low = 8,
		/// <summary>
		/// Up : 
		/// </summary>
		[EnumTextValue("UP")]
		[ColumnEnum("UP", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Up = 9,
		/// <summary>
		/// Down : 
		/// </summary>
		[EnumTextValue("DOWN")]
		[ColumnEnum("DOWN", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Down = 10,
		/// <summary>
		/// Average : 
		/// </summary>
		[EnumTextValue("AVERAGE")]
		[ColumnEnum("AVERAGE", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Average = 11,
		/// <summary>
		/// Vol : 
		/// </summary>
		[EnumTextValue("VOL")]
		[ColumnEnum("VOL", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Vol = 12,
		/// <summary>
		/// Val : 
		/// </summary>
		[EnumTextValue("VAL")]
		[ColumnEnum("VAL", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Val = 13,
		/// <summary>
		/// Attribute1 : 
		/// </summary>
		[EnumTextValue("ATTRIBUTE1")]
		[ColumnEnum("ATTRIBUTE1", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		Attribute1 = 14,
		/// <summary>
		/// Totaltrade : 
		/// </summary>
		[EnumTextValue("TOTALTRADE")]
		[ColumnEnum("TOTALTRADE", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Totaltrade = 15,
		/// <summary>
		/// Attribute3 : 
		/// </summary>
		[EnumTextValue("ATTRIBUTE3")]
		[ColumnEnum("ATTRIBUTE3", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		Attribute3 = 16,
		/// <summary>
		/// MarketId : 
		/// </summary>
		[EnumTextValue("Market_ID")]
		[ColumnEnum("Market_ID", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		MarketId = 17,
		/// <summary>
		/// Status : 
		/// </summary>
		[EnumTextValue("STATUS")]
		[ColumnEnum("STATUS", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		Status = 18,
		/// <summary>
		/// Trans : 
		/// </summary>
		[EnumTextValue("TRANS")]
		[ColumnEnum("TRANS", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Trans = 19,
		/// <summary>
		/// Upvolume : 
		/// </summary>
		[EnumTextValue("UPVOLUME")]
		[ColumnEnum("UPVOLUME", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Upvolume = 20,
		/// <summary>
		/// Downvolume : 
		/// </summary>
		[EnumTextValue("DOWNVOLUME")]
		[ColumnEnum("DOWNVOLUME", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Downvolume = 21,
		/// <summary>
		/// Nochangevolume : 
		/// </summary>
		[EnumTextValue("NOCHANGEVOLUME")]
		[ColumnEnum("NOCHANGEVOLUME", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Nochangevolume = 22
	}//End enum

	#endregion IndexsColumn Enum

} // end namespace
