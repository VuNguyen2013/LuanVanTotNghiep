
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file HoseTransactions.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using RTStockData.Entities.Validation;
#endregion

namespace RTStockData.Entities
{
	///<summary>
	/// An object representation of the 'hose_transactions' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class HoseTransactionsBase : EntityBase, IHoseTransactions, IEntityId<HoseTransactionsKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private HoseTransactionsEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private HoseTransactionsEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private HoseTransactionsEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<HoseTransactions> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event HoseTransactionsEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event HoseTransactionsEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="HoseTransactionsBase"/> instance.
		///</summary>
		public HoseTransactionsBase()
		{
			this.entityData = new HoseTransactionsEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="HoseTransactionsBase"/> instance.
		///</summary>
		///<param name="_tradeDate"></param>
		///<param name="_stockSymbol"></param>
		///<param name="_price"></param>
		///<param name="_vol"></param>
		///<param name="_val"></param>
		///<param name="_accumulatedVol"></param>
		///<param name="_accumulatedVal"></param>
		///<param name="_highest"></param>
		///<param name="_lowest"></param>
		///<param name="_time"></param>
		///<param name="_side"></param>
		public HoseTransactionsBase(System.DateTime? _tradeDate, System.String _stockSymbol, 
			System.Int32? _price, System.Int32? _vol, System.Int64? _val, System.Int32? _accumulatedVol, 
			System.Int64? _accumulatedVal, System.Int32? _highest, System.Int32? _lowest, 
			System.Int32? _time, System.String _side)
		{
			this.entityData = new HoseTransactionsEntityData();
			this.backupData = null;

			this.TradeDate = _tradeDate;
			this.StockSymbol = _stockSymbol;
			this.Price = _price;
			this.Vol = _vol;
			this.Val = _val;
			this.AccumulatedVol = _accumulatedVol;
			this.AccumulatedVal = _accumulatedVal;
			this.Highest = _highest;
			this.Lowest = _lowest;
			this.Time = _time;
			this.Side = _side;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="HoseTransactions"/> instance.
		///</summary>
		///<param name="_tradeDate"></param>
		///<param name="_stockSymbol"></param>
		///<param name="_price"></param>
		///<param name="_vol"></param>
		///<param name="_val"></param>
		///<param name="_accumulatedVol"></param>
		///<param name="_accumulatedVal"></param>
		///<param name="_highest"></param>
		///<param name="_lowest"></param>
		///<param name="_time"></param>
		///<param name="_side"></param>
		public static HoseTransactions CreateHoseTransactions(System.DateTime? _tradeDate, System.String _stockSymbol, 
			System.Int32? _price, System.Int32? _vol, System.Int64? _val, System.Int32? _accumulatedVol, 
			System.Int64? _accumulatedVal, System.Int32? _highest, System.Int32? _lowest, 
			System.Int32? _time, System.String _side)
		{
			HoseTransactions newHoseTransactions = new HoseTransactions();
			newHoseTransactions.TradeDate = _tradeDate;
			newHoseTransactions.StockSymbol = _stockSymbol;
			newHoseTransactions.Price = _price;
			newHoseTransactions.Vol = _vol;
			newHoseTransactions.Val = _val;
			newHoseTransactions.AccumulatedVol = _accumulatedVol;
			newHoseTransactions.AccumulatedVal = _accumulatedVal;
			newHoseTransactions.Highest = _highest;
			newHoseTransactions.Lowest = _lowest;
			newHoseTransactions.Time = _time;
			newHoseTransactions.Side = _side;
			return newHoseTransactions;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int64 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(HoseTransactionsColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HoseTransactionsColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TradeDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsTradeDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? TradeDate
		{
			get
			{
				return this.entityData.TradeDate; 
			}
			
			set
			{
				if (this.entityData.TradeDate == value)
					return;
					
				OnColumnChanging(HoseTransactionsColumn.TradeDate, this.entityData.TradeDate);
				this.entityData.TradeDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HoseTransactionsColumn.TradeDate, this.entityData.TradeDate);
				OnPropertyChanged("TradeDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StockSymbol property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String StockSymbol
		{
			get
			{
				return this.entityData.StockSymbol; 
			}
			
			set
			{
				if (this.entityData.StockSymbol == value)
					return;
					
				OnColumnChanging(HoseTransactionsColumn.StockSymbol, this.entityData.StockSymbol);
				this.entityData.StockSymbol = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HoseTransactionsColumn.StockSymbol, this.entityData.StockSymbol);
				OnPropertyChanged("StockSymbol");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Price property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsPriceNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Price
		{
			get
			{
				return this.entityData.Price; 
			}
			
			set
			{
				if (this.entityData.Price == value)
					return;
					
				OnColumnChanging(HoseTransactionsColumn.Price, this.entityData.Price);
				this.entityData.Price = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HoseTransactionsColumn.Price, this.entityData.Price);
				OnPropertyChanged("Price");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Vol property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsVolNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Vol
		{
			get
			{
				return this.entityData.Vol; 
			}
			
			set
			{
				if (this.entityData.Vol == value)
					return;
					
				OnColumnChanging(HoseTransactionsColumn.Vol, this.entityData.Vol);
				this.entityData.Vol = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HoseTransactionsColumn.Vol, this.entityData.Vol);
				OnPropertyChanged("Vol");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Val property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsValNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Val
		{
			get
			{
				return this.entityData.Val; 
			}
			
			set
			{
				if (this.entityData.Val == value)
					return;
					
				OnColumnChanging(HoseTransactionsColumn.Val, this.entityData.Val);
				this.entityData.Val = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HoseTransactionsColumn.Val, this.entityData.Val);
				OnPropertyChanged("Val");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccumulatedVol property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsAccumulatedVolNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? AccumulatedVol
		{
			get
			{
				return this.entityData.AccumulatedVol; 
			}
			
			set
			{
				if (this.entityData.AccumulatedVol == value)
					return;
					
				OnColumnChanging(HoseTransactionsColumn.AccumulatedVol, this.entityData.AccumulatedVol);
				this.entityData.AccumulatedVol = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HoseTransactionsColumn.AccumulatedVol, this.entityData.AccumulatedVol);
				OnPropertyChanged("AccumulatedVol");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccumulatedVal property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsAccumulatedValNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? AccumulatedVal
		{
			get
			{
				return this.entityData.AccumulatedVal; 
			}
			
			set
			{
				if (this.entityData.AccumulatedVal == value)
					return;
					
				OnColumnChanging(HoseTransactionsColumn.AccumulatedVal, this.entityData.AccumulatedVal);
				this.entityData.AccumulatedVal = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HoseTransactionsColumn.AccumulatedVal, this.entityData.AccumulatedVal);
				OnPropertyChanged("AccumulatedVal");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Highest property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsHighestNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Highest
		{
			get
			{
				return this.entityData.Highest; 
			}
			
			set
			{
				if (this.entityData.Highest == value)
					return;
					
				OnColumnChanging(HoseTransactionsColumn.Highest, this.entityData.Highest);
				this.entityData.Highest = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HoseTransactionsColumn.Highest, this.entityData.Highest);
				OnPropertyChanged("Highest");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Lowest property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLowestNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Lowest
		{
			get
			{
				return this.entityData.Lowest; 
			}
			
			set
			{
				if (this.entityData.Lowest == value)
					return;
					
				OnColumnChanging(HoseTransactionsColumn.Lowest, this.entityData.Lowest);
				this.entityData.Lowest = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HoseTransactionsColumn.Lowest, this.entityData.Lowest);
				OnPropertyChanged("Lowest");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Time property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTimeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Time
		{
			get
			{
				return this.entityData.Time; 
			}
			
			set
			{
				if (this.entityData.Time == value)
					return;
					
				OnColumnChanging(HoseTransactionsColumn.Time, this.entityData.Time);
				this.entityData.Time = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HoseTransactionsColumn.Time, this.entityData.Time);
				OnPropertyChanged("Time");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Side property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String Side
		{
			get
			{
				return this.entityData.Side; 
			}
			
			set
			{
				if (this.entityData.Side == value)
					return;
					
				OnColumnChanging(HoseTransactionsColumn.Side, this.entityData.Side);
				this.entityData.Side = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HoseTransactionsColumn.Side, this.entityData.Side);
				OnPropertyChanged("Side");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("StockSymbol", "Stock Symbol", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Side", "Side", 1));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "hose_transactions"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"id", "TradeDate", "StockSymbol", "Price", "Vol", "Val", "AccumulatedVol", "AccumulatedVal", "Highest", "Lowest", "Time", "Side"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as HoseTransactionsEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (HoseTransactions) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<HoseTransactions>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as HoseTransactions);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed HoseTransactions Entity 
		///</summary>
		protected virtual HoseTransactions Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			HoseTransactions copy = new HoseTransactions();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.TradeDate = this.TradeDate;
				copy.StockSymbol = this.StockSymbol;
				copy.Price = this.Price;
				copy.Vol = this.Vol;
				copy.Val = this.Val;
				copy.AccumulatedVol = this.AccumulatedVol;
				copy.AccumulatedVal = this.AccumulatedVal;
				copy.Highest = this.Highest;
				copy.Lowest = this.Lowest;
				copy.Time = this.Time;
				copy.Side = this.Side;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed HoseTransactions Entity 
		///</summary>
		public virtual HoseTransactions Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed HoseTransactions Entity which is a deep copy of the current entity.
		///</summary>
		public virtual HoseTransactions DeepCopy()
		{
			return EntityHelper.Clone<HoseTransactions>(this as HoseTransactions);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as HoseTransactionsEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new HoseTransactionsEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as HoseTransactionsEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(HoseTransactionsColumn column)
		{
			switch(column)
			{
					case HoseTransactionsColumn.Id:
					return entityData.Id != _originalData.Id;
					case HoseTransactionsColumn.TradeDate:
					return entityData.TradeDate != _originalData.TradeDate;
					case HoseTransactionsColumn.StockSymbol:
					return entityData.StockSymbol != _originalData.StockSymbol;
					case HoseTransactionsColumn.Price:
					return entityData.Price != _originalData.Price;
					case HoseTransactionsColumn.Vol:
					return entityData.Vol != _originalData.Vol;
					case HoseTransactionsColumn.Val:
					return entityData.Val != _originalData.Val;
					case HoseTransactionsColumn.AccumulatedVol:
					return entityData.AccumulatedVol != _originalData.AccumulatedVol;
					case HoseTransactionsColumn.AccumulatedVal:
					return entityData.AccumulatedVal != _originalData.AccumulatedVal;
					case HoseTransactionsColumn.Highest:
					return entityData.Highest != _originalData.Highest;
					case HoseTransactionsColumn.Lowest:
					return entityData.Lowest != _originalData.Lowest;
					case HoseTransactionsColumn.Time:
					return entityData.Time != _originalData.Time;
					case HoseTransactionsColumn.Side:
					return entityData.Side != _originalData.Side;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< HoseTransactionsColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.TradeDate != _originalData.TradeDate;
			result = result || entityData.StockSymbol != _originalData.StockSymbol;
			result = result || entityData.Price != _originalData.Price;
			result = result || entityData.Vol != _originalData.Vol;
			result = result || entityData.Val != _originalData.Val;
			result = result || entityData.AccumulatedVol != _originalData.AccumulatedVol;
			result = result || entityData.AccumulatedVal != _originalData.AccumulatedVal;
			result = result || entityData.Highest != _originalData.Highest;
			result = result || entityData.Lowest != _originalData.Lowest;
			result = result || entityData.Time != _originalData.Time;
			result = result || entityData.Side != _originalData.Side;
			return result;
		}	
		
		///<summary>
		///  Returns a HoseTransactions Entity with the original data.
		///</summary>
		public HoseTransactions GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateHoseTransactions(
				_originalData.TradeDate,
				_originalData.StockSymbol,
				_originalData.Price,
				_originalData.Vol,
				_originalData.Val,
				_originalData.AccumulatedVol,
				_originalData.AccumulatedVal,
				_originalData.Highest,
				_originalData.Lowest,
				_originalData.Time,
				_originalData.Side
				);
				
			return (HoseTransactions)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="HoseTransactionsBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is HoseTransactionsBase)
				return ValueEquals(this, (HoseTransactionsBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="HoseTransactionsBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.TradeDate == null) ? string.Empty : this.TradeDate.ToString()).GetHashCode() ^ 
					((this.StockSymbol == null) ? string.Empty : this.StockSymbol.ToString()).GetHashCode() ^ 
					((this.Price == null) ? string.Empty : this.Price.ToString()).GetHashCode() ^ 
					((this.Vol == null) ? string.Empty : this.Vol.ToString()).GetHashCode() ^ 
					((this.Val == null) ? string.Empty : this.Val.ToString()).GetHashCode() ^ 
					((this.AccumulatedVol == null) ? string.Empty : this.AccumulatedVol.ToString()).GetHashCode() ^ 
					((this.AccumulatedVal == null) ? string.Empty : this.AccumulatedVal.ToString()).GetHashCode() ^ 
					((this.Highest == null) ? string.Empty : this.Highest.ToString()).GetHashCode() ^ 
					((this.Lowest == null) ? string.Empty : this.Lowest.ToString()).GetHashCode() ^ 
					((this.Time == null) ? string.Empty : this.Time.ToString()).GetHashCode() ^ 
					((this.Side == null) ? string.Empty : this.Side.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="HoseTransactionsBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(HoseTransactionsBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="HoseTransactionsBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="HoseTransactionsBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="HoseTransactionsBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(HoseTransactionsBase Object1, HoseTransactionsBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.TradeDate != null && Object2.TradeDate != null )
			{
				if (Object1.TradeDate != Object2.TradeDate)
					equal = false;
			}
			else if (Object1.TradeDate == null ^ Object2.TradeDate == null )
			{
				equal = false;
			}
			if ( Object1.StockSymbol != null && Object2.StockSymbol != null )
			{
				if (Object1.StockSymbol != Object2.StockSymbol)
					equal = false;
			}
			else if (Object1.StockSymbol == null ^ Object2.StockSymbol == null )
			{
				equal = false;
			}
			if ( Object1.Price != null && Object2.Price != null )
			{
				if (Object1.Price != Object2.Price)
					equal = false;
			}
			else if (Object1.Price == null ^ Object2.Price == null )
			{
				equal = false;
			}
			if ( Object1.Vol != null && Object2.Vol != null )
			{
				if (Object1.Vol != Object2.Vol)
					equal = false;
			}
			else if (Object1.Vol == null ^ Object2.Vol == null )
			{
				equal = false;
			}
			if ( Object1.Val != null && Object2.Val != null )
			{
				if (Object1.Val != Object2.Val)
					equal = false;
			}
			else if (Object1.Val == null ^ Object2.Val == null )
			{
				equal = false;
			}
			if ( Object1.AccumulatedVol != null && Object2.AccumulatedVol != null )
			{
				if (Object1.AccumulatedVol != Object2.AccumulatedVol)
					equal = false;
			}
			else if (Object1.AccumulatedVol == null ^ Object2.AccumulatedVol == null )
			{
				equal = false;
			}
			if ( Object1.AccumulatedVal != null && Object2.AccumulatedVal != null )
			{
				if (Object1.AccumulatedVal != Object2.AccumulatedVal)
					equal = false;
			}
			else if (Object1.AccumulatedVal == null ^ Object2.AccumulatedVal == null )
			{
				equal = false;
			}
			if ( Object1.Highest != null && Object2.Highest != null )
			{
				if (Object1.Highest != Object2.Highest)
					equal = false;
			}
			else if (Object1.Highest == null ^ Object2.Highest == null )
			{
				equal = false;
			}
			if ( Object1.Lowest != null && Object2.Lowest != null )
			{
				if (Object1.Lowest != Object2.Lowest)
					equal = false;
			}
			else if (Object1.Lowest == null ^ Object2.Lowest == null )
			{
				equal = false;
			}
			if ( Object1.Time != null && Object2.Time != null )
			{
				if (Object1.Time != Object2.Time)
					equal = false;
			}
			else if (Object1.Time == null ^ Object2.Time == null )
			{
				equal = false;
			}
			if ( Object1.Side != null && Object2.Side != null )
			{
				if (Object1.Side != Object2.Side)
					equal = false;
			}
			else if (Object1.Side == null ^ Object2.Side == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((HoseTransactionsBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static HoseTransactionsComparer GetComparer()
        {
            return new HoseTransactionsComparer();
        }
        */

        // Comparer delegates back to HoseTransactions
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(HoseTransactions rhs, HoseTransactionsColumn which)
        {
            switch (which)
            {
            	
            	
            	case HoseTransactionsColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case HoseTransactionsColumn.TradeDate:
            		return this.TradeDate.Value.CompareTo(rhs.TradeDate.Value);
            		
            		                 
            	
            	
            	case HoseTransactionsColumn.StockSymbol:
            		return this.StockSymbol.CompareTo(rhs.StockSymbol);
            		
            		                 
            	
            	
            	case HoseTransactionsColumn.Price:
            		return this.Price.Value.CompareTo(rhs.Price.Value);
            		
            		                 
            	
            	
            	case HoseTransactionsColumn.Vol:
            		return this.Vol.Value.CompareTo(rhs.Vol.Value);
            		
            		                 
            	
            	
            	case HoseTransactionsColumn.Val:
            		return this.Val.Value.CompareTo(rhs.Val.Value);
            		
            		                 
            	
            	
            	case HoseTransactionsColumn.AccumulatedVol:
            		return this.AccumulatedVol.Value.CompareTo(rhs.AccumulatedVol.Value);
            		
            		                 
            	
            	
            	case HoseTransactionsColumn.AccumulatedVal:
            		return this.AccumulatedVal.Value.CompareTo(rhs.AccumulatedVal.Value);
            		
            		                 
            	
            	
            	case HoseTransactionsColumn.Highest:
            		return this.Highest.Value.CompareTo(rhs.Highest.Value);
            		
            		                 
            	
            	
            	case HoseTransactionsColumn.Lowest:
            		return this.Lowest.Value.CompareTo(rhs.Lowest.Value);
            		
            		                 
            	
            	
            	case HoseTransactionsColumn.Time:
            		return this.Time.Value.CompareTo(rhs.Time.Value);
            		
            		                 
            	
            	
            	case HoseTransactionsColumn.Side:
            		return this.Side.CompareTo(rhs.Side);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<HoseTransactionsKey> Members
		
		// member variable for the EntityId property
		private HoseTransactionsKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual HoseTransactionsKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new HoseTransactionsKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("HoseTransactions")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- Id: {0}{12}- TradeDate: {1}{12}- StockSymbol: {2}{12}- Price: {3}{12}- Vol: {4}{12}- Val: {5}{12}- AccumulatedVol: {6}{12}- AccumulatedVal: {7}{12}- Highest: {8}{12}- Lowest: {9}{12}- Time: {10}{12}- Side: {11}{12}{14}", 
				this.Id,
				(this.TradeDate == null) ? string.Empty : this.TradeDate.ToString(),
				(this.StockSymbol == null) ? string.Empty : this.StockSymbol.ToString(),
				(this.Price == null) ? string.Empty : this.Price.ToString(),
				(this.Vol == null) ? string.Empty : this.Vol.ToString(),
				(this.Val == null) ? string.Empty : this.Val.ToString(),
				(this.AccumulatedVol == null) ? string.Empty : this.AccumulatedVol.ToString(),
				(this.AccumulatedVal == null) ? string.Empty : this.AccumulatedVal.ToString(),
				(this.Highest == null) ? string.Empty : this.Highest.ToString(),
				(this.Lowest == null) ? string.Empty : this.Lowest.ToString(),
				(this.Time == null) ? string.Empty : this.Time.ToString(),
				(this.Side == null) ? string.Empty : this.Side.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'hose_transactions' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class HoseTransactionsEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// id : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "hose_transactions"</remarks>
		public System.Int64 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// TradeDate : 
		/// </summary>
		public System.DateTime?		  TradeDate = null;
		
		/// <summary>
		/// StockSymbol : 
		/// </summary>
		public System.String		  StockSymbol = null;
		
		/// <summary>
		/// Price : 
		/// </summary>
		public System.Int32?		  Price = null;
		
		/// <summary>
		/// Vol : 
		/// </summary>
		public System.Int32?		  Vol = null;
		
		/// <summary>
		/// Val : 
		/// </summary>
		public System.Int64?		  Val = null;
		
		/// <summary>
		/// AccumulatedVol : 
		/// </summary>
		public System.Int32?		  AccumulatedVol = null;
		
		/// <summary>
		/// AccumulatedVal : 
		/// </summary>
		public System.Int64?		  AccumulatedVal = null;
		
		/// <summary>
		/// Highest : 
		/// </summary>
		public System.Int32?		  Highest = null;
		
		/// <summary>
		/// Lowest : 
		/// </summary>
		public System.Int32?		  Lowest = null;
		
		/// <summary>
		/// Time : 
		/// </summary>
		public System.Int32?		  Time = null;
		
		/// <summary>
		/// Side : 
		/// </summary>
		public System.String		  Side = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			HoseTransactionsEntityData _tmp = new HoseTransactionsEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.TradeDate = this.TradeDate;
			_tmp.StockSymbol = this.StockSymbol;
			_tmp.Price = this.Price;
			_tmp.Vol = this.Vol;
			_tmp.Val = this.Val;
			_tmp.AccumulatedVol = this.AccumulatedVol;
			_tmp.AccumulatedVal = this.AccumulatedVal;
			_tmp.Highest = this.Highest;
			_tmp.Lowest = this.Lowest;
			_tmp.Time = this.Time;
			_tmp.Side = this.Side;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			HoseTransactionsEntityData _tmp = new HoseTransactionsEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.TradeDate = this.TradeDate;
			_tmp.StockSymbol = this.StockSymbol;
			_tmp.Price = this.Price;
			_tmp.Vol = this.Vol;
			_tmp.Val = this.Val;
			_tmp.AccumulatedVol = this.AccumulatedVol;
			_tmp.AccumulatedVal = this.AccumulatedVal;
			_tmp.Highest = this.Highest;
			_tmp.Lowest = this.Lowest;
			_tmp.Time = this.Time;
			_tmp.Side = this.Side;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="HoseTransactionsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(HoseTransactionsColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="HoseTransactionsColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(HoseTransactionsColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="HoseTransactionsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(HoseTransactionsColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				HoseTransactionsEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new HoseTransactionsEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="HoseTransactionsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(HoseTransactionsColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				HoseTransactionsEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new HoseTransactionsEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region HoseTransactionsEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="HoseTransactions"/> object.
	/// </remarks>
	public class HoseTransactionsEventArgs : System.EventArgs
	{
		private HoseTransactionsColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the HoseTransactionsEventArgs class.
		///</summary>
		public HoseTransactionsEventArgs(HoseTransactionsColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the HoseTransactionsEventArgs class.
		///</summary>
		public HoseTransactionsEventArgs(HoseTransactionsColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The HoseTransactionsColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="HoseTransactionsColumn" />
		public HoseTransactionsColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all HoseTransactions related events.
	///</summary>
	public delegate void HoseTransactionsEventHandler(object sender, HoseTransactionsEventArgs e);
	
	#region HoseTransactionsComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class HoseTransactionsComparer : System.Collections.Generic.IComparer<HoseTransactions>
	{
		HoseTransactionsColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:HoseTransactionsComparer"/> class.
        /// </summary>
		public HoseTransactionsComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:HoseTransactionsComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public HoseTransactionsComparer(HoseTransactionsColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="HoseTransactions"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="HoseTransactions"/> to compare.</param>
        /// <param name="b">The second <c>HoseTransactions</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(HoseTransactions a, HoseTransactions b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(HoseTransactions entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(HoseTransactions a, HoseTransactions b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public HoseTransactionsColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region HoseTransactionsKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="HoseTransactions"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class HoseTransactionsKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the HoseTransactionsKey class.
		/// </summary>
		public HoseTransactionsKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the HoseTransactionsKey class.
		/// </summary>
		public HoseTransactionsKey(HoseTransactionsBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the HoseTransactionsKey class.
		/// </summary>
		public HoseTransactionsKey(System.Int64 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private HoseTransactionsBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public HoseTransactionsBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int64 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int64 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int64) EntityUtil.ChangeType(values["Id"], typeof(System.Int64)) : (long)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region HoseTransactionsColumn Enum
	
	/// <summary>
	/// Enumerate the HoseTransactions columns.
	/// </summary>
	[Serializable]
	public enum HoseTransactionsColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("id")]
		[ColumnEnum("id", typeof(System.Int64), System.Data.DbType.Int64, true, true, false)]
		Id = 1,
		/// <summary>
		/// TradeDate : 
		/// </summary>
		[EnumTextValue("TradeDate")]
		[ColumnEnum("TradeDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		TradeDate = 2,
		/// <summary>
		/// StockSymbol : 
		/// </summary>
		[EnumTextValue("StockSymbol")]
		[ColumnEnum("StockSymbol", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		StockSymbol = 3,
		/// <summary>
		/// Price : 
		/// </summary>
		[EnumTextValue("Price")]
		[ColumnEnum("Price", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Price = 4,
		/// <summary>
		/// Vol : 
		/// </summary>
		[EnumTextValue("Vol")]
		[ColumnEnum("Vol", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Vol = 5,
		/// <summary>
		/// Val : 
		/// </summary>
		[EnumTextValue("Val")]
		[ColumnEnum("Val", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Val = 6,
		/// <summary>
		/// AccumulatedVol : 
		/// </summary>
		[EnumTextValue("AccumulatedVol")]
		[ColumnEnum("AccumulatedVol", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		AccumulatedVol = 7,
		/// <summary>
		/// AccumulatedVal : 
		/// </summary>
		[EnumTextValue("AccumulatedVal")]
		[ColumnEnum("AccumulatedVal", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		AccumulatedVal = 8,
		/// <summary>
		/// Highest : 
		/// </summary>
		[EnumTextValue("Highest")]
		[ColumnEnum("Highest", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Highest = 9,
		/// <summary>
		/// Lowest : 
		/// </summary>
		[EnumTextValue("Lowest")]
		[ColumnEnum("Lowest", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Lowest = 10,
		/// <summary>
		/// Time : 
		/// </summary>
		[EnumTextValue("Time")]
		[ColumnEnum("Time", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Time = 11,
		/// <summary>
		/// Side : 
		/// </summary>
		[EnumTextValue("Side")]
		[ColumnEnum("Side", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 1)]
		Side = 12
	}//End enum

	#endregion HoseTransactionsColumn Enum

} // end namespace
