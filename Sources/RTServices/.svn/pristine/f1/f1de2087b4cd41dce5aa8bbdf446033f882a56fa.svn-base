using System;
using System.Collections.Generic;
using System.Text;
using System.Web.Script.Serialization;
using System.Web.Script.Services;
using System.Web.Services;
using ETradeCommon;
using ETradeCommon.Enums;
using RTDataServices;
using RTDataServices.Entities;
using RTDataServices.Updater;

namespace RTWebService
{
    /// <summary>
    /// Summary description for Service
    /// </summary>
    [WebService(Namespace = "http://tempuri.org/")]
    [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
    [System.ComponentModel.ToolboxItem(false)]
    // To allow this Web Service to be called from script, using ASP.NET AJAX, uncomment the following line. 
    [System.Web.Script.Services.ScriptService]
    public class Service : System.Web.Services.WebService
    {

        private static readonly JavaScriptSerializer Serializer = new JavaScriptSerializer();
        static List<CommonEnums.MARKET_STATUS> _udMarketStatus = new List<CommonEnums.MARKET_STATUS>();
        //RealTimeStockUpdater updater = new RealTimeStockUpdater();

        private readonly static Boolean _usingInfoshow5 = Boolean.Parse(RTDataServices.Common.ReadFromWebConfig("usingInfoshow5"));
        static Service()
        {
            _udMarketStatus.Add(CommonEnums.MARKET_STATUS.UNVAILABLE);
            _udMarketStatus.Add(CommonEnums.MARKET_STATUS.UNVAILABLE);
            _udMarketStatus.Add(CommonEnums.MARKET_STATUS.UNVAILABLE);
        }

        public Service()
        {
            //DBServices.CreateInMemDB();
            //Uncomment the following line if using designed components 
            //InitializeComponent(); 
        }

        [WebMethod(Description = "Get Market Info")]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetMarketInfo(int marketID)
        {
            ResultObject<List<MarketInfo>> retObject = new ResultObject<List<MarketInfo>> { RetCode = CommonEnums.RET_CODE.SUCCESS, Result = null };

            List<MarketInfo> listMarketInfos = new List<MarketInfo>();

            try
            {
                if (marketID == 0)
                {
                    MarketInfo hoseMarketInfo =
                        DBServices.GetCurrentMarketInfo((int)RTDdataServices.Entities.MARKET_ID.HOSE);
                    MarketInfo hnxMarketInfo =
                        DBServices.GetCurrentMarketInfo((int)RTDdataServices.Entities.MARKET_ID.HASTC);
                    MarketInfo upcomMarketInfo =
                        DBServices.GetCurrentMarketInfo((int)RTDdataServices.Entities.MARKET_ID.UPCoM);

                    if (hoseMarketInfo == null)
                    {
                        hoseMarketInfo = new MarketInfo();

                        hoseMarketInfo.Status = DBServices.MarketStatus(null, marketID);
                    }

                    if (RTDataServices.Common.RunMode == "TEST")
                    {
                        hoseMarketInfo.Status = (char)_udMarketStatus[0];
                    }

                    listMarketInfos.Add(hoseMarketInfo);

                    if (hnxMarketInfo == null)
                    {
                        hnxMarketInfo = new MarketInfo();

                        hnxMarketInfo.Status = DBServices.MarketStatus(null, marketID);
                    }

                    if (RTDataServices.Common.RunMode == "TEST")
                    {
                        hnxMarketInfo.Status = (char)_udMarketStatus[1];
                    }

                    listMarketInfos.Add(hnxMarketInfo);

                    if (upcomMarketInfo == null)
                    {
                        upcomMarketInfo = new MarketInfo();

                        upcomMarketInfo.Status = DBServices.MarketStatus(null, marketID);
                    }

                    if (RTDataServices.Common.RunMode == "TEST")
                    {
                        upcomMarketInfo.Status = (char)_udMarketStatus[1];
                    }

                    listMarketInfos.Add(upcomMarketInfo);
                }
                else
                {
                    MarketInfo marInfo = DBServices.GetCurrentMarketInfo(marketID);

                    if (marInfo == null)
                    {
                        marInfo = new MarketInfo();

                        marInfo.Status = DBServices.MarketStatus(null, marketID);
                    }

                    if (RTDataServices.Common.RunMode == "TEST")
                    {
                        marInfo.Status = (char)_udMarketStatus[marketID - 1];
                    }

                    listMarketInfos.Add(marInfo);
                }

                retObject.Result = listMarketInfos;
            }
            catch (Exception ex)
            {
                RTDataServices.Common.Log(ex.ToString());
            }

            return Serializer.Serialize(retObject);
        }

        [WebMethod(Description = "Get Market Status")]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string MarketStatus(int marketID)
        {
            ResultObject<char> retObject = new ResultObject<char> { RetCode = CommonEnums.RET_CODE.SUCCESS, Result = (char)CommonEnums.MARKET_STATUS.UNVAILABLE };

            try
            {
                if (RTDataServices.Common.RunMode == "TEST")
                {
                    retObject.Result = (char)_udMarketStatus[marketID-1];

                    return Serializer.Serialize(retObject);
                }

                MarketInfo marInfo = DBServices.GetCurrentMarketInfo(marketID);

                retObject.Result = DBServices.MarketStatus(marInfo, marketID);
            }

            catch (Exception ex)
            {
                RTDataServices.Common.Log(ex.ToString());
            }

            return Serializer.Serialize(retObject);
        }

        [WebMethod(Description = "Get all Market Status")]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string AllMarketStatus()
        {
            var retObject = new ResultObject<char[]>
                                {
                                    RetCode = CommonEnums.RET_CODE.SUCCESS,
                                    Result = new char[]
                                            {
                                                (char) CommonEnums.MARKET_STATUS.UNVAILABLE,
                                                (char) CommonEnums.MARKET_STATUS.UNVAILABLE,
                                                (char) CommonEnums.MARKET_STATUS.UNVAILABLE
                                            }
                                };

            try
            {
                var status = new char[3];
                if (RTDataServices.Common.RunMode == "TEST")
                {
                    status[0] = (char)_udMarketStatus[(int)RTDdataServices.Entities.MARKET_ID.HOSE - 1];
                    status[1] = (char)_udMarketStatus[(int)RTDdataServices.Entities.MARKET_ID.HASTC - 1];
                    status[2] = (char)_udMarketStatus[(int)RTDdataServices.Entities.MARKET_ID.UPCoM - 1];
                    retObject.Result = status;
                    return Serializer.Serialize(retObject);
                }

                MarketInfo marInfo = DBServices.GetCurrentMarketInfo((int)RTDdataServices.Entities.MARKET_ID.HOSE);

                status[0] = DBServices.MarketStatus(marInfo, (int)RTDdataServices.Entities.MARKET_ID.HOSE);

                marInfo = DBServices.GetCurrentMarketInfo((int)RTDdataServices.Entities.MARKET_ID.HASTC);

                status[1] = DBServices.MarketStatus(marInfo, (int)RTDdataServices.Entities.MARKET_ID.HASTC);

                marInfo = DBServices.GetCurrentMarketInfo((int)RTDdataServices.Entities.MARKET_ID.UPCoM);

                status[2] = DBServices.MarketStatus(marInfo, (int)RTDdataServices.Entities.MARKET_ID.UPCoM);

                retObject.Result = status;
            }

            catch (Exception ex)
            {
                RTDataServices.Common.Log(ex.ToString());
            }

            return Serializer.Serialize(retObject);
        }

        [WebMethod(Description = "Get all Market info and Status")]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string AllMarketInfoAndStatus()
        {
            var retObject = new ResultObject<List<MarketInfo>> { RetCode = CommonEnums.RET_CODE.SUCCESS, Result = null };

            var listMarketInfos = new List<MarketInfo>();

            try
            {
                MarketInfo hoseMarketInfo =
                        DBServices.GetCurrentMarketInfo((int)RTDdataServices.Entities.MARKET_ID.HOSE);
                MarketInfo hnxMarketInfo =
                    DBServices.GetCurrentMarketInfo((int)RTDdataServices.Entities.MARKET_ID.HASTC);
                MarketInfo upcomMarketInfo =
                    DBServices.GetCurrentMarketInfo((int)RTDdataServices.Entities.MARKET_ID.UPCoM);

                if (hoseMarketInfo == null)
                {
                    hoseMarketInfo = new MarketInfo();

                    hoseMarketInfo.Status = DBServices.MarketStatus(null, (int) RTDdataServices.Entities.MARKET_ID.HOSE);
                }
                else
                {
                    hoseMarketInfo.Status = DBServices.MarketStatus(hoseMarketInfo,
                                                                (int)RTDdataServices.Entities.MARKET_ID.HOSE);
                }

                if (RTDataServices.Common.RunMode == "TEST")
                {
                    hoseMarketInfo.Status = (char)_udMarketStatus[0];
                }

                listMarketInfos.Add(hoseMarketInfo);

                if (hnxMarketInfo == null)
                {
                    hnxMarketInfo = new MarketInfo();

                    hnxMarketInfo.Status = DBServices.MarketStatus(null, (int) RTDdataServices.Entities.MARKET_ID.HASTC);
                }
                else
                {
                    hnxMarketInfo.Status = DBServices.MarketStatus(hnxMarketInfo,
                                                                   (int)RTDdataServices.Entities.MARKET_ID.HASTC);
                }

                if (RTDataServices.Common.RunMode == "TEST")
                {
                    hnxMarketInfo.Status = (char)_udMarketStatus[1];
                }

                listMarketInfos.Add(hnxMarketInfo);

                if (upcomMarketInfo == null)
                {
                    upcomMarketInfo = new MarketInfo();

                    upcomMarketInfo.Status = DBServices.MarketStatus(null, (int)RTDdataServices.Entities.MARKET_ID.UPCoM);
                }
                else
                {
                    upcomMarketInfo.Status = DBServices.MarketStatus(upcomMarketInfo,
                                                                  (int)RTDdataServices.Entities.MARKET_ID.UPCoM);
                }

                if (RTDataServices.Common.RunMode == "TEST")
                {
                    upcomMarketInfo.Status = (char)_udMarketStatus[2];
                }

                listMarketInfos.Add(upcomMarketInfo);

                retObject.Result = listMarketInfos;
            }
            catch (Exception ex)
            {
                RTDataServices.Common.Log(ex.ToString());
            }

            return Serializer.Serialize(retObject);
        }

        [WebMethod(Description = "Set Market Status")]
        [ScriptMethod]
        public string SetMatketStatus(int marketId, string marketStatus)
        {
            marketId = marketId - 1;

            if (marketStatus == ((char)CommonEnums.MARKET_STATUS.CLOSE).ToString())
                _udMarketStatus[marketId] = CommonEnums.MARKET_STATUS.CLOSE;
            else if (marketStatus == ((char)CommonEnums.MARKET_STATUS.CLOSE_PT).ToString())
                _udMarketStatus[marketId] = CommonEnums.MARKET_STATUS.CLOSE_PT;
            else if (marketStatus == ((char)CommonEnums.MARKET_STATUS.INIT_APP).ToString())
                _udMarketStatus[marketId] = CommonEnums.MARKET_STATUS.INIT_APP;
            else if (marketStatus == ((char)CommonEnums.MARKET_STATUS.OPEN).ToString())
                _udMarketStatus[marketId] = CommonEnums.MARKET_STATUS.OPEN;
            else if (marketStatus == ((char)CommonEnums.MARKET_STATUS.PRE_CLOSE).ToString())
                _udMarketStatus[marketId] = CommonEnums.MARKET_STATUS.PRE_CLOSE;
            else if (marketStatus == ((char)CommonEnums.MARKET_STATUS.PRE_OPEN).ToString())
                _udMarketStatus[marketId] = CommonEnums.MARKET_STATUS.PRE_OPEN;
            else if (marketStatus == ((char)CommonEnums.MARKET_STATUS.READY).ToString())
                _udMarketStatus[marketId] = CommonEnums.MARKET_STATUS.READY;
            else if (marketStatus == ((char)CommonEnums.MARKET_STATUS.UNVAILABLE).ToString())
                _udMarketStatus[marketId] = CommonEnums.MARKET_STATUS.UNVAILABLE;
            else if (marketStatus == ((char)CommonEnums.MARKET_STATUS.WAITING).ToString())
                _udMarketStatus[marketId] = CommonEnums.MARKET_STATUS.WAITING;

            return "Set market status successfull";
        }


        [WebMethod(Description = "Get Company List")]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetListCompany(int marketID, int languageId)
        {
            ResultObject<List<CompanyInfo>> retObject = new ResultObject<List<CompanyInfo>> { RetCode = CommonEnums.RET_CODE.SUCCESS, Result = null };

            try
            {
                List<CompanyInfo> listCompanyInfos = (List<CompanyInfo>)DBServices.Select_All_CompanyInfo((short)marketID);

                retObject.Result = listCompanyInfos;
            }

            catch (Exception ex)
            {
                RTDataServices.Common.Log(ex.ToString());
            }

            return Serializer.Serialize(retObject);
        }

        [WebMethod(Description = "Get NewestWorkingDates")]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetNewestWorkingDates()
        {
            ResultObject<List<NewestWorkingDatesInfo>> retObject = new ResultObject<List<NewestWorkingDatesInfo>> { RetCode = CommonEnums.RET_CODE.SUCCESS, Result = null };

            try
            {
                List<NewestWorkingDatesInfo> listNewestWorkingDates = DBServices.Select_All_NewestWorkingDates();

                retObject.Result = listNewestWorkingDates;
            }

            catch (Exception ex)
            {
                RTDataServices.Common.Log(ex.ToString());
            }

            return Serializer.Serialize(retObject);
        }

        [WebMethod(Description = "Get All Stock From Market")]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetAllStockFromMarket(short marketID)
        {
            ResultObject<List<StockInfo>> retObject = new ResultObject<List<StockInfo>> { RetCode = CommonEnums.RET_CODE.SUCCESS, Result = null };

            try
            {
                List<StockInfo> listStockInfos = (List<StockInfo>)DBServices.Select_All_StockInfo(marketID);

                retObject.Result = listStockInfos;
            }

            catch (Exception ex)
            {
                RTDataServices.Common.Log(ex.ToString());
            }

            return Serializer.Serialize(retObject);
        }

        [WebMethod(Description = "Get Stock Info")]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetStockInfo(string symbol)
        {
            ResultObject<StockInfo> retObject = new ResultObject<StockInfo> { RetCode = CommonEnums.RET_CODE.SUCCESS, Result = null };

            try
            {
                retObject.RetCode = CommonEnums.RET_CODE.SUCCESS;

                StockInfo stockInfo = DBServices.GetStock(symbol);

                if (stockInfo == null)
                {
                    retObject.RetCode = CommonEnums.RET_CODE.NO_EXISTED_DATA;
                }

                retObject.Result = stockInfo;
            }

            catch (Exception ex)
            {
                RTDataServices.Common.Log(ex.ToString());
            }

            return Serializer.Serialize(retObject);
        }

        [WebMethod(Description = "Get Stock information and transaction information")]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetStockDetail(string symbol, int marketID, int time)
        {
            var retObject = new ResultObject<StockInfo> {RetCode = CommonEnums.RET_CODE.SUCCESS, Result = null};

            try
            {
                retObject.RetCode = CommonEnums.RET_CODE.SUCCESS;

                StockInfo stockInfo = DBServices.GetStock(symbol);

                if (stockInfo == null)
                {
                    retObject.RetCode = CommonEnums.RET_CODE.NO_EXISTED_DATA;
                }
                else
                {
                    var list = new List<DealDetail>();
                    switch (marketID)
                    {
                        case (int)CommonEnums.MARKET_ID.HOSE:
                            list = GetHOSETransactionInfo(symbol, time);
                            break;
                        case (int)CommonEnums.MARKET_ID.HNX:
                            list = GetHNXTransactionInfo(symbol, time);
                            break;
                        case (int)CommonEnums.MARKET_ID.UPCoM:
                            list = GetUPCOMTransactionInfo(symbol, time);
                            break;
                    }
                    stockInfo.DealDetails = list;
                }

                retObject.Result = stockInfo;
            }

            catch (Exception ex)
            {
                RTDataServices.Common.Log(ex.ToString());
            }

            return Serializer.Serialize(retObject);
        }

        [WebMethod(Description = "Get Stock Info")]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetStockInfoByLanguge(string symbol, string languageId)
        {
            ResultObject<StockInfo> retObject = new ResultObject<StockInfo> { RetCode = CommonEnums.RET_CODE.SUCCESS, Result = null };

            try
            {
                retObject.RetCode = CommonEnums.RET_CODE.SUCCESS;

                StockInfo stockInfo = DBServices.GetStock(symbol, languageId);

                if (stockInfo == null)
                {
                    retObject.RetCode = CommonEnums.RET_CODE.NO_EXISTED_DATA;
                }

                retObject.Result = stockInfo;
            }

            catch (Exception ex)
            {
                RTDataServices.Common.Log(ex.ToString());
            }

            return Serializer.Serialize(retObject);
        }

        [WebMethod(Description = "Get List Stock")]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetListStockInfos(string listCodes, string languageId)
        {
            var retObject = new ResultObject<List<StockInfo>> { RetCode = CommonEnums.RET_CODE.SUCCESS, Result = null };

            try
            {
                List<StockInfo> listStockInfos = DBServices.Select_List_StockInfos(listCodes, languageId);

                retObject.Result = listStockInfos;
            }

            catch (Exception ex)
            {
                RTDataServices.Common.Log(ex.ToString());
            }

            return Serializer.Serialize(retObject);
        }

        private string GetHOSETransactionInfo(string symbol)
        {
            ResultObject<List<HOSETransactionInfo>> retObject = new ResultObject<List<HOSETransactionInfo>> { RetCode = CommonEnums.RET_CODE.SUCCESS, Result = null };

            try
            {
                List<HOSETransactionInfo> listTransactionInfos = DBServices.Select_HOSETransactionInfo(symbol);

                retObject.Result = listTransactionInfos;
            }

            catch (Exception ex)
            {
                RTDataServices.Common.Log(ex.ToString());
            }

            return Serializer.Serialize(retObject);
        }

        private static List<DealDetail> GetHOSETransactionInfo(string symbol, int time)
        {
            var dealDetails = new List<DealDetail>();
            try
            {
                List<HOSETransactionInfo> listTransactionInfos = DBServices.Select_HOSETransactionInfo(symbol, time);
                if (listTransactionInfos != null)
                {
                    foreach (var transactionInfo in listTransactionInfos)
                    {
                        var dealDetail = new DealDetail
                                             {
                                                 Time = transactionInfo.Time,
                                                 Price = transactionInfo.Price,
                                                 Val = transactionInfo.Val,
                                                 Vol = transactionInfo.Vol
                                             };
                        dealDetails.Add(dealDetail);
                    }
                }
                return dealDetails;
            }

            catch (Exception ex)
            {
                RTDataServices.Common.Log(ex.ToString());
                return null;
            }
        }

        private string GetHNXTransactionInfo(string symbol)
        {
            ResultObject<List<HNXTransactionInfo>> retObject = new ResultObject<List<HNXTransactionInfo>> { RetCode = CommonEnums.RET_CODE.SUCCESS, Result = null };

            try
            {
                List<HNXTransactionInfo> listTransactionInfos = DBServices.Select_HNXTransactionInfo(symbol);

                retObject.Result = listTransactionInfos;
            }

            catch (Exception ex)
            {
                RTDataServices.Common.Log(ex.ToString());
            }

            return Serializer.Serialize(retObject);
        }

        private List<DealDetail> GetHNXTransactionInfo(string symbol, int time)
        {
            var dealDetails = new List<DealDetail>();
            try
            {
                List<HNXTransactionInfo> listTransactionInfos = DBServices.Select_HNXTransactionInfo(symbol, time);
                if (listTransactionInfos != null)
                {
                    foreach (var transactionInfo in listTransactionInfos)
                    {
                        var dealDetail = new DealDetail
                        {
                            Time = transactionInfo.Time,
                            Price = transactionInfo.Price,
                            Val = transactionInfo.Val,
                            Vol = transactionInfo.Vol
                        };
                        dealDetails.Add(dealDetail);
                    }
                }
                return dealDetails;
            }

            catch (Exception ex)
            {
                RTDataServices.Common.Log(ex.ToString());
                return null;
            }
        }

        private string GetUPCOMTransactionInfo(string symbol)
        {
            ResultObject<List<UPCOMTransactionInfo>> retObject = new ResultObject<List<UPCOMTransactionInfo>> { RetCode = CommonEnums.RET_CODE.SUCCESS, Result = null };

            try
            {
                List<UPCOMTransactionInfo> listTransactionInfos = DBServices.Select_UPCOMTransactionInfo(symbol);

                retObject.Result = listTransactionInfos;
            }

            catch (Exception ex)
            {
                RTDataServices.Common.Log(ex.ToString());
            }

            return Serializer.Serialize(retObject);
        }

        private static List<DealDetail> GetUPCOMTransactionInfo(string symbol, int time)
        {
            var dealDetails = new List<DealDetail>();
            try
            {
                List<UPCOMTransactionInfo> listTransactionInfos = DBServices.Select_UPCOMTransactionInfo(symbol, time);
                if (listTransactionInfos != null)
                {
                    foreach (var transactionInfo in listTransactionInfos)
                    {
                        var dealDetail = new DealDetail
                        {
                            Time = transactionInfo.Time,
                            Price = transactionInfo.Price,
                            Val = transactionInfo.Val,
                            Vol = transactionInfo.Vol
                        };
                        dealDetails.Add(dealDetail);
                    }
                }
                return dealDetails;
            }
            catch (Exception ex)
            {
                RTDataServices.Common.Log(ex.ToString());
                return null;
            }
        }

        [WebMethod(Description = "Get All Transaction")]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetTransactions(string symbol, int marketID)
        {
            switch (marketID)
            {
                case (int)CommonEnums.MARKET_ID.HOSE:
                    return GetHOSETransactionInfo(symbol);
                case (int)CommonEnums.MARKET_ID.HNX:
                    return GetHNXTransactionInfo(symbol);
                case (int)CommonEnums.MARKET_ID.UPCoM:
                    return GetUPCOMTransactionInfo(symbol);
            }

            ResultObject<List<HOSETransactionInfo>> retObject = new ResultObject<List<HOSETransactionInfo>> { RetCode = CommonEnums.RET_CODE.FAIL, Result = null };

            return Serializer.Serialize(retObject);
        }


        private string GetHOSEMainMatchedPriceInfo(string symbol)
        {
            var retObject = new ResultObject<List<MainMatchedPricesInfo>> { RetCode = CommonEnums.RET_CODE.SUCCESS, Result = null };

            try
            {
                List<MainMatchedPricesInfo> listTransactionInfos = DBServices.GetHOSEMainMatchedPrices(symbol);

                retObject.Result = listTransactionInfos;
            }

            catch (Exception ex)
            {
                RTDataServices.Common.Log(ex.ToString());
            }

            return Serializer.Serialize(retObject);
        }

        private string GetHNXMainMatchedPriceInfo(string symbol)
        {
            var retObject = new ResultObject<List<MainMatchedPricesInfo>> { RetCode = CommonEnums.RET_CODE.SUCCESS, Result = null };

            try
            {
                List<MainMatchedPricesInfo> listTransactionInfos = DBServices.GetHNXMainMatchedPrices(symbol);

                retObject.Result = listTransactionInfos;
            }

            catch (Exception ex)
            {
                RTDataServices.Common.Log(ex.ToString());
            }

            return Serializer.Serialize(retObject);
        }

        private string GetUPCOMMainMatchedPriceInfo(string symbol)
        {
            var retObject = new ResultObject<List<MainMatchedPricesInfo>> { RetCode = CommonEnums.RET_CODE.SUCCESS, Result = null };

            try
            {
                List<MainMatchedPricesInfo> listTransactionInfos = DBServices.GetUPCOMMainMatchedPrices(symbol);

                retObject.Result = listTransactionInfos;
            }

            catch (Exception ex)
            {
                RTDataServices.Common.Log(ex.ToString());
            }

            return Serializer.Serialize(retObject);
        }

        [WebMethod(Description = "Get Main Matched Prices")]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetMainMatchedPrices(string symbol, int marketID)
        {
            switch (marketID)
            {
                case (int)CommonEnums.MARKET_ID.HOSE:
                    return GetHOSEMainMatchedPriceInfo(symbol);
                case (int)CommonEnums.MARKET_ID.HNX:
                    return GetHNXMainMatchedPriceInfo(symbol);
                case (int)CommonEnums.MARKET_ID.UPCoM:
                    return GetUPCOMMainMatchedPriceInfo(symbol);
            }

            var retObject = new ResultObject<List<MainMatchedPricesInfo>> { RetCode = CommonEnums.RET_CODE.FAIL, Result = null };

            return Serializer.Serialize(retObject);
        }

        [WebMethod(Description = "Get Ticker Info List")]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetTickerInfos(string listCodesInfos)
        {
            List<TickerInfo> listTickerInfos = DBServices.GetTickerListByListCode(listCodesInfos);

            var retObject = new ResultObject<List<TickerInfo>> { RetCode = CommonEnums.RET_CODE.SUCCESS, Result = null };

            retObject.Result = listTickerInfos;

            return Serializer.Serialize(retObject);
        }

        [WebMethod(Description = "Get All Ticker Info")]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetAllTickerInfos(int marketId, int id)
        {
            List<TickerInfo> listTickerInfos = DBServices.GetTickerListById(marketId, id);

            var retObject = new ResultObject<List<TickerInfo>> { RetCode = CommonEnums.RET_CODE.SUCCESS, Result = null };

            retObject.Result = listTickerInfos;

            return Serializer.Serialize(retObject);
        }

        [WebMethod(Description = "Get Put Ad")]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetHOSEPutAd()
        {
            ResultObject<List<HOSEPutAdInfo>> retObject = new ResultObject<List<HOSEPutAdInfo>> { RetCode = CommonEnums.RET_CODE.SUCCESS, Result = null };

            try
            {
                List<HOSEPutAdInfo> listHOSEPutAdInfo = DBServices.Select_All_HOSEPutAdInfo();

                retObject.Result = listHOSEPutAdInfo;
            }

            catch (Exception ex)
            {
                RTDataServices.Common.Log(ex.ToString());
            }

            return Serializer.Serialize(retObject);
        }

        [WebMethod(Description = "Get Put Exec")]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetHOSEPutExec()
        {
            ResultObject<List<HOSEPutExecInfo>> retObject = new ResultObject<List<HOSEPutExecInfo>> { RetCode = CommonEnums.RET_CODE.SUCCESS, Result = null };

            try
            {
                List<HOSEPutExecInfo> listHOSEPutExecInfo = (List<HOSEPutExecInfo>)DBServices.Select_All_HOSEPutExecInfo();

                retObject.Result = listHOSEPutExecInfo;
            }

            catch (Exception ex)
            {
                RTDataServices.Common.Log(ex.ToString());
            }

            return Serializer.Serialize(retObject);
        }

        [WebMethod]
        public int StartUpdater()
        {
            RealTimeStockUpdater.StartUpdater();

            return 0;
        }

        [WebMethod]
        public int StopUpdater()
        {
            RealTimeStockUpdater.StopUpdater();

            return 0;
        }

        #region Priceboard
        /// <summary>
        /// Get static stock information to send to priceboard
        /// </summary>
        /// <param name="listCodes">List of stock code</param>
        /// <param name="languageId">Language id</param>
        /// <returns></returns>
        [WebMethod]
        public string GetStaticStockInfo(string listCodes, int languageId)
        {
            string result = string.Empty;
            try
            {
                List<StockInfo> listStockInfos = DBServices.Select_List_StockInfos(listCodes);

                result = ConvertStaticInfo(listStockInfos);
            }

            catch (Exception ex)
            {
                RTDataServices.Common.Log(ex.ToString());
            }

            return result;
        }

        private static bool CanTrade(int marketID)
        {
            if (_udMarketStatus [marketID - 1] == CommonEnums.MARKET_STATUS.OPEN ||
                _udMarketStatus [marketID - 1] == CommonEnums.MARKET_STATUS.PRE_OPEN ||
                _udMarketStatus [marketID - 1] == CommonEnums.MARKET_STATUS.PRE_CLOSE ||
                _udMarketStatus [marketID - 1] == CommonEnums.MARKET_STATUS.OPEN_2
                )
            {

                return true;
            }

            return false;
        
        }

        /// <summary>
        /// Get static information from list stocks.
        /// </summary>
        /// <param name="listStockInfos">List of stocks</param>
        /// <returns></returns>
        private static string ConvertStaticInfo(IEnumerable<StockInfo> listStockInfos)
        {
            var stockStringBuilder = new StringBuilder();
            foreach (var stockInfo in listStockInfos)
            {
                string market = string.Empty;
                switch (stockInfo.MarketID)
                {
                    case 1:
                        market = "HO";
                        break;
                    case 2:
                        market = "HN";
                        break;
                    case 3:
                        market = "UP";
                        break;
                }
                stockStringBuilder.AppendFormat("\r\n[\"{0}\", {1}, {2}, {3}, \"{4}\", \"{5}\"],", stockInfo.StockSymbol, stockInfo.RefPrice, stockInfo.Ceiling,
                                         stockInfo.Floor, market, stockInfo.Name);
            }
            string stockString = stockStringBuilder.ToString();
            if (!string.IsNullOrEmpty(stockString))
            {
                stockString = stockString.Substring(0, stockString.Length - 1);
            }
            string result = string.Format("[{0}\r\n]", stockString);
            return result;
        }

        /// <summary>
        /// Get dynamic stock information to send to priceboard
        /// </summary>
        /// <param name="listCodes">List of stock code</param>
        /// <param name="languageId">Language id</param>
        /// <returns></returns>
        [WebMethod]
        public string GetDynamicStockInfo(string listCodes, int languageId)
        {
            string result = string.Empty;
            try
            {
                List<StockInfo> listStockInfos = DBServices.Select_List_StockInfos(listCodes);

                result = ConvertDynamicInfo(listStockInfos);
            }

            catch (Exception ex)
            {
                RTDataServices.Common.Log(ex.ToString());
            }

            return result;
        }

        /// <summary>
        /// Get dynamic information from list stocks.
        /// </summary>
        /// <param name="listStockInfos">List of stocks</param>
        /// <returns></returns>
        private static string ConvertDynamicInfo(IEnumerable<StockInfo> listStockInfos)
        {
            var stockStringBuilder = new StringBuilder();
            foreach (var stockInfo in listStockInfos)
            {
                double change = 0;
                if (Math.Round(stockInfo.Last, 1) != 0)
                {
                    change = Math.Round(stockInfo.Last - stockInfo.RefPrice, 1);
                }
                string market = string.Empty;
                switch (stockInfo.MarketID)
                {
                    case 1:
                        market = "HO";
                        break;
                    case 2:
                        market = "HN";
                        break;
                    case 3:
                        market = "UP";
                        break;
                }

                if (RTDataServices.Common.RunMode == "TEST")
                {
                    stockInfo.CanTrade = CanTrade(stockInfo.MarketID) ? 1 : 0;
                }
                else
                {
                    stockInfo.CanTrade = (DBServices.IsOpenedMarket(stockInfo.MarketID) ? 1 : 0);
                }


                stockStringBuilder.AppendFormat(
                    "\r\n['{0}',{1},{2},{3},{4},{5},{6},{7},{8},{9},{10},{11},{12},{13},{14},{15},{16},{17},{18},{19},{20},{21},{22},{23},{24},'{25}'],",
                    stockInfo.StockSymbol, stockInfo.Best3Bid, stockInfo.Best3BidVolume, stockInfo.Best2Bid,
                    stockInfo.Best2BidVolume, stockInfo.Best1Bid, stockInfo.Best1BidVolume, change, stockInfo.Last,
                    stockInfo.LastVol, stockInfo.TotalShare, stockInfo.Best1Offer, stockInfo.Best1OfferVolume,
                    stockInfo.Best2Offer, stockInfo.Best2OfferVolume, stockInfo.Best3Offer, stockInfo.Best3OfferVolume,
                    stockInfo.AvrPrice, stockInfo.OpenPrice, stockInfo.Highest, stockInfo.Lowest, stockInfo.FRBoughtVol,
                    stockInfo.FRSoldVol, stockInfo.CanTrade, stockInfo.CanTrade, market);
            }
            string stockString = stockStringBuilder.ToString();
            if (!string.IsNullOrEmpty(stockString))
            {
                stockString = stockString.Substring(0, stockString.Length - 1);
            }
            string result = string.Format("[{0}\r\n]", stockString);
            return result;
        }
        #endregion
    }
}
