
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Totalmarket.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using RTStockData.Entities.Validation;
#endregion

namespace RTStockData.Entities
{
	///<summary>
	/// An object representation of the 'totalmarket' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class TotalmarketBase : EntityBase, ITotalmarket, IEntityId<TotalmarketKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private TotalmarketEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private TotalmarketEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private TotalmarketEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Totalmarket> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event TotalmarketEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event TotalmarketEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="TotalmarketBase"/> instance.
		///</summary>
		public TotalmarketBase()
		{
			this.entityData = new TotalmarketEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="TotalmarketBase"/> instance.
		///</summary>
		///<param name="_tradeDate"></param>
		///<param name="_setIndex"></param>
		///<param name="_totalTrade"></param>
		///<param name="_totalshare"></param>
		///<param name="_totalValue"></param>
		///<param name="_upVolume"></param>
		///<param name="_downVolume"></param>
		///<param name="_noChangeVolume"></param>
		///<param name="_advances"></param>
		///<param name="_declines"></param>
		///<param name="_nochange"></param>
		///<param name="_marketid"></param>
		///<param name="_filler"></param>
		///<param name="_time"></param>
		///<param name="_status"></param>
		public TotalmarketBase(System.DateTime? _tradeDate, System.Int64? _setIndex, System.Int64? _totalTrade, 
			System.Int64? _totalshare, System.Int64? _totalValue, System.Int64? _upVolume, System.Int64? _downVolume, 
			System.Int64? _noChangeVolume, System.Int64? _advances, System.Int64? _declines, System.Int64? _nochange, 
			System.String _marketid, System.String _filler, System.Int64? _time, System.String _status)
		{
			this.entityData = new TotalmarketEntityData();
			this.backupData = null;

			this.TradeDate = _tradeDate;
			this.SetIndex = _setIndex;
			this.TotalTrade = _totalTrade;
			this.Totalshare = _totalshare;
			this.TotalValue = _totalValue;
			this.UpVolume = _upVolume;
			this.DownVolume = _downVolume;
			this.NoChangeVolume = _noChangeVolume;
			this.Advances = _advances;
			this.Declines = _declines;
			this.Nochange = _nochange;
			this.Marketid = _marketid;
			this.Filler = _filler;
			this.Time = _time;
			this.Status = _status;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Totalmarket"/> instance.
		///</summary>
		///<param name="_tradeDate"></param>
		///<param name="_setIndex"></param>
		///<param name="_totalTrade"></param>
		///<param name="_totalshare"></param>
		///<param name="_totalValue"></param>
		///<param name="_upVolume"></param>
		///<param name="_downVolume"></param>
		///<param name="_noChangeVolume"></param>
		///<param name="_advances"></param>
		///<param name="_declines"></param>
		///<param name="_nochange"></param>
		///<param name="_marketid"></param>
		///<param name="_filler"></param>
		///<param name="_time"></param>
		///<param name="_status"></param>
		public static Totalmarket CreateTotalmarket(System.DateTime? _tradeDate, System.Int64? _setIndex, System.Int64? _totalTrade, 
			System.Int64? _totalshare, System.Int64? _totalValue, System.Int64? _upVolume, System.Int64? _downVolume, 
			System.Int64? _noChangeVolume, System.Int64? _advances, System.Int64? _declines, System.Int64? _nochange, 
			System.String _marketid, System.String _filler, System.Int64? _time, System.String _status)
		{
			Totalmarket newTotalmarket = new Totalmarket();
			newTotalmarket.TradeDate = _tradeDate;
			newTotalmarket.SetIndex = _setIndex;
			newTotalmarket.TotalTrade = _totalTrade;
			newTotalmarket.Totalshare = _totalshare;
			newTotalmarket.TotalValue = _totalValue;
			newTotalmarket.UpVolume = _upVolume;
			newTotalmarket.DownVolume = _downVolume;
			newTotalmarket.NoChangeVolume = _noChangeVolume;
			newTotalmarket.Advances = _advances;
			newTotalmarket.Declines = _declines;
			newTotalmarket.Nochange = _nochange;
			newTotalmarket.Marketid = _marketid;
			newTotalmarket.Filler = _filler;
			newTotalmarket.Time = _time;
			newTotalmarket.Status = _status;
			return newTotalmarket;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int64 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(TotalmarketColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TotalmarketColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TradeDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsTradeDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? TradeDate
		{
			get
			{
				return this.entityData.TradeDate; 
			}
			
			set
			{
				if (this.entityData.TradeDate == value)
					return;
					
				OnColumnChanging(TotalmarketColumn.TradeDate, this.entityData.TradeDate);
				this.entityData.TradeDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TotalmarketColumn.TradeDate, this.entityData.TradeDate);
				OnPropertyChanged("TradeDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SetIndex property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsSetIndexNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? SetIndex
		{
			get
			{
				return this.entityData.SetIndex; 
			}
			
			set
			{
				if (this.entityData.SetIndex == value)
					return;
					
				OnColumnChanging(TotalmarketColumn.SetIndex, this.entityData.SetIndex);
				this.entityData.SetIndex = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TotalmarketColumn.SetIndex, this.entityData.SetIndex);
				OnPropertyChanged("SetIndex");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalTrade property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsTotalTradeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? TotalTrade
		{
			get
			{
				return this.entityData.TotalTrade; 
			}
			
			set
			{
				if (this.entityData.TotalTrade == value)
					return;
					
				OnColumnChanging(TotalmarketColumn.TotalTrade, this.entityData.TotalTrade);
				this.entityData.TotalTrade = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TotalmarketColumn.TotalTrade, this.entityData.TotalTrade);
				OnPropertyChanged("TotalTrade");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Totalshare property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsTotalshareNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Totalshare
		{
			get
			{
				return this.entityData.Totalshare; 
			}
			
			set
			{
				if (this.entityData.Totalshare == value)
					return;
					
				OnColumnChanging(TotalmarketColumn.Totalshare, this.entityData.Totalshare);
				this.entityData.Totalshare = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TotalmarketColumn.Totalshare, this.entityData.Totalshare);
				OnPropertyChanged("Totalshare");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalValue property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsTotalValueNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? TotalValue
		{
			get
			{
				return this.entityData.TotalValue; 
			}
			
			set
			{
				if (this.entityData.TotalValue == value)
					return;
					
				OnColumnChanging(TotalmarketColumn.TotalValue, this.entityData.TotalValue);
				this.entityData.TotalValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TotalmarketColumn.TotalValue, this.entityData.TotalValue);
				OnPropertyChanged("TotalValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpVolume property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsUpVolumeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? UpVolume
		{
			get
			{
				return this.entityData.UpVolume; 
			}
			
			set
			{
				if (this.entityData.UpVolume == value)
					return;
					
				OnColumnChanging(TotalmarketColumn.UpVolume, this.entityData.UpVolume);
				this.entityData.UpVolume = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TotalmarketColumn.UpVolume, this.entityData.UpVolume);
				OnPropertyChanged("UpVolume");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DownVolume property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsDownVolumeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? DownVolume
		{
			get
			{
				return this.entityData.DownVolume; 
			}
			
			set
			{
				if (this.entityData.DownVolume == value)
					return;
					
				OnColumnChanging(TotalmarketColumn.DownVolume, this.entityData.DownVolume);
				this.entityData.DownVolume = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TotalmarketColumn.DownVolume, this.entityData.DownVolume);
				OnPropertyChanged("DownVolume");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NoChangeVolume property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsNoChangeVolumeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? NoChangeVolume
		{
			get
			{
				return this.entityData.NoChangeVolume; 
			}
			
			set
			{
				if (this.entityData.NoChangeVolume == value)
					return;
					
				OnColumnChanging(TotalmarketColumn.NoChangeVolume, this.entityData.NoChangeVolume);
				this.entityData.NoChangeVolume = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TotalmarketColumn.NoChangeVolume, this.entityData.NoChangeVolume);
				OnPropertyChanged("NoChangeVolume");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Advances property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsAdvancesNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Advances
		{
			get
			{
				return this.entityData.Advances; 
			}
			
			set
			{
				if (this.entityData.Advances == value)
					return;
					
				OnColumnChanging(TotalmarketColumn.Advances, this.entityData.Advances);
				this.entityData.Advances = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TotalmarketColumn.Advances, this.entityData.Advances);
				OnPropertyChanged("Advances");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Declines property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsDeclinesNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Declines
		{
			get
			{
				return this.entityData.Declines; 
			}
			
			set
			{
				if (this.entityData.Declines == value)
					return;
					
				OnColumnChanging(TotalmarketColumn.Declines, this.entityData.Declines);
				this.entityData.Declines = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TotalmarketColumn.Declines, this.entityData.Declines);
				OnPropertyChanged("Declines");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Nochange property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsNochangeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Nochange
		{
			get
			{
				return this.entityData.Nochange; 
			}
			
			set
			{
				if (this.entityData.Nochange == value)
					return;
					
				OnColumnChanging(TotalmarketColumn.Nochange, this.entityData.Nochange);
				this.entityData.Nochange = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TotalmarketColumn.Nochange, this.entityData.Nochange);
				OnPropertyChanged("Nochange");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Marketid property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String Marketid
		{
			get
			{
				return this.entityData.Marketid; 
			}
			
			set
			{
				if (this.entityData.Marketid == value)
					return;
					
				OnColumnChanging(TotalmarketColumn.Marketid, this.entityData.Marketid);
				this.entityData.Marketid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TotalmarketColumn.Marketid, this.entityData.Marketid);
				OnPropertyChanged("Marketid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Filler property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String Filler
		{
			get
			{
				return this.entityData.Filler; 
			}
			
			set
			{
				if (this.entityData.Filler == value)
					return;
					
				OnColumnChanging(TotalmarketColumn.Filler, this.entityData.Filler);
				this.entityData.Filler = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TotalmarketColumn.Filler, this.entityData.Filler);
				OnPropertyChanged("Filler");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Time property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsTimeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Time
		{
			get
			{
				return this.entityData.Time; 
			}
			
			set
			{
				if (this.entityData.Time == value)
					return;
					
				OnColumnChanging(TotalmarketColumn.Time, this.entityData.Time);
				this.entityData.Time = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TotalmarketColumn.Time, this.entityData.Time);
				OnPropertyChanged("Time");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
					
				OnColumnChanging(TotalmarketColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TotalmarketColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Marketid", "Marketid", 1));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Filler", "Filler", 1));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Status", "Status", 1));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "totalmarket"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"id", "TradeDate", "SetIndex", "TotalTrade", "Totalshare", "TotalValue", "UpVolume", "DownVolume", "NoChangeVolume", "Advances", "Declines", "Nochange", "Marketid", "Filler", "Time", "Status"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as TotalmarketEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Totalmarket) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Totalmarket>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Totalmarket);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Totalmarket Entity 
		///</summary>
		protected virtual Totalmarket Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Totalmarket copy = new Totalmarket();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.TradeDate = this.TradeDate;
				copy.SetIndex = this.SetIndex;
				copy.TotalTrade = this.TotalTrade;
				copy.Totalshare = this.Totalshare;
				copy.TotalValue = this.TotalValue;
				copy.UpVolume = this.UpVolume;
				copy.DownVolume = this.DownVolume;
				copy.NoChangeVolume = this.NoChangeVolume;
				copy.Advances = this.Advances;
				copy.Declines = this.Declines;
				copy.Nochange = this.Nochange;
				copy.Marketid = this.Marketid;
				copy.Filler = this.Filler;
				copy.Time = this.Time;
				copy.Status = this.Status;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Totalmarket Entity 
		///</summary>
		public virtual Totalmarket Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Totalmarket Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Totalmarket DeepCopy()
		{
			return EntityHelper.Clone<Totalmarket>(this as Totalmarket);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as TotalmarketEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new TotalmarketEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as TotalmarketEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(TotalmarketColumn column)
		{
			switch(column)
			{
					case TotalmarketColumn.Id:
					return entityData.Id != _originalData.Id;
					case TotalmarketColumn.TradeDate:
					return entityData.TradeDate != _originalData.TradeDate;
					case TotalmarketColumn.SetIndex:
					return entityData.SetIndex != _originalData.SetIndex;
					case TotalmarketColumn.TotalTrade:
					return entityData.TotalTrade != _originalData.TotalTrade;
					case TotalmarketColumn.Totalshare:
					return entityData.Totalshare != _originalData.Totalshare;
					case TotalmarketColumn.TotalValue:
					return entityData.TotalValue != _originalData.TotalValue;
					case TotalmarketColumn.UpVolume:
					return entityData.UpVolume != _originalData.UpVolume;
					case TotalmarketColumn.DownVolume:
					return entityData.DownVolume != _originalData.DownVolume;
					case TotalmarketColumn.NoChangeVolume:
					return entityData.NoChangeVolume != _originalData.NoChangeVolume;
					case TotalmarketColumn.Advances:
					return entityData.Advances != _originalData.Advances;
					case TotalmarketColumn.Declines:
					return entityData.Declines != _originalData.Declines;
					case TotalmarketColumn.Nochange:
					return entityData.Nochange != _originalData.Nochange;
					case TotalmarketColumn.Marketid:
					return entityData.Marketid != _originalData.Marketid;
					case TotalmarketColumn.Filler:
					return entityData.Filler != _originalData.Filler;
					case TotalmarketColumn.Time:
					return entityData.Time != _originalData.Time;
					case TotalmarketColumn.Status:
					return entityData.Status != _originalData.Status;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< TotalmarketColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.TradeDate != _originalData.TradeDate;
			result = result || entityData.SetIndex != _originalData.SetIndex;
			result = result || entityData.TotalTrade != _originalData.TotalTrade;
			result = result || entityData.Totalshare != _originalData.Totalshare;
			result = result || entityData.TotalValue != _originalData.TotalValue;
			result = result || entityData.UpVolume != _originalData.UpVolume;
			result = result || entityData.DownVolume != _originalData.DownVolume;
			result = result || entityData.NoChangeVolume != _originalData.NoChangeVolume;
			result = result || entityData.Advances != _originalData.Advances;
			result = result || entityData.Declines != _originalData.Declines;
			result = result || entityData.Nochange != _originalData.Nochange;
			result = result || entityData.Marketid != _originalData.Marketid;
			result = result || entityData.Filler != _originalData.Filler;
			result = result || entityData.Time != _originalData.Time;
			result = result || entityData.Status != _originalData.Status;
			return result;
		}	
		
		///<summary>
		///  Returns a Totalmarket Entity with the original data.
		///</summary>
		public Totalmarket GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateTotalmarket(
				_originalData.TradeDate,
				_originalData.SetIndex,
				_originalData.TotalTrade,
				_originalData.Totalshare,
				_originalData.TotalValue,
				_originalData.UpVolume,
				_originalData.DownVolume,
				_originalData.NoChangeVolume,
				_originalData.Advances,
				_originalData.Declines,
				_originalData.Nochange,
				_originalData.Marketid,
				_originalData.Filler,
				_originalData.Time,
				_originalData.Status
				);
				
			return (Totalmarket)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="TotalmarketBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is TotalmarketBase)
				return ValueEquals(this, (TotalmarketBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="TotalmarketBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.TradeDate == null) ? string.Empty : this.TradeDate.ToString()).GetHashCode() ^ 
					((this.SetIndex == null) ? string.Empty : this.SetIndex.ToString()).GetHashCode() ^ 
					((this.TotalTrade == null) ? string.Empty : this.TotalTrade.ToString()).GetHashCode() ^ 
					((this.Totalshare == null) ? string.Empty : this.Totalshare.ToString()).GetHashCode() ^ 
					((this.TotalValue == null) ? string.Empty : this.TotalValue.ToString()).GetHashCode() ^ 
					((this.UpVolume == null) ? string.Empty : this.UpVolume.ToString()).GetHashCode() ^ 
					((this.DownVolume == null) ? string.Empty : this.DownVolume.ToString()).GetHashCode() ^ 
					((this.NoChangeVolume == null) ? string.Empty : this.NoChangeVolume.ToString()).GetHashCode() ^ 
					((this.Advances == null) ? string.Empty : this.Advances.ToString()).GetHashCode() ^ 
					((this.Declines == null) ? string.Empty : this.Declines.ToString()).GetHashCode() ^ 
					((this.Nochange == null) ? string.Empty : this.Nochange.ToString()).GetHashCode() ^ 
					((this.Marketid == null) ? string.Empty : this.Marketid.ToString()).GetHashCode() ^ 
					((this.Filler == null) ? string.Empty : this.Filler.ToString()).GetHashCode() ^ 
					((this.Time == null) ? string.Empty : this.Time.ToString()).GetHashCode() ^ 
					((this.Status == null) ? string.Empty : this.Status.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="TotalmarketBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(TotalmarketBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="TotalmarketBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="TotalmarketBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="TotalmarketBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(TotalmarketBase Object1, TotalmarketBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.TradeDate != null && Object2.TradeDate != null )
			{
				if (Object1.TradeDate != Object2.TradeDate)
					equal = false;
			}
			else if (Object1.TradeDate == null ^ Object2.TradeDate == null )
			{
				equal = false;
			}
			if ( Object1.SetIndex != null && Object2.SetIndex != null )
			{
				if (Object1.SetIndex != Object2.SetIndex)
					equal = false;
			}
			else if (Object1.SetIndex == null ^ Object2.SetIndex == null )
			{
				equal = false;
			}
			if ( Object1.TotalTrade != null && Object2.TotalTrade != null )
			{
				if (Object1.TotalTrade != Object2.TotalTrade)
					equal = false;
			}
			else if (Object1.TotalTrade == null ^ Object2.TotalTrade == null )
			{
				equal = false;
			}
			if ( Object1.Totalshare != null && Object2.Totalshare != null )
			{
				if (Object1.Totalshare != Object2.Totalshare)
					equal = false;
			}
			else if (Object1.Totalshare == null ^ Object2.Totalshare == null )
			{
				equal = false;
			}
			if ( Object1.TotalValue != null && Object2.TotalValue != null )
			{
				if (Object1.TotalValue != Object2.TotalValue)
					equal = false;
			}
			else if (Object1.TotalValue == null ^ Object2.TotalValue == null )
			{
				equal = false;
			}
			if ( Object1.UpVolume != null && Object2.UpVolume != null )
			{
				if (Object1.UpVolume != Object2.UpVolume)
					equal = false;
			}
			else if (Object1.UpVolume == null ^ Object2.UpVolume == null )
			{
				equal = false;
			}
			if ( Object1.DownVolume != null && Object2.DownVolume != null )
			{
				if (Object1.DownVolume != Object2.DownVolume)
					equal = false;
			}
			else if (Object1.DownVolume == null ^ Object2.DownVolume == null )
			{
				equal = false;
			}
			if ( Object1.NoChangeVolume != null && Object2.NoChangeVolume != null )
			{
				if (Object1.NoChangeVolume != Object2.NoChangeVolume)
					equal = false;
			}
			else if (Object1.NoChangeVolume == null ^ Object2.NoChangeVolume == null )
			{
				equal = false;
			}
			if ( Object1.Advances != null && Object2.Advances != null )
			{
				if (Object1.Advances != Object2.Advances)
					equal = false;
			}
			else if (Object1.Advances == null ^ Object2.Advances == null )
			{
				equal = false;
			}
			if ( Object1.Declines != null && Object2.Declines != null )
			{
				if (Object1.Declines != Object2.Declines)
					equal = false;
			}
			else if (Object1.Declines == null ^ Object2.Declines == null )
			{
				equal = false;
			}
			if ( Object1.Nochange != null && Object2.Nochange != null )
			{
				if (Object1.Nochange != Object2.Nochange)
					equal = false;
			}
			else if (Object1.Nochange == null ^ Object2.Nochange == null )
			{
				equal = false;
			}
			if ( Object1.Marketid != null && Object2.Marketid != null )
			{
				if (Object1.Marketid != Object2.Marketid)
					equal = false;
			}
			else if (Object1.Marketid == null ^ Object2.Marketid == null )
			{
				equal = false;
			}
			if ( Object1.Filler != null && Object2.Filler != null )
			{
				if (Object1.Filler != Object2.Filler)
					equal = false;
			}
			else if (Object1.Filler == null ^ Object2.Filler == null )
			{
				equal = false;
			}
			if ( Object1.Time != null && Object2.Time != null )
			{
				if (Object1.Time != Object2.Time)
					equal = false;
			}
			else if (Object1.Time == null ^ Object2.Time == null )
			{
				equal = false;
			}
			if ( Object1.Status != null && Object2.Status != null )
			{
				if (Object1.Status != Object2.Status)
					equal = false;
			}
			else if (Object1.Status == null ^ Object2.Status == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((TotalmarketBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static TotalmarketComparer GetComparer()
        {
            return new TotalmarketComparer();
        }
        */

        // Comparer delegates back to Totalmarket
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Totalmarket rhs, TotalmarketColumn which)
        {
            switch (which)
            {
            	
            	
            	case TotalmarketColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case TotalmarketColumn.TradeDate:
            		return this.TradeDate.Value.CompareTo(rhs.TradeDate.Value);
            		
            		                 
            	
            	
            	case TotalmarketColumn.SetIndex:
            		return this.SetIndex.Value.CompareTo(rhs.SetIndex.Value);
            		
            		                 
            	
            	
            	case TotalmarketColumn.TotalTrade:
            		return this.TotalTrade.Value.CompareTo(rhs.TotalTrade.Value);
            		
            		                 
            	
            	
            	case TotalmarketColumn.Totalshare:
            		return this.Totalshare.Value.CompareTo(rhs.Totalshare.Value);
            		
            		                 
            	
            	
            	case TotalmarketColumn.TotalValue:
            		return this.TotalValue.Value.CompareTo(rhs.TotalValue.Value);
            		
            		                 
            	
            	
            	case TotalmarketColumn.UpVolume:
            		return this.UpVolume.Value.CompareTo(rhs.UpVolume.Value);
            		
            		                 
            	
            	
            	case TotalmarketColumn.DownVolume:
            		return this.DownVolume.Value.CompareTo(rhs.DownVolume.Value);
            		
            		                 
            	
            	
            	case TotalmarketColumn.NoChangeVolume:
            		return this.NoChangeVolume.Value.CompareTo(rhs.NoChangeVolume.Value);
            		
            		                 
            	
            	
            	case TotalmarketColumn.Advances:
            		return this.Advances.Value.CompareTo(rhs.Advances.Value);
            		
            		                 
            	
            	
            	case TotalmarketColumn.Declines:
            		return this.Declines.Value.CompareTo(rhs.Declines.Value);
            		
            		                 
            	
            	
            	case TotalmarketColumn.Nochange:
            		return this.Nochange.Value.CompareTo(rhs.Nochange.Value);
            		
            		                 
            	
            	
            	case TotalmarketColumn.Marketid:
            		return this.Marketid.CompareTo(rhs.Marketid);
            		
            		                 
            	
            	
            	case TotalmarketColumn.Filler:
            		return this.Filler.CompareTo(rhs.Filler);
            		
            		                 
            	
            	
            	case TotalmarketColumn.Time:
            		return this.Time.Value.CompareTo(rhs.Time.Value);
            		
            		                 
            	
            	
            	case TotalmarketColumn.Status:
            		return this.Status.CompareTo(rhs.Status);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<TotalmarketKey> Members
		
		// member variable for the EntityId property
		private TotalmarketKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual TotalmarketKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new TotalmarketKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Totalmarket")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{17}{16}- Id: {0}{16}- TradeDate: {1}{16}- SetIndex: {2}{16}- TotalTrade: {3}{16}- Totalshare: {4}{16}- TotalValue: {5}{16}- UpVolume: {6}{16}- DownVolume: {7}{16}- NoChangeVolume: {8}{16}- Advances: {9}{16}- Declines: {10}{16}- Nochange: {11}{16}- Marketid: {12}{16}- Filler: {13}{16}- Time: {14}{16}- Status: {15}{16}{18}", 
				this.Id,
				(this.TradeDate == null) ? string.Empty : this.TradeDate.ToString(),
				(this.SetIndex == null) ? string.Empty : this.SetIndex.ToString(),
				(this.TotalTrade == null) ? string.Empty : this.TotalTrade.ToString(),
				(this.Totalshare == null) ? string.Empty : this.Totalshare.ToString(),
				(this.TotalValue == null) ? string.Empty : this.TotalValue.ToString(),
				(this.UpVolume == null) ? string.Empty : this.UpVolume.ToString(),
				(this.DownVolume == null) ? string.Empty : this.DownVolume.ToString(),
				(this.NoChangeVolume == null) ? string.Empty : this.NoChangeVolume.ToString(),
				(this.Advances == null) ? string.Empty : this.Advances.ToString(),
				(this.Declines == null) ? string.Empty : this.Declines.ToString(),
				(this.Nochange == null) ? string.Empty : this.Nochange.ToString(),
				(this.Marketid == null) ? string.Empty : this.Marketid.ToString(),
				(this.Filler == null) ? string.Empty : this.Filler.ToString(),
				(this.Time == null) ? string.Empty : this.Time.ToString(),
				(this.Status == null) ? string.Empty : this.Status.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'totalmarket' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class TotalmarketEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// id : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "totalmarket"</remarks>
		public System.Int64 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// TradeDate : 
		/// </summary>
		public System.DateTime?		  TradeDate = null;
		
		/// <summary>
		/// SetIndex : 
		/// </summary>
		public System.Int64?		  SetIndex = null;
		
		/// <summary>
		/// TotalTrade : 
		/// </summary>
		public System.Int64?		  TotalTrade = null;
		
		/// <summary>
		/// Totalshare : 
		/// </summary>
		public System.Int64?		  Totalshare = null;
		
		/// <summary>
		/// TotalValue : 
		/// </summary>
		public System.Int64?		  TotalValue = null;
		
		/// <summary>
		/// UpVolume : 
		/// </summary>
		public System.Int64?		  UpVolume = null;
		
		/// <summary>
		/// DownVolume : 
		/// </summary>
		public System.Int64?		  DownVolume = null;
		
		/// <summary>
		/// NoChangeVolume : 
		/// </summary>
		public System.Int64?		  NoChangeVolume = null;
		
		/// <summary>
		/// Advances : 
		/// </summary>
		public System.Int64?		  Advances = null;
		
		/// <summary>
		/// Declines : 
		/// </summary>
		public System.Int64?		  Declines = null;
		
		/// <summary>
		/// Nochange : 
		/// </summary>
		public System.Int64?		  Nochange = null;
		
		/// <summary>
		/// Marketid : 
		/// </summary>
		public System.String		  Marketid = null;
		
		/// <summary>
		/// Filler : 
		/// </summary>
		public System.String		  Filler = null;
		
		/// <summary>
		/// Time : 
		/// </summary>
		public System.Int64?		  Time = null;
		
		/// <summary>
		/// Status : 
		/// </summary>
		public System.String		  Status = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			TotalmarketEntityData _tmp = new TotalmarketEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.TradeDate = this.TradeDate;
			_tmp.SetIndex = this.SetIndex;
			_tmp.TotalTrade = this.TotalTrade;
			_tmp.Totalshare = this.Totalshare;
			_tmp.TotalValue = this.TotalValue;
			_tmp.UpVolume = this.UpVolume;
			_tmp.DownVolume = this.DownVolume;
			_tmp.NoChangeVolume = this.NoChangeVolume;
			_tmp.Advances = this.Advances;
			_tmp.Declines = this.Declines;
			_tmp.Nochange = this.Nochange;
			_tmp.Marketid = this.Marketid;
			_tmp.Filler = this.Filler;
			_tmp.Time = this.Time;
			_tmp.Status = this.Status;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			TotalmarketEntityData _tmp = new TotalmarketEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.TradeDate = this.TradeDate;
			_tmp.SetIndex = this.SetIndex;
			_tmp.TotalTrade = this.TotalTrade;
			_tmp.Totalshare = this.Totalshare;
			_tmp.TotalValue = this.TotalValue;
			_tmp.UpVolume = this.UpVolume;
			_tmp.DownVolume = this.DownVolume;
			_tmp.NoChangeVolume = this.NoChangeVolume;
			_tmp.Advances = this.Advances;
			_tmp.Declines = this.Declines;
			_tmp.Nochange = this.Nochange;
			_tmp.Marketid = this.Marketid;
			_tmp.Filler = this.Filler;
			_tmp.Time = this.Time;
			_tmp.Status = this.Status;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TotalmarketColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(TotalmarketColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TotalmarketColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(TotalmarketColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TotalmarketColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(TotalmarketColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				TotalmarketEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new TotalmarketEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TotalmarketColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(TotalmarketColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				TotalmarketEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new TotalmarketEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region TotalmarketEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Totalmarket"/> object.
	/// </remarks>
	public class TotalmarketEventArgs : System.EventArgs
	{
		private TotalmarketColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the TotalmarketEventArgs class.
		///</summary>
		public TotalmarketEventArgs(TotalmarketColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the TotalmarketEventArgs class.
		///</summary>
		public TotalmarketEventArgs(TotalmarketColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The TotalmarketColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="TotalmarketColumn" />
		public TotalmarketColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Totalmarket related events.
	///</summary>
	public delegate void TotalmarketEventHandler(object sender, TotalmarketEventArgs e);
	
	#region TotalmarketComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class TotalmarketComparer : System.Collections.Generic.IComparer<Totalmarket>
	{
		TotalmarketColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:TotalmarketComparer"/> class.
        /// </summary>
		public TotalmarketComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:TotalmarketComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public TotalmarketComparer(TotalmarketColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Totalmarket"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Totalmarket"/> to compare.</param>
        /// <param name="b">The second <c>Totalmarket</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Totalmarket a, Totalmarket b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Totalmarket entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Totalmarket a, Totalmarket b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public TotalmarketColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region TotalmarketKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Totalmarket"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class TotalmarketKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the TotalmarketKey class.
		/// </summary>
		public TotalmarketKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the TotalmarketKey class.
		/// </summary>
		public TotalmarketKey(TotalmarketBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the TotalmarketKey class.
		/// </summary>
		public TotalmarketKey(System.Int64 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private TotalmarketBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public TotalmarketBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int64 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int64 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int64) EntityUtil.ChangeType(values["Id"], typeof(System.Int64)) : (long)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region TotalmarketColumn Enum
	
	/// <summary>
	/// Enumerate the Totalmarket columns.
	/// </summary>
	[Serializable]
	public enum TotalmarketColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("id")]
		[ColumnEnum("id", typeof(System.Int64), System.Data.DbType.Int64, true, true, false)]
		Id = 1,
		/// <summary>
		/// TradeDate : 
		/// </summary>
		[EnumTextValue("TradeDate")]
		[ColumnEnum("TradeDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		TradeDate = 2,
		/// <summary>
		/// SetIndex : 
		/// </summary>
		[EnumTextValue("SetIndex")]
		[ColumnEnum("SetIndex", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		SetIndex = 3,
		/// <summary>
		/// TotalTrade : 
		/// </summary>
		[EnumTextValue("TotalTrade")]
		[ColumnEnum("TotalTrade", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		TotalTrade = 4,
		/// <summary>
		/// Totalshare : 
		/// </summary>
		[EnumTextValue("Totalshare")]
		[ColumnEnum("Totalshare", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Totalshare = 5,
		/// <summary>
		/// TotalValue : 
		/// </summary>
		[EnumTextValue("TotalValue")]
		[ColumnEnum("TotalValue", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		TotalValue = 6,
		/// <summary>
		/// UpVolume : 
		/// </summary>
		[EnumTextValue("UpVolume")]
		[ColumnEnum("UpVolume", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		UpVolume = 7,
		/// <summary>
		/// DownVolume : 
		/// </summary>
		[EnumTextValue("DownVolume")]
		[ColumnEnum("DownVolume", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		DownVolume = 8,
		/// <summary>
		/// NoChangeVolume : 
		/// </summary>
		[EnumTextValue("NoChangeVolume")]
		[ColumnEnum("NoChangeVolume", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		NoChangeVolume = 9,
		/// <summary>
		/// Advances : 
		/// </summary>
		[EnumTextValue("Advances")]
		[ColumnEnum("Advances", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Advances = 10,
		/// <summary>
		/// Declines : 
		/// </summary>
		[EnumTextValue("Declines")]
		[ColumnEnum("Declines", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Declines = 11,
		/// <summary>
		/// Nochange : 
		/// </summary>
		[EnumTextValue("Nochange")]
		[ColumnEnum("Nochange", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Nochange = 12,
		/// <summary>
		/// Marketid : 
		/// </summary>
		[EnumTextValue("Marketid")]
		[ColumnEnum("Marketid", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 1)]
		Marketid = 13,
		/// <summary>
		/// Filler : 
		/// </summary>
		[EnumTextValue("Filler")]
		[ColumnEnum("Filler", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 1)]
		Filler = 14,
		/// <summary>
		/// Time : 
		/// </summary>
		[EnumTextValue("Time")]
		[ColumnEnum("Time", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Time = 15,
		/// <summary>
		/// Status : 
		/// </summary>
		[EnumTextValue("Status")]
		[ColumnEnum("Status", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 1)]
		Status = 16
	}//End enum

	#endregion TotalmarketColumn Enum

} // end namespace
