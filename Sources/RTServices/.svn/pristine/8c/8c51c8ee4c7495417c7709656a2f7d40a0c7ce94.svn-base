
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SecurityRealtime.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using RTStockData.Entities.Validation;
#endregion

namespace RTStockData.Entities
{
	///<summary>
	/// An object representation of the 'security_realtime' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SecurityRealtimeBase : EntityBase, ISecurityRealtime, IEntityId<SecurityRealtimeKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SecurityRealtimeEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SecurityRealtimeEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SecurityRealtimeEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SecurityRealtime> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SecurityRealtimeEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SecurityRealtimeEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SecurityRealtimeBase"/> instance.
		///</summary>
		public SecurityRealtimeBase()
		{
			this.entityData = new SecurityRealtimeEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SecurityRealtimeBase"/> instance.
		///</summary>
		///<param name="_tradeDate"></param>
		///<param name="_stockno"></param>
		///<param name="_stockSymbol"></param>
		///<param name="_stockType"></param>
		///<param name="_ceiling"></param>
		///<param name="_floor"></param>
		///<param name="_bigLotValue"></param>
		///<param name="_securityName"></param>
		///<param name="_sectorNo"></param>
		///<param name="_designated"></param>
		///<param name="_suspension"></param>
		///<param name="_delist"></param>
		///<param name="_haltResumeFlag"></param>
		///<param name="_split"></param>
		///<param name="_benefit"></param>
		///<param name="_meeting"></param>
		///<param name="_notice"></param>
		///<param name="_clientidRequired"></param>
		///<param name="_couponRate"></param>
		///<param name="_issueDate"></param>
		///<param name="_matureDate"></param>
		///<param name="_avrPrice"></param>
		///<param name="_parValue"></param>
		///<param name="_sdcFlag"></param>
		///<param name="_priorClosePrice"></param>
		///<param name="_priorCloseDate"></param>
		///<param name="_projectOpen"></param>
		///<param name="_openPrice"></param>
		///<param name="_last"></param>
		///<param name="_lastVol"></param>
		///<param name="_lastVal"></param>
		///<param name="_highest"></param>
		///<param name="_lowest"></param>
		///<param name="_totalshares"></param>
		///<param name="_totalValue"></param>
		///<param name="_accumulateDeal"></param>
		///<param name="_bigDeal"></param>
		///<param name="_bigVolume"></param>
		///<param name="_bigValue"></param>
		///<param name="_oddDeal"></param>
		///<param name="_oddVolume"></param>
		///<param name="_oddValue"></param>
		///<param name="_best1Bid"></param>
		///<param name="_best1BidVolume"></param>
		///<param name="_best2Bid"></param>
		///<param name="_best2BidVolume"></param>
		///<param name="_best3Bid"></param>
		///<param name="_best3BidVolume"></param>
		///<param name="_best1Offer"></param>
		///<param name="_best1OfferVolume"></param>
		///<param name="_best2Offer"></param>
		///<param name="_best2OfferVolume"></param>
		///<param name="_best3Offer"></param>
		///<param name="_best3OfferVolume"></param>
		///<param name="_boardLost"></param>
		///<param name="_totalRoom"></param>
		///<param name="_currentRoom"></param>
		///<param name="_startRoom"></param>
		///<param name="_sequence"></param>
		public SecurityRealtimeBase(System.DateTime? _tradeDate, System.Int16? _stockno, 
			System.String _stockSymbol, System.String _stockType, System.Int64? _ceiling, 
			System.Int64? _floor, System.Int64? _bigLotValue, System.String _securityName, 
			System.String _sectorNo, System.String _designated, System.String _suspension, 
			System.String _delist, System.String _haltResumeFlag, System.String _split, 
			System.String _benefit, System.String _meeting, System.String _notice, 
			System.String _clientidRequired, System.Int16? _couponRate, System.String _issueDate, 
			System.String _matureDate, System.Int64? _avrPrice, System.Int16? _parValue, 
			System.String _sdcFlag, System.Int64? _priorClosePrice, System.String _priorCloseDate, 
			System.Int64? _projectOpen, System.Int64? _openPrice, System.Int64? _last, 
			System.Int64? _lastVol, System.Int64? _lastVal, System.Int64? _highest, 
			System.Int64? _lowest, System.Int64? _totalshares, System.Int64? _totalValue, 
			System.Int16? _accumulateDeal, System.Int16? _bigDeal, System.Int64? _bigVolume, 
			System.Int64? _bigValue, System.Int16? _oddDeal, System.Int64? _oddVolume, 
			System.Int64? _oddValue, System.Int64? _best1Bid, System.Int64? _best1BidVolume, 
			System.Int64? _best2Bid, System.Int64? _best2BidVolume, System.Int64? _best3Bid, 
			System.Int64? _best3BidVolume, System.Int64? _best1Offer, System.Int64? _best1OfferVolume, 
			System.Int64? _best2Offer, System.Int64? _best2OfferVolume, System.Int64? _best3Offer, 
			System.Int64? _best3OfferVolume, System.Int16? _boardLost, System.Int64? _totalRoom, 
			System.Int64? _currentRoom, System.Int64? _startRoom, System.Int64? _sequence)
		{
			this.entityData = new SecurityRealtimeEntityData();
			this.backupData = null;

			this.TradeDate = _tradeDate;
			this.Stockno = _stockno;
			this.StockSymbol = _stockSymbol;
			this.StockType = _stockType;
			this.Ceiling = _ceiling;
			this.Floor = _floor;
			this.BigLotValue = _bigLotValue;
			this.SecurityName = _securityName;
			this.SectorNo = _sectorNo;
			this.Designated = _designated;
			this.Suspension = _suspension;
			this.Delist = _delist;
			this.HaltResumeFlag = _haltResumeFlag;
			this.Split = _split;
			this.Benefit = _benefit;
			this.Meeting = _meeting;
			this.Notice = _notice;
			this.ClientidRequired = _clientidRequired;
			this.CouponRate = _couponRate;
			this.IssueDate = _issueDate;
			this.MatureDate = _matureDate;
			this.AvrPrice = _avrPrice;
			this.ParValue = _parValue;
			this.SdcFlag = _sdcFlag;
			this.PriorClosePrice = _priorClosePrice;
			this.PriorCloseDate = _priorCloseDate;
			this.ProjectOpen = _projectOpen;
			this.OpenPrice = _openPrice;
			this.Last = _last;
			this.LastVol = _lastVol;
			this.LastVal = _lastVal;
			this.Highest = _highest;
			this.Lowest = _lowest;
			this.Totalshares = _totalshares;
			this.TotalValue = _totalValue;
			this.AccumulateDeal = _accumulateDeal;
			this.BigDeal = _bigDeal;
			this.BigVolume = _bigVolume;
			this.BigValue = _bigValue;
			this.OddDeal = _oddDeal;
			this.OddVolume = _oddVolume;
			this.OddValue = _oddValue;
			this.Best1Bid = _best1Bid;
			this.Best1BidVolume = _best1BidVolume;
			this.Best2Bid = _best2Bid;
			this.Best2BidVolume = _best2BidVolume;
			this.Best3Bid = _best3Bid;
			this.Best3BidVolume = _best3BidVolume;
			this.Best1Offer = _best1Offer;
			this.Best1OfferVolume = _best1OfferVolume;
			this.Best2Offer = _best2Offer;
			this.Best2OfferVolume = _best2OfferVolume;
			this.Best3Offer = _best3Offer;
			this.Best3OfferVolume = _best3OfferVolume;
			this.BoardLost = _boardLost;
			this.TotalRoom = _totalRoom;
			this.CurrentRoom = _currentRoom;
			this.StartRoom = _startRoom;
			this.Sequence = _sequence;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SecurityRealtime"/> instance.
		///</summary>
		///<param name="_tradeDate"></param>
		///<param name="_stockno"></param>
		///<param name="_stockSymbol"></param>
		///<param name="_stockType"></param>
		///<param name="_ceiling"></param>
		///<param name="_floor"></param>
		///<param name="_bigLotValue"></param>
		///<param name="_securityName"></param>
		///<param name="_sectorNo"></param>
		///<param name="_designated"></param>
		///<param name="_suspension"></param>
		///<param name="_delist"></param>
		///<param name="_haltResumeFlag"></param>
		///<param name="_split"></param>
		///<param name="_benefit"></param>
		///<param name="_meeting"></param>
		///<param name="_notice"></param>
		///<param name="_clientidRequired"></param>
		///<param name="_couponRate"></param>
		///<param name="_issueDate"></param>
		///<param name="_matureDate"></param>
		///<param name="_avrPrice"></param>
		///<param name="_parValue"></param>
		///<param name="_sdcFlag"></param>
		///<param name="_priorClosePrice"></param>
		///<param name="_priorCloseDate"></param>
		///<param name="_projectOpen"></param>
		///<param name="_openPrice"></param>
		///<param name="_last"></param>
		///<param name="_lastVol"></param>
		///<param name="_lastVal"></param>
		///<param name="_highest"></param>
		///<param name="_lowest"></param>
		///<param name="_totalshares"></param>
		///<param name="_totalValue"></param>
		///<param name="_accumulateDeal"></param>
		///<param name="_bigDeal"></param>
		///<param name="_bigVolume"></param>
		///<param name="_bigValue"></param>
		///<param name="_oddDeal"></param>
		///<param name="_oddVolume"></param>
		///<param name="_oddValue"></param>
		///<param name="_best1Bid"></param>
		///<param name="_best1BidVolume"></param>
		///<param name="_best2Bid"></param>
		///<param name="_best2BidVolume"></param>
		///<param name="_best3Bid"></param>
		///<param name="_best3BidVolume"></param>
		///<param name="_best1Offer"></param>
		///<param name="_best1OfferVolume"></param>
		///<param name="_best2Offer"></param>
		///<param name="_best2OfferVolume"></param>
		///<param name="_best3Offer"></param>
		///<param name="_best3OfferVolume"></param>
		///<param name="_boardLost"></param>
		///<param name="_totalRoom"></param>
		///<param name="_currentRoom"></param>
		///<param name="_startRoom"></param>
		///<param name="_sequence"></param>
		public static SecurityRealtime CreateSecurityRealtime(System.DateTime? _tradeDate, System.Int16? _stockno, 
			System.String _stockSymbol, System.String _stockType, System.Int64? _ceiling, 
			System.Int64? _floor, System.Int64? _bigLotValue, System.String _securityName, 
			System.String _sectorNo, System.String _designated, System.String _suspension, 
			System.String _delist, System.String _haltResumeFlag, System.String _split, 
			System.String _benefit, System.String _meeting, System.String _notice, 
			System.String _clientidRequired, System.Int16? _couponRate, System.String _issueDate, 
			System.String _matureDate, System.Int64? _avrPrice, System.Int16? _parValue, 
			System.String _sdcFlag, System.Int64? _priorClosePrice, System.String _priorCloseDate, 
			System.Int64? _projectOpen, System.Int64? _openPrice, System.Int64? _last, 
			System.Int64? _lastVol, System.Int64? _lastVal, System.Int64? _highest, 
			System.Int64? _lowest, System.Int64? _totalshares, System.Int64? _totalValue, 
			System.Int16? _accumulateDeal, System.Int16? _bigDeal, System.Int64? _bigVolume, 
			System.Int64? _bigValue, System.Int16? _oddDeal, System.Int64? _oddVolume, 
			System.Int64? _oddValue, System.Int64? _best1Bid, System.Int64? _best1BidVolume, 
			System.Int64? _best2Bid, System.Int64? _best2BidVolume, System.Int64? _best3Bid, 
			System.Int64? _best3BidVolume, System.Int64? _best1Offer, System.Int64? _best1OfferVolume, 
			System.Int64? _best2Offer, System.Int64? _best2OfferVolume, System.Int64? _best3Offer, 
			System.Int64? _best3OfferVolume, System.Int16? _boardLost, System.Int64? _totalRoom, 
			System.Int64? _currentRoom, System.Int64? _startRoom, System.Int64? _sequence)
		{
			SecurityRealtime newSecurityRealtime = new SecurityRealtime();
			newSecurityRealtime.TradeDate = _tradeDate;
			newSecurityRealtime.Stockno = _stockno;
			newSecurityRealtime.StockSymbol = _stockSymbol;
			newSecurityRealtime.StockType = _stockType;
			newSecurityRealtime.Ceiling = _ceiling;
			newSecurityRealtime.Floor = _floor;
			newSecurityRealtime.BigLotValue = _bigLotValue;
			newSecurityRealtime.SecurityName = _securityName;
			newSecurityRealtime.SectorNo = _sectorNo;
			newSecurityRealtime.Designated = _designated;
			newSecurityRealtime.Suspension = _suspension;
			newSecurityRealtime.Delist = _delist;
			newSecurityRealtime.HaltResumeFlag = _haltResumeFlag;
			newSecurityRealtime.Split = _split;
			newSecurityRealtime.Benefit = _benefit;
			newSecurityRealtime.Meeting = _meeting;
			newSecurityRealtime.Notice = _notice;
			newSecurityRealtime.ClientidRequired = _clientidRequired;
			newSecurityRealtime.CouponRate = _couponRate;
			newSecurityRealtime.IssueDate = _issueDate;
			newSecurityRealtime.MatureDate = _matureDate;
			newSecurityRealtime.AvrPrice = _avrPrice;
			newSecurityRealtime.ParValue = _parValue;
			newSecurityRealtime.SdcFlag = _sdcFlag;
			newSecurityRealtime.PriorClosePrice = _priorClosePrice;
			newSecurityRealtime.PriorCloseDate = _priorCloseDate;
			newSecurityRealtime.ProjectOpen = _projectOpen;
			newSecurityRealtime.OpenPrice = _openPrice;
			newSecurityRealtime.Last = _last;
			newSecurityRealtime.LastVol = _lastVol;
			newSecurityRealtime.LastVal = _lastVal;
			newSecurityRealtime.Highest = _highest;
			newSecurityRealtime.Lowest = _lowest;
			newSecurityRealtime.Totalshares = _totalshares;
			newSecurityRealtime.TotalValue = _totalValue;
			newSecurityRealtime.AccumulateDeal = _accumulateDeal;
			newSecurityRealtime.BigDeal = _bigDeal;
			newSecurityRealtime.BigVolume = _bigVolume;
			newSecurityRealtime.BigValue = _bigValue;
			newSecurityRealtime.OddDeal = _oddDeal;
			newSecurityRealtime.OddVolume = _oddVolume;
			newSecurityRealtime.OddValue = _oddValue;
			newSecurityRealtime.Best1Bid = _best1Bid;
			newSecurityRealtime.Best1BidVolume = _best1BidVolume;
			newSecurityRealtime.Best2Bid = _best2Bid;
			newSecurityRealtime.Best2BidVolume = _best2BidVolume;
			newSecurityRealtime.Best3Bid = _best3Bid;
			newSecurityRealtime.Best3BidVolume = _best3BidVolume;
			newSecurityRealtime.Best1Offer = _best1Offer;
			newSecurityRealtime.Best1OfferVolume = _best1OfferVolume;
			newSecurityRealtime.Best2Offer = _best2Offer;
			newSecurityRealtime.Best2OfferVolume = _best2OfferVolume;
			newSecurityRealtime.Best3Offer = _best3Offer;
			newSecurityRealtime.Best3OfferVolume = _best3OfferVolume;
			newSecurityRealtime.BoardLost = _boardLost;
			newSecurityRealtime.TotalRoom = _totalRoom;
			newSecurityRealtime.CurrentRoom = _currentRoom;
			newSecurityRealtime.StartRoom = _startRoom;
			newSecurityRealtime.Sequence = _sequence;
			return newSecurityRealtime;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int64 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TradeDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsTradeDateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? TradeDate
		{
			get
			{
				return this.entityData.TradeDate; 
			}
			
			set
			{
				if (this.entityData.TradeDate == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.TradeDate, this.entityData.TradeDate);
				this.entityData.TradeDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.TradeDate, this.entityData.TradeDate);
				OnPropertyChanged("TradeDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Stockno property. 
		///		
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsStocknoNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? Stockno
		{
			get
			{
				return this.entityData.Stockno; 
			}
			
			set
			{
				if (this.entityData.Stockno == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.Stockno, this.entityData.Stockno);
				this.entityData.Stockno = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.Stockno, this.entityData.Stockno);
				OnPropertyChanged("Stockno");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StockSymbol property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String StockSymbol
		{
			get
			{
				return this.entityData.StockSymbol; 
			}
			
			set
			{
				if (this.entityData.StockSymbol == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.StockSymbol, this.entityData.StockSymbol);
				this.entityData.StockSymbol = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.StockSymbol, this.entityData.StockSymbol);
				OnPropertyChanged("StockSymbol");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StockType property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String StockType
		{
			get
			{
				return this.entityData.StockType; 
			}
			
			set
			{
				if (this.entityData.StockType == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.StockType, this.entityData.StockType);
				this.entityData.StockType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.StockType, this.entityData.StockType);
				OnPropertyChanged("StockType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Ceiling property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsCeilingNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Ceiling
		{
			get
			{
				return this.entityData.Ceiling; 
			}
			
			set
			{
				if (this.entityData.Ceiling == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.Ceiling, this.entityData.Ceiling);
				this.entityData.Ceiling = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.Ceiling, this.entityData.Ceiling);
				OnPropertyChanged("Ceiling");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Floor property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsFloorNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Floor
		{
			get
			{
				return this.entityData.Floor; 
			}
			
			set
			{
				if (this.entityData.Floor == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.Floor, this.entityData.Floor);
				this.entityData.Floor = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.Floor, this.entityData.Floor);
				OnPropertyChanged("Floor");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BigLotValue property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsBigLotValueNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? BigLotValue
		{
			get
			{
				return this.entityData.BigLotValue; 
			}
			
			set
			{
				if (this.entityData.BigLotValue == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.BigLotValue, this.entityData.BigLotValue);
				this.entityData.BigLotValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.BigLotValue, this.entityData.BigLotValue);
				OnPropertyChanged("BigLotValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SecurityName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 25)]
		public virtual System.String SecurityName
		{
			get
			{
				return this.entityData.SecurityName; 
			}
			
			set
			{
				if (this.entityData.SecurityName == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.SecurityName, this.entityData.SecurityName);
				this.entityData.SecurityName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.SecurityName, this.entityData.SecurityName);
				OnPropertyChanged("SecurityName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SectorNo property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String SectorNo
		{
			get
			{
				return this.entityData.SectorNo; 
			}
			
			set
			{
				if (this.entityData.SectorNo == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.SectorNo, this.entityData.SectorNo);
				this.entityData.SectorNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.SectorNo, this.entityData.SectorNo);
				OnPropertyChanged("SectorNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Designated property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String Designated
		{
			get
			{
				return this.entityData.Designated; 
			}
			
			set
			{
				if (this.entityData.Designated == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.Designated, this.entityData.Designated);
				this.entityData.Designated = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.Designated, this.entityData.Designated);
				OnPropertyChanged("Designated");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Suspension property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String Suspension
		{
			get
			{
				return this.entityData.Suspension; 
			}
			
			set
			{
				if (this.entityData.Suspension == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.Suspension, this.entityData.Suspension);
				this.entityData.Suspension = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.Suspension, this.entityData.Suspension);
				OnPropertyChanged("Suspension");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Delist property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String Delist
		{
			get
			{
				return this.entityData.Delist; 
			}
			
			set
			{
				if (this.entityData.Delist == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.Delist, this.entityData.Delist);
				this.entityData.Delist = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.Delist, this.entityData.Delist);
				OnPropertyChanged("Delist");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HaltResumeFlag property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String HaltResumeFlag
		{
			get
			{
				return this.entityData.HaltResumeFlag; 
			}
			
			set
			{
				if (this.entityData.HaltResumeFlag == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.HaltResumeFlag, this.entityData.HaltResumeFlag);
				this.entityData.HaltResumeFlag = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.HaltResumeFlag, this.entityData.HaltResumeFlag);
				OnPropertyChanged("HaltResumeFlag");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Split property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String Split
		{
			get
			{
				return this.entityData.Split; 
			}
			
			set
			{
				if (this.entityData.Split == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.Split, this.entityData.Split);
				this.entityData.Split = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.Split, this.entityData.Split);
				OnPropertyChanged("Split");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Benefit property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String Benefit
		{
			get
			{
				return this.entityData.Benefit; 
			}
			
			set
			{
				if (this.entityData.Benefit == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.Benefit, this.entityData.Benefit);
				this.entityData.Benefit = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.Benefit, this.entityData.Benefit);
				OnPropertyChanged("Benefit");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Meeting property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String Meeting
		{
			get
			{
				return this.entityData.Meeting; 
			}
			
			set
			{
				if (this.entityData.Meeting == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.Meeting, this.entityData.Meeting);
				this.entityData.Meeting = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.Meeting, this.entityData.Meeting);
				OnPropertyChanged("Meeting");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notice property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String Notice
		{
			get
			{
				return this.entityData.Notice; 
			}
			
			set
			{
				if (this.entityData.Notice == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.Notice, this.entityData.Notice);
				this.entityData.Notice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.Notice, this.entityData.Notice);
				OnPropertyChanged("Notice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ClientidRequired property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String ClientidRequired
		{
			get
			{
				return this.entityData.ClientidRequired; 
			}
			
			set
			{
				if (this.entityData.ClientidRequired == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.ClientidRequired, this.entityData.ClientidRequired);
				this.entityData.ClientidRequired = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.ClientidRequired, this.entityData.ClientidRequired);
				OnPropertyChanged("ClientidRequired");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CouponRate property. 
		///		
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsCouponRateNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? CouponRate
		{
			get
			{
				return this.entityData.CouponRate; 
			}
			
			set
			{
				if (this.entityData.CouponRate == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.CouponRate, this.entityData.CouponRate);
				this.entityData.CouponRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.CouponRate, this.entityData.CouponRate);
				OnPropertyChanged("CouponRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IssueDate property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 6)]
		public virtual System.String IssueDate
		{
			get
			{
				return this.entityData.IssueDate; 
			}
			
			set
			{
				if (this.entityData.IssueDate == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.IssueDate, this.entityData.IssueDate);
				this.entityData.IssueDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.IssueDate, this.entityData.IssueDate);
				OnPropertyChanged("IssueDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MatureDate property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 6)]
		public virtual System.String MatureDate
		{
			get
			{
				return this.entityData.MatureDate; 
			}
			
			set
			{
				if (this.entityData.MatureDate == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.MatureDate, this.entityData.MatureDate);
				this.entityData.MatureDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.MatureDate, this.entityData.MatureDate);
				OnPropertyChanged("MatureDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AvrPrice property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsAvrPriceNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? AvrPrice
		{
			get
			{
				return this.entityData.AvrPrice; 
			}
			
			set
			{
				if (this.entityData.AvrPrice == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.AvrPrice, this.entityData.AvrPrice);
				this.entityData.AvrPrice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.AvrPrice, this.entityData.AvrPrice);
				OnPropertyChanged("AvrPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ParValue property. 
		///		
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsParValueNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? ParValue
		{
			get
			{
				return this.entityData.ParValue; 
			}
			
			set
			{
				if (this.entityData.ParValue == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.ParValue, this.entityData.ParValue);
				this.entityData.ParValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.ParValue, this.entityData.ParValue);
				OnPropertyChanged("ParValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SdcFlag property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String SdcFlag
		{
			get
			{
				return this.entityData.SdcFlag; 
			}
			
			set
			{
				if (this.entityData.SdcFlag == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.SdcFlag, this.entityData.SdcFlag);
				this.entityData.SdcFlag = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.SdcFlag, this.entityData.SdcFlag);
				OnPropertyChanged("SdcFlag");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PriorClosePrice property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsPriorClosePriceNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? PriorClosePrice
		{
			get
			{
				return this.entityData.PriorClosePrice; 
			}
			
			set
			{
				if (this.entityData.PriorClosePrice == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.PriorClosePrice, this.entityData.PriorClosePrice);
				this.entityData.PriorClosePrice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.PriorClosePrice, this.entityData.PriorClosePrice);
				OnPropertyChanged("PriorClosePrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PriorCloseDate property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 6)]
		public virtual System.String PriorCloseDate
		{
			get
			{
				return this.entityData.PriorCloseDate; 
			}
			
			set
			{
				if (this.entityData.PriorCloseDate == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.PriorCloseDate, this.entityData.PriorCloseDate);
				this.entityData.PriorCloseDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.PriorCloseDate, this.entityData.PriorCloseDate);
				OnPropertyChanged("PriorCloseDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProjectOpen property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsProjectOpenNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? ProjectOpen
		{
			get
			{
				return this.entityData.ProjectOpen; 
			}
			
			set
			{
				if (this.entityData.ProjectOpen == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.ProjectOpen, this.entityData.ProjectOpen);
				this.entityData.ProjectOpen = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.ProjectOpen, this.entityData.ProjectOpen);
				OnPropertyChanged("ProjectOpen");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OpenPrice property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsOpenPriceNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? OpenPrice
		{
			get
			{
				return this.entityData.OpenPrice; 
			}
			
			set
			{
				if (this.entityData.OpenPrice == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.OpenPrice, this.entityData.OpenPrice);
				this.entityData.OpenPrice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.OpenPrice, this.entityData.OpenPrice);
				OnPropertyChanged("OpenPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Last property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsLastNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Last
		{
			get
			{
				return this.entityData.Last; 
			}
			
			set
			{
				if (this.entityData.Last == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.Last, this.entityData.Last);
				this.entityData.Last = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.Last, this.entityData.Last);
				OnPropertyChanged("Last");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastVol property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsLastVolNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? LastVol
		{
			get
			{
				return this.entityData.LastVol; 
			}
			
			set
			{
				if (this.entityData.LastVol == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.LastVol, this.entityData.LastVol);
				this.entityData.LastVol = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.LastVol, this.entityData.LastVol);
				OnPropertyChanged("LastVol");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastVal property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsLastValNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? LastVal
		{
			get
			{
				return this.entityData.LastVal; 
			}
			
			set
			{
				if (this.entityData.LastVal == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.LastVal, this.entityData.LastVal);
				this.entityData.LastVal = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.LastVal, this.entityData.LastVal);
				OnPropertyChanged("LastVal");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Highest property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsHighestNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Highest
		{
			get
			{
				return this.entityData.Highest; 
			}
			
			set
			{
				if (this.entityData.Highest == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.Highest, this.entityData.Highest);
				this.entityData.Highest = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.Highest, this.entityData.Highest);
				OnPropertyChanged("Highest");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Lowest property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsLowestNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Lowest
		{
			get
			{
				return this.entityData.Lowest; 
			}
			
			set
			{
				if (this.entityData.Lowest == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.Lowest, this.entityData.Lowest);
				this.entityData.Lowest = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.Lowest, this.entityData.Lowest);
				OnPropertyChanged("Lowest");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Totalshares property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsTotalsharesNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Totalshares
		{
			get
			{
				return this.entityData.Totalshares; 
			}
			
			set
			{
				if (this.entityData.Totalshares == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.Totalshares, this.entityData.Totalshares);
				this.entityData.Totalshares = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.Totalshares, this.entityData.Totalshares);
				OnPropertyChanged("Totalshares");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalValue property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsTotalValueNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? TotalValue
		{
			get
			{
				return this.entityData.TotalValue; 
			}
			
			set
			{
				if (this.entityData.TotalValue == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.TotalValue, this.entityData.TotalValue);
				this.entityData.TotalValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.TotalValue, this.entityData.TotalValue);
				OnPropertyChanged("TotalValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccumulateDeal property. 
		///		
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsAccumulateDealNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? AccumulateDeal
		{
			get
			{
				return this.entityData.AccumulateDeal; 
			}
			
			set
			{
				if (this.entityData.AccumulateDeal == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.AccumulateDeal, this.entityData.AccumulateDeal);
				this.entityData.AccumulateDeal = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.AccumulateDeal, this.entityData.AccumulateDeal);
				OnPropertyChanged("AccumulateDeal");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BigDeal property. 
		///		
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsBigDealNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? BigDeal
		{
			get
			{
				return this.entityData.BigDeal; 
			}
			
			set
			{
				if (this.entityData.BigDeal == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.BigDeal, this.entityData.BigDeal);
				this.entityData.BigDeal = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.BigDeal, this.entityData.BigDeal);
				OnPropertyChanged("BigDeal");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BigVolume property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsBigVolumeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? BigVolume
		{
			get
			{
				return this.entityData.BigVolume; 
			}
			
			set
			{
				if (this.entityData.BigVolume == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.BigVolume, this.entityData.BigVolume);
				this.entityData.BigVolume = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.BigVolume, this.entityData.BigVolume);
				OnPropertyChanged("BigVolume");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BigValue property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsBigValueNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? BigValue
		{
			get
			{
				return this.entityData.BigValue; 
			}
			
			set
			{
				if (this.entityData.BigValue == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.BigValue, this.entityData.BigValue);
				this.entityData.BigValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.BigValue, this.entityData.BigValue);
				OnPropertyChanged("BigValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OddDeal property. 
		///		
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsOddDealNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? OddDeal
		{
			get
			{
				return this.entityData.OddDeal; 
			}
			
			set
			{
				if (this.entityData.OddDeal == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.OddDeal, this.entityData.OddDeal);
				this.entityData.OddDeal = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.OddDeal, this.entityData.OddDeal);
				OnPropertyChanged("OddDeal");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OddVolume property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsOddVolumeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? OddVolume
		{
			get
			{
				return this.entityData.OddVolume; 
			}
			
			set
			{
				if (this.entityData.OddVolume == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.OddVolume, this.entityData.OddVolume);
				this.entityData.OddVolume = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.OddVolume, this.entityData.OddVolume);
				OnPropertyChanged("OddVolume");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OddValue property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsOddValueNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? OddValue
		{
			get
			{
				return this.entityData.OddValue; 
			}
			
			set
			{
				if (this.entityData.OddValue == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.OddValue, this.entityData.OddValue);
				this.entityData.OddValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.OddValue, this.entityData.OddValue);
				OnPropertyChanged("OddValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Best1Bid property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsBest1BidNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Best1Bid
		{
			get
			{
				return this.entityData.Best1Bid; 
			}
			
			set
			{
				if (this.entityData.Best1Bid == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.Best1Bid, this.entityData.Best1Bid);
				this.entityData.Best1Bid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.Best1Bid, this.entityData.Best1Bid);
				OnPropertyChanged("Best1Bid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Best1BidVolume property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsBest1BidVolumeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Best1BidVolume
		{
			get
			{
				return this.entityData.Best1BidVolume; 
			}
			
			set
			{
				if (this.entityData.Best1BidVolume == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.Best1BidVolume, this.entityData.Best1BidVolume);
				this.entityData.Best1BidVolume = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.Best1BidVolume, this.entityData.Best1BidVolume);
				OnPropertyChanged("Best1BidVolume");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Best2Bid property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsBest2BidNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Best2Bid
		{
			get
			{
				return this.entityData.Best2Bid; 
			}
			
			set
			{
				if (this.entityData.Best2Bid == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.Best2Bid, this.entityData.Best2Bid);
				this.entityData.Best2Bid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.Best2Bid, this.entityData.Best2Bid);
				OnPropertyChanged("Best2Bid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Best2BidVolume property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsBest2BidVolumeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Best2BidVolume
		{
			get
			{
				return this.entityData.Best2BidVolume; 
			}
			
			set
			{
				if (this.entityData.Best2BidVolume == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.Best2BidVolume, this.entityData.Best2BidVolume);
				this.entityData.Best2BidVolume = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.Best2BidVolume, this.entityData.Best2BidVolume);
				OnPropertyChanged("Best2BidVolume");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Best3Bid property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsBest3BidNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Best3Bid
		{
			get
			{
				return this.entityData.Best3Bid; 
			}
			
			set
			{
				if (this.entityData.Best3Bid == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.Best3Bid, this.entityData.Best3Bid);
				this.entityData.Best3Bid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.Best3Bid, this.entityData.Best3Bid);
				OnPropertyChanged("Best3Bid");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Best3BidVolume property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsBest3BidVolumeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Best3BidVolume
		{
			get
			{
				return this.entityData.Best3BidVolume; 
			}
			
			set
			{
				if (this.entityData.Best3BidVolume == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.Best3BidVolume, this.entityData.Best3BidVolume);
				this.entityData.Best3BidVolume = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.Best3BidVolume, this.entityData.Best3BidVolume);
				OnPropertyChanged("Best3BidVolume");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Best1Offer property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsBest1OfferNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Best1Offer
		{
			get
			{
				return this.entityData.Best1Offer; 
			}
			
			set
			{
				if (this.entityData.Best1Offer == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.Best1Offer, this.entityData.Best1Offer);
				this.entityData.Best1Offer = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.Best1Offer, this.entityData.Best1Offer);
				OnPropertyChanged("Best1Offer");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Best1OfferVolume property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsBest1OfferVolumeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Best1OfferVolume
		{
			get
			{
				return this.entityData.Best1OfferVolume; 
			}
			
			set
			{
				if (this.entityData.Best1OfferVolume == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.Best1OfferVolume, this.entityData.Best1OfferVolume);
				this.entityData.Best1OfferVolume = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.Best1OfferVolume, this.entityData.Best1OfferVolume);
				OnPropertyChanged("Best1OfferVolume");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Best2Offer property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsBest2OfferNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Best2Offer
		{
			get
			{
				return this.entityData.Best2Offer; 
			}
			
			set
			{
				if (this.entityData.Best2Offer == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.Best2Offer, this.entityData.Best2Offer);
				this.entityData.Best2Offer = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.Best2Offer, this.entityData.Best2Offer);
				OnPropertyChanged("Best2Offer");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Best2OfferVolume property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsBest2OfferVolumeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Best2OfferVolume
		{
			get
			{
				return this.entityData.Best2OfferVolume; 
			}
			
			set
			{
				if (this.entityData.Best2OfferVolume == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.Best2OfferVolume, this.entityData.Best2OfferVolume);
				this.entityData.Best2OfferVolume = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.Best2OfferVolume, this.entityData.Best2OfferVolume);
				OnPropertyChanged("Best2OfferVolume");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Best3Offer property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsBest3OfferNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Best3Offer
		{
			get
			{
				return this.entityData.Best3Offer; 
			}
			
			set
			{
				if (this.entityData.Best3Offer == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.Best3Offer, this.entityData.Best3Offer);
				this.entityData.Best3Offer = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.Best3Offer, this.entityData.Best3Offer);
				OnPropertyChanged("Best3Offer");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Best3OfferVolume property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsBest3OfferVolumeNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Best3OfferVolume
		{
			get
			{
				return this.entityData.Best3OfferVolume; 
			}
			
			set
			{
				if (this.entityData.Best3OfferVolume == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.Best3OfferVolume, this.entityData.Best3OfferVolume);
				this.entityData.Best3OfferVolume = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.Best3OfferVolume, this.entityData.Best3OfferVolume);
				OnPropertyChanged("Best3OfferVolume");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BoardLost property. 
		///		
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsBoardLostNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? BoardLost
		{
			get
			{
				return this.entityData.BoardLost; 
			}
			
			set
			{
				if (this.entityData.BoardLost == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.BoardLost, this.entityData.BoardLost);
				this.entityData.BoardLost = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.BoardLost, this.entityData.BoardLost);
				OnPropertyChanged("BoardLost");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalRoom property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsTotalRoomNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? TotalRoom
		{
			get
			{
				return this.entityData.TotalRoom; 
			}
			
			set
			{
				if (this.entityData.TotalRoom == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.TotalRoom, this.entityData.TotalRoom);
				this.entityData.TotalRoom = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.TotalRoom, this.entityData.TotalRoom);
				OnPropertyChanged("TotalRoom");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CurrentRoom property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsCurrentRoomNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? CurrentRoom
		{
			get
			{
				return this.entityData.CurrentRoom; 
			}
			
			set
			{
				if (this.entityData.CurrentRoom == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.CurrentRoom, this.entityData.CurrentRoom);
				this.entityData.CurrentRoom = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.CurrentRoom, this.entityData.CurrentRoom);
				OnPropertyChanged("CurrentRoom");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StartRoom property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsStartRoomNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? StartRoom
		{
			get
			{
				return this.entityData.StartRoom; 
			}
			
			set
			{
				if (this.entityData.StartRoom == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.StartRoom, this.entityData.StartRoom);
				this.entityData.StartRoom = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.StartRoom, this.entityData.StartRoom);
				OnPropertyChanged("StartRoom");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Sequence property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsSequenceNull() and perform business logic appropriately.
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Sequence
		{
			get
			{
				return this.entityData.Sequence; 
			}
			
			set
			{
				if (this.entityData.Sequence == value)
					return;
					
				OnColumnChanging(SecurityRealtimeColumn.Sequence, this.entityData.Sequence);
				this.entityData.Sequence = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SecurityRealtimeColumn.Sequence, this.entityData.Sequence);
				OnPropertyChanged("Sequence");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("StockSymbol", "Stock Symbol", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("StockType", "Stock Type", 1));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SecurityName", "Security Name", 25));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SectorNo", "Sector No", 1));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Designated", "Designated", 1));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Suspension", "Suspension", 1));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Delist", "Delist", 1));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("HaltResumeFlag", "Halt Resume Flag", 1));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Split", "Split", 1));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Benefit", "Benefit", 1));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Meeting", "Meeting", 1));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Notice", "Notice", 1));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ClientidRequired", "Clientid Required", 1));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("IssueDate", "Issue Date", 6));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MatureDate", "Mature Date", 6));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SdcFlag", "Sdc Flag", 1));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PriorCloseDate", "Prior Close Date", 6));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "security_realtime"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"id", "TradeDate", "Stockno", "StockSymbol", "StockType", "Ceiling", "Floor", "BigLotValue", "SecurityName", "SectorNo", "Designated", "SUSPENSION", "Delist", "HaltResumeFlag", "SPLIT", "Benefit", "Meeting", "Notice", "ClientidRequired", "CouponRate", "IssueDate", "MatureDate", "AvrPrice", "ParValue", "SDCFlag", "PriorClosePrice", "PriorCloseDate", "ProjectOpen", "OpenPrice", "Last", "LastVol", "LastVal", "Highest", "Lowest", "Totalshares", "TotalValue", "AccumulateDeal", "BigDeal", "BigVolume", "BigValue", "OddDeal", "OddVolume", "OddValue", "Best1Bid", "Best1BidVolume", "Best2Bid", "Best2BidVolume", "Best3Bid", "Best3BidVolume", "Best1Offer", "Best1OfferVolume", "Best2Offer", "Best2OfferVolume", "Best3Offer", "Best3OfferVolume", "BoardLost", "TotalRoom", "CurrentRoom", "StartRoom", "Sequence"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SecurityRealtimeEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SecurityRealtime) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SecurityRealtime>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SecurityRealtime);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SecurityRealtime Entity 
		///</summary>
		protected virtual SecurityRealtime Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SecurityRealtime copy = new SecurityRealtime();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.TradeDate = this.TradeDate;
				copy.Stockno = this.Stockno;
				copy.StockSymbol = this.StockSymbol;
				copy.StockType = this.StockType;
				copy.Ceiling = this.Ceiling;
				copy.Floor = this.Floor;
				copy.BigLotValue = this.BigLotValue;
				copy.SecurityName = this.SecurityName;
				copy.SectorNo = this.SectorNo;
				copy.Designated = this.Designated;
				copy.Suspension = this.Suspension;
				copy.Delist = this.Delist;
				copy.HaltResumeFlag = this.HaltResumeFlag;
				copy.Split = this.Split;
				copy.Benefit = this.Benefit;
				copy.Meeting = this.Meeting;
				copy.Notice = this.Notice;
				copy.ClientidRequired = this.ClientidRequired;
				copy.CouponRate = this.CouponRate;
				copy.IssueDate = this.IssueDate;
				copy.MatureDate = this.MatureDate;
				copy.AvrPrice = this.AvrPrice;
				copy.ParValue = this.ParValue;
				copy.SdcFlag = this.SdcFlag;
				copy.PriorClosePrice = this.PriorClosePrice;
				copy.PriorCloseDate = this.PriorCloseDate;
				copy.ProjectOpen = this.ProjectOpen;
				copy.OpenPrice = this.OpenPrice;
				copy.Last = this.Last;
				copy.LastVol = this.LastVol;
				copy.LastVal = this.LastVal;
				copy.Highest = this.Highest;
				copy.Lowest = this.Lowest;
				copy.Totalshares = this.Totalshares;
				copy.TotalValue = this.TotalValue;
				copy.AccumulateDeal = this.AccumulateDeal;
				copy.BigDeal = this.BigDeal;
				copy.BigVolume = this.BigVolume;
				copy.BigValue = this.BigValue;
				copy.OddDeal = this.OddDeal;
				copy.OddVolume = this.OddVolume;
				copy.OddValue = this.OddValue;
				copy.Best1Bid = this.Best1Bid;
				copy.Best1BidVolume = this.Best1BidVolume;
				copy.Best2Bid = this.Best2Bid;
				copy.Best2BidVolume = this.Best2BidVolume;
				copy.Best3Bid = this.Best3Bid;
				copy.Best3BidVolume = this.Best3BidVolume;
				copy.Best1Offer = this.Best1Offer;
				copy.Best1OfferVolume = this.Best1OfferVolume;
				copy.Best2Offer = this.Best2Offer;
				copy.Best2OfferVolume = this.Best2OfferVolume;
				copy.Best3Offer = this.Best3Offer;
				copy.Best3OfferVolume = this.Best3OfferVolume;
				copy.BoardLost = this.BoardLost;
				copy.TotalRoom = this.TotalRoom;
				copy.CurrentRoom = this.CurrentRoom;
				copy.StartRoom = this.StartRoom;
				copy.Sequence = this.Sequence;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SecurityRealtime Entity 
		///</summary>
		public virtual SecurityRealtime Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SecurityRealtime Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SecurityRealtime DeepCopy()
		{
			return EntityHelper.Clone<SecurityRealtime>(this as SecurityRealtime);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SecurityRealtimeEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SecurityRealtimeEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SecurityRealtimeEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SecurityRealtimeColumn column)
		{
			switch(column)
			{
					case SecurityRealtimeColumn.Id:
					return entityData.Id != _originalData.Id;
					case SecurityRealtimeColumn.TradeDate:
					return entityData.TradeDate != _originalData.TradeDate;
					case SecurityRealtimeColumn.Stockno:
					return entityData.Stockno != _originalData.Stockno;
					case SecurityRealtimeColumn.StockSymbol:
					return entityData.StockSymbol != _originalData.StockSymbol;
					case SecurityRealtimeColumn.StockType:
					return entityData.StockType != _originalData.StockType;
					case SecurityRealtimeColumn.Ceiling:
					return entityData.Ceiling != _originalData.Ceiling;
					case SecurityRealtimeColumn.Floor:
					return entityData.Floor != _originalData.Floor;
					case SecurityRealtimeColumn.BigLotValue:
					return entityData.BigLotValue != _originalData.BigLotValue;
					case SecurityRealtimeColumn.SecurityName:
					return entityData.SecurityName != _originalData.SecurityName;
					case SecurityRealtimeColumn.SectorNo:
					return entityData.SectorNo != _originalData.SectorNo;
					case SecurityRealtimeColumn.Designated:
					return entityData.Designated != _originalData.Designated;
					case SecurityRealtimeColumn.Suspension:
					return entityData.Suspension != _originalData.Suspension;
					case SecurityRealtimeColumn.Delist:
					return entityData.Delist != _originalData.Delist;
					case SecurityRealtimeColumn.HaltResumeFlag:
					return entityData.HaltResumeFlag != _originalData.HaltResumeFlag;
					case SecurityRealtimeColumn.Split:
					return entityData.Split != _originalData.Split;
					case SecurityRealtimeColumn.Benefit:
					return entityData.Benefit != _originalData.Benefit;
					case SecurityRealtimeColumn.Meeting:
					return entityData.Meeting != _originalData.Meeting;
					case SecurityRealtimeColumn.Notice:
					return entityData.Notice != _originalData.Notice;
					case SecurityRealtimeColumn.ClientidRequired:
					return entityData.ClientidRequired != _originalData.ClientidRequired;
					case SecurityRealtimeColumn.CouponRate:
					return entityData.CouponRate != _originalData.CouponRate;
					case SecurityRealtimeColumn.IssueDate:
					return entityData.IssueDate != _originalData.IssueDate;
					case SecurityRealtimeColumn.MatureDate:
					return entityData.MatureDate != _originalData.MatureDate;
					case SecurityRealtimeColumn.AvrPrice:
					return entityData.AvrPrice != _originalData.AvrPrice;
					case SecurityRealtimeColumn.ParValue:
					return entityData.ParValue != _originalData.ParValue;
					case SecurityRealtimeColumn.SdcFlag:
					return entityData.SdcFlag != _originalData.SdcFlag;
					case SecurityRealtimeColumn.PriorClosePrice:
					return entityData.PriorClosePrice != _originalData.PriorClosePrice;
					case SecurityRealtimeColumn.PriorCloseDate:
					return entityData.PriorCloseDate != _originalData.PriorCloseDate;
					case SecurityRealtimeColumn.ProjectOpen:
					return entityData.ProjectOpen != _originalData.ProjectOpen;
					case SecurityRealtimeColumn.OpenPrice:
					return entityData.OpenPrice != _originalData.OpenPrice;
					case SecurityRealtimeColumn.Last:
					return entityData.Last != _originalData.Last;
					case SecurityRealtimeColumn.LastVol:
					return entityData.LastVol != _originalData.LastVol;
					case SecurityRealtimeColumn.LastVal:
					return entityData.LastVal != _originalData.LastVal;
					case SecurityRealtimeColumn.Highest:
					return entityData.Highest != _originalData.Highest;
					case SecurityRealtimeColumn.Lowest:
					return entityData.Lowest != _originalData.Lowest;
					case SecurityRealtimeColumn.Totalshares:
					return entityData.Totalshares != _originalData.Totalshares;
					case SecurityRealtimeColumn.TotalValue:
					return entityData.TotalValue != _originalData.TotalValue;
					case SecurityRealtimeColumn.AccumulateDeal:
					return entityData.AccumulateDeal != _originalData.AccumulateDeal;
					case SecurityRealtimeColumn.BigDeal:
					return entityData.BigDeal != _originalData.BigDeal;
					case SecurityRealtimeColumn.BigVolume:
					return entityData.BigVolume != _originalData.BigVolume;
					case SecurityRealtimeColumn.BigValue:
					return entityData.BigValue != _originalData.BigValue;
					case SecurityRealtimeColumn.OddDeal:
					return entityData.OddDeal != _originalData.OddDeal;
					case SecurityRealtimeColumn.OddVolume:
					return entityData.OddVolume != _originalData.OddVolume;
					case SecurityRealtimeColumn.OddValue:
					return entityData.OddValue != _originalData.OddValue;
					case SecurityRealtimeColumn.Best1Bid:
					return entityData.Best1Bid != _originalData.Best1Bid;
					case SecurityRealtimeColumn.Best1BidVolume:
					return entityData.Best1BidVolume != _originalData.Best1BidVolume;
					case SecurityRealtimeColumn.Best2Bid:
					return entityData.Best2Bid != _originalData.Best2Bid;
					case SecurityRealtimeColumn.Best2BidVolume:
					return entityData.Best2BidVolume != _originalData.Best2BidVolume;
					case SecurityRealtimeColumn.Best3Bid:
					return entityData.Best3Bid != _originalData.Best3Bid;
					case SecurityRealtimeColumn.Best3BidVolume:
					return entityData.Best3BidVolume != _originalData.Best3BidVolume;
					case SecurityRealtimeColumn.Best1Offer:
					return entityData.Best1Offer != _originalData.Best1Offer;
					case SecurityRealtimeColumn.Best1OfferVolume:
					return entityData.Best1OfferVolume != _originalData.Best1OfferVolume;
					case SecurityRealtimeColumn.Best2Offer:
					return entityData.Best2Offer != _originalData.Best2Offer;
					case SecurityRealtimeColumn.Best2OfferVolume:
					return entityData.Best2OfferVolume != _originalData.Best2OfferVolume;
					case SecurityRealtimeColumn.Best3Offer:
					return entityData.Best3Offer != _originalData.Best3Offer;
					case SecurityRealtimeColumn.Best3OfferVolume:
					return entityData.Best3OfferVolume != _originalData.Best3OfferVolume;
					case SecurityRealtimeColumn.BoardLost:
					return entityData.BoardLost != _originalData.BoardLost;
					case SecurityRealtimeColumn.TotalRoom:
					return entityData.TotalRoom != _originalData.TotalRoom;
					case SecurityRealtimeColumn.CurrentRoom:
					return entityData.CurrentRoom != _originalData.CurrentRoom;
					case SecurityRealtimeColumn.StartRoom:
					return entityData.StartRoom != _originalData.StartRoom;
					case SecurityRealtimeColumn.Sequence:
					return entityData.Sequence != _originalData.Sequence;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SecurityRealtimeColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.TradeDate != _originalData.TradeDate;
			result = result || entityData.Stockno != _originalData.Stockno;
			result = result || entityData.StockSymbol != _originalData.StockSymbol;
			result = result || entityData.StockType != _originalData.StockType;
			result = result || entityData.Ceiling != _originalData.Ceiling;
			result = result || entityData.Floor != _originalData.Floor;
			result = result || entityData.BigLotValue != _originalData.BigLotValue;
			result = result || entityData.SecurityName != _originalData.SecurityName;
			result = result || entityData.SectorNo != _originalData.SectorNo;
			result = result || entityData.Designated != _originalData.Designated;
			result = result || entityData.Suspension != _originalData.Suspension;
			result = result || entityData.Delist != _originalData.Delist;
			result = result || entityData.HaltResumeFlag != _originalData.HaltResumeFlag;
			result = result || entityData.Split != _originalData.Split;
			result = result || entityData.Benefit != _originalData.Benefit;
			result = result || entityData.Meeting != _originalData.Meeting;
			result = result || entityData.Notice != _originalData.Notice;
			result = result || entityData.ClientidRequired != _originalData.ClientidRequired;
			result = result || entityData.CouponRate != _originalData.CouponRate;
			result = result || entityData.IssueDate != _originalData.IssueDate;
			result = result || entityData.MatureDate != _originalData.MatureDate;
			result = result || entityData.AvrPrice != _originalData.AvrPrice;
			result = result || entityData.ParValue != _originalData.ParValue;
			result = result || entityData.SdcFlag != _originalData.SdcFlag;
			result = result || entityData.PriorClosePrice != _originalData.PriorClosePrice;
			result = result || entityData.PriorCloseDate != _originalData.PriorCloseDate;
			result = result || entityData.ProjectOpen != _originalData.ProjectOpen;
			result = result || entityData.OpenPrice != _originalData.OpenPrice;
			result = result || entityData.Last != _originalData.Last;
			result = result || entityData.LastVol != _originalData.LastVol;
			result = result || entityData.LastVal != _originalData.LastVal;
			result = result || entityData.Highest != _originalData.Highest;
			result = result || entityData.Lowest != _originalData.Lowest;
			result = result || entityData.Totalshares != _originalData.Totalshares;
			result = result || entityData.TotalValue != _originalData.TotalValue;
			result = result || entityData.AccumulateDeal != _originalData.AccumulateDeal;
			result = result || entityData.BigDeal != _originalData.BigDeal;
			result = result || entityData.BigVolume != _originalData.BigVolume;
			result = result || entityData.BigValue != _originalData.BigValue;
			result = result || entityData.OddDeal != _originalData.OddDeal;
			result = result || entityData.OddVolume != _originalData.OddVolume;
			result = result || entityData.OddValue != _originalData.OddValue;
			result = result || entityData.Best1Bid != _originalData.Best1Bid;
			result = result || entityData.Best1BidVolume != _originalData.Best1BidVolume;
			result = result || entityData.Best2Bid != _originalData.Best2Bid;
			result = result || entityData.Best2BidVolume != _originalData.Best2BidVolume;
			result = result || entityData.Best3Bid != _originalData.Best3Bid;
			result = result || entityData.Best3BidVolume != _originalData.Best3BidVolume;
			result = result || entityData.Best1Offer != _originalData.Best1Offer;
			result = result || entityData.Best1OfferVolume != _originalData.Best1OfferVolume;
			result = result || entityData.Best2Offer != _originalData.Best2Offer;
			result = result || entityData.Best2OfferVolume != _originalData.Best2OfferVolume;
			result = result || entityData.Best3Offer != _originalData.Best3Offer;
			result = result || entityData.Best3OfferVolume != _originalData.Best3OfferVolume;
			result = result || entityData.BoardLost != _originalData.BoardLost;
			result = result || entityData.TotalRoom != _originalData.TotalRoom;
			result = result || entityData.CurrentRoom != _originalData.CurrentRoom;
			result = result || entityData.StartRoom != _originalData.StartRoom;
			result = result || entityData.Sequence != _originalData.Sequence;
			return result;
		}	
		
		///<summary>
		///  Returns a SecurityRealtime Entity with the original data.
		///</summary>
		public SecurityRealtime GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSecurityRealtime(
				_originalData.TradeDate,
				_originalData.Stockno,
				_originalData.StockSymbol,
				_originalData.StockType,
				_originalData.Ceiling,
				_originalData.Floor,
				_originalData.BigLotValue,
				_originalData.SecurityName,
				_originalData.SectorNo,
				_originalData.Designated,
				_originalData.Suspension,
				_originalData.Delist,
				_originalData.HaltResumeFlag,
				_originalData.Split,
				_originalData.Benefit,
				_originalData.Meeting,
				_originalData.Notice,
				_originalData.ClientidRequired,
				_originalData.CouponRate,
				_originalData.IssueDate,
				_originalData.MatureDate,
				_originalData.AvrPrice,
				_originalData.ParValue,
				_originalData.SdcFlag,
				_originalData.PriorClosePrice,
				_originalData.PriorCloseDate,
				_originalData.ProjectOpen,
				_originalData.OpenPrice,
				_originalData.Last,
				_originalData.LastVol,
				_originalData.LastVal,
				_originalData.Highest,
				_originalData.Lowest,
				_originalData.Totalshares,
				_originalData.TotalValue,
				_originalData.AccumulateDeal,
				_originalData.BigDeal,
				_originalData.BigVolume,
				_originalData.BigValue,
				_originalData.OddDeal,
				_originalData.OddVolume,
				_originalData.OddValue,
				_originalData.Best1Bid,
				_originalData.Best1BidVolume,
				_originalData.Best2Bid,
				_originalData.Best2BidVolume,
				_originalData.Best3Bid,
				_originalData.Best3BidVolume,
				_originalData.Best1Offer,
				_originalData.Best1OfferVolume,
				_originalData.Best2Offer,
				_originalData.Best2OfferVolume,
				_originalData.Best3Offer,
				_originalData.Best3OfferVolume,
				_originalData.BoardLost,
				_originalData.TotalRoom,
				_originalData.CurrentRoom,
				_originalData.StartRoom,
				_originalData.Sequence
				);
				
			return (SecurityRealtime)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SecurityRealtimeBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SecurityRealtimeBase)
				return ValueEquals(this, (SecurityRealtimeBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SecurityRealtimeBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.TradeDate == null) ? string.Empty : this.TradeDate.ToString()).GetHashCode() ^ 
					((this.Stockno == null) ? string.Empty : this.Stockno.ToString()).GetHashCode() ^ 
					((this.StockSymbol == null) ? string.Empty : this.StockSymbol.ToString()).GetHashCode() ^ 
					((this.StockType == null) ? string.Empty : this.StockType.ToString()).GetHashCode() ^ 
					((this.Ceiling == null) ? string.Empty : this.Ceiling.ToString()).GetHashCode() ^ 
					((this.Floor == null) ? string.Empty : this.Floor.ToString()).GetHashCode() ^ 
					((this.BigLotValue == null) ? string.Empty : this.BigLotValue.ToString()).GetHashCode() ^ 
					((this.SecurityName == null) ? string.Empty : this.SecurityName.ToString()).GetHashCode() ^ 
					((this.SectorNo == null) ? string.Empty : this.SectorNo.ToString()).GetHashCode() ^ 
					((this.Designated == null) ? string.Empty : this.Designated.ToString()).GetHashCode() ^ 
					((this.Suspension == null) ? string.Empty : this.Suspension.ToString()).GetHashCode() ^ 
					((this.Delist == null) ? string.Empty : this.Delist.ToString()).GetHashCode() ^ 
					((this.HaltResumeFlag == null) ? string.Empty : this.HaltResumeFlag.ToString()).GetHashCode() ^ 
					((this.Split == null) ? string.Empty : this.Split.ToString()).GetHashCode() ^ 
					((this.Benefit == null) ? string.Empty : this.Benefit.ToString()).GetHashCode() ^ 
					((this.Meeting == null) ? string.Empty : this.Meeting.ToString()).GetHashCode() ^ 
					((this.Notice == null) ? string.Empty : this.Notice.ToString()).GetHashCode() ^ 
					((this.ClientidRequired == null) ? string.Empty : this.ClientidRequired.ToString()).GetHashCode() ^ 
					((this.CouponRate == null) ? string.Empty : this.CouponRate.ToString()).GetHashCode() ^ 
					((this.IssueDate == null) ? string.Empty : this.IssueDate.ToString()).GetHashCode() ^ 
					((this.MatureDate == null) ? string.Empty : this.MatureDate.ToString()).GetHashCode() ^ 
					((this.AvrPrice == null) ? string.Empty : this.AvrPrice.ToString()).GetHashCode() ^ 
					((this.ParValue == null) ? string.Empty : this.ParValue.ToString()).GetHashCode() ^ 
					((this.SdcFlag == null) ? string.Empty : this.SdcFlag.ToString()).GetHashCode() ^ 
					((this.PriorClosePrice == null) ? string.Empty : this.PriorClosePrice.ToString()).GetHashCode() ^ 
					((this.PriorCloseDate == null) ? string.Empty : this.PriorCloseDate.ToString()).GetHashCode() ^ 
					((this.ProjectOpen == null) ? string.Empty : this.ProjectOpen.ToString()).GetHashCode() ^ 
					((this.OpenPrice == null) ? string.Empty : this.OpenPrice.ToString()).GetHashCode() ^ 
					((this.Last == null) ? string.Empty : this.Last.ToString()).GetHashCode() ^ 
					((this.LastVol == null) ? string.Empty : this.LastVol.ToString()).GetHashCode() ^ 
					((this.LastVal == null) ? string.Empty : this.LastVal.ToString()).GetHashCode() ^ 
					((this.Highest == null) ? string.Empty : this.Highest.ToString()).GetHashCode() ^ 
					((this.Lowest == null) ? string.Empty : this.Lowest.ToString()).GetHashCode() ^ 
					((this.Totalshares == null) ? string.Empty : this.Totalshares.ToString()).GetHashCode() ^ 
					((this.TotalValue == null) ? string.Empty : this.TotalValue.ToString()).GetHashCode() ^ 
					((this.AccumulateDeal == null) ? string.Empty : this.AccumulateDeal.ToString()).GetHashCode() ^ 
					((this.BigDeal == null) ? string.Empty : this.BigDeal.ToString()).GetHashCode() ^ 
					((this.BigVolume == null) ? string.Empty : this.BigVolume.ToString()).GetHashCode() ^ 
					((this.BigValue == null) ? string.Empty : this.BigValue.ToString()).GetHashCode() ^ 
					((this.OddDeal == null) ? string.Empty : this.OddDeal.ToString()).GetHashCode() ^ 
					((this.OddVolume == null) ? string.Empty : this.OddVolume.ToString()).GetHashCode() ^ 
					((this.OddValue == null) ? string.Empty : this.OddValue.ToString()).GetHashCode() ^ 
					((this.Best1Bid == null) ? string.Empty : this.Best1Bid.ToString()).GetHashCode() ^ 
					((this.Best1BidVolume == null) ? string.Empty : this.Best1BidVolume.ToString()).GetHashCode() ^ 
					((this.Best2Bid == null) ? string.Empty : this.Best2Bid.ToString()).GetHashCode() ^ 
					((this.Best2BidVolume == null) ? string.Empty : this.Best2BidVolume.ToString()).GetHashCode() ^ 
					((this.Best3Bid == null) ? string.Empty : this.Best3Bid.ToString()).GetHashCode() ^ 
					((this.Best3BidVolume == null) ? string.Empty : this.Best3BidVolume.ToString()).GetHashCode() ^ 
					((this.Best1Offer == null) ? string.Empty : this.Best1Offer.ToString()).GetHashCode() ^ 
					((this.Best1OfferVolume == null) ? string.Empty : this.Best1OfferVolume.ToString()).GetHashCode() ^ 
					((this.Best2Offer == null) ? string.Empty : this.Best2Offer.ToString()).GetHashCode() ^ 
					((this.Best2OfferVolume == null) ? string.Empty : this.Best2OfferVolume.ToString()).GetHashCode() ^ 
					((this.Best3Offer == null) ? string.Empty : this.Best3Offer.ToString()).GetHashCode() ^ 
					((this.Best3OfferVolume == null) ? string.Empty : this.Best3OfferVolume.ToString()).GetHashCode() ^ 
					((this.BoardLost == null) ? string.Empty : this.BoardLost.ToString()).GetHashCode() ^ 
					((this.TotalRoom == null) ? string.Empty : this.TotalRoom.ToString()).GetHashCode() ^ 
					((this.CurrentRoom == null) ? string.Empty : this.CurrentRoom.ToString()).GetHashCode() ^ 
					((this.StartRoom == null) ? string.Empty : this.StartRoom.ToString()).GetHashCode() ^ 
					((this.Sequence == null) ? string.Empty : this.Sequence.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SecurityRealtimeBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SecurityRealtimeBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SecurityRealtimeBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SecurityRealtimeBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SecurityRealtimeBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SecurityRealtimeBase Object1, SecurityRealtimeBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.TradeDate != null && Object2.TradeDate != null )
			{
				if (Object1.TradeDate != Object2.TradeDate)
					equal = false;
			}
			else if (Object1.TradeDate == null ^ Object2.TradeDate == null )
			{
				equal = false;
			}
			if ( Object1.Stockno != null && Object2.Stockno != null )
			{
				if (Object1.Stockno != Object2.Stockno)
					equal = false;
			}
			else if (Object1.Stockno == null ^ Object2.Stockno == null )
			{
				equal = false;
			}
			if ( Object1.StockSymbol != null && Object2.StockSymbol != null )
			{
				if (Object1.StockSymbol != Object2.StockSymbol)
					equal = false;
			}
			else if (Object1.StockSymbol == null ^ Object2.StockSymbol == null )
			{
				equal = false;
			}
			if ( Object1.StockType != null && Object2.StockType != null )
			{
				if (Object1.StockType != Object2.StockType)
					equal = false;
			}
			else if (Object1.StockType == null ^ Object2.StockType == null )
			{
				equal = false;
			}
			if ( Object1.Ceiling != null && Object2.Ceiling != null )
			{
				if (Object1.Ceiling != Object2.Ceiling)
					equal = false;
			}
			else if (Object1.Ceiling == null ^ Object2.Ceiling == null )
			{
				equal = false;
			}
			if ( Object1.Floor != null && Object2.Floor != null )
			{
				if (Object1.Floor != Object2.Floor)
					equal = false;
			}
			else if (Object1.Floor == null ^ Object2.Floor == null )
			{
				equal = false;
			}
			if ( Object1.BigLotValue != null && Object2.BigLotValue != null )
			{
				if (Object1.BigLotValue != Object2.BigLotValue)
					equal = false;
			}
			else if (Object1.BigLotValue == null ^ Object2.BigLotValue == null )
			{
				equal = false;
			}
			if ( Object1.SecurityName != null && Object2.SecurityName != null )
			{
				if (Object1.SecurityName != Object2.SecurityName)
					equal = false;
			}
			else if (Object1.SecurityName == null ^ Object2.SecurityName == null )
			{
				equal = false;
			}
			if ( Object1.SectorNo != null && Object2.SectorNo != null )
			{
				if (Object1.SectorNo != Object2.SectorNo)
					equal = false;
			}
			else if (Object1.SectorNo == null ^ Object2.SectorNo == null )
			{
				equal = false;
			}
			if ( Object1.Designated != null && Object2.Designated != null )
			{
				if (Object1.Designated != Object2.Designated)
					equal = false;
			}
			else if (Object1.Designated == null ^ Object2.Designated == null )
			{
				equal = false;
			}
			if ( Object1.Suspension != null && Object2.Suspension != null )
			{
				if (Object1.Suspension != Object2.Suspension)
					equal = false;
			}
			else if (Object1.Suspension == null ^ Object2.Suspension == null )
			{
				equal = false;
			}
			if ( Object1.Delist != null && Object2.Delist != null )
			{
				if (Object1.Delist != Object2.Delist)
					equal = false;
			}
			else if (Object1.Delist == null ^ Object2.Delist == null )
			{
				equal = false;
			}
			if ( Object1.HaltResumeFlag != null && Object2.HaltResumeFlag != null )
			{
				if (Object1.HaltResumeFlag != Object2.HaltResumeFlag)
					equal = false;
			}
			else if (Object1.HaltResumeFlag == null ^ Object2.HaltResumeFlag == null )
			{
				equal = false;
			}
			if ( Object1.Split != null && Object2.Split != null )
			{
				if (Object1.Split != Object2.Split)
					equal = false;
			}
			else if (Object1.Split == null ^ Object2.Split == null )
			{
				equal = false;
			}
			if ( Object1.Benefit != null && Object2.Benefit != null )
			{
				if (Object1.Benefit != Object2.Benefit)
					equal = false;
			}
			else if (Object1.Benefit == null ^ Object2.Benefit == null )
			{
				equal = false;
			}
			if ( Object1.Meeting != null && Object2.Meeting != null )
			{
				if (Object1.Meeting != Object2.Meeting)
					equal = false;
			}
			else if (Object1.Meeting == null ^ Object2.Meeting == null )
			{
				equal = false;
			}
			if ( Object1.Notice != null && Object2.Notice != null )
			{
				if (Object1.Notice != Object2.Notice)
					equal = false;
			}
			else if (Object1.Notice == null ^ Object2.Notice == null )
			{
				equal = false;
			}
			if ( Object1.ClientidRequired != null && Object2.ClientidRequired != null )
			{
				if (Object1.ClientidRequired != Object2.ClientidRequired)
					equal = false;
			}
			else if (Object1.ClientidRequired == null ^ Object2.ClientidRequired == null )
			{
				equal = false;
			}
			if ( Object1.CouponRate != null && Object2.CouponRate != null )
			{
				if (Object1.CouponRate != Object2.CouponRate)
					equal = false;
			}
			else if (Object1.CouponRate == null ^ Object2.CouponRate == null )
			{
				equal = false;
			}
			if ( Object1.IssueDate != null && Object2.IssueDate != null )
			{
				if (Object1.IssueDate != Object2.IssueDate)
					equal = false;
			}
			else if (Object1.IssueDate == null ^ Object2.IssueDate == null )
			{
				equal = false;
			}
			if ( Object1.MatureDate != null && Object2.MatureDate != null )
			{
				if (Object1.MatureDate != Object2.MatureDate)
					equal = false;
			}
			else if (Object1.MatureDate == null ^ Object2.MatureDate == null )
			{
				equal = false;
			}
			if ( Object1.AvrPrice != null && Object2.AvrPrice != null )
			{
				if (Object1.AvrPrice != Object2.AvrPrice)
					equal = false;
			}
			else if (Object1.AvrPrice == null ^ Object2.AvrPrice == null )
			{
				equal = false;
			}
			if ( Object1.ParValue != null && Object2.ParValue != null )
			{
				if (Object1.ParValue != Object2.ParValue)
					equal = false;
			}
			else if (Object1.ParValue == null ^ Object2.ParValue == null )
			{
				equal = false;
			}
			if ( Object1.SdcFlag != null && Object2.SdcFlag != null )
			{
				if (Object1.SdcFlag != Object2.SdcFlag)
					equal = false;
			}
			else if (Object1.SdcFlag == null ^ Object2.SdcFlag == null )
			{
				equal = false;
			}
			if ( Object1.PriorClosePrice != null && Object2.PriorClosePrice != null )
			{
				if (Object1.PriorClosePrice != Object2.PriorClosePrice)
					equal = false;
			}
			else if (Object1.PriorClosePrice == null ^ Object2.PriorClosePrice == null )
			{
				equal = false;
			}
			if ( Object1.PriorCloseDate != null && Object2.PriorCloseDate != null )
			{
				if (Object1.PriorCloseDate != Object2.PriorCloseDate)
					equal = false;
			}
			else if (Object1.PriorCloseDate == null ^ Object2.PriorCloseDate == null )
			{
				equal = false;
			}
			if ( Object1.ProjectOpen != null && Object2.ProjectOpen != null )
			{
				if (Object1.ProjectOpen != Object2.ProjectOpen)
					equal = false;
			}
			else if (Object1.ProjectOpen == null ^ Object2.ProjectOpen == null )
			{
				equal = false;
			}
			if ( Object1.OpenPrice != null && Object2.OpenPrice != null )
			{
				if (Object1.OpenPrice != Object2.OpenPrice)
					equal = false;
			}
			else if (Object1.OpenPrice == null ^ Object2.OpenPrice == null )
			{
				equal = false;
			}
			if ( Object1.Last != null && Object2.Last != null )
			{
				if (Object1.Last != Object2.Last)
					equal = false;
			}
			else if (Object1.Last == null ^ Object2.Last == null )
			{
				equal = false;
			}
			if ( Object1.LastVol != null && Object2.LastVol != null )
			{
				if (Object1.LastVol != Object2.LastVol)
					equal = false;
			}
			else if (Object1.LastVol == null ^ Object2.LastVol == null )
			{
				equal = false;
			}
			if ( Object1.LastVal != null && Object2.LastVal != null )
			{
				if (Object1.LastVal != Object2.LastVal)
					equal = false;
			}
			else if (Object1.LastVal == null ^ Object2.LastVal == null )
			{
				equal = false;
			}
			if ( Object1.Highest != null && Object2.Highest != null )
			{
				if (Object1.Highest != Object2.Highest)
					equal = false;
			}
			else if (Object1.Highest == null ^ Object2.Highest == null )
			{
				equal = false;
			}
			if ( Object1.Lowest != null && Object2.Lowest != null )
			{
				if (Object1.Lowest != Object2.Lowest)
					equal = false;
			}
			else if (Object1.Lowest == null ^ Object2.Lowest == null )
			{
				equal = false;
			}
			if ( Object1.Totalshares != null && Object2.Totalshares != null )
			{
				if (Object1.Totalshares != Object2.Totalshares)
					equal = false;
			}
			else if (Object1.Totalshares == null ^ Object2.Totalshares == null )
			{
				equal = false;
			}
			if ( Object1.TotalValue != null && Object2.TotalValue != null )
			{
				if (Object1.TotalValue != Object2.TotalValue)
					equal = false;
			}
			else if (Object1.TotalValue == null ^ Object2.TotalValue == null )
			{
				equal = false;
			}
			if ( Object1.AccumulateDeal != null && Object2.AccumulateDeal != null )
			{
				if (Object1.AccumulateDeal != Object2.AccumulateDeal)
					equal = false;
			}
			else if (Object1.AccumulateDeal == null ^ Object2.AccumulateDeal == null )
			{
				equal = false;
			}
			if ( Object1.BigDeal != null && Object2.BigDeal != null )
			{
				if (Object1.BigDeal != Object2.BigDeal)
					equal = false;
			}
			else if (Object1.BigDeal == null ^ Object2.BigDeal == null )
			{
				equal = false;
			}
			if ( Object1.BigVolume != null && Object2.BigVolume != null )
			{
				if (Object1.BigVolume != Object2.BigVolume)
					equal = false;
			}
			else if (Object1.BigVolume == null ^ Object2.BigVolume == null )
			{
				equal = false;
			}
			if ( Object1.BigValue != null && Object2.BigValue != null )
			{
				if (Object1.BigValue != Object2.BigValue)
					equal = false;
			}
			else if (Object1.BigValue == null ^ Object2.BigValue == null )
			{
				equal = false;
			}
			if ( Object1.OddDeal != null && Object2.OddDeal != null )
			{
				if (Object1.OddDeal != Object2.OddDeal)
					equal = false;
			}
			else if (Object1.OddDeal == null ^ Object2.OddDeal == null )
			{
				equal = false;
			}
			if ( Object1.OddVolume != null && Object2.OddVolume != null )
			{
				if (Object1.OddVolume != Object2.OddVolume)
					equal = false;
			}
			else if (Object1.OddVolume == null ^ Object2.OddVolume == null )
			{
				equal = false;
			}
			if ( Object1.OddValue != null && Object2.OddValue != null )
			{
				if (Object1.OddValue != Object2.OddValue)
					equal = false;
			}
			else if (Object1.OddValue == null ^ Object2.OddValue == null )
			{
				equal = false;
			}
			if ( Object1.Best1Bid != null && Object2.Best1Bid != null )
			{
				if (Object1.Best1Bid != Object2.Best1Bid)
					equal = false;
			}
			else if (Object1.Best1Bid == null ^ Object2.Best1Bid == null )
			{
				equal = false;
			}
			if ( Object1.Best1BidVolume != null && Object2.Best1BidVolume != null )
			{
				if (Object1.Best1BidVolume != Object2.Best1BidVolume)
					equal = false;
			}
			else if (Object1.Best1BidVolume == null ^ Object2.Best1BidVolume == null )
			{
				equal = false;
			}
			if ( Object1.Best2Bid != null && Object2.Best2Bid != null )
			{
				if (Object1.Best2Bid != Object2.Best2Bid)
					equal = false;
			}
			else if (Object1.Best2Bid == null ^ Object2.Best2Bid == null )
			{
				equal = false;
			}
			if ( Object1.Best2BidVolume != null && Object2.Best2BidVolume != null )
			{
				if (Object1.Best2BidVolume != Object2.Best2BidVolume)
					equal = false;
			}
			else if (Object1.Best2BidVolume == null ^ Object2.Best2BidVolume == null )
			{
				equal = false;
			}
			if ( Object1.Best3Bid != null && Object2.Best3Bid != null )
			{
				if (Object1.Best3Bid != Object2.Best3Bid)
					equal = false;
			}
			else if (Object1.Best3Bid == null ^ Object2.Best3Bid == null )
			{
				equal = false;
			}
			if ( Object1.Best3BidVolume != null && Object2.Best3BidVolume != null )
			{
				if (Object1.Best3BidVolume != Object2.Best3BidVolume)
					equal = false;
			}
			else if (Object1.Best3BidVolume == null ^ Object2.Best3BidVolume == null )
			{
				equal = false;
			}
			if ( Object1.Best1Offer != null && Object2.Best1Offer != null )
			{
				if (Object1.Best1Offer != Object2.Best1Offer)
					equal = false;
			}
			else if (Object1.Best1Offer == null ^ Object2.Best1Offer == null )
			{
				equal = false;
			}
			if ( Object1.Best1OfferVolume != null && Object2.Best1OfferVolume != null )
			{
				if (Object1.Best1OfferVolume != Object2.Best1OfferVolume)
					equal = false;
			}
			else if (Object1.Best1OfferVolume == null ^ Object2.Best1OfferVolume == null )
			{
				equal = false;
			}
			if ( Object1.Best2Offer != null && Object2.Best2Offer != null )
			{
				if (Object1.Best2Offer != Object2.Best2Offer)
					equal = false;
			}
			else if (Object1.Best2Offer == null ^ Object2.Best2Offer == null )
			{
				equal = false;
			}
			if ( Object1.Best2OfferVolume != null && Object2.Best2OfferVolume != null )
			{
				if (Object1.Best2OfferVolume != Object2.Best2OfferVolume)
					equal = false;
			}
			else if (Object1.Best2OfferVolume == null ^ Object2.Best2OfferVolume == null )
			{
				equal = false;
			}
			if ( Object1.Best3Offer != null && Object2.Best3Offer != null )
			{
				if (Object1.Best3Offer != Object2.Best3Offer)
					equal = false;
			}
			else if (Object1.Best3Offer == null ^ Object2.Best3Offer == null )
			{
				equal = false;
			}
			if ( Object1.Best3OfferVolume != null && Object2.Best3OfferVolume != null )
			{
				if (Object1.Best3OfferVolume != Object2.Best3OfferVolume)
					equal = false;
			}
			else if (Object1.Best3OfferVolume == null ^ Object2.Best3OfferVolume == null )
			{
				equal = false;
			}
			if ( Object1.BoardLost != null && Object2.BoardLost != null )
			{
				if (Object1.BoardLost != Object2.BoardLost)
					equal = false;
			}
			else if (Object1.BoardLost == null ^ Object2.BoardLost == null )
			{
				equal = false;
			}
			if ( Object1.TotalRoom != null && Object2.TotalRoom != null )
			{
				if (Object1.TotalRoom != Object2.TotalRoom)
					equal = false;
			}
			else if (Object1.TotalRoom == null ^ Object2.TotalRoom == null )
			{
				equal = false;
			}
			if ( Object1.CurrentRoom != null && Object2.CurrentRoom != null )
			{
				if (Object1.CurrentRoom != Object2.CurrentRoom)
					equal = false;
			}
			else if (Object1.CurrentRoom == null ^ Object2.CurrentRoom == null )
			{
				equal = false;
			}
			if ( Object1.StartRoom != null && Object2.StartRoom != null )
			{
				if (Object1.StartRoom != Object2.StartRoom)
					equal = false;
			}
			else if (Object1.StartRoom == null ^ Object2.StartRoom == null )
			{
				equal = false;
			}
			if ( Object1.Sequence != null && Object2.Sequence != null )
			{
				if (Object1.Sequence != Object2.Sequence)
					equal = false;
			}
			else if (Object1.Sequence == null ^ Object2.Sequence == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SecurityRealtimeBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SecurityRealtimeComparer GetComparer()
        {
            return new SecurityRealtimeComparer();
        }
        */

        // Comparer delegates back to SecurityRealtime
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SecurityRealtime rhs, SecurityRealtimeColumn which)
        {
            switch (which)
            {
            	
            	
            	case SecurityRealtimeColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.TradeDate:
            		return this.TradeDate.Value.CompareTo(rhs.TradeDate.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.Stockno:
            		return this.Stockno.Value.CompareTo(rhs.Stockno.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.StockSymbol:
            		return this.StockSymbol.CompareTo(rhs.StockSymbol);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.StockType:
            		return this.StockType.CompareTo(rhs.StockType);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.Ceiling:
            		return this.Ceiling.Value.CompareTo(rhs.Ceiling.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.Floor:
            		return this.Floor.Value.CompareTo(rhs.Floor.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.BigLotValue:
            		return this.BigLotValue.Value.CompareTo(rhs.BigLotValue.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.SecurityName:
            		return this.SecurityName.CompareTo(rhs.SecurityName);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.SectorNo:
            		return this.SectorNo.CompareTo(rhs.SectorNo);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.Designated:
            		return this.Designated.CompareTo(rhs.Designated);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.Suspension:
            		return this.Suspension.CompareTo(rhs.Suspension);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.Delist:
            		return this.Delist.CompareTo(rhs.Delist);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.HaltResumeFlag:
            		return this.HaltResumeFlag.CompareTo(rhs.HaltResumeFlag);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.Split:
            		return this.Split.CompareTo(rhs.Split);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.Benefit:
            		return this.Benefit.CompareTo(rhs.Benefit);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.Meeting:
            		return this.Meeting.CompareTo(rhs.Meeting);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.Notice:
            		return this.Notice.CompareTo(rhs.Notice);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.ClientidRequired:
            		return this.ClientidRequired.CompareTo(rhs.ClientidRequired);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.CouponRate:
            		return this.CouponRate.Value.CompareTo(rhs.CouponRate.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.IssueDate:
            		return this.IssueDate.CompareTo(rhs.IssueDate);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.MatureDate:
            		return this.MatureDate.CompareTo(rhs.MatureDate);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.AvrPrice:
            		return this.AvrPrice.Value.CompareTo(rhs.AvrPrice.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.ParValue:
            		return this.ParValue.Value.CompareTo(rhs.ParValue.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.SdcFlag:
            		return this.SdcFlag.CompareTo(rhs.SdcFlag);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.PriorClosePrice:
            		return this.PriorClosePrice.Value.CompareTo(rhs.PriorClosePrice.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.PriorCloseDate:
            		return this.PriorCloseDate.CompareTo(rhs.PriorCloseDate);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.ProjectOpen:
            		return this.ProjectOpen.Value.CompareTo(rhs.ProjectOpen.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.OpenPrice:
            		return this.OpenPrice.Value.CompareTo(rhs.OpenPrice.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.Last:
            		return this.Last.Value.CompareTo(rhs.Last.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.LastVol:
            		return this.LastVol.Value.CompareTo(rhs.LastVol.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.LastVal:
            		return this.LastVal.Value.CompareTo(rhs.LastVal.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.Highest:
            		return this.Highest.Value.CompareTo(rhs.Highest.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.Lowest:
            		return this.Lowest.Value.CompareTo(rhs.Lowest.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.Totalshares:
            		return this.Totalshares.Value.CompareTo(rhs.Totalshares.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.TotalValue:
            		return this.TotalValue.Value.CompareTo(rhs.TotalValue.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.AccumulateDeal:
            		return this.AccumulateDeal.Value.CompareTo(rhs.AccumulateDeal.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.BigDeal:
            		return this.BigDeal.Value.CompareTo(rhs.BigDeal.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.BigVolume:
            		return this.BigVolume.Value.CompareTo(rhs.BigVolume.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.BigValue:
            		return this.BigValue.Value.CompareTo(rhs.BigValue.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.OddDeal:
            		return this.OddDeal.Value.CompareTo(rhs.OddDeal.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.OddVolume:
            		return this.OddVolume.Value.CompareTo(rhs.OddVolume.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.OddValue:
            		return this.OddValue.Value.CompareTo(rhs.OddValue.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.Best1Bid:
            		return this.Best1Bid.Value.CompareTo(rhs.Best1Bid.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.Best1BidVolume:
            		return this.Best1BidVolume.Value.CompareTo(rhs.Best1BidVolume.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.Best2Bid:
            		return this.Best2Bid.Value.CompareTo(rhs.Best2Bid.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.Best2BidVolume:
            		return this.Best2BidVolume.Value.CompareTo(rhs.Best2BidVolume.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.Best3Bid:
            		return this.Best3Bid.Value.CompareTo(rhs.Best3Bid.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.Best3BidVolume:
            		return this.Best3BidVolume.Value.CompareTo(rhs.Best3BidVolume.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.Best1Offer:
            		return this.Best1Offer.Value.CompareTo(rhs.Best1Offer.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.Best1OfferVolume:
            		return this.Best1OfferVolume.Value.CompareTo(rhs.Best1OfferVolume.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.Best2Offer:
            		return this.Best2Offer.Value.CompareTo(rhs.Best2Offer.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.Best2OfferVolume:
            		return this.Best2OfferVolume.Value.CompareTo(rhs.Best2OfferVolume.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.Best3Offer:
            		return this.Best3Offer.Value.CompareTo(rhs.Best3Offer.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.Best3OfferVolume:
            		return this.Best3OfferVolume.Value.CompareTo(rhs.Best3OfferVolume.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.BoardLost:
            		return this.BoardLost.Value.CompareTo(rhs.BoardLost.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.TotalRoom:
            		return this.TotalRoom.Value.CompareTo(rhs.TotalRoom.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.CurrentRoom:
            		return this.CurrentRoom.Value.CompareTo(rhs.CurrentRoom.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.StartRoom:
            		return this.StartRoom.Value.CompareTo(rhs.StartRoom.Value);
            		
            		                 
            	
            	
            	case SecurityRealtimeColumn.Sequence:
            		return this.Sequence.Value.CompareTo(rhs.Sequence.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SecurityRealtimeKey> Members
		
		// member variable for the EntityId property
		private SecurityRealtimeKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual SecurityRealtimeKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SecurityRealtimeKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SecurityRealtime")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{61}{60}- Id: {0}{60}- TradeDate: {1}{60}- Stockno: {2}{60}- StockSymbol: {3}{60}- StockType: {4}{60}- Ceiling: {5}{60}- Floor: {6}{60}- BigLotValue: {7}{60}- SecurityName: {8}{60}- SectorNo: {9}{60}- Designated: {10}{60}- Suspension: {11}{60}- Delist: {12}{60}- HaltResumeFlag: {13}{60}- Split: {14}{60}- Benefit: {15}{60}- Meeting: {16}{60}- Notice: {17}{60}- ClientidRequired: {18}{60}- CouponRate: {19}{60}- IssueDate: {20}{60}- MatureDate: {21}{60}- AvrPrice: {22}{60}- ParValue: {23}{60}- SdcFlag: {24}{60}- PriorClosePrice: {25}{60}- PriorCloseDate: {26}{60}- ProjectOpen: {27}{60}- OpenPrice: {28}{60}- Last: {29}{60}- LastVol: {30}{60}- LastVal: {31}{60}- Highest: {32}{60}- Lowest: {33}{60}- Totalshares: {34}{60}- TotalValue: {35}{60}- AccumulateDeal: {36}{60}- BigDeal: {37}{60}- BigVolume: {38}{60}- BigValue: {39}{60}- OddDeal: {40}{60}- OddVolume: {41}{60}- OddValue: {42}{60}- Best1Bid: {43}{60}- Best1BidVolume: {44}{60}- Best2Bid: {45}{60}- Best2BidVolume: {46}{60}- Best3Bid: {47}{60}- Best3BidVolume: {48}{60}- Best1Offer: {49}{60}- Best1OfferVolume: {50}{60}- Best2Offer: {51}{60}- Best2OfferVolume: {52}{60}- Best3Offer: {53}{60}- Best3OfferVolume: {54}{60}- BoardLost: {55}{60}- TotalRoom: {56}{60}- CurrentRoom: {57}{60}- StartRoom: {58}{60}- Sequence: {59}{60}{62}", 
				this.Id,
				(this.TradeDate == null) ? string.Empty : this.TradeDate.ToString(),
				(this.Stockno == null) ? string.Empty : this.Stockno.ToString(),
				(this.StockSymbol == null) ? string.Empty : this.StockSymbol.ToString(),
				(this.StockType == null) ? string.Empty : this.StockType.ToString(),
				(this.Ceiling == null) ? string.Empty : this.Ceiling.ToString(),
				(this.Floor == null) ? string.Empty : this.Floor.ToString(),
				(this.BigLotValue == null) ? string.Empty : this.BigLotValue.ToString(),
				(this.SecurityName == null) ? string.Empty : this.SecurityName.ToString(),
				(this.SectorNo == null) ? string.Empty : this.SectorNo.ToString(),
				(this.Designated == null) ? string.Empty : this.Designated.ToString(),
				(this.Suspension == null) ? string.Empty : this.Suspension.ToString(),
				(this.Delist == null) ? string.Empty : this.Delist.ToString(),
				(this.HaltResumeFlag == null) ? string.Empty : this.HaltResumeFlag.ToString(),
				(this.Split == null) ? string.Empty : this.Split.ToString(),
				(this.Benefit == null) ? string.Empty : this.Benefit.ToString(),
				(this.Meeting == null) ? string.Empty : this.Meeting.ToString(),
				(this.Notice == null) ? string.Empty : this.Notice.ToString(),
				(this.ClientidRequired == null) ? string.Empty : this.ClientidRequired.ToString(),
				(this.CouponRate == null) ? string.Empty : this.CouponRate.ToString(),
				(this.IssueDate == null) ? string.Empty : this.IssueDate.ToString(),
				(this.MatureDate == null) ? string.Empty : this.MatureDate.ToString(),
				(this.AvrPrice == null) ? string.Empty : this.AvrPrice.ToString(),
				(this.ParValue == null) ? string.Empty : this.ParValue.ToString(),
				(this.SdcFlag == null) ? string.Empty : this.SdcFlag.ToString(),
				(this.PriorClosePrice == null) ? string.Empty : this.PriorClosePrice.ToString(),
				(this.PriorCloseDate == null) ? string.Empty : this.PriorCloseDate.ToString(),
				(this.ProjectOpen == null) ? string.Empty : this.ProjectOpen.ToString(),
				(this.OpenPrice == null) ? string.Empty : this.OpenPrice.ToString(),
				(this.Last == null) ? string.Empty : this.Last.ToString(),
				(this.LastVol == null) ? string.Empty : this.LastVol.ToString(),
				(this.LastVal == null) ? string.Empty : this.LastVal.ToString(),
				(this.Highest == null) ? string.Empty : this.Highest.ToString(),
				(this.Lowest == null) ? string.Empty : this.Lowest.ToString(),
				(this.Totalshares == null) ? string.Empty : this.Totalshares.ToString(),
				(this.TotalValue == null) ? string.Empty : this.TotalValue.ToString(),
				(this.AccumulateDeal == null) ? string.Empty : this.AccumulateDeal.ToString(),
				(this.BigDeal == null) ? string.Empty : this.BigDeal.ToString(),
				(this.BigVolume == null) ? string.Empty : this.BigVolume.ToString(),
				(this.BigValue == null) ? string.Empty : this.BigValue.ToString(),
				(this.OddDeal == null) ? string.Empty : this.OddDeal.ToString(),
				(this.OddVolume == null) ? string.Empty : this.OddVolume.ToString(),
				(this.OddValue == null) ? string.Empty : this.OddValue.ToString(),
				(this.Best1Bid == null) ? string.Empty : this.Best1Bid.ToString(),
				(this.Best1BidVolume == null) ? string.Empty : this.Best1BidVolume.ToString(),
				(this.Best2Bid == null) ? string.Empty : this.Best2Bid.ToString(),
				(this.Best2BidVolume == null) ? string.Empty : this.Best2BidVolume.ToString(),
				(this.Best3Bid == null) ? string.Empty : this.Best3Bid.ToString(),
				(this.Best3BidVolume == null) ? string.Empty : this.Best3BidVolume.ToString(),
				(this.Best1Offer == null) ? string.Empty : this.Best1Offer.ToString(),
				(this.Best1OfferVolume == null) ? string.Empty : this.Best1OfferVolume.ToString(),
				(this.Best2Offer == null) ? string.Empty : this.Best2Offer.ToString(),
				(this.Best2OfferVolume == null) ? string.Empty : this.Best2OfferVolume.ToString(),
				(this.Best3Offer == null) ? string.Empty : this.Best3Offer.ToString(),
				(this.Best3OfferVolume == null) ? string.Empty : this.Best3OfferVolume.ToString(),
				(this.BoardLost == null) ? string.Empty : this.BoardLost.ToString(),
				(this.TotalRoom == null) ? string.Empty : this.TotalRoom.ToString(),
				(this.CurrentRoom == null) ? string.Empty : this.CurrentRoom.ToString(),
				(this.StartRoom == null) ? string.Empty : this.StartRoom.ToString(),
				(this.Sequence == null) ? string.Empty : this.Sequence.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'security_realtime' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SecurityRealtimeEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// id : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "security_realtime"</remarks>
		public System.Int64 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// TradeDate : 
		/// </summary>
		public System.DateTime?		  TradeDate = null;
		
		/// <summary>
		/// Stockno : 
		/// </summary>
		public System.Int16?		  Stockno = null;
		
		/// <summary>
		/// StockSymbol : 
		/// </summary>
		public System.String		  StockSymbol = null;
		
		/// <summary>
		/// StockType : 
		/// </summary>
		public System.String		  StockType = null;
		
		/// <summary>
		/// Ceiling : 
		/// </summary>
		public System.Int64?		  Ceiling = null;
		
		/// <summary>
		/// Floor : 
		/// </summary>
		public System.Int64?		  Floor = null;
		
		/// <summary>
		/// BigLotValue : 
		/// </summary>
		public System.Int64?		  BigLotValue = null;
		
		/// <summary>
		/// SecurityName : 
		/// </summary>
		public System.String		  SecurityName = null;
		
		/// <summary>
		/// SectorNo : 
		/// </summary>
		public System.String		  SectorNo = null;
		
		/// <summary>
		/// Designated : 
		/// </summary>
		public System.String		  Designated = null;
		
		/// <summary>
		/// SUSPENSION : 
		/// </summary>
		public System.String		  Suspension = null;
		
		/// <summary>
		/// Delist : 
		/// </summary>
		public System.String		  Delist = null;
		
		/// <summary>
		/// HaltResumeFlag : 
		/// </summary>
		public System.String		  HaltResumeFlag = null;
		
		/// <summary>
		/// SPLIT : 
		/// </summary>
		public System.String		  Split = null;
		
		/// <summary>
		/// Benefit : 
		/// </summary>
		public System.String		  Benefit = null;
		
		/// <summary>
		/// Meeting : 
		/// </summary>
		public System.String		  Meeting = null;
		
		/// <summary>
		/// Notice : 
		/// </summary>
		public System.String		  Notice = null;
		
		/// <summary>
		/// ClientidRequired : 
		/// </summary>
		public System.String		  ClientidRequired = null;
		
		/// <summary>
		/// CouponRate : 
		/// </summary>
		public System.Int16?		  CouponRate = null;
		
		/// <summary>
		/// IssueDate : 
		/// </summary>
		public System.String		  IssueDate = null;
		
		/// <summary>
		/// MatureDate : 
		/// </summary>
		public System.String		  MatureDate = null;
		
		/// <summary>
		/// AvrPrice : 
		/// </summary>
		public System.Int64?		  AvrPrice = null;
		
		/// <summary>
		/// ParValue : 
		/// </summary>
		public System.Int16?		  ParValue = null;
		
		/// <summary>
		/// SDCFlag : 
		/// </summary>
		public System.String		  SdcFlag = null;
		
		/// <summary>
		/// PriorClosePrice : 
		/// </summary>
		public System.Int64?		  PriorClosePrice = null;
		
		/// <summary>
		/// PriorCloseDate : 
		/// </summary>
		public System.String		  PriorCloseDate = null;
		
		/// <summary>
		/// ProjectOpen : 
		/// </summary>
		public System.Int64?		  ProjectOpen = null;
		
		/// <summary>
		/// OpenPrice : 
		/// </summary>
		public System.Int64?		  OpenPrice = null;
		
		/// <summary>
		/// Last : 
		/// </summary>
		public System.Int64?		  Last = null;
		
		/// <summary>
		/// LastVol : 
		/// </summary>
		public System.Int64?		  LastVol = null;
		
		/// <summary>
		/// LastVal : 
		/// </summary>
		public System.Int64?		  LastVal = null;
		
		/// <summary>
		/// Highest : 
		/// </summary>
		public System.Int64?		  Highest = null;
		
		/// <summary>
		/// Lowest : 
		/// </summary>
		public System.Int64?		  Lowest = null;
		
		/// <summary>
		/// Totalshares : 
		/// </summary>
		public System.Int64?		  Totalshares = null;
		
		/// <summary>
		/// TotalValue : 
		/// </summary>
		public System.Int64?		  TotalValue = null;
		
		/// <summary>
		/// AccumulateDeal : 
		/// </summary>
		public System.Int16?		  AccumulateDeal = null;
		
		/// <summary>
		/// BigDeal : 
		/// </summary>
		public System.Int16?		  BigDeal = null;
		
		/// <summary>
		/// BigVolume : 
		/// </summary>
		public System.Int64?		  BigVolume = null;
		
		/// <summary>
		/// BigValue : 
		/// </summary>
		public System.Int64?		  BigValue = null;
		
		/// <summary>
		/// OddDeal : 
		/// </summary>
		public System.Int16?		  OddDeal = null;
		
		/// <summary>
		/// OddVolume : 
		/// </summary>
		public System.Int64?		  OddVolume = null;
		
		/// <summary>
		/// OddValue : 
		/// </summary>
		public System.Int64?		  OddValue = null;
		
		/// <summary>
		/// Best1Bid : 
		/// </summary>
		public System.Int64?		  Best1Bid = null;
		
		/// <summary>
		/// Best1BidVolume : 
		/// </summary>
		public System.Int64?		  Best1BidVolume = null;
		
		/// <summary>
		/// Best2Bid : 
		/// </summary>
		public System.Int64?		  Best2Bid = null;
		
		/// <summary>
		/// Best2BidVolume : 
		/// </summary>
		public System.Int64?		  Best2BidVolume = null;
		
		/// <summary>
		/// Best3Bid : 
		/// </summary>
		public System.Int64?		  Best3Bid = null;
		
		/// <summary>
		/// Best3BidVolume : 
		/// </summary>
		public System.Int64?		  Best3BidVolume = null;
		
		/// <summary>
		/// Best1Offer : 
		/// </summary>
		public System.Int64?		  Best1Offer = null;
		
		/// <summary>
		/// Best1OfferVolume : 
		/// </summary>
		public System.Int64?		  Best1OfferVolume = null;
		
		/// <summary>
		/// Best2Offer : 
		/// </summary>
		public System.Int64?		  Best2Offer = null;
		
		/// <summary>
		/// Best2OfferVolume : 
		/// </summary>
		public System.Int64?		  Best2OfferVolume = null;
		
		/// <summary>
		/// Best3Offer : 
		/// </summary>
		public System.Int64?		  Best3Offer = null;
		
		/// <summary>
		/// Best3OfferVolume : 
		/// </summary>
		public System.Int64?		  Best3OfferVolume = null;
		
		/// <summary>
		/// BoardLost : 
		/// </summary>
		public System.Int16?		  BoardLost = null;
		
		/// <summary>
		/// TotalRoom : 
		/// </summary>
		public System.Int64?		  TotalRoom = null;
		
		/// <summary>
		/// CurrentRoom : 
		/// </summary>
		public System.Int64?		  CurrentRoom = null;
		
		/// <summary>
		/// StartRoom : 
		/// </summary>
		public System.Int64?		  StartRoom = null;
		
		/// <summary>
		/// Sequence : 
		/// </summary>
		public System.Int64?		  Sequence = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SecurityRealtimeEntityData _tmp = new SecurityRealtimeEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.TradeDate = this.TradeDate;
			_tmp.Stockno = this.Stockno;
			_tmp.StockSymbol = this.StockSymbol;
			_tmp.StockType = this.StockType;
			_tmp.Ceiling = this.Ceiling;
			_tmp.Floor = this.Floor;
			_tmp.BigLotValue = this.BigLotValue;
			_tmp.SecurityName = this.SecurityName;
			_tmp.SectorNo = this.SectorNo;
			_tmp.Designated = this.Designated;
			_tmp.Suspension = this.Suspension;
			_tmp.Delist = this.Delist;
			_tmp.HaltResumeFlag = this.HaltResumeFlag;
			_tmp.Split = this.Split;
			_tmp.Benefit = this.Benefit;
			_tmp.Meeting = this.Meeting;
			_tmp.Notice = this.Notice;
			_tmp.ClientidRequired = this.ClientidRequired;
			_tmp.CouponRate = this.CouponRate;
			_tmp.IssueDate = this.IssueDate;
			_tmp.MatureDate = this.MatureDate;
			_tmp.AvrPrice = this.AvrPrice;
			_tmp.ParValue = this.ParValue;
			_tmp.SdcFlag = this.SdcFlag;
			_tmp.PriorClosePrice = this.PriorClosePrice;
			_tmp.PriorCloseDate = this.PriorCloseDate;
			_tmp.ProjectOpen = this.ProjectOpen;
			_tmp.OpenPrice = this.OpenPrice;
			_tmp.Last = this.Last;
			_tmp.LastVol = this.LastVol;
			_tmp.LastVal = this.LastVal;
			_tmp.Highest = this.Highest;
			_tmp.Lowest = this.Lowest;
			_tmp.Totalshares = this.Totalshares;
			_tmp.TotalValue = this.TotalValue;
			_tmp.AccumulateDeal = this.AccumulateDeal;
			_tmp.BigDeal = this.BigDeal;
			_tmp.BigVolume = this.BigVolume;
			_tmp.BigValue = this.BigValue;
			_tmp.OddDeal = this.OddDeal;
			_tmp.OddVolume = this.OddVolume;
			_tmp.OddValue = this.OddValue;
			_tmp.Best1Bid = this.Best1Bid;
			_tmp.Best1BidVolume = this.Best1BidVolume;
			_tmp.Best2Bid = this.Best2Bid;
			_tmp.Best2BidVolume = this.Best2BidVolume;
			_tmp.Best3Bid = this.Best3Bid;
			_tmp.Best3BidVolume = this.Best3BidVolume;
			_tmp.Best1Offer = this.Best1Offer;
			_tmp.Best1OfferVolume = this.Best1OfferVolume;
			_tmp.Best2Offer = this.Best2Offer;
			_tmp.Best2OfferVolume = this.Best2OfferVolume;
			_tmp.Best3Offer = this.Best3Offer;
			_tmp.Best3OfferVolume = this.Best3OfferVolume;
			_tmp.BoardLost = this.BoardLost;
			_tmp.TotalRoom = this.TotalRoom;
			_tmp.CurrentRoom = this.CurrentRoom;
			_tmp.StartRoom = this.StartRoom;
			_tmp.Sequence = this.Sequence;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SecurityRealtimeEntityData _tmp = new SecurityRealtimeEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.TradeDate = this.TradeDate;
			_tmp.Stockno = this.Stockno;
			_tmp.StockSymbol = this.StockSymbol;
			_tmp.StockType = this.StockType;
			_tmp.Ceiling = this.Ceiling;
			_tmp.Floor = this.Floor;
			_tmp.BigLotValue = this.BigLotValue;
			_tmp.SecurityName = this.SecurityName;
			_tmp.SectorNo = this.SectorNo;
			_tmp.Designated = this.Designated;
			_tmp.Suspension = this.Suspension;
			_tmp.Delist = this.Delist;
			_tmp.HaltResumeFlag = this.HaltResumeFlag;
			_tmp.Split = this.Split;
			_tmp.Benefit = this.Benefit;
			_tmp.Meeting = this.Meeting;
			_tmp.Notice = this.Notice;
			_tmp.ClientidRequired = this.ClientidRequired;
			_tmp.CouponRate = this.CouponRate;
			_tmp.IssueDate = this.IssueDate;
			_tmp.MatureDate = this.MatureDate;
			_tmp.AvrPrice = this.AvrPrice;
			_tmp.ParValue = this.ParValue;
			_tmp.SdcFlag = this.SdcFlag;
			_tmp.PriorClosePrice = this.PriorClosePrice;
			_tmp.PriorCloseDate = this.PriorCloseDate;
			_tmp.ProjectOpen = this.ProjectOpen;
			_tmp.OpenPrice = this.OpenPrice;
			_tmp.Last = this.Last;
			_tmp.LastVol = this.LastVol;
			_tmp.LastVal = this.LastVal;
			_tmp.Highest = this.Highest;
			_tmp.Lowest = this.Lowest;
			_tmp.Totalshares = this.Totalshares;
			_tmp.TotalValue = this.TotalValue;
			_tmp.AccumulateDeal = this.AccumulateDeal;
			_tmp.BigDeal = this.BigDeal;
			_tmp.BigVolume = this.BigVolume;
			_tmp.BigValue = this.BigValue;
			_tmp.OddDeal = this.OddDeal;
			_tmp.OddVolume = this.OddVolume;
			_tmp.OddValue = this.OddValue;
			_tmp.Best1Bid = this.Best1Bid;
			_tmp.Best1BidVolume = this.Best1BidVolume;
			_tmp.Best2Bid = this.Best2Bid;
			_tmp.Best2BidVolume = this.Best2BidVolume;
			_tmp.Best3Bid = this.Best3Bid;
			_tmp.Best3BidVolume = this.Best3BidVolume;
			_tmp.Best1Offer = this.Best1Offer;
			_tmp.Best1OfferVolume = this.Best1OfferVolume;
			_tmp.Best2Offer = this.Best2Offer;
			_tmp.Best2OfferVolume = this.Best2OfferVolume;
			_tmp.Best3Offer = this.Best3Offer;
			_tmp.Best3OfferVolume = this.Best3OfferVolume;
			_tmp.BoardLost = this.BoardLost;
			_tmp.TotalRoom = this.TotalRoom;
			_tmp.CurrentRoom = this.CurrentRoom;
			_tmp.StartRoom = this.StartRoom;
			_tmp.Sequence = this.Sequence;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SecurityRealtimeColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SecurityRealtimeColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SecurityRealtimeColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SecurityRealtimeColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SecurityRealtimeColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SecurityRealtimeColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SecurityRealtimeEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SecurityRealtimeEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SecurityRealtimeColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SecurityRealtimeColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SecurityRealtimeEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SecurityRealtimeEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SecurityRealtimeEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SecurityRealtime"/> object.
	/// </remarks>
	public class SecurityRealtimeEventArgs : System.EventArgs
	{
		private SecurityRealtimeColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SecurityRealtimeEventArgs class.
		///</summary>
		public SecurityRealtimeEventArgs(SecurityRealtimeColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SecurityRealtimeEventArgs class.
		///</summary>
		public SecurityRealtimeEventArgs(SecurityRealtimeColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SecurityRealtimeColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SecurityRealtimeColumn" />
		public SecurityRealtimeColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SecurityRealtime related events.
	///</summary>
	public delegate void SecurityRealtimeEventHandler(object sender, SecurityRealtimeEventArgs e);
	
	#region SecurityRealtimeComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SecurityRealtimeComparer : System.Collections.Generic.IComparer<SecurityRealtime>
	{
		SecurityRealtimeColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SecurityRealtimeComparer"/> class.
        /// </summary>
		public SecurityRealtimeComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SecurityRealtimeComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SecurityRealtimeComparer(SecurityRealtimeColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SecurityRealtime"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SecurityRealtime"/> to compare.</param>
        /// <param name="b">The second <c>SecurityRealtime</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SecurityRealtime a, SecurityRealtime b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SecurityRealtime entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SecurityRealtime a, SecurityRealtime b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SecurityRealtimeColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SecurityRealtimeKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SecurityRealtime"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SecurityRealtimeKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SecurityRealtimeKey class.
		/// </summary>
		public SecurityRealtimeKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SecurityRealtimeKey class.
		/// </summary>
		public SecurityRealtimeKey(SecurityRealtimeBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SecurityRealtimeKey class.
		/// </summary>
		public SecurityRealtimeKey(System.Int64 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SecurityRealtimeBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SecurityRealtimeBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int64 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int64 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int64) EntityUtil.ChangeType(values["Id"], typeof(System.Int64)) : (long)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SecurityRealtimeColumn Enum
	
	/// <summary>
	/// Enumerate the SecurityRealtime columns.
	/// </summary>
	[Serializable]
	public enum SecurityRealtimeColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("id")]
		[ColumnEnum("id", typeof(System.Int64), System.Data.DbType.Int64, true, true, false)]
		Id = 1,
		/// <summary>
		/// TradeDate : 
		/// </summary>
		[EnumTextValue("TradeDate")]
		[ColumnEnum("TradeDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		TradeDate = 2,
		/// <summary>
		/// Stockno : 
		/// </summary>
		[EnumTextValue("Stockno")]
		[ColumnEnum("Stockno", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		Stockno = 3,
		/// <summary>
		/// StockSymbol : 
		/// </summary>
		[EnumTextValue("StockSymbol")]
		[ColumnEnum("StockSymbol", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		StockSymbol = 4,
		/// <summary>
		/// StockType : 
		/// </summary>
		[EnumTextValue("StockType")]
		[ColumnEnum("StockType", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 1)]
		StockType = 5,
		/// <summary>
		/// Ceiling : 
		/// </summary>
		[EnumTextValue("Ceiling")]
		[ColumnEnum("Ceiling", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Ceiling = 6,
		/// <summary>
		/// Floor : 
		/// </summary>
		[EnumTextValue("Floor")]
		[ColumnEnum("Floor", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Floor = 7,
		/// <summary>
		/// BigLotValue : 
		/// </summary>
		[EnumTextValue("BigLotValue")]
		[ColumnEnum("BigLotValue", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		BigLotValue = 8,
		/// <summary>
		/// SecurityName : 
		/// </summary>
		[EnumTextValue("SecurityName")]
		[ColumnEnum("SecurityName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 25)]
		SecurityName = 9,
		/// <summary>
		/// SectorNo : 
		/// </summary>
		[EnumTextValue("SectorNo")]
		[ColumnEnum("SectorNo", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 1)]
		SectorNo = 10,
		/// <summary>
		/// Designated : 
		/// </summary>
		[EnumTextValue("Designated")]
		[ColumnEnum("Designated", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 1)]
		Designated = 11,
		/// <summary>
		/// Suspension : 
		/// </summary>
		[EnumTextValue("SUSPENSION")]
		[ColumnEnum("SUSPENSION", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 1)]
		Suspension = 12,
		/// <summary>
		/// Delist : 
		/// </summary>
		[EnumTextValue("Delist")]
		[ColumnEnum("Delist", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 1)]
		Delist = 13,
		/// <summary>
		/// HaltResumeFlag : 
		/// </summary>
		[EnumTextValue("HaltResumeFlag")]
		[ColumnEnum("HaltResumeFlag", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 1)]
		HaltResumeFlag = 14,
		/// <summary>
		/// Split : 
		/// </summary>
		[EnumTextValue("SPLIT")]
		[ColumnEnum("SPLIT", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 1)]
		Split = 15,
		/// <summary>
		/// Benefit : 
		/// </summary>
		[EnumTextValue("Benefit")]
		[ColumnEnum("Benefit", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 1)]
		Benefit = 16,
		/// <summary>
		/// Meeting : 
		/// </summary>
		[EnumTextValue("Meeting")]
		[ColumnEnum("Meeting", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 1)]
		Meeting = 17,
		/// <summary>
		/// Notice : 
		/// </summary>
		[EnumTextValue("Notice")]
		[ColumnEnum("Notice", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 1)]
		Notice = 18,
		/// <summary>
		/// ClientidRequired : 
		/// </summary>
		[EnumTextValue("ClientidRequired")]
		[ColumnEnum("ClientidRequired", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 1)]
		ClientidRequired = 19,
		/// <summary>
		/// CouponRate : 
		/// </summary>
		[EnumTextValue("CouponRate")]
		[ColumnEnum("CouponRate", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		CouponRate = 20,
		/// <summary>
		/// IssueDate : 
		/// </summary>
		[EnumTextValue("IssueDate")]
		[ColumnEnum("IssueDate", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 6)]
		IssueDate = 21,
		/// <summary>
		/// MatureDate : 
		/// </summary>
		[EnumTextValue("MatureDate")]
		[ColumnEnum("MatureDate", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 6)]
		MatureDate = 22,
		/// <summary>
		/// AvrPrice : 
		/// </summary>
		[EnumTextValue("AvrPrice")]
		[ColumnEnum("AvrPrice", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		AvrPrice = 23,
		/// <summary>
		/// ParValue : 
		/// </summary>
		[EnumTextValue("ParValue")]
		[ColumnEnum("ParValue", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		ParValue = 24,
		/// <summary>
		/// SdcFlag : 
		/// </summary>
		[EnumTextValue("SDCFlag")]
		[ColumnEnum("SDCFlag", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 1)]
		SdcFlag = 25,
		/// <summary>
		/// PriorClosePrice : 
		/// </summary>
		[EnumTextValue("PriorClosePrice")]
		[ColumnEnum("PriorClosePrice", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		PriorClosePrice = 26,
		/// <summary>
		/// PriorCloseDate : 
		/// </summary>
		[EnumTextValue("PriorCloseDate")]
		[ColumnEnum("PriorCloseDate", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 6)]
		PriorCloseDate = 27,
		/// <summary>
		/// ProjectOpen : 
		/// </summary>
		[EnumTextValue("ProjectOpen")]
		[ColumnEnum("ProjectOpen", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		ProjectOpen = 28,
		/// <summary>
		/// OpenPrice : 
		/// </summary>
		[EnumTextValue("OpenPrice")]
		[ColumnEnum("OpenPrice", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		OpenPrice = 29,
		/// <summary>
		/// Last : 
		/// </summary>
		[EnumTextValue("Last")]
		[ColumnEnum("Last", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Last = 30,
		/// <summary>
		/// LastVol : 
		/// </summary>
		[EnumTextValue("LastVol")]
		[ColumnEnum("LastVol", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		LastVol = 31,
		/// <summary>
		/// LastVal : 
		/// </summary>
		[EnumTextValue("LastVal")]
		[ColumnEnum("LastVal", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		LastVal = 32,
		/// <summary>
		/// Highest : 
		/// </summary>
		[EnumTextValue("Highest")]
		[ColumnEnum("Highest", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Highest = 33,
		/// <summary>
		/// Lowest : 
		/// </summary>
		[EnumTextValue("Lowest")]
		[ColumnEnum("Lowest", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Lowest = 34,
		/// <summary>
		/// Totalshares : 
		/// </summary>
		[EnumTextValue("Totalshares")]
		[ColumnEnum("Totalshares", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Totalshares = 35,
		/// <summary>
		/// TotalValue : 
		/// </summary>
		[EnumTextValue("TotalValue")]
		[ColumnEnum("TotalValue", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		TotalValue = 36,
		/// <summary>
		/// AccumulateDeal : 
		/// </summary>
		[EnumTextValue("AccumulateDeal")]
		[ColumnEnum("AccumulateDeal", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		AccumulateDeal = 37,
		/// <summary>
		/// BigDeal : 
		/// </summary>
		[EnumTextValue("BigDeal")]
		[ColumnEnum("BigDeal", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		BigDeal = 38,
		/// <summary>
		/// BigVolume : 
		/// </summary>
		[EnumTextValue("BigVolume")]
		[ColumnEnum("BigVolume", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		BigVolume = 39,
		/// <summary>
		/// BigValue : 
		/// </summary>
		[EnumTextValue("BigValue")]
		[ColumnEnum("BigValue", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		BigValue = 40,
		/// <summary>
		/// OddDeal : 
		/// </summary>
		[EnumTextValue("OddDeal")]
		[ColumnEnum("OddDeal", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		OddDeal = 41,
		/// <summary>
		/// OddVolume : 
		/// </summary>
		[EnumTextValue("OddVolume")]
		[ColumnEnum("OddVolume", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		OddVolume = 42,
		/// <summary>
		/// OddValue : 
		/// </summary>
		[EnumTextValue("OddValue")]
		[ColumnEnum("OddValue", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		OddValue = 43,
		/// <summary>
		/// Best1Bid : 
		/// </summary>
		[EnumTextValue("Best1Bid")]
		[ColumnEnum("Best1Bid", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Best1Bid = 44,
		/// <summary>
		/// Best1BidVolume : 
		/// </summary>
		[EnumTextValue("Best1BidVolume")]
		[ColumnEnum("Best1BidVolume", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Best1BidVolume = 45,
		/// <summary>
		/// Best2Bid : 
		/// </summary>
		[EnumTextValue("Best2Bid")]
		[ColumnEnum("Best2Bid", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Best2Bid = 46,
		/// <summary>
		/// Best2BidVolume : 
		/// </summary>
		[EnumTextValue("Best2BidVolume")]
		[ColumnEnum("Best2BidVolume", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Best2BidVolume = 47,
		/// <summary>
		/// Best3Bid : 
		/// </summary>
		[EnumTextValue("Best3Bid")]
		[ColumnEnum("Best3Bid", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Best3Bid = 48,
		/// <summary>
		/// Best3BidVolume : 
		/// </summary>
		[EnumTextValue("Best3BidVolume")]
		[ColumnEnum("Best3BidVolume", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Best3BidVolume = 49,
		/// <summary>
		/// Best1Offer : 
		/// </summary>
		[EnumTextValue("Best1Offer")]
		[ColumnEnum("Best1Offer", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Best1Offer = 50,
		/// <summary>
		/// Best1OfferVolume : 
		/// </summary>
		[EnumTextValue("Best1OfferVolume")]
		[ColumnEnum("Best1OfferVolume", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Best1OfferVolume = 51,
		/// <summary>
		/// Best2Offer : 
		/// </summary>
		[EnumTextValue("Best2Offer")]
		[ColumnEnum("Best2Offer", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Best2Offer = 52,
		/// <summary>
		/// Best2OfferVolume : 
		/// </summary>
		[EnumTextValue("Best2OfferVolume")]
		[ColumnEnum("Best2OfferVolume", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Best2OfferVolume = 53,
		/// <summary>
		/// Best3Offer : 
		/// </summary>
		[EnumTextValue("Best3Offer")]
		[ColumnEnum("Best3Offer", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Best3Offer = 54,
		/// <summary>
		/// Best3OfferVolume : 
		/// </summary>
		[EnumTextValue("Best3OfferVolume")]
		[ColumnEnum("Best3OfferVolume", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Best3OfferVolume = 55,
		/// <summary>
		/// BoardLost : 
		/// </summary>
		[EnumTextValue("BoardLost")]
		[ColumnEnum("BoardLost", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		BoardLost = 56,
		/// <summary>
		/// TotalRoom : 
		/// </summary>
		[EnumTextValue("TotalRoom")]
		[ColumnEnum("TotalRoom", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		TotalRoom = 57,
		/// <summary>
		/// CurrentRoom : 
		/// </summary>
		[EnumTextValue("CurrentRoom")]
		[ColumnEnum("CurrentRoom", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		CurrentRoom = 58,
		/// <summary>
		/// StartRoom : 
		/// </summary>
		[EnumTextValue("StartRoom")]
		[ColumnEnum("StartRoom", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		StartRoom = 59,
		/// <summary>
		/// Sequence : 
		/// </summary>
		[EnumTextValue("Sequence")]
		[ColumnEnum("Sequence", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Sequence = 60
	}//End enum

	#endregion SecurityRealtimeColumn Enum

} // end namespace
