<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AccountManager.Services</name>
    </assembly>
    <members>
        <member name="T:AccountManager.Services.SmsCountService">
            <summary>
            An component type implementation of the 'SMSCount' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:AccountManager.Services.SmsCountServiceBase">
            <summary>
             An object representation of the 'SMSCount' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the SmsCount.cs file instead.
             All custom implementations should be done in the <see cref="T:AccountManager.Entities.SmsCount"/> class.
             </remarks>
        </member>
        <member name="T:AccountManager.Services.ServiceBase`2">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:AccountManager.Services.ServiceBaseCore`2">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:AccountManager.Services.IComponentService">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="P:AccountManager.Services.IComponentService.ProcessorList">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:AccountManager.Services.IComponentService.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:AccountManager.Services.IComponentService.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="E:AccountManager.Services.IComponentService.ProcessStarting">
            <summary>
            Event to indicate that a processor is about to begin.
            </summary>
        </member>
        <member name="E:AccountManager.Services.IComponentService.ProcessEnded">
            <summary>
            Event to indicate that a processor has just ended.
            </summary>
        </member>
        <member name="M:AccountManager.Services.ServiceBaseCore`2.OnProcessStarting(AccountManager.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:AccountManager.Services.ServiceBaseCore`2.OnProcessEnded(AccountManager.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:AccountManager.Services.ServiceBaseCore`2.Execute">
             <summary>
            	Provides the beginning
             <remarks>
             If no AbortIfFailure parameter is passed then the process will not abort if there is a failure
             </remarks>
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:AccountManager.Services.ServiceBaseCore`2.Execute(System.Boolean)">
             <summary>
            	Executes the processors in the processor list
             <remarks>
             If abortIfFailure is set to true then the execution will halt on the first failure
            </remarks>
             </summary>
        </member>
        <member name="M:AccountManager.Services.ServiceBaseCore`2.Get(`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:AccountManager.Services.ServiceBaseCore`2.GetAll">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:AccountManager.Services.ServiceBaseCore`2.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:AccountManager.Services.ServiceBaseCore`2.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:AccountManager.Services.ServiceBaseCore`2.Insert(`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:AccountManager.Services.ServiceBaseCore`2.BulkInsert(AccountManager.Entities.TList{`0})">
            <summary>
            Efficiently inserts multiple rows into the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to insert.</param>
        </member>
        <member name="M:AccountManager.Services.ServiceBaseCore`2.Update(`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:AccountManager.Services.ServiceBaseCore`2.Delete(`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:AccountManager.Services.ServiceBaseCore`2.Save(`0)">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:AccountManager.Services.ServiceBaseCore`2.DeepLoad(`0,System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[],AccountManager.DataAccess.Bases.DeepSession)">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
            <param name="innerList">A collection of child types for easy access.</param>
        </member>
        <member name="M:AccountManager.Services.ServiceBaseCore`2.DeepLoad(AccountManager.Entities.TList{`0},System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:AccountManager.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:AccountManager.Services.ServiceBaseCore`2.DeepSave(`0)">
            <summary>
            Deep Save the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:AccountManager.Services.ServiceBaseCore`2.DeepSave(`0,AccountManager.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:AccountManager.Services.ServiceBaseCore`2.DeepSave(`0,AccountManager.DataAccess.DeepSaveType,System.Type[],System.Collections.Hashtable)">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep save functionality.
            </remarks>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="M:AccountManager.Services.ServiceBaseCore`2.DeepSave(AccountManager.Entities.TList{`0},AccountManager.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="P:AccountManager.Services.ServiceBaseCore`2.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:AccountManager.Services.ServiceBaseCore`2.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:AccountManager.Services.ServiceBaseCore`2.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:AccountManager.Services.ServiceBaseCore`2.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:AccountManager.Services.ServiceBaseCore`2.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:AccountManager.Services.ServiceBaseCore`2.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:AccountManager.Services.ServiceBaseCore`2.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:AccountManager.Services.ServiceBaseCore`2.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:AccountManager.Services.ServiceBaseCore`2.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:AccountManager.Entities.SmsCount"/> instance .
            </summary>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.CreateSmsCount(System.DateTime,System.Int32)">
            <summary>
             A simple factory method to create a new <see cref="T:AccountManager.Entities.SmsCount"/> instance.
            </summary>
            <param name="_sendDate">SMS Sent date</param>
            <param name="_total">Total of sms messages</param>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.Get(AccountManager.Entities.SmsCountKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.GetBySendDate(System.DateTime)">
            <summary>
             method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the primary key PK_SMSCOUNT index.
            </summary>
            <param name="_sendDate">SMS Sent date</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.SmsCount"/> class.</returns>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.GetBySendDate(System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the primary key PK_SMSCOUNT index.
            </summary>
            <param name="_sendDate">SMS Sent date</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.SmsCount"/> class.</returns>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:AccountManager.Entities.SmsCount"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:AccountManager.Entities.SmsCount"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:AccountManager.Entities.TList`1"/> </returns>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:AccountManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SmsCount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:AccountManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SmsCount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:AccountManager.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SmsCount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{SmsCount} of <c>SmsCount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>SmsCount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,AccountManager.DataAccess.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:AccountManager.DataAccess.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>SmsCount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>SmsCount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,AccountManager.DataAccess.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:AccountManager.DataAccess.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SmsCount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SmsCount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.Insert(AccountManager.Entities.SmsCount)">
            <summary>
            public virtual method that Inserts a SmsCount object into the datasource using a transaction.
            </summary>
            <param name="entity">SmsCount object to Insert.</param>
            <remarks>After Inserting into the datasource, the SmsCount object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            SmsCount entity = new SmsCount();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	SmsCountService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.Insert(AccountManager.Entities.TList{AccountManager.Entities.SmsCount})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SmsCount</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>SmsCount</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of SmsCount.
             <code><![CDATA[
             TList<SmsCount> list = new TList<SmsCount>();
             SmsCount entity = new SmsCount();
             entity.StringProperty = "foo";
             SmsCount entity2 = new SmsCount();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SmsCountService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.Update(AccountManager.Entities.SmsCount)">
            <summary>
            public virtual method that Updates a SmsCount object into the datasource using a transaction.
            </summary>
            <param name="entity">SmsCount object to Update.</param>
            <remarks>After Updateing into the datasource, the SmsCount object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            SmsCount entity = SmsCountService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	SmsCountService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.Update(AccountManager.Entities.TList{AccountManager.Entities.SmsCount})">
             <summary>
             public virtual method that Updates rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SmsCount</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>SmsCount</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of SmsCount.
             <code><![CDATA[
             TList<SmsCount> list = new TList<SmsCount>();
             SmsCount entity = new SmsCount();
             entity.StringProperty = "foo";
             SmsCount entity2 = new SmsCount();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SmsCountService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.Save(AccountManager.Entities.SmsCount)">
            <summary>
            public virtual method that Saves a SmsCount object into the datasource using a transaction.
            </summary>
            <param name="entity">SmsCount object to Save.</param>
            <remarks>After Saveing into the datasource, the SmsCount object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            SmsCount entity = SmsCountService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	SmsCountService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.Save(AccountManager.Entities.TList{AccountManager.Entities.SmsCount})">
             <summary>
             public virtual method that Saves rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SmsCount</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>SmsCount</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of SmsCount.
             <code><![CDATA[
             TList<SmsCount> list = new TList<SmsCount>();
             SmsCount entity = new SmsCount();
             entity.StringProperty = "foo";
             SmsCount entity2 = new SmsCount();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SmsCountService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.Delete(AccountManager.Entities.SmsCount)">
            <summary>
            public virtual method that Deletes a SmsCount object into the datasource using a transaction.
            </summary>
            <param name="entity">SmsCount object to Delete.</param>
            <remarks>After Deleteing into the datasource, the SmsCount object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            SmsCount entity = SmsCountService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	SmsCountService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.Delete(AccountManager.Entities.TList{AccountManager.Entities.SmsCount})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SmsCount</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>SmsCount</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of SmsCount.
             <code><![CDATA[
             TList<SmsCount> list = new TList<SmsCount>();
             SmsCount entity = new SmsCount();
             entity.StringProperty = "foo";
             SmsCount entity2 = new SmsCount();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SmsCountService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.Delete(AccountManager.Entities.SmsCountKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.Delete(System.DateTime)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.DateTime _sendDate
            </summary>
            <param name="_sendDate">SmsCount pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.GetTotal(System.String,System.String)">
            <summary>
            This method wrap the '_SMSCount_GetTotal' stored procedure. 
            </summary>
            <param name="fromDate"> A <c>System.String</c> instance.</param>
            <param name="toDate"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.GetTotal(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the '_SMSCount_GetTotal' stored procedure. 
            </summary>
            <param name="fromDate"> A <c>System.String</c> instance.</param>
            <param name="toDate"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.DeepLoadBySendDate(System.DateTime,System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:AccountManager.Entities.SmsCount"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:AccountManager.DataAccess.DeepLoadType"/>.
            </summary>
            <param name="_sendDate">SMS Sent date</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SmsCount Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.SmsCount"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.DeepLoad(AccountManager.Entities.SmsCount)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">SmsCount Object</param>
            <remarks>
            <seealso cref="M:AccountManager.Services.SmsCountServiceBase.DeepLoad(AccountManager.Entities.SmsCount)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.DeepLoad(AccountManager.Entities.SmsCount,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.SmsCountServiceBase.DeepLoad(AccountManager.Entities.SmsCount)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">SmsCount Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.DeepLoad(AccountManager.Entities.SmsCount,System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:AccountManager.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:AccountManager.DataAccess.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:AccountManager.Entities.SmsCount"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SmsCount Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.SmsCount})">
            <summary>
            Deep Loads the <see cref="T:AccountManager.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.SmsCountServiceBase.DeepLoad(AccountManager.Entities.SmsCount)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:AccountManager.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.SmsCount},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:AccountManager.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.SmsCountServiceBase.DeepLoad(AccountManager.Entities.SmsCount)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:AccountManager.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.SmsCount},System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:AccountManager.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:AccountManager.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:AccountManager.DataAccess.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:AccountManager.Entities.SmsCount"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.DeepSave(AccountManager.Entities.SmsCount)">
            <summary>
            public virtualDeep Saves the <see cref="T:AccountManager.Entities.SmsCount"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">SmsCount Object</param>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.DeepSave(AccountManager.Entities.SmsCount,AccountManager.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the SmsCount object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">SmsCount Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>SmsCount</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.DeepSave(AccountManager.Entities.TList{AccountManager.Entities.SmsCount})">
            <summary>
            Deep Save the entire <see cref="T:AccountManager.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{SmsCount} Object</param>
        </member>
        <member name="M:AccountManager.Services.SmsCountServiceBase.DeepSave(AccountManager.Entities.TList{AccountManager.Entities.SmsCount},AccountManager.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:AccountManager.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:AccountManager.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">SmsCount Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:AccountManager.Services.SmsCountServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:AccountManager.Services.SmsCountService.#ctor">
            <summary>
            Initializes a new instance of the SmsCountService class.
            </summary>
        </member>
        <member name="M:AccountManager.Services.SmsCountService.CountSMS(System.String,System.String)">
            <summary>
             Get total messages in a range of days.
            </summary>
            <param name="fromDate">FromDate to search.</param>
            <param name="toDate">ToDate to search.</param>
            <returns>Total of messages.</returns>
        </member>
        <member name="M:AccountManager.Services.SmsCountService.UpdateCount(System.Int32)">
            <summary>
             Increase total sent messages today
            </summary>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:AccountManager.Services.BrokerAccountServiceBase">
            <summary>
             An object representation of the 'BrokerAccount' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the BrokerAccount.cs file instead.
             All custom implementations should be done in the <see cref="T:AccountManager.Entities.BrokerAccount"/> class.
             </remarks>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:AccountManager.Entities.BrokerAccount"/> instance .
            </summary>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.CreateBrokerAccount(System.String,System.String,System.String,System.Int16,System.Boolean,System.String,System.String,System.DateTime,System.String,System.Nullable{System.DateTime},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:AccountManager.Entities.BrokerAccount"/> instance.
            </summary>
            <param name="_brokerId"></param>
            <param name="_name"></param>
            <param name="_password"></param>
            <param name="_accountType"></param>
            <param name="_actived"></param>
            <param name="_mobilePhone"></param>
            <param name="_emailAddr"></param>
            <param name="_createdDate"></param>
            <param name="_createdUser"></param>
            <param name="_updatedDate"></param>
            <param name="_updatedUser"></param>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.Get(AccountManager.Entities.BrokerAccountKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.GetByBrokerId(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the primary key PK_BrokerAccount index.
            </summary>
            <param name="_brokerId"></param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.BrokerAccount"/> class.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.GetByBrokerId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the primary key PK_BrokerAccount index.
            </summary>
            <param name="_brokerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.BrokerAccount"/> class.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:AccountManager.Entities.BrokerAccount"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:AccountManager.Entities.BrokerAccount"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:AccountManager.Entities.TList`1"/> </returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:AccountManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>BrokerAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:AccountManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>BrokerAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:AccountManager.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>BrokerAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{BrokerAccount} of <c>BrokerAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>BrokerAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,AccountManager.DataAccess.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:AccountManager.DataAccess.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>BrokerAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>BrokerAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,AccountManager.DataAccess.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:AccountManager.DataAccess.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>BrokerAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>BrokerAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.Insert(AccountManager.Entities.BrokerAccount)">
            <summary>
            public virtual method that Inserts a BrokerAccount object into the datasource using a transaction.
            </summary>
            <param name="entity">BrokerAccount object to Insert.</param>
            <remarks>After Inserting into the datasource, the BrokerAccount object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            BrokerAccount entity = new BrokerAccount();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	BrokerAccountService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.Insert(AccountManager.Entities.TList{AccountManager.Entities.BrokerAccount})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BrokerAccount</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>BrokerAccount</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of BrokerAccount.
             <code><![CDATA[
             TList<BrokerAccount> list = new TList<BrokerAccount>();
             BrokerAccount entity = new BrokerAccount();
             entity.StringProperty = "foo";
             BrokerAccount entity2 = new BrokerAccount();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BrokerAccountService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.Update(AccountManager.Entities.BrokerAccount)">
            <summary>
            public virtual method that Updates a BrokerAccount object into the datasource using a transaction.
            </summary>
            <param name="entity">BrokerAccount object to Update.</param>
            <remarks>After Updateing into the datasource, the BrokerAccount object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            BrokerAccount entity = BrokerAccountService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	BrokerAccountService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.Update(AccountManager.Entities.TList{AccountManager.Entities.BrokerAccount})">
             <summary>
             public virtual method that Updates rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BrokerAccount</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>BrokerAccount</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of BrokerAccount.
             <code><![CDATA[
             TList<BrokerAccount> list = new TList<BrokerAccount>();
             BrokerAccount entity = new BrokerAccount();
             entity.StringProperty = "foo";
             BrokerAccount entity2 = new BrokerAccount();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BrokerAccountService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.Save(AccountManager.Entities.BrokerAccount)">
            <summary>
            public virtual method that Saves a BrokerAccount object into the datasource using a transaction.
            </summary>
            <param name="entity">BrokerAccount object to Save.</param>
            <remarks>After Saveing into the datasource, the BrokerAccount object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            BrokerAccount entity = BrokerAccountService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	BrokerAccountService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.Save(AccountManager.Entities.TList{AccountManager.Entities.BrokerAccount})">
             <summary>
             public virtual method that Saves rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BrokerAccount</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>BrokerAccount</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of BrokerAccount.
             <code><![CDATA[
             TList<BrokerAccount> list = new TList<BrokerAccount>();
             BrokerAccount entity = new BrokerAccount();
             entity.StringProperty = "foo";
             BrokerAccount entity2 = new BrokerAccount();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BrokerAccountService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.Delete(AccountManager.Entities.BrokerAccount)">
            <summary>
            public virtual method that Deletes a BrokerAccount object into the datasource using a transaction.
            </summary>
            <param name="entity">BrokerAccount object to Delete.</param>
            <remarks>After Deleteing into the datasource, the BrokerAccount object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            BrokerAccount entity = BrokerAccountService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	BrokerAccountService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.Delete(AccountManager.Entities.TList{AccountManager.Entities.BrokerAccount})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BrokerAccount</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>BrokerAccount</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of BrokerAccount.
             <code><![CDATA[
             TList<BrokerAccount> list = new TList<BrokerAccount>();
             BrokerAccount entity = new BrokerAccount();
             entity.StringProperty = "foo";
             BrokerAccount entity2 = new BrokerAccount();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BrokerAccountService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.Delete(AccountManager.Entities.BrokerAccountKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _brokerId
            </summary>
            <param name="_brokerId">BrokerAccount pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.GetByPermissionIdFromBrokerPermission(System.Int32)">
            <summary>
            	Gets BrokerAccount objects from the datasource by PermissionID in the
            	BrokerPermission table. Table BrokerAccount is related to table BrokerAMPermission
            	through the (M:N) relationship defined in the BrokerPermission table.
            </summary>
            <param name="_permissionId"></param>
            <returns>Returns a typed collection of BrokerAccount objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.GetByPermissionIdFromBrokerPermission(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets BrokerAccount objects from the datasource by PermissionID in the
            	BrokerPermission table. Table BrokerAccount is related to table BrokerAMPermission
            	through the (M:N) relationship defined in the BrokerPermission table.
            </summary>
            <param name="_permissionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BrokerAccount objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.DeepLoadByBrokerId(System.String,System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:AccountManager.Entities.BrokerAccount"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:AccountManager.DataAccess.DeepLoadType"/>.
            </summary>
            <param name="_brokerId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">BrokerAccount Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.BrokerAccount"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.DeepLoad(AccountManager.Entities.BrokerAccount)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">BrokerAccount Object</param>
            <remarks>
            <seealso cref="M:AccountManager.Services.BrokerAccountServiceBase.DeepLoad(AccountManager.Entities.BrokerAccount)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.DeepLoad(AccountManager.Entities.BrokerAccount,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.BrokerAccountServiceBase.DeepLoad(AccountManager.Entities.BrokerAccount)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">BrokerAccount Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.DeepLoad(AccountManager.Entities.BrokerAccount,System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:AccountManager.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:AccountManager.DataAccess.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:AccountManager.Entities.BrokerAccount"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">BrokerAccount Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.BrokerAccount})">
            <summary>
            Deep Loads the <see cref="T:AccountManager.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.BrokerAccountServiceBase.DeepLoad(AccountManager.Entities.BrokerAccount)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:AccountManager.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.BrokerAccount},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:AccountManager.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.BrokerAccountServiceBase.DeepLoad(AccountManager.Entities.BrokerAccount)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:AccountManager.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.BrokerAccount},System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:AccountManager.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:AccountManager.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:AccountManager.DataAccess.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:AccountManager.Entities.BrokerAccount"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.DeepSave(AccountManager.Entities.BrokerAccount)">
            <summary>
            public virtualDeep Saves the <see cref="T:AccountManager.Entities.BrokerAccount"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">BrokerAccount Object</param>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.DeepSave(AccountManager.Entities.BrokerAccount,AccountManager.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the BrokerAccount object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">BrokerAccount Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>BrokerAccount</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.DeepSave(AccountManager.Entities.TList{AccountManager.Entities.BrokerAccount})">
            <summary>
            Deep Save the entire <see cref="T:AccountManager.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{BrokerAccount} Object</param>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountServiceBase.DeepSave(AccountManager.Entities.TList{AccountManager.Entities.BrokerAccount},AccountManager.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:AccountManager.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:AccountManager.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">BrokerAccount Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:AccountManager.Services.BrokerAccountServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:AccountManager.Services.BrokerAccountService">
            <summary>
            An component type implementation of the 'BrokerAccount' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountService.#ctor">
            <summary>
            Initializes a new instance of the BrokerAccountService class.
            </summary>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountService.SaveBroker(AccountManager.Entities.BrokerAccount,System.Collections.Generic.List{System.Int32})">
            <summary>
             Save a new broker.
            </summary>
            <param name="entity">Broker information</param>
             <param name="permissionList">The permission list of broker</param>
             <returns>
             <para>Result of saving broker.</para>
             <para>RET_CODE=EXISTED_DATA: Broker already exists.</para>
             <para>RET_CODE=SUCCESS: Created sucessfully.</para>
             <para>RET_CODE=FAIL: Failed to create broker.</para>
             </returns>
            <exception cref="T:AccountManager.Entities.EntityNotValidException"></exception>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountService.UpdateBroker(System.String,System.String,System.String,System.Int16,System.Boolean,System.String,System.String,System.String,System.Collections.Generic.List{System.Int32})">
            <summary>
            Update broker information.
            </summary>
            <param name="brokerId">Id of broker</param>
            <param name="name">Name of broker</param>
            <param name="password">Password for broker to login</param>
            <param name="accountType">Broker type: Admin or broker</param>
            <param name="actived">True if broker is actived; otherwise, false.</param>
            <param name="mobilePhone">Mobile phone of broker</param>
            <param name="email">Email of broker</param>
            <param name="updatedUserId">Id of using broker</param>
            <param name="permissionList">The permission list of broker</param>
            <returns>
            <para>Result of updating broker.</para>
            <para>RET_CODE=NO_EXISTED_DATA: Data is not existing.</para>
            <para>RET_CODE=SUCCESS: Updated sucessfully.</para>
            <para>RET_CODE=FAIL: Failed to update broker.</para>
            </returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountService.ActivateBroker(System.String,System.Boolean,System.String)">
            <summary>
            Delete broker, change broker status to inactived.
            </summary>
            <param name="brokerId">Id of broker</param>
            <param name="actived">true if actived; otherwise, false.</param>
            <param name="updatedUserId">Id of using broker</param>
            <returns>
            <para>Result of activating or deactivating a broker account.</para>
            <para>RET_CODE=NO_EXISTED_DATA: Data is not existing.</para>
            <para>RET_CODE=SUCCESS: Activate or deactivate sucessfully.</para>
            <para>RET_CODE=FAIL: Failed to Activate or deactivate broker.</para>
            </returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountService.ChangeBrokerPassword(System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="brokerId"></param>
            <param name="oldPassword"></param>
            <param name="newPassword"></param>
            <param name="updatedUserId"></param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountService.GetList(System.String,System.String,System.Int16,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Get a complete collection of <see cref="T:AccountManager.Entities.BrokerAccount"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountService.InsertNewPermission(AccountManager.DataAccess.Bases.NetTiersProvider,System.String,System.Collections.Generic.List{System.Int32})">
            <summary>
            Insert new permission list.
            </summary>
            <param name="dataProvider"></param>
            <param name="brokerId"></param>
            <param name="permissionList"></param>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountService.GetBroker(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the primary key PK_BrokerAccount index.
            </summary>
            <param name="brokerId"></param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.BrokerAccount"/> class.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAccountService.GetList(System.Collections.Generic.List{System.String})">
            <summary>
            </summary>
            <param name="brokerIdList">List of broker id</param>
            <returns></returns>
        </member>
        <member name="T:AccountManager.Services.ConfigurationsService">
            <summary>
            An component type implementation of the 'Configurations' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:AccountManager.Services.ConfigurationsServiceBase">
            <summary>
             An object representation of the 'Configurations' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Configurations.cs file instead.
             All custom implementations should be done in the <see cref="T:AccountManager.Entities.Configurations"/> class.
             </remarks>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:AccountManager.Entities.Configurations"/> instance .
            </summary>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.CreateConfigurations(System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:AccountManager.Entities.Configurations"/> instance.
            </summary>
            <param name="_name">Name of item</param>
            <param name="_value">Value of item</param>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.Get(AccountManager.Entities.ConfigurationsKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.GetByName(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the primary key PK_CONFIGURATIONS index.
            </summary>
            <param name="_name">Name of item</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.Configurations"/> class.</returns>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.GetByName(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the primary key PK_CONFIGURATIONS index.
            </summary>
            <param name="_name">Name of item</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.Configurations"/> class.</returns>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:AccountManager.Entities.Configurations"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:AccountManager.Entities.Configurations"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:AccountManager.Entities.TList`1"/> </returns>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:AccountManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Configurations</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:AccountManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Configurations</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:AccountManager.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Configurations</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Configurations} of <c>Configurations</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Configurations</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,AccountManager.DataAccess.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:AccountManager.DataAccess.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Configurations</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Configurations</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,AccountManager.DataAccess.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:AccountManager.DataAccess.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Configurations</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Configurations</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.Insert(AccountManager.Entities.Configurations)">
            <summary>
            public virtual method that Inserts a Configurations object into the datasource using a transaction.
            </summary>
            <param name="entity">Configurations object to Insert.</param>
            <remarks>After Inserting into the datasource, the Configurations object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Configurations entity = new Configurations();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ConfigurationsService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.Insert(AccountManager.Entities.TList{AccountManager.Entities.Configurations})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Configurations</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Configurations</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Configurations.
             <code><![CDATA[
             TList<Configurations> list = new TList<Configurations>();
             Configurations entity = new Configurations();
             entity.StringProperty = "foo";
             Configurations entity2 = new Configurations();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ConfigurationsService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.Update(AccountManager.Entities.Configurations)">
            <summary>
            public virtual method that Updates a Configurations object into the datasource using a transaction.
            </summary>
            <param name="entity">Configurations object to Update.</param>
            <remarks>After Updateing into the datasource, the Configurations object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Configurations entity = ConfigurationsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ConfigurationsService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.Update(AccountManager.Entities.TList{AccountManager.Entities.Configurations})">
             <summary>
             public virtual method that Updates rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Configurations</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Configurations</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Configurations.
             <code><![CDATA[
             TList<Configurations> list = new TList<Configurations>();
             Configurations entity = new Configurations();
             entity.StringProperty = "foo";
             Configurations entity2 = new Configurations();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ConfigurationsService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.Save(AccountManager.Entities.Configurations)">
            <summary>
            public virtual method that Saves a Configurations object into the datasource using a transaction.
            </summary>
            <param name="entity">Configurations object to Save.</param>
            <remarks>After Saveing into the datasource, the Configurations object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Configurations entity = ConfigurationsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ConfigurationsService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.Save(AccountManager.Entities.TList{AccountManager.Entities.Configurations})">
             <summary>
             public virtual method that Saves rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Configurations</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Configurations</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Configurations.
             <code><![CDATA[
             TList<Configurations> list = new TList<Configurations>();
             Configurations entity = new Configurations();
             entity.StringProperty = "foo";
             Configurations entity2 = new Configurations();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ConfigurationsService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.Delete(AccountManager.Entities.Configurations)">
            <summary>
            public virtual method that Deletes a Configurations object into the datasource using a transaction.
            </summary>
            <param name="entity">Configurations object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Configurations object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Configurations entity = ConfigurationsService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ConfigurationsService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.Delete(AccountManager.Entities.TList{AccountManager.Entities.Configurations})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Configurations</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Configurations</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Configurations.
             <code><![CDATA[
             TList<Configurations> list = new TList<Configurations>();
             Configurations entity = new Configurations();
             entity.StringProperty = "foo";
             Configurations entity2 = new Configurations();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ConfigurationsService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.Delete(AccountManager.Entities.ConfigurationsKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _name
            </summary>
            <param name="_name">Configurations pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.DeepLoadByName(System.String,System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:AccountManager.Entities.Configurations"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:AccountManager.DataAccess.DeepLoadType"/>.
            </summary>
            <param name="_name">Name of item</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Configurations Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.Configurations"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.DeepLoad(AccountManager.Entities.Configurations)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Configurations Object</param>
            <remarks>
            <seealso cref="M:AccountManager.Services.ConfigurationsServiceBase.DeepLoad(AccountManager.Entities.Configurations)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.DeepLoad(AccountManager.Entities.Configurations,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.ConfigurationsServiceBase.DeepLoad(AccountManager.Entities.Configurations)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Configurations Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.DeepLoad(AccountManager.Entities.Configurations,System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:AccountManager.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:AccountManager.DataAccess.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:AccountManager.Entities.Configurations"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Configurations Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.Configurations})">
            <summary>
            Deep Loads the <see cref="T:AccountManager.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.ConfigurationsServiceBase.DeepLoad(AccountManager.Entities.Configurations)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:AccountManager.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.Configurations},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:AccountManager.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.ConfigurationsServiceBase.DeepLoad(AccountManager.Entities.Configurations)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:AccountManager.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.Configurations},System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:AccountManager.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:AccountManager.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:AccountManager.DataAccess.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:AccountManager.Entities.Configurations"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.DeepSave(AccountManager.Entities.Configurations)">
            <summary>
            public virtualDeep Saves the <see cref="T:AccountManager.Entities.Configurations"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Configurations Object</param>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.DeepSave(AccountManager.Entities.Configurations,AccountManager.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Configurations object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Configurations Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Configurations</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.DeepSave(AccountManager.Entities.TList{AccountManager.Entities.Configurations})">
            <summary>
            Deep Save the entire <see cref="T:AccountManager.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Configurations} Object</param>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsServiceBase.DeepSave(AccountManager.Entities.TList{AccountManager.Entities.Configurations},AccountManager.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:AccountManager.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:AccountManager.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Configurations Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:AccountManager.Services.ConfigurationsServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsService.#ctor">
            <summary>
            Initializes a new instance of the ConfigurationsService class.
            </summary>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsService.CreateConfiguration(System.String,System.String)">
            <summary>
            Create configuration.
            </summary>
            <param name="name">Name of the configuration</param>
            <param name="value">Value of the configuration</param>
            <returns>
            <para>Result of creating configuration</para>
            <para>RET_CODE=EXISTED_DATA: Data is existing.</para>
            <para>RET_CODE=FAIL: Fail to create data.</para>
            <para>RET_CODE=SUCCESS: Create data successfully.</para>
            </returns>
        </member>
        <member name="M:AccountManager.Services.ConfigurationsService.UpdateConfiguration(System.String,System.String)">
            <summary>
            Update configuration
            </summary>
            <param name="name">Name of the configuration</param>
            <param name="value">Value of the configuration</param>
            <returns>
            <para>Result of updating configuration</para>
            <para>RET_CODE=NO_EXISTED_DATA: Data is not existing.</para>
            <para>RET_CODE=FAIL: Fail to update data.</para>
            <para>RET_CODE=SUCCESS: Update data successfully.</para>
            </returns>
        </member>
        <member name="T:AccountManager.Services.ServiceViewBase`1">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:AccountManager.Services.ServiceViewBaseCore`1">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:AccountManager.Services.ServiceViewBaseCore`1.Execute">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:AccountManager.Services.ServiceViewBaseCore`1.Execute(System.Boolean)">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:AccountManager.Services.ServiceViewBaseCore`1.OnProcessStarting(AccountManager.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:AccountManager.Services.ServiceViewBaseCore`1.OnProcessEnded(AccountManager.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:AccountManager.Services.ServiceViewBaseCore`1.Get">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:AccountManager.Services.ServiceViewBaseCore`1.Get(System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:AccountManager.Services.ServiceViewBaseCore`1.Get(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:AccountManager.Services.ServiceViewBaseCore`1.Get(System.String,System.String)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:AccountManager.Services.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:AccountManager.Services.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:AccountManager.Services.ServiceViewBaseCore`1.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:AccountManager.Services.ServiceViewBaseCore`1.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:AccountManager.Services.ServiceViewBaseCore`1.Find(AccountManager.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="P:AccountManager.Services.ServiceViewBaseCore`1.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:AccountManager.Services.ServiceViewBaseCore`1.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:AccountManager.Services.ServiceViewBaseCore`1.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:AccountManager.Services.ServiceViewBaseCore`1.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:AccountManager.Services.ServiceViewBaseCore`1.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:AccountManager.Services.ServiceViewBaseCore`1.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:AccountManager.Services.ServiceViewBaseCore`1.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:AccountManager.Services.ServiceViewBaseCore`1.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:AccountManager.Services.ServiceViewBaseCore`1.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="T:AccountManager.Services.BrokerAmPermissionServiceBase">
            <summary>
             An object representation of the 'BrokerAMPermission' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the BrokerAmPermission.cs file instead.
             All custom implementations should be done in the <see cref="T:AccountManager.Entities.BrokerAmPermission"/> class.
             </remarks>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:AccountManager.Entities.BrokerAmPermission"/> instance .
            </summary>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.CreateBrokerAmPermission(System.Int32,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:AccountManager.Entities.BrokerAmPermission"/> instance.
            </summary>
            <param name="_permissionId"></param>
            <param name="_permissionName"></param>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.Get(AccountManager.Entities.BrokerAmPermissionKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.GetByPermissionId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the primary key PK_BrokerAMPermission index.
            </summary>
            <param name="_permissionId"></param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.BrokerAmPermission"/> class.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.GetByPermissionId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the primary key PK_BrokerAMPermission index.
            </summary>
            <param name="_permissionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.BrokerAmPermission"/> class.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:AccountManager.Entities.BrokerAmPermission"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:AccountManager.Entities.BrokerAmPermission"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:AccountManager.Entities.TList`1"/> </returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:AccountManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>BrokerAmPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:AccountManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>BrokerAmPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:AccountManager.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>BrokerAmPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{BrokerAmPermission} of <c>BrokerAmPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>BrokerAmPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,AccountManager.DataAccess.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:AccountManager.DataAccess.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>BrokerAmPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>BrokerAmPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,AccountManager.DataAccess.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:AccountManager.DataAccess.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>BrokerAmPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>BrokerAmPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.Insert(AccountManager.Entities.BrokerAmPermission)">
            <summary>
            public virtual method that Inserts a BrokerAmPermission object into the datasource using a transaction.
            </summary>
            <param name="entity">BrokerAmPermission object to Insert.</param>
            <remarks>After Inserting into the datasource, the BrokerAmPermission object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            BrokerAmPermission entity = new BrokerAmPermission();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	BrokerAmPermissionService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.Insert(AccountManager.Entities.TList{AccountManager.Entities.BrokerAmPermission})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BrokerAmPermission</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>BrokerAmPermission</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of BrokerAmPermission.
             <code><![CDATA[
             TList<BrokerAmPermission> list = new TList<BrokerAmPermission>();
             BrokerAmPermission entity = new BrokerAmPermission();
             entity.StringProperty = "foo";
             BrokerAmPermission entity2 = new BrokerAmPermission();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BrokerAmPermissionService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.Update(AccountManager.Entities.BrokerAmPermission)">
            <summary>
            public virtual method that Updates a BrokerAmPermission object into the datasource using a transaction.
            </summary>
            <param name="entity">BrokerAmPermission object to Update.</param>
            <remarks>After Updateing into the datasource, the BrokerAmPermission object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            BrokerAmPermission entity = BrokerAmPermissionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	BrokerAmPermissionService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.Update(AccountManager.Entities.TList{AccountManager.Entities.BrokerAmPermission})">
             <summary>
             public virtual method that Updates rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BrokerAmPermission</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>BrokerAmPermission</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of BrokerAmPermission.
             <code><![CDATA[
             TList<BrokerAmPermission> list = new TList<BrokerAmPermission>();
             BrokerAmPermission entity = new BrokerAmPermission();
             entity.StringProperty = "foo";
             BrokerAmPermission entity2 = new BrokerAmPermission();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BrokerAmPermissionService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.Save(AccountManager.Entities.BrokerAmPermission)">
            <summary>
            public virtual method that Saves a BrokerAmPermission object into the datasource using a transaction.
            </summary>
            <param name="entity">BrokerAmPermission object to Save.</param>
            <remarks>After Saveing into the datasource, the BrokerAmPermission object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            BrokerAmPermission entity = BrokerAmPermissionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	BrokerAmPermissionService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.Save(AccountManager.Entities.TList{AccountManager.Entities.BrokerAmPermission})">
             <summary>
             public virtual method that Saves rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BrokerAmPermission</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>BrokerAmPermission</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of BrokerAmPermission.
             <code><![CDATA[
             TList<BrokerAmPermission> list = new TList<BrokerAmPermission>();
             BrokerAmPermission entity = new BrokerAmPermission();
             entity.StringProperty = "foo";
             BrokerAmPermission entity2 = new BrokerAmPermission();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BrokerAmPermissionService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.Delete(AccountManager.Entities.BrokerAmPermission)">
            <summary>
            public virtual method that Deletes a BrokerAmPermission object into the datasource using a transaction.
            </summary>
            <param name="entity">BrokerAmPermission object to Delete.</param>
            <remarks>After Deleteing into the datasource, the BrokerAmPermission object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            BrokerAmPermission entity = BrokerAmPermissionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	BrokerAmPermissionService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.Delete(AccountManager.Entities.TList{AccountManager.Entities.BrokerAmPermission})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BrokerAmPermission</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>BrokerAmPermission</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of BrokerAmPermission.
             <code><![CDATA[
             TList<BrokerAmPermission> list = new TList<BrokerAmPermission>();
             BrokerAmPermission entity = new BrokerAmPermission();
             entity.StringProperty = "foo";
             BrokerAmPermission entity2 = new BrokerAmPermission();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BrokerAmPermissionService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.Delete(AccountManager.Entities.BrokerAmPermissionKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _permissionId
            </summary>
            <param name="_permissionId">BrokerAmPermission pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.GetByBrokerIdFromBrokerPermission(System.String)">
            <summary>
            	Gets BrokerAMPermission objects from the datasource by BrokerID in the
            	BrokerPermission table. Table BrokerAMPermission is related to table BrokerAccount
            	through the (M:N) relationship defined in the BrokerPermission table.
            </summary>
            <param name="_brokerId"></param>
            <returns>Returns a typed collection of BrokerAmPermission objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.GetByBrokerIdFromBrokerPermission(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets BrokerAMPermission objects from the datasource by BrokerID in the
            	BrokerPermission table. Table BrokerAMPermission is related to table BrokerAccount
            	through the (M:N) relationship defined in the BrokerPermission table.
            </summary>
            <param name="_brokerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of BrokerAmPermission objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.DeepLoadByPermissionId(System.Int32,System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:AccountManager.Entities.BrokerAmPermission"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:AccountManager.DataAccess.DeepLoadType"/>.
            </summary>
            <param name="_permissionId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">BrokerAmPermission Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.BrokerAmPermission"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.DeepLoad(AccountManager.Entities.BrokerAmPermission)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">BrokerAmPermission Object</param>
            <remarks>
            <seealso cref="M:AccountManager.Services.BrokerAmPermissionServiceBase.DeepLoad(AccountManager.Entities.BrokerAmPermission)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.DeepLoad(AccountManager.Entities.BrokerAmPermission,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.BrokerAmPermissionServiceBase.DeepLoad(AccountManager.Entities.BrokerAmPermission)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">BrokerAmPermission Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.DeepLoad(AccountManager.Entities.BrokerAmPermission,System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:AccountManager.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:AccountManager.DataAccess.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:AccountManager.Entities.BrokerAmPermission"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">BrokerAmPermission Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.BrokerAmPermission})">
            <summary>
            Deep Loads the <see cref="T:AccountManager.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.BrokerAmPermissionServiceBase.DeepLoad(AccountManager.Entities.BrokerAmPermission)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:AccountManager.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.BrokerAmPermission},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:AccountManager.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.BrokerAmPermissionServiceBase.DeepLoad(AccountManager.Entities.BrokerAmPermission)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:AccountManager.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.BrokerAmPermission},System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:AccountManager.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:AccountManager.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:AccountManager.DataAccess.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:AccountManager.Entities.BrokerAmPermission"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.DeepSave(AccountManager.Entities.BrokerAmPermission)">
            <summary>
            public virtualDeep Saves the <see cref="T:AccountManager.Entities.BrokerAmPermission"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">BrokerAmPermission Object</param>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.DeepSave(AccountManager.Entities.BrokerAmPermission,AccountManager.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the BrokerAmPermission object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">BrokerAmPermission Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>BrokerAmPermission</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.DeepSave(AccountManager.Entities.TList{AccountManager.Entities.BrokerAmPermission})">
            <summary>
            Deep Save the entire <see cref="T:AccountManager.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{BrokerAmPermission} Object</param>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionServiceBase.DeepSave(AccountManager.Entities.TList{AccountManager.Entities.BrokerAmPermission},AccountManager.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:AccountManager.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:AccountManager.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">BrokerAmPermission Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:AccountManager.Services.BrokerAmPermissionServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:AccountManager.Services.SecurityContextBase`1">
            <summary>
            The class that is available in case role based security is required at runtime.  
            It will be made availabe through the entities themselves.
            </summary>
        </member>
        <member name="M:AccountManager.Services.SecurityContextBase`1.#ctor">
            <summary>
            Initializes a new instance of the SecurityContext class.
            </summary>
        </member>
        <member name="M:AccountManager.Services.SecurityContextBase`1.IsAuthorized(System.String)">
            <summary>
            Determine whether user is authorized for the rule based on the rule provider
            </summary>
        </member>
        <member name="P:AccountManager.Services.SecurityContextBase`1.Identity">
            <summary>
            The Current IIdentity.
            </summary>
        </member>
        <member name="P:AccountManager.Services.SecurityContextBase`1.Profile">
            <summary>
            The Current Profile .
            </summary>
        </member>
        <member name="P:AccountManager.Services.SecurityContextBase`1.Principal">
            <summary>
             The Current IPrincipal .
            </summary>
        </member>
        <member name="P:AccountManager.Services.SecurityContextBase`1.RuleProvider">
            <summary>
             The Current Authorization Rule Provider
            </summary>
        </member>
        <member name="T:AccountManager.Services.IConnectionScope">
            <summary>
            Connection Scope Interface
            </summary>
        </member>
        <member name="P:AccountManager.Services.IConnectionScope.ConnectionStringKey">
            <summary>
            Gets or sets the connection string key.
            </summary>
            <value>The connection string key.</value>
        </member>
        <member name="P:AccountManager.Services.IConnectionScope.DataProvider">
            <summary>
            Gets or sets the data provider.
            </summary>
            <value>The data provider.</value>
        </member>
        <member name="P:AccountManager.Services.IConnectionScope.DynamicConnectionString">
            <summary>
            Gets or sets the dynamic connection string.
            </summary>
            <value>The dynamic connection string.</value>
        </member>
        <member name="P:AccountManager.Services.IConnectionScope.HasTransaction">
            <summary>
            Gets a value indicating whether this instance has transaction.
            </summary>
            <value>
            	<c>true</c> if this instance has transaction; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AccountManager.Services.IConnectionScope.TransactionManager">
            <summary>
            Gets or sets the transaction manager.
            </summary>
            <value>The transaction manager.</value>
        </member>
        <member name="T:AccountManager.Services.OpenCustAccountServiceBase">
            <summary>
             An object representation of the 'OpenCustAccount' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the OpenCustAccount.cs file instead.
             All custom implementations should be done in the <see cref="T:AccountManager.Entities.OpenCustAccount"/> class.
             </remarks>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:AccountManager.Entities.OpenCustAccount"/> instance .
            </summary>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.CreateOpenCustAccount(System.String,System.Nullable{System.DateTime},System.String,System.Nullable{System.DateTime},System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.Boolean})">
            <summary>
             A simple factory method to create a new <see cref="T:AccountManager.Entities.OpenCustAccount"/> instance.
            </summary>
            <param name="_openId"></param>
            <param name="_registerDate"></param>
            <param name="_cardId"></param>
            <param name="_cardIssue"></param>
            <param name="_placeIssue"></param>
            <param name="_name"></param>
            <param name="_birthday"></param>
            <param name="_sex"></param>
            <param name="_occupation"></param>
            <param name="_nationality"></param>
            <param name="_address1"></param>
            <param name="_telephone1"></param>
            <param name="_fax1"></param>
            <param name="_address2"></param>
            <param name="_telephone2"></param>
            <param name="_fax2"></param>
            <param name="_address3"></param>
            <param name="_telephone3"></param>
            <param name="_fax3"></param>
            <param name="_email"></param>
            <param name="_branchCode"></param>
            <param name="_branchName"></param>
            <param name="_custodian"></param>
            <param name="_customerType"></param>
            <param name="_tradeAtCompany"></param>
            <param name="_tradeByTelephone"></param>
            <param name="_tradeOnline"></param>
            <param name="_existedAccount"></param>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.Get(AccountManager.Entities.OpenCustAccountKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.GetByOpenId(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the primary key PK_OpenCustAccount index.
            </summary>
            <param name="_openId"></param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.OpenCustAccount"/> class.</returns>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.GetByOpenId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the primary key PK_OpenCustAccount index.
            </summary>
            <param name="_openId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.OpenCustAccount"/> class.</returns>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:AccountManager.Entities.OpenCustAccount"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:AccountManager.Entities.OpenCustAccount"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:AccountManager.Entities.TList`1"/> </returns>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:AccountManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>OpenCustAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:AccountManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>OpenCustAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:AccountManager.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>OpenCustAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{OpenCustAccount} of <c>OpenCustAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>OpenCustAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,AccountManager.DataAccess.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:AccountManager.DataAccess.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>OpenCustAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>OpenCustAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,AccountManager.DataAccess.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:AccountManager.DataAccess.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>OpenCustAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>OpenCustAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.Insert(AccountManager.Entities.OpenCustAccount)">
            <summary>
            public virtual method that Inserts a OpenCustAccount object into the datasource using a transaction.
            </summary>
            <param name="entity">OpenCustAccount object to Insert.</param>
            <remarks>After Inserting into the datasource, the OpenCustAccount object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            OpenCustAccount entity = new OpenCustAccount();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	OpenCustAccountService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.Insert(AccountManager.Entities.TList{AccountManager.Entities.OpenCustAccount})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OpenCustAccount</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>OpenCustAccount</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of OpenCustAccount.
             <code><![CDATA[
             TList<OpenCustAccount> list = new TList<OpenCustAccount>();
             OpenCustAccount entity = new OpenCustAccount();
             entity.StringProperty = "foo";
             OpenCustAccount entity2 = new OpenCustAccount();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OpenCustAccountService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.Update(AccountManager.Entities.OpenCustAccount)">
            <summary>
            public virtual method that Updates a OpenCustAccount object into the datasource using a transaction.
            </summary>
            <param name="entity">OpenCustAccount object to Update.</param>
            <remarks>After Updateing into the datasource, the OpenCustAccount object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            OpenCustAccount entity = OpenCustAccountService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	OpenCustAccountService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.Update(AccountManager.Entities.TList{AccountManager.Entities.OpenCustAccount})">
             <summary>
             public virtual method that Updates rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OpenCustAccount</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>OpenCustAccount</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of OpenCustAccount.
             <code><![CDATA[
             TList<OpenCustAccount> list = new TList<OpenCustAccount>();
             OpenCustAccount entity = new OpenCustAccount();
             entity.StringProperty = "foo";
             OpenCustAccount entity2 = new OpenCustAccount();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OpenCustAccountService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.Save(AccountManager.Entities.OpenCustAccount)">
            <summary>
            public virtual method that Saves a OpenCustAccount object into the datasource using a transaction.
            </summary>
            <param name="entity">OpenCustAccount object to Save.</param>
            <remarks>After Saveing into the datasource, the OpenCustAccount object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            OpenCustAccount entity = OpenCustAccountService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	OpenCustAccountService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.Save(AccountManager.Entities.TList{AccountManager.Entities.OpenCustAccount})">
             <summary>
             public virtual method that Saves rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OpenCustAccount</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>OpenCustAccount</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of OpenCustAccount.
             <code><![CDATA[
             TList<OpenCustAccount> list = new TList<OpenCustAccount>();
             OpenCustAccount entity = new OpenCustAccount();
             entity.StringProperty = "foo";
             OpenCustAccount entity2 = new OpenCustAccount();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OpenCustAccountService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.Delete(AccountManager.Entities.OpenCustAccount)">
            <summary>
            public virtual method that Deletes a OpenCustAccount object into the datasource using a transaction.
            </summary>
            <param name="entity">OpenCustAccount object to Delete.</param>
            <remarks>After Deleteing into the datasource, the OpenCustAccount object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            OpenCustAccount entity = OpenCustAccountService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	OpenCustAccountService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.Delete(AccountManager.Entities.TList{AccountManager.Entities.OpenCustAccount})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OpenCustAccount</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>OpenCustAccount</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of OpenCustAccount.
             <code><![CDATA[
             TList<OpenCustAccount> list = new TList<OpenCustAccount>();
             OpenCustAccount entity = new OpenCustAccount();
             entity.StringProperty = "foo";
             OpenCustAccount entity2 = new OpenCustAccount();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OpenCustAccountService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.Delete(AccountManager.Entities.OpenCustAccountKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _openId
            </summary>
            <param name="_openId">OpenCustAccount pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.DeepLoadByOpenId(System.String,System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:AccountManager.Entities.OpenCustAccount"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:AccountManager.DataAccess.DeepLoadType"/>.
            </summary>
            <param name="_openId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">OpenCustAccount Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.OpenCustAccount"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.DeepLoad(AccountManager.Entities.OpenCustAccount)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">OpenCustAccount Object</param>
            <remarks>
            <seealso cref="M:AccountManager.Services.OpenCustAccountServiceBase.DeepLoad(AccountManager.Entities.OpenCustAccount)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.DeepLoad(AccountManager.Entities.OpenCustAccount,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.OpenCustAccountServiceBase.DeepLoad(AccountManager.Entities.OpenCustAccount)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">OpenCustAccount Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.DeepLoad(AccountManager.Entities.OpenCustAccount,System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:AccountManager.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:AccountManager.DataAccess.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:AccountManager.Entities.OpenCustAccount"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">OpenCustAccount Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.OpenCustAccount})">
            <summary>
            Deep Loads the <see cref="T:AccountManager.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.OpenCustAccountServiceBase.DeepLoad(AccountManager.Entities.OpenCustAccount)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:AccountManager.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.OpenCustAccount},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:AccountManager.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.OpenCustAccountServiceBase.DeepLoad(AccountManager.Entities.OpenCustAccount)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:AccountManager.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.OpenCustAccount},System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:AccountManager.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:AccountManager.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:AccountManager.DataAccess.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:AccountManager.Entities.OpenCustAccount"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.DeepSave(AccountManager.Entities.OpenCustAccount)">
            <summary>
            public virtualDeep Saves the <see cref="T:AccountManager.Entities.OpenCustAccount"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">OpenCustAccount Object</param>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.DeepSave(AccountManager.Entities.OpenCustAccount,AccountManager.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the OpenCustAccount object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">OpenCustAccount Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>OpenCustAccount</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.DeepSave(AccountManager.Entities.TList{AccountManager.Entities.OpenCustAccount})">
            <summary>
            Deep Save the entire <see cref="T:AccountManager.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{OpenCustAccount} Object</param>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountServiceBase.DeepSave(AccountManager.Entities.TList{AccountManager.Entities.OpenCustAccount},AccountManager.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:AccountManager.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:AccountManager.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">OpenCustAccount Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:AccountManager.Services.OpenCustAccountServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:AccountManager.Services.LanguageServiceBase">
            <summary>
             An object representation of the 'Language' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Language.cs file instead.
             All custom implementations should be done in the <see cref="T:AccountManager.Entities.Language"/> class.
             </remarks>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:AccountManager.Entities.Language"/> instance .
            </summary>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.CreateLanguage(System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:AccountManager.Entities.Language"/> instance.
            </summary>
            <param name="_languageId">Language id</param>
            <param name="_languageName">Language name</param>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.Get(AccountManager.Entities.LanguageKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.GetByLanguageId(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the primary key PK_LANGUAGE index.
            </summary>
            <param name="_languageId">Language id</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.Language"/> class.</returns>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.GetByLanguageId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the primary key PK_LANGUAGE index.
            </summary>
            <param name="_languageId">Language id</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.Language"/> class.</returns>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:AccountManager.Entities.Language"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:AccountManager.Entities.Language"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:AccountManager.Entities.TList`1"/> </returns>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:AccountManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Language</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:AccountManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Language</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:AccountManager.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Language</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Language} of <c>Language</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Language</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,AccountManager.DataAccess.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:AccountManager.DataAccess.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Language</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Language</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,AccountManager.DataAccess.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:AccountManager.DataAccess.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Language</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Language</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.Insert(AccountManager.Entities.Language)">
            <summary>
            public virtual method that Inserts a Language object into the datasource using a transaction.
            </summary>
            <param name="entity">Language object to Insert.</param>
            <remarks>After Inserting into the datasource, the Language object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Language entity = new Language();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	LanguageService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.Insert(AccountManager.Entities.TList{AccountManager.Entities.Language})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Language</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Language</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Language.
             <code><![CDATA[
             TList<Language> list = new TList<Language>();
             Language entity = new Language();
             entity.StringProperty = "foo";
             Language entity2 = new Language();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LanguageService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.Update(AccountManager.Entities.Language)">
            <summary>
            public virtual method that Updates a Language object into the datasource using a transaction.
            </summary>
            <param name="entity">Language object to Update.</param>
            <remarks>After Updateing into the datasource, the Language object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Language entity = LanguageService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	LanguageService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.Update(AccountManager.Entities.TList{AccountManager.Entities.Language})">
             <summary>
             public virtual method that Updates rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Language</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Language</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Language.
             <code><![CDATA[
             TList<Language> list = new TList<Language>();
             Language entity = new Language();
             entity.StringProperty = "foo";
             Language entity2 = new Language();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LanguageService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.Save(AccountManager.Entities.Language)">
            <summary>
            public virtual method that Saves a Language object into the datasource using a transaction.
            </summary>
            <param name="entity">Language object to Save.</param>
            <remarks>After Saveing into the datasource, the Language object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Language entity = LanguageService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	LanguageService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.Save(AccountManager.Entities.TList{AccountManager.Entities.Language})">
             <summary>
             public virtual method that Saves rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Language</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Language</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Language.
             <code><![CDATA[
             TList<Language> list = new TList<Language>();
             Language entity = new Language();
             entity.StringProperty = "foo";
             Language entity2 = new Language();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LanguageService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.Delete(AccountManager.Entities.Language)">
            <summary>
            public virtual method that Deletes a Language object into the datasource using a transaction.
            </summary>
            <param name="entity">Language object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Language object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Language entity = LanguageService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	LanguageService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.Delete(AccountManager.Entities.TList{AccountManager.Entities.Language})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Language</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Language</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Language.
             <code><![CDATA[
             TList<Language> list = new TList<Language>();
             Language entity = new Language();
             entity.StringProperty = "foo";
             Language entity2 = new Language();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LanguageService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.Delete(AccountManager.Entities.LanguageKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _languageId
            </summary>
            <param name="_languageId">Language pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.DeepLoadByLanguageId(System.String,System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:AccountManager.Entities.Language"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:AccountManager.DataAccess.DeepLoadType"/>.
            </summary>
            <param name="_languageId">Language id</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Language Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.Language"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.DeepLoad(AccountManager.Entities.Language)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Language Object</param>
            <remarks>
            <seealso cref="M:AccountManager.Services.LanguageServiceBase.DeepLoad(AccountManager.Entities.Language)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.DeepLoad(AccountManager.Entities.Language,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.LanguageServiceBase.DeepLoad(AccountManager.Entities.Language)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Language Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.DeepLoad(AccountManager.Entities.Language,System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:AccountManager.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:AccountManager.DataAccess.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:AccountManager.Entities.Language"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Language Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.Language})">
            <summary>
            Deep Loads the <see cref="T:AccountManager.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.LanguageServiceBase.DeepLoad(AccountManager.Entities.Language)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:AccountManager.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.Language},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:AccountManager.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.LanguageServiceBase.DeepLoad(AccountManager.Entities.Language)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:AccountManager.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.Language},System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:AccountManager.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:AccountManager.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:AccountManager.DataAccess.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:AccountManager.Entities.Language"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.DeepSave(AccountManager.Entities.Language)">
            <summary>
            public virtualDeep Saves the <see cref="T:AccountManager.Entities.Language"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Language Object</param>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.DeepSave(AccountManager.Entities.Language,AccountManager.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Language object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Language Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Language</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.DeepSave(AccountManager.Entities.TList{AccountManager.Entities.Language})">
            <summary>
            Deep Save the entire <see cref="T:AccountManager.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Language} Object</param>
        </member>
        <member name="M:AccountManager.Services.LanguageServiceBase.DeepSave(AccountManager.Entities.TList{AccountManager.Entities.Language},AccountManager.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:AccountManager.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:AccountManager.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Language Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:AccountManager.Services.LanguageServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:AccountManager.Services.ProcessorBase">
            <summary>
            The interface that each complex business unit of work processor will use.
            </summary>
        </member>
        <member name="T:AccountManager.Services.IProcessor">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:AccountManager.Services.IProcessor.Process">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:AccountManager.Services.IProcessor.ChangeProcessorState(AccountManager.Services.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="P:AccountManager.Services.IProcessor.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:AccountManager.Services.IProcessor.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="M:AccountManager.Services.ProcessorBase.Process">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:AccountManager.Services.ProcessorBase.ChangeProcessorState(AccountManager.Services.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:AccountManager.Services.ProcessorBase.OnNotifyProcessorStateChanging(AccountManager.Services.ProcessorState)">
            <summary>
            Raises the ProcessorStateChanging event.
            </summary>
            <param name="newProcessorState"></param>
        </member>
        <member name="P:AccountManager.Services.ProcessorBase.ProcessResult">
            <summary>
            Provides the current process result of it's operation.
            </summary>
        </member>
        <member name="P:AccountManager.Services.ProcessorBase.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>The name of the type of the processors to execute</value>
        </member>
        <member name="P:AccountManager.Services.ProcessorBase.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="E:AccountManager.Services.ProcessorBase.ProcessorStateChanging">
            <summary>
            The ProcessorStateChanging event.
            </summary>
        </member>
        <member name="T:AccountManager.Services.ProcessorBase.ProcessorStateChangingEventHandler">
            <summary>
            The ProcessorStateChangingEventHandler event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:AccountManager.Services.CustServicesPermissionService">
            <summary>
            An component type implementation of the 'CustServicesPermission' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:AccountManager.Services.CustServicesPermissionServiceBase">
            <summary>
             An object representation of the 'CustServicesPermission' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the CustServicesPermission.cs file instead.
             All custom implementations should be done in the <see cref="T:AccountManager.Entities.CustServicesPermission"/> class.
             </remarks>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:AccountManager.Entities.CustServicesPermission"/> instance .
            </summary>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.CreateCustServicesPermission(System.Int32,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:AccountManager.Entities.CustServicesPermission"/> instance.
            </summary>
            <param name="_custServicesPermissionId"></param>
            <param name="_permissionName"></param>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.Get(AccountManager.Entities.CustServicesPermissionKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.GetByCustServicesPermissionId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the primary key PK_CustServicesPermission index.
            </summary>
            <param name="_custServicesPermissionId"></param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.CustServicesPermission"/> class.</returns>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.GetByCustServicesPermissionId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the primary key PK_CustServicesPermission index.
            </summary>
            <param name="_custServicesPermissionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.CustServicesPermission"/> class.</returns>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:AccountManager.Entities.CustServicesPermission"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:AccountManager.Entities.CustServicesPermission"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:AccountManager.Entities.TList`1"/> </returns>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:AccountManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CustServicesPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:AccountManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CustServicesPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:AccountManager.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CustServicesPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{CustServicesPermission} of <c>CustServicesPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>CustServicesPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,AccountManager.DataAccess.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:AccountManager.DataAccess.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>CustServicesPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>CustServicesPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,AccountManager.DataAccess.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:AccountManager.DataAccess.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CustServicesPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CustServicesPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.Insert(AccountManager.Entities.CustServicesPermission)">
            <summary>
            public virtual method that Inserts a CustServicesPermission object into the datasource using a transaction.
            </summary>
            <param name="entity">CustServicesPermission object to Insert.</param>
            <remarks>After Inserting into the datasource, the CustServicesPermission object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            CustServicesPermission entity = new CustServicesPermission();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CustServicesPermissionService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.Insert(AccountManager.Entities.TList{AccountManager.Entities.CustServicesPermission})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CustServicesPermission</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>CustServicesPermission</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of CustServicesPermission.
             <code><![CDATA[
             TList<CustServicesPermission> list = new TList<CustServicesPermission>();
             CustServicesPermission entity = new CustServicesPermission();
             entity.StringProperty = "foo";
             CustServicesPermission entity2 = new CustServicesPermission();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CustServicesPermissionService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.Update(AccountManager.Entities.CustServicesPermission)">
            <summary>
            public virtual method that Updates a CustServicesPermission object into the datasource using a transaction.
            </summary>
            <param name="entity">CustServicesPermission object to Update.</param>
            <remarks>After Updateing into the datasource, the CustServicesPermission object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            CustServicesPermission entity = CustServicesPermissionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CustServicesPermissionService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.Update(AccountManager.Entities.TList{AccountManager.Entities.CustServicesPermission})">
             <summary>
             public virtual method that Updates rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CustServicesPermission</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>CustServicesPermission</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of CustServicesPermission.
             <code><![CDATA[
             TList<CustServicesPermission> list = new TList<CustServicesPermission>();
             CustServicesPermission entity = new CustServicesPermission();
             entity.StringProperty = "foo";
             CustServicesPermission entity2 = new CustServicesPermission();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CustServicesPermissionService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.Save(AccountManager.Entities.CustServicesPermission)">
            <summary>
            public virtual method that Saves a CustServicesPermission object into the datasource using a transaction.
            </summary>
            <param name="entity">CustServicesPermission object to Save.</param>
            <remarks>After Saveing into the datasource, the CustServicesPermission object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            CustServicesPermission entity = CustServicesPermissionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CustServicesPermissionService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.Save(AccountManager.Entities.TList{AccountManager.Entities.CustServicesPermission})">
             <summary>
             public virtual method that Saves rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CustServicesPermission</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>CustServicesPermission</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of CustServicesPermission.
             <code><![CDATA[
             TList<CustServicesPermission> list = new TList<CustServicesPermission>();
             CustServicesPermission entity = new CustServicesPermission();
             entity.StringProperty = "foo";
             CustServicesPermission entity2 = new CustServicesPermission();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CustServicesPermissionService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.Delete(AccountManager.Entities.CustServicesPermission)">
            <summary>
            public virtual method that Deletes a CustServicesPermission object into the datasource using a transaction.
            </summary>
            <param name="entity">CustServicesPermission object to Delete.</param>
            <remarks>After Deleteing into the datasource, the CustServicesPermission object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            CustServicesPermission entity = CustServicesPermissionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CustServicesPermissionService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.Delete(AccountManager.Entities.TList{AccountManager.Entities.CustServicesPermission})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CustServicesPermission</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>CustServicesPermission</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of CustServicesPermission.
             <code><![CDATA[
             TList<CustServicesPermission> list = new TList<CustServicesPermission>();
             CustServicesPermission entity = new CustServicesPermission();
             entity.StringProperty = "foo";
             CustServicesPermission entity2 = new CustServicesPermission();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CustServicesPermissionService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.Delete(AccountManager.Entities.CustServicesPermissionKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _custServicesPermissionId
            </summary>
            <param name="_custServicesPermissionId">CustServicesPermission pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.GetBySubCustAccountIdFromSubCustAccountPermission(System.String)">
            <summary>
            	Gets CustServicesPermission objects from the datasource by SubCustAccountID in the
            	SubCustAccountPermission table. Table CustServicesPermission is related to table SubCustAccount
            	through the (M:N) relationship defined in the SubCustAccountPermission table.
            </summary>
            <param name="_subCustAccountId"></param>
            <returns>Returns a typed collection of CustServicesPermission objects.</returns>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.GetBySubCustAccountIdFromSubCustAccountPermission(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets CustServicesPermission objects from the datasource by SubCustAccountID in the
            	SubCustAccountPermission table. Table CustServicesPermission is related to table SubCustAccount
            	through the (M:N) relationship defined in the SubCustAccountPermission table.
            </summary>
            <param name="_subCustAccountId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of CustServicesPermission objects.</returns>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.DeepLoadByCustServicesPermissionId(System.Int32,System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:AccountManager.Entities.CustServicesPermission"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:AccountManager.DataAccess.DeepLoadType"/>.
            </summary>
            <param name="_custServicesPermissionId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CustServicesPermission Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.CustServicesPermission"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.DeepLoad(AccountManager.Entities.CustServicesPermission)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">CustServicesPermission Object</param>
            <remarks>
            <seealso cref="M:AccountManager.Services.CustServicesPermissionServiceBase.DeepLoad(AccountManager.Entities.CustServicesPermission)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.DeepLoad(AccountManager.Entities.CustServicesPermission,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.CustServicesPermissionServiceBase.DeepLoad(AccountManager.Entities.CustServicesPermission)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">CustServicesPermission Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.DeepLoad(AccountManager.Entities.CustServicesPermission,System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:AccountManager.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:AccountManager.DataAccess.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:AccountManager.Entities.CustServicesPermission"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CustServicesPermission Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.CustServicesPermission})">
            <summary>
            Deep Loads the <see cref="T:AccountManager.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.CustServicesPermissionServiceBase.DeepLoad(AccountManager.Entities.CustServicesPermission)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:AccountManager.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.CustServicesPermission},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:AccountManager.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.CustServicesPermissionServiceBase.DeepLoad(AccountManager.Entities.CustServicesPermission)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:AccountManager.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.CustServicesPermission},System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:AccountManager.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:AccountManager.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:AccountManager.DataAccess.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:AccountManager.Entities.CustServicesPermission"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.DeepSave(AccountManager.Entities.CustServicesPermission)">
            <summary>
            public virtualDeep Saves the <see cref="T:AccountManager.Entities.CustServicesPermission"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">CustServicesPermission Object</param>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.DeepSave(AccountManager.Entities.CustServicesPermission,AccountManager.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the CustServicesPermission object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">CustServicesPermission Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>CustServicesPermission</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.DeepSave(AccountManager.Entities.TList{AccountManager.Entities.CustServicesPermission})">
            <summary>
            Deep Save the entire <see cref="T:AccountManager.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{CustServicesPermission} Object</param>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionServiceBase.DeepSave(AccountManager.Entities.TList{AccountManager.Entities.CustServicesPermission},AccountManager.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:AccountManager.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:AccountManager.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CustServicesPermission Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:AccountManager.Services.CustServicesPermissionServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:AccountManager.Services.CustServicesPermissionService.#ctor">
            <summary>
            Initializes a new instance of the CustServicesPermissionService class.
            </summary>
        </member>
        <member name="T:AccountManager.Services.SecurityContext`1">
            <summary>
            The class that is available in case role based security is required at runtime.  
            It will be made availabe through the entities themselves.
            </summary>
        </member>
        <member name="M:AccountManager.Services.SecurityContext`1.#ctor">
            <summary>
             Creates a new <see cref="T:System.Security.SecurityContext"/> instance.
            </summary>
        </member>
        <member name="T:AccountManager.Services.ProcessorState">
            <summary>
            ProcessorState enumeration.
            </summary>
        </member>
        <member name="F:AccountManager.Services.ProcessorState.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:AccountManager.Services.ProcessorState.Running">
            <summary>
            Running
            </summary>
        </member>
        <member name="F:AccountManager.Services.ProcessorState.Stopped">
            <summary>
            Stopped
            </summary>
        </member>
        <member name="F:AccountManager.Services.ProcessorState.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="T:AccountManager.Services.SubCustAccountService">
            <summary>
            An component type implementation of the 'SubCustAccount' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:AccountManager.Services.SubCustAccountServiceBase">
            <summary>
             An object representation of the 'SubCustAccount' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the SubCustAccount.cs file instead.
             All custom implementations should be done in the <see cref="T:AccountManager.Entities.SubCustAccount"/> class.
             </remarks>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:AccountManager.Entities.SubCustAccount"/> instance .
            </summary>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.CreateSubCustAccount(System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Int16},System.String,System.Nullable{System.DateTime},System.String,System.Nullable{System.DateTime},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:AccountManager.Entities.SubCustAccount"/> instance.
            </summary>
            <param name="_subCustAccountId"></param>
            <param name="_name"></param>
            <param name="_actived"></param>
            <param name="_lockAccountReason"></param>
            <param name="_mainCustAccountId"></param>
            <param name="_createdDate"></param>
            <param name="_createdUser"></param>
            <param name="_updatedDate"></param>
            <param name="_updatedUser"></param>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.GetByMainCustAccountId(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the FK_SubCustAccount_MainCustAccount key.
            	FK_SubCustAccount_MainCustAccount Description: 
            </summary>
            <param name="_mainCustAccountId"></param>
            <returns>Returns a generic collection of SubCustAccount objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.GetByMainCustAccountId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the FK_SubCustAccount_MainCustAccount key.
            	FK_SubCustAccount_MainCustAccount Description: 
            </summary>
            <param name="_mainCustAccountId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:AccountManager.Entities.TList`1"/> of <c>SubCustAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.Get(AccountManager.Entities.SubCustAccountKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.GetBySubCustAccountId(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the primary key PK_SubCustAccount index.
            </summary>
            <param name="_subCustAccountId"></param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.SubCustAccount"/> class.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.GetBySubCustAccountId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the primary key PK_SubCustAccount index.
            </summary>
            <param name="_subCustAccountId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.SubCustAccount"/> class.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:AccountManager.Entities.SubCustAccount"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:AccountManager.Entities.SubCustAccount"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:AccountManager.Entities.TList`1"/> </returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:AccountManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SubCustAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:AccountManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SubCustAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:AccountManager.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SubCustAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{SubCustAccount} of <c>SubCustAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>SubCustAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,AccountManager.DataAccess.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:AccountManager.DataAccess.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>SubCustAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>SubCustAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,AccountManager.DataAccess.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:AccountManager.DataAccess.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SubCustAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SubCustAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.Insert(AccountManager.Entities.SubCustAccount)">
            <summary>
            public virtual method that Inserts a SubCustAccount object into the datasource using a transaction.
            </summary>
            <param name="entity">SubCustAccount object to Insert.</param>
            <remarks>After Inserting into the datasource, the SubCustAccount object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            SubCustAccount entity = new SubCustAccount();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	SubCustAccountService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.Insert(AccountManager.Entities.TList{AccountManager.Entities.SubCustAccount})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SubCustAccount</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>SubCustAccount</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of SubCustAccount.
             <code><![CDATA[
             TList<SubCustAccount> list = new TList<SubCustAccount>();
             SubCustAccount entity = new SubCustAccount();
             entity.StringProperty = "foo";
             SubCustAccount entity2 = new SubCustAccount();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SubCustAccountService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.Update(AccountManager.Entities.SubCustAccount)">
            <summary>
            public virtual method that Updates a SubCustAccount object into the datasource using a transaction.
            </summary>
            <param name="entity">SubCustAccount object to Update.</param>
            <remarks>After Updateing into the datasource, the SubCustAccount object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            SubCustAccount entity = SubCustAccountService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	SubCustAccountService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.Update(AccountManager.Entities.TList{AccountManager.Entities.SubCustAccount})">
             <summary>
             public virtual method that Updates rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SubCustAccount</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>SubCustAccount</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of SubCustAccount.
             <code><![CDATA[
             TList<SubCustAccount> list = new TList<SubCustAccount>();
             SubCustAccount entity = new SubCustAccount();
             entity.StringProperty = "foo";
             SubCustAccount entity2 = new SubCustAccount();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SubCustAccountService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.Save(AccountManager.Entities.SubCustAccount)">
            <summary>
            public virtual method that Saves a SubCustAccount object into the datasource using a transaction.
            </summary>
            <param name="entity">SubCustAccount object to Save.</param>
            <remarks>After Saveing into the datasource, the SubCustAccount object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            SubCustAccount entity = SubCustAccountService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	SubCustAccountService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.Save(AccountManager.Entities.TList{AccountManager.Entities.SubCustAccount})">
             <summary>
             public virtual method that Saves rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SubCustAccount</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>SubCustAccount</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of SubCustAccount.
             <code><![CDATA[
             TList<SubCustAccount> list = new TList<SubCustAccount>();
             SubCustAccount entity = new SubCustAccount();
             entity.StringProperty = "foo";
             SubCustAccount entity2 = new SubCustAccount();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SubCustAccountService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.Delete(AccountManager.Entities.SubCustAccount)">
            <summary>
            public virtual method that Deletes a SubCustAccount object into the datasource using a transaction.
            </summary>
            <param name="entity">SubCustAccount object to Delete.</param>
            <remarks>After Deleteing into the datasource, the SubCustAccount object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            SubCustAccount entity = SubCustAccountService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	SubCustAccountService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.Delete(AccountManager.Entities.TList{AccountManager.Entities.SubCustAccount})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SubCustAccount</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>SubCustAccount</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of SubCustAccount.
             <code><![CDATA[
             TList<SubCustAccount> list = new TList<SubCustAccount>();
             SubCustAccount entity = new SubCustAccount();
             entity.StringProperty = "foo";
             SubCustAccount entity2 = new SubCustAccount();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SubCustAccountService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.Delete(AccountManager.Entities.SubCustAccountKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _subCustAccountId
            </summary>
            <param name="_subCustAccountId">SubCustAccount pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.GetByCustServicesPermissionIdFromSubCustAccountPermission(System.Int32)">
            <summary>
            	Gets SubCustAccount objects from the datasource by CustServicesPermissionID in the
            	SubCustAccountPermission table. Table SubCustAccount is related to table CustServicesPermission
            	through the (M:N) relationship defined in the SubCustAccountPermission table.
            </summary>
            <param name="_custServicesPermissionId"></param>
            <returns>Returns a typed collection of SubCustAccount objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.GetByCustServicesPermissionIdFromSubCustAccountPermission(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets SubCustAccount objects from the datasource by CustServicesPermissionID in the
            	SubCustAccountPermission table. Table SubCustAccount is related to table CustServicesPermission
            	through the (M:N) relationship defined in the SubCustAccountPermission table.
            </summary>
            <param name="_custServicesPermissionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out param: Total Number of results returned.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of SubCustAccount objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.DeepLoadBySubCustAccountId(System.String,System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:AccountManager.Entities.SubCustAccount"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:AccountManager.DataAccess.DeepLoadType"/>.
            </summary>
            <param name="_subCustAccountId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SubCustAccount Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.SubCustAccount"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.DeepLoad(AccountManager.Entities.SubCustAccount)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">SubCustAccount Object</param>
            <remarks>
            <seealso cref="M:AccountManager.Services.SubCustAccountServiceBase.DeepLoad(AccountManager.Entities.SubCustAccount)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.DeepLoad(AccountManager.Entities.SubCustAccount,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.SubCustAccountServiceBase.DeepLoad(AccountManager.Entities.SubCustAccount)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">SubCustAccount Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.DeepLoad(AccountManager.Entities.SubCustAccount,System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:AccountManager.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:AccountManager.DataAccess.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:AccountManager.Entities.SubCustAccount"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SubCustAccount Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.SubCustAccount})">
            <summary>
            Deep Loads the <see cref="T:AccountManager.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.SubCustAccountServiceBase.DeepLoad(AccountManager.Entities.SubCustAccount)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:AccountManager.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.SubCustAccount},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:AccountManager.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.SubCustAccountServiceBase.DeepLoad(AccountManager.Entities.SubCustAccount)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:AccountManager.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.SubCustAccount},System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:AccountManager.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:AccountManager.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:AccountManager.DataAccess.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:AccountManager.Entities.SubCustAccount"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.DeepSave(AccountManager.Entities.SubCustAccount)">
            <summary>
            public virtualDeep Saves the <see cref="T:AccountManager.Entities.SubCustAccount"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">SubCustAccount Object</param>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.DeepSave(AccountManager.Entities.SubCustAccount,AccountManager.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the SubCustAccount object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">SubCustAccount Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>SubCustAccount</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.DeepSave(AccountManager.Entities.TList{AccountManager.Entities.SubCustAccount})">
            <summary>
            Deep Save the entire <see cref="T:AccountManager.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{SubCustAccount} Object</param>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountServiceBase.DeepSave(AccountManager.Entities.TList{AccountManager.Entities.SubCustAccount},AccountManager.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:AccountManager.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:AccountManager.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">SubCustAccount Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:AccountManager.Services.SubCustAccountServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountService.#ctor">
            <summary>
            Initializes a new instance of the SubCustAccountService class.
            </summary>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountService.SaveSubCustAccount(AccountManager.Entities.SubCustAccount,System.Collections.Generic.List{System.Int32})">
            <summary>
             Save a new sub customer
            </summary>
            <param name="entity">Information of sub customer account</param>
            <param name="permissionList">Permission list of sub customer account</param>
             <returns>
             <para>Result of creating new sub customer account.</para>
             <para>RET_CODE=EXISTED_DATA: Information already exists.</para>
             <para>RET_CODE=FAIL: Failed to create sub customer account information.</para>
             <para>RET_CODE=SUCCESS: Create sub customer successfully.</para>
             </returns>
            <exception cref="T:AccountManager.Entities.EntityNotValidException"></exception>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountService.UpdateSubCustAccount(AccountManager.Entities.SubCustAccount,System.Collections.Generic.List{System.Int32})">
            <summary>
            Update a new sub customer
            </summary>
            <param name="newSubCustAccount">Information of sub customer account</param>
            <param name="permissionList">List of sub customer permission</param>
            <returns>
            <para>Result of updating sub customer account information.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=FAIL: Failed to update sub customer account information.</para>
            <para>RET_CODE=SUCCESS: Update sub customer successfully.</para>
            </returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountService.ActivateSubCustAccount(System.String,System.Boolean,System.Int16,System.String)">
             <summary>
             Activate or deactivate a sub customer account to allow to use this sub customer account.
             </summary>
             <param name="subCustAccId">Id of sub customer account</param>
             <param name="actived">true if sub customer account is actived; otherwise, false</param>
            <param name="lockReason">Lock reason</param>
            <param name="updatedUserId">Id of updating user</param>
            <returns>
             <para>Result of the activating action.</para>
             <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
             <para>RET_CODE=FAIL: Failed to activate sub customer account information.</para>
             <para>RET_CODE=SUCCESS: Activate sub customer successfully.</para>
             </returns>
            <exception cref="T:AccountManager.Entities.EntityNotValidException"></exception>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountService.InsertNewPermission(AccountManager.DataAccess.Bases.NetTiersProvider,System.String,System.Collections.Generic.ICollection{System.Int32})">
            <summary>
            Insert new permissions for sub customer account.
            </summary>
            <param name="dataProvider"></param>
            <param name="subCustAccountId"></param>
            <param name="permissionList"></param>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountService.GetSubCustAccount(System.String)">
            <summary>
             method that get information of <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on subCustAccountId.
            </summary>
            <param name="subCustAccountId"></param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.SubCustAccount"/> class.</returns>
        </member>
        <member name="T:AccountManager.Services.CustomerActionHistoryService">
            <summary>
            An component type implementation of the 'CustomerActionHistory' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:AccountManager.Services.CustomerActionHistoryServiceBase">
            <summary>
             An object representation of the 'CustomerActionHistory' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the CustomerActionHistory.cs file instead.
             All custom implementations should be done in the <see cref="T:AccountManager.Entities.CustomerActionHistory"/> class.
             </remarks>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:AccountManager.Entities.CustomerActionHistory"/> instance .
            </summary>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.CreateCustomerActionHistory(System.String,System.DateTime,System.String,System.String,System.Int32,System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:AccountManager.Entities.CustomerActionHistory"/> instance.
            </summary>
            <param name="_brokerId">BrokerID</param>
            <param name="_actionTime">The time action happens</param>
            <param name="_mainCustAccountId">Main customer account ID</param>
            <param name="_subCustAccountId">Sub customer account ID</param>
            <param name="_actionType">Action type (login, logout, ...)</param>
            <param name="_reason">Further information</param>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.GetByMainCustAccountId(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the FK_CustomerActionHistory_MainCustAccount key.
            	FK_CustomerActionHistory_MainCustAccount Description: 
            </summary>
            <param name="_mainCustAccountId">Main customer account ID</param>
            <returns>Returns a generic collection of CustomerActionHistory objects.</returns>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.GetByMainCustAccountId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the FK_CustomerActionHistory_MainCustAccount key.
            	FK_CustomerActionHistory_MainCustAccount Description: 
            </summary>
            <param name="_mainCustAccountId">Main customer account ID</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:AccountManager.Entities.TList`1"/> of <c>CustomerActionHistory</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.GetBySubCustAccountId(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the FK_CustomerActionHistory_SubCustAccount key.
            	FK_CustomerActionHistory_SubCustAccount Description: 
            </summary>
            <param name="_subCustAccountId">Sub customer account ID</param>
            <returns>Returns a generic collection of CustomerActionHistory objects.</returns>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.GetBySubCustAccountId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the FK_CustomerActionHistory_SubCustAccount key.
            	FK_CustomerActionHistory_SubCustAccount Description: 
            </summary>
            <param name="_subCustAccountId">Sub customer account ID</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:AccountManager.Entities.TList`1"/> of <c>CustomerActionHistory</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.Get(AccountManager.Entities.CustomerActionHistoryKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.GetById(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the primary key PK_CustomerActionHistory index.
            </summary>
            <param name="_id">Auto increase ID</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.CustomerActionHistory"/> class.</returns>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.GetById(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the primary key PK_CustomerActionHistory index.
            </summary>
            <param name="_id">Auto increase ID</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.CustomerActionHistory"/> class.</returns>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:AccountManager.Entities.CustomerActionHistory"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:AccountManager.Entities.CustomerActionHistory"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:AccountManager.Entities.TList`1"/> </returns>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:AccountManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CustomerActionHistory</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:AccountManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CustomerActionHistory</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:AccountManager.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CustomerActionHistory</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{CustomerActionHistory} of <c>CustomerActionHistory</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>CustomerActionHistory</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,AccountManager.DataAccess.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:AccountManager.DataAccess.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>CustomerActionHistory</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>CustomerActionHistory</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,AccountManager.DataAccess.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:AccountManager.DataAccess.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CustomerActionHistory</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CustomerActionHistory</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.Insert(AccountManager.Entities.CustomerActionHistory)">
            <summary>
            public virtual method that Inserts a CustomerActionHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">CustomerActionHistory object to Insert.</param>
            <remarks>After Inserting into the datasource, the CustomerActionHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            CustomerActionHistory entity = new CustomerActionHistory();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CustomerActionHistoryService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.Insert(AccountManager.Entities.TList{AccountManager.Entities.CustomerActionHistory})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CustomerActionHistory</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>CustomerActionHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of CustomerActionHistory.
             <code><![CDATA[
             TList<CustomerActionHistory> list = new TList<CustomerActionHistory>();
             CustomerActionHistory entity = new CustomerActionHistory();
             entity.StringProperty = "foo";
             CustomerActionHistory entity2 = new CustomerActionHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CustomerActionHistoryService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.Update(AccountManager.Entities.CustomerActionHistory)">
            <summary>
            public virtual method that Updates a CustomerActionHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">CustomerActionHistory object to Update.</param>
            <remarks>After Updateing into the datasource, the CustomerActionHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            CustomerActionHistory entity = CustomerActionHistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CustomerActionHistoryService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.Update(AccountManager.Entities.TList{AccountManager.Entities.CustomerActionHistory})">
             <summary>
             public virtual method that Updates rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CustomerActionHistory</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>CustomerActionHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of CustomerActionHistory.
             <code><![CDATA[
             TList<CustomerActionHistory> list = new TList<CustomerActionHistory>();
             CustomerActionHistory entity = new CustomerActionHistory();
             entity.StringProperty = "foo";
             CustomerActionHistory entity2 = new CustomerActionHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CustomerActionHistoryService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.Save(AccountManager.Entities.CustomerActionHistory)">
            <summary>
            public virtual method that Saves a CustomerActionHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">CustomerActionHistory object to Save.</param>
            <remarks>After Saveing into the datasource, the CustomerActionHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            CustomerActionHistory entity = CustomerActionHistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CustomerActionHistoryService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.Save(AccountManager.Entities.TList{AccountManager.Entities.CustomerActionHistory})">
             <summary>
             public virtual method that Saves rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CustomerActionHistory</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>CustomerActionHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of CustomerActionHistory.
             <code><![CDATA[
             TList<CustomerActionHistory> list = new TList<CustomerActionHistory>();
             CustomerActionHistory entity = new CustomerActionHistory();
             entity.StringProperty = "foo";
             CustomerActionHistory entity2 = new CustomerActionHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CustomerActionHistoryService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.Delete(AccountManager.Entities.CustomerActionHistory)">
            <summary>
            public virtual method that Deletes a CustomerActionHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">CustomerActionHistory object to Delete.</param>
            <remarks>After Deleteing into the datasource, the CustomerActionHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            CustomerActionHistory entity = CustomerActionHistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CustomerActionHistoryService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.Delete(AccountManager.Entities.TList{AccountManager.Entities.CustomerActionHistory})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CustomerActionHistory</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>CustomerActionHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of CustomerActionHistory.
             <code><![CDATA[
             TList<CustomerActionHistory> list = new TList<CustomerActionHistory>();
             CustomerActionHistory entity = new CustomerActionHistory();
             entity.StringProperty = "foo";
             CustomerActionHistory entity2 = new CustomerActionHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CustomerActionHistoryService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.Delete(AccountManager.Entities.CustomerActionHistoryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 _id
            </summary>
            <param name="_id">CustomerActionHistory pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.DeepLoadById(System.Int64,System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:AccountManager.Entities.CustomerActionHistory"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:AccountManager.DataAccess.DeepLoadType"/>.
            </summary>
            <param name="_id">Auto increase ID</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CustomerActionHistory Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.CustomerActionHistory"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.DeepLoad(AccountManager.Entities.CustomerActionHistory)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">CustomerActionHistory Object</param>
            <remarks>
            <seealso cref="M:AccountManager.Services.CustomerActionHistoryServiceBase.DeepLoad(AccountManager.Entities.CustomerActionHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.DeepLoad(AccountManager.Entities.CustomerActionHistory,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.CustomerActionHistoryServiceBase.DeepLoad(AccountManager.Entities.CustomerActionHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">CustomerActionHistory Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.DeepLoad(AccountManager.Entities.CustomerActionHistory,System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:AccountManager.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:AccountManager.DataAccess.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:AccountManager.Entities.CustomerActionHistory"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CustomerActionHistory Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.CustomerActionHistory})">
            <summary>
            Deep Loads the <see cref="T:AccountManager.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.CustomerActionHistoryServiceBase.DeepLoad(AccountManager.Entities.CustomerActionHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:AccountManager.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.CustomerActionHistory},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:AccountManager.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.CustomerActionHistoryServiceBase.DeepLoad(AccountManager.Entities.CustomerActionHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:AccountManager.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.CustomerActionHistory},System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:AccountManager.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:AccountManager.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:AccountManager.DataAccess.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:AccountManager.Entities.CustomerActionHistory"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.DeepSave(AccountManager.Entities.CustomerActionHistory)">
            <summary>
            public virtualDeep Saves the <see cref="T:AccountManager.Entities.CustomerActionHistory"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">CustomerActionHistory Object</param>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.DeepSave(AccountManager.Entities.CustomerActionHistory,AccountManager.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the CustomerActionHistory object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">CustomerActionHistory Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>CustomerActionHistory</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.DeepSave(AccountManager.Entities.TList{AccountManager.Entities.CustomerActionHistory})">
            <summary>
            Deep Save the entire <see cref="T:AccountManager.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{CustomerActionHistory} Object</param>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryServiceBase.DeepSave(AccountManager.Entities.TList{AccountManager.Entities.CustomerActionHistory},AccountManager.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:AccountManager.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:AccountManager.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CustomerActionHistory Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:AccountManager.Services.CustomerActionHistoryServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryService.#ctor">
            <summary>
            Initializes a new instance of the CustomerActionHistoryService class.
            </summary>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryService.InsertCustomerActionHistory(System.String,System.DateTime,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="brokerId"></param>
            <param name="actionTime"></param>
            <param name="mainCustAccountId"></param>
            <param name="subCustAccountId"></param>
            <param name="actionType"></param>
            <param name="reason"></param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.CustomerActionHistoryService.GetList(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
             <summary>
             Get a collection of <see cref="T:AccountManager.Entities.CustomerActionHistory"/> entities.
             </summary>
             <param name="brokerId">BrokerId Id</param>
             <param name="fromDate">Search from date (DD/MM/YYYY)</param>
             <param name="toDate">Search to date (DD/MM/YYYY)</param>
             <param name="mainCustAccountId">Main customer account id</param>
             <param name="subCustAccountId">Sub customer account id</param>
             <param name="actionType">Account type</param>
             <param name="reason">Reason</param>
             <param name="pageIndex">Page index</param>
             <param name="pageSize">Page size</param>
            <param name="totalRecord">Total record</param>
            <returns></returns>
        </member>
        <member name="T:AccountManager.Services.ConnectionScopeBase">
            <summary>
            Provides storage of global database connection information.
            </summary>
        </member>
        <member name="M:AccountManager.Services.ConnectionScopeBase.#ctor">
            <summary>
            Initializes a new instance of the ConnectionScope class.
            </summary>
        </member>
        <member name="F:AccountManager.Services.ConnectionScopeBase.connectionStringKey">
            <summary>
            The ConnectionStringKey member variable.
            </summary>
        </member>
        <member name="F:AccountManager.Services.ConnectionScopeBase.dynamicConnectionString">
            <summary>
            The DynamicConnectionString member variable.
            </summary>
        </member>
        <member name="F:AccountManager.Services.ConnectionScopeBase.transactionManager">
            <summary>
            The TransactionManager member variable.
            </summary>
        </member>
        <member name="F:AccountManager.Services.ConnectionScopeBase.dataProvider">
            <summary>
            The NetTiersProvider member variable.
            </summary>
        </member>
        <member name="P:AccountManager.Services.ConnectionScopeBase.ConnectionStringKey">
            <summary>
            Gets or sets the ConnectionStringKey property.
            </summary>
        </member>
        <member name="P:AccountManager.Services.ConnectionScopeBase.DynamicConnectionString">
            <summary>
            Gets or sets the DynamicConnectionString property.
            </summary>
        </member>
        <member name="P:AccountManager.Services.ConnectionScopeBase.TransactionManager">
            <summary>
            Gets or sets the TransactionManager property.
            </summary>
        </member>
        <member name="P:AccountManager.Services.ConnectionScopeBase.DataProvider">
             <summary>
             Gets or Sets the Current DataProvider property of the <c>ConnectionScope</c> Object.
             </summary>
             <remarks>
             To use a dynamic connection, you must set both the 
             DynamicConnectionString and a unique ConnectionStringKey properties;
            </remarks>
        </member>
        <member name="P:AccountManager.Services.ConnectionScopeBase.HasTransaction">
            <summary>
            Determines if Current Connections is in a Transaction.
            </summary>
        </member>
        <member name="T:AccountManager.Services.ConnectionScope">
            <summary>
            Provides storage of global database connection information.
            </summary>
        </member>
        <member name="M:AccountManager.Services.ConnectionScope.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:AccountManager.Services.ConnectionScope.NewThread(System.Threading.ThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:AccountManager.Services.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:AccountManager.Services.ConnectionScope.NewThread(System.Threading.ParameterizedThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:AccountManager.Services.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:AccountManager.Services.ConnectionScope.EnqueueOnThreadPool(System.Threading.ThreadStart)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:AccountManager.Services.ConnectionScope.EnqueueOnThreadPool(System.Threading.ParameterizedThreadStart,System.Object)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <param name="state">An object containing data to be used by the method.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:AccountManager.Services.ConnectionScope.Copy(AccountManager.Services.ConnectionScope)">
            <summary>
            Copies the values from the specified <paramref name="scope"/> object
            to the <see cref="T:AccountManager.Services.ConnectionScope"/> used by the current thread.
            </summary>
            <param name="scope">A <see cref="T:AccountManager.Services.ConnectionScope"/> object.</param>
        </member>
        <member name="M:AccountManager.Services.ConnectionScope.ValidateOrCreateTransaction">
            <summary>
            Validates an existing <c cref="T:AccountManager.DataAccess.TransactionManager"/> if one exists,
            otherwise creates a new <c cref="T:AccountManager.DataAccess.TransactionManager"/> to use.
            </summary>
        </member>
        <member name="M:AccountManager.Services.ConnectionScope.ValidateOrCreateTransaction(System.Boolean)">
            <summary>
            Validates an existing <c cref="T:AccountManager.DataAccess.TransactionManager"/> if one exists,
            otherwise creates a new <c cref="T:AccountManager.DataAccess.TransactionManager"/> to use.
            </summary>
            <param name="createTransaction">determines whether to create a new transaction</param>
        </member>
        <member name="M:AccountManager.Services.ConnectionScope.CreateTransaction">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>.
            </summary>
        </member>
        <member name="M:AccountManager.Services.ConnectionScope.CreateTransaction(System.Data.IsolationLevel)">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>
            with the specified <c cref="T:System.Data.IsolationLevel"/>.
            </summary>
            <param name="level">Determines which <c cref="T:System.Data.IsolationLevel"/> to use for the transaction.</param>
        </member>
        <member name="M:AccountManager.Services.ConnectionScope.Complete">
            <summary>
            Completes this transaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.ConnectionScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:AccountManager.Services.ConnectionScope.Current">
            <summary>
            Gets a reference to the ConnectionScope object for the current thread.
            </summary>
        </member>
        <member name="P:AccountManager.Services.ConnectionScope.HasTransaction">
            <summary>
            Determines if Current Connections is in a Transaction.
            </summary>
        </member>
        <member name="T:AccountManager.Services.IProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:AccountManager.Services.IProcessorResult.AddBrokenRulesList(System.Type,AccountManager.Entities.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:AccountManager.Services.IProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:AccountManager.Services.IProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:AccountManager.Services.IProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation.
            </summary>
        </member>
        <member name="T:AccountManager.Services.GenericProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary> 
        </member>
        <member name="M:AccountManager.Services.GenericProcessorResult.#ctor">
            <summary>
            Initializes a new instance of the GenericProcessorResult class.
            </summary>
        </member>
        <member name="M:AccountManager.Services.GenericProcessorResult.AddBrokenRulesList(System.Type,AccountManager.Entities.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:AccountManager.Services.GenericProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:AccountManager.Services.GenericProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:AccountManager.Services.GenericProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation. 
            This is set by the processor.
            </summary>
        </member>
        <member name="T:AccountManager.Services.MainCustAccountService">
            <summary>
            An component type implementation of the 'MainCustAccount' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:AccountManager.Services.MainCustAccountServiceBase">
            <summary>
             An object representation of the 'MainCustAccount' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the MainCustAccount.cs file instead.
             All custom implementations should be done in the <see cref="T:AccountManager.Entities.MainCustAccount"/> class.
             </remarks>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:AccountManager.Entities.MainCustAccount"/> instance .
            </summary>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.CreateMainCustAccount(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int32,System.Int16,System.Int16,System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.DateTime,System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
             A simple factory method to create a new <see cref="T:AccountManager.Entities.MainCustAccount"/> instance.
            </summary>
            <param name="_mainCustAccountId">Main customer account id</param>
            <param name="_fullName">Full customer name</param>
            <param name="_email">Customer email</param>
            <param name="_phone">Phone</param>
            <param name="_actived">Is actived or not</param>
            <param name="_password">Password</param>
            <param name="_pin">Pin</param>
            <param name="_passLockReason">Password lock reason</param>
            <param name="_pinLockReason">Pin lock reason</param>
            <param name="_lockReason">Account lock reason</param>
            <param name="_tokenId">Token id</param>
            <param name="_tokenName">Token name</param>
            <param name="_tokenActived">Token is active or not</param>
            <param name="_brokerId">Broker id</param>
            <param name="_passIsNew">Password is new or not</param>
            <param name="_pinIsNew">Pin is new or not</param>
            <param name="_passExpDate">Password expired date</param>
            <param name="_pinExpDate">Pin expired date</param>
            <param name="_customerType">Customer type</param>
            <param name="_authType">Authentication type</param>
            <param name="_pinType">Pin type</param>
            <param name="_languageId">Language id</param>
            <param name="_failedLoginCount">Failed login count</param>
            <param name="_failedLoginTime">Failed login times</param>
            <param name="_createdDate">Customer created date</param>
            <param name="_createdUser">Created User</param>
            <param name="_updatedUser">Updated user</param>
            <param name="_updatedDate">Updated date</param>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.GetByBrokerId(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the FK_MainCustAccount_BrokerAccount key.
            	FK_MainCustAccount_BrokerAccount Description: 
            </summary>
            <param name="_brokerId">Broker id</param>
            <returns>Returns a generic collection of MainCustAccount objects.</returns>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.GetByBrokerId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the FK_MainCustAccount_BrokerAccount key.
            	FK_MainCustAccount_BrokerAccount Description: 
            </summary>
            <param name="_brokerId">Broker id</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:AccountManager.Entities.TList`1"/> of <c>MainCustAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.Get(AccountManager.Entities.MainCustAccountKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.GetByMainCustAccountId(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the primary key PK_MainCustAccount index.
            </summary>
            <param name="_mainCustAccountId">Main customer account id</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.MainCustAccount"/> class.</returns>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.GetByMainCustAccountId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the primary key PK_MainCustAccount index.
            </summary>
            <param name="_mainCustAccountId">Main customer account id</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.MainCustAccount"/> class.</returns>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:AccountManager.Entities.MainCustAccount"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:AccountManager.Entities.MainCustAccount"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:AccountManager.Entities.TList`1"/> </returns>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:AccountManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>MainCustAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:AccountManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>MainCustAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:AccountManager.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>MainCustAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{MainCustAccount} of <c>MainCustAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>MainCustAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,AccountManager.DataAccess.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:AccountManager.DataAccess.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>MainCustAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>MainCustAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,AccountManager.DataAccess.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:AccountManager.DataAccess.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>MainCustAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>MainCustAccount</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.Insert(AccountManager.Entities.MainCustAccount)">
            <summary>
            public virtual method that Inserts a MainCustAccount object into the datasource using a transaction.
            </summary>
            <param name="entity">MainCustAccount object to Insert.</param>
            <remarks>After Inserting into the datasource, the MainCustAccount object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            MainCustAccount entity = new MainCustAccount();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	MainCustAccountService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.Insert(AccountManager.Entities.TList{AccountManager.Entities.MainCustAccount})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>MainCustAccount</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>MainCustAccount</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of MainCustAccount.
             <code><![CDATA[
             TList<MainCustAccount> list = new TList<MainCustAccount>();
             MainCustAccount entity = new MainCustAccount();
             entity.StringProperty = "foo";
             MainCustAccount entity2 = new MainCustAccount();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MainCustAccountService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.Update(AccountManager.Entities.MainCustAccount)">
            <summary>
            public virtual method that Updates a MainCustAccount object into the datasource using a transaction.
            </summary>
            <param name="entity">MainCustAccount object to Update.</param>
            <remarks>After Updateing into the datasource, the MainCustAccount object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            MainCustAccount entity = MainCustAccountService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	MainCustAccountService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.Update(AccountManager.Entities.TList{AccountManager.Entities.MainCustAccount})">
             <summary>
             public virtual method that Updates rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>MainCustAccount</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>MainCustAccount</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of MainCustAccount.
             <code><![CDATA[
             TList<MainCustAccount> list = new TList<MainCustAccount>();
             MainCustAccount entity = new MainCustAccount();
             entity.StringProperty = "foo";
             MainCustAccount entity2 = new MainCustAccount();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MainCustAccountService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.Save(AccountManager.Entities.MainCustAccount)">
            <summary>
            public virtual method that Saves a MainCustAccount object into the datasource using a transaction.
            </summary>
            <param name="entity">MainCustAccount object to Save.</param>
            <remarks>After Saveing into the datasource, the MainCustAccount object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            MainCustAccount entity = MainCustAccountService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	MainCustAccountService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.Save(AccountManager.Entities.TList{AccountManager.Entities.MainCustAccount})">
             <summary>
             public virtual method that Saves rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>MainCustAccount</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>MainCustAccount</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of MainCustAccount.
             <code><![CDATA[
             TList<MainCustAccount> list = new TList<MainCustAccount>();
             MainCustAccount entity = new MainCustAccount();
             entity.StringProperty = "foo";
             MainCustAccount entity2 = new MainCustAccount();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MainCustAccountService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.Delete(AccountManager.Entities.MainCustAccount)">
            <summary>
            public virtual method that Deletes a MainCustAccount object into the datasource using a transaction.
            </summary>
            <param name="entity">MainCustAccount object to Delete.</param>
            <remarks>After Deleteing into the datasource, the MainCustAccount object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            MainCustAccount entity = MainCustAccountService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	MainCustAccountService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.Delete(AccountManager.Entities.TList{AccountManager.Entities.MainCustAccount})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>MainCustAccount</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>MainCustAccount</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of MainCustAccount.
             <code><![CDATA[
             TList<MainCustAccount> list = new TList<MainCustAccount>();
             MainCustAccount entity = new MainCustAccount();
             entity.StringProperty = "foo";
             MainCustAccount entity2 = new MainCustAccount();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MainCustAccountService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.Delete(AccountManager.Entities.MainCustAccountKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S string _mainCustAccountId
            </summary>
            <param name="_mainCustAccountId">MainCustAccount pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.DeepLoadByMainCustAccountId(System.String,System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:AccountManager.Entities.MainCustAccount"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:AccountManager.DataAccess.DeepLoadType"/>.
            </summary>
            <param name="_mainCustAccountId">Main customer account id</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">MainCustAccount Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.MainCustAccount"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.DeepLoad(AccountManager.Entities.MainCustAccount)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">MainCustAccount Object</param>
            <remarks>
            <seealso cref="M:AccountManager.Services.MainCustAccountServiceBase.DeepLoad(AccountManager.Entities.MainCustAccount)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.DeepLoad(AccountManager.Entities.MainCustAccount,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.MainCustAccountServiceBase.DeepLoad(AccountManager.Entities.MainCustAccount)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">MainCustAccount Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.DeepLoad(AccountManager.Entities.MainCustAccount,System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:AccountManager.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:AccountManager.DataAccess.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:AccountManager.Entities.MainCustAccount"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">MainCustAccount Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.MainCustAccount})">
            <summary>
            Deep Loads the <see cref="T:AccountManager.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.MainCustAccountServiceBase.DeepLoad(AccountManager.Entities.MainCustAccount)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:AccountManager.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.MainCustAccount},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:AccountManager.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.MainCustAccountServiceBase.DeepLoad(AccountManager.Entities.MainCustAccount)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:AccountManager.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.MainCustAccount},System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:AccountManager.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:AccountManager.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:AccountManager.DataAccess.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:AccountManager.Entities.MainCustAccount"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.DeepSave(AccountManager.Entities.MainCustAccount)">
            <summary>
            public virtualDeep Saves the <see cref="T:AccountManager.Entities.MainCustAccount"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">MainCustAccount Object</param>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.DeepSave(AccountManager.Entities.MainCustAccount,AccountManager.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the MainCustAccount object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">MainCustAccount Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>MainCustAccount</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.DeepSave(AccountManager.Entities.TList{AccountManager.Entities.MainCustAccount})">
            <summary>
            Deep Save the entire <see cref="T:AccountManager.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{MainCustAccount} Object</param>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountServiceBase.DeepSave(AccountManager.Entities.TList{AccountManager.Entities.MainCustAccount},AccountManager.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:AccountManager.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:AccountManager.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">MainCustAccount Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:AccountManager.Services.MainCustAccountServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountService.GetAccountInfo(System.String,System.Boolean)">
            <summary>
             Method that get customer account information based on MainCustAccountId
            </summary>
            <param name="mainCustAccountId"></param>
            <param name="fullInfo">true if get all sub account; otherwise, false</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.MainCustAccount"/> class.</returns>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountService.ChangeCustPassword(System.String,System.String,System.String,System.String)">
            <summary>
             Change customer password
            </summary>
            <param name="mainCustAccountId"></param>
            <param name="oldPassword"></param>
            <param name="newPassword"></param>
            <param name="updatedUserId"></param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountService.ChangeCustPin(System.String,System.String,System.String,System.String)">
            <summary>
             Change customer password
            </summary>
            <param name="mainCustAccountId"></param>
            <param name="oldPin"></param>
            <param name="newPin"></param>
            <param name="updatedUserId"></param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountService.ActivateMainCustomer(System.String,System.Boolean,System.Int32,System.String)">
            <summary>
            Activate or deactivate a customer account to allow to use online trading system.
            </summary>
            <param name="mainCustAccountId">Id of main customer account</param>
            <param name="actived">true if main customer account is actived; otherwise, false</param>
            <param name="lockReason">Reason lock</param>
            <param name="updatedUserId">Id of login broker</param>
            <returns>
            <para>Result of the activating action.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=FAIL: Failed to activate main customer account information.</para>
            <para>RET_CODE=SUCCESS: Activate main customer successfully.</para>
            </returns>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountService.UpdateMainCustomer(AccountManager.Entities.MainCustAccount)">
            <summary>
             Update main customer.
            </summary>
            <param name="newMainCustAccount">Information of main customer account</param>
             <returns>
             <para>Result of updating main customer account information.</para>
             <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
             <para>RET_CODE=FAIL: Failed to update main customer account information.</para>
             <para>RET_CODE=SUCCESS: Update main customer successfully.</para>
             </returns>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountService.GetMainCustAccount(System.String)">
            <summary>
             Method that get customer account information based on MainCustAccountId
            </summary>
            <param name="mainCustAccountId"></param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.MainCustAccount"/> class.</returns>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountService.GenerateCustPassword(System.String,System.String)">
            <summary>
             Generate customer password
            </summary>
            <param name="mainCustAccountId"></param>
            <param name="updatedUserId"></param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountService.AddTokenId(System.String,System.String,System.String)">
            <summary>
            Adds the token id.
            </summary>
            <param name="mainCustAccountId">The main cust account id.</param>
            <param name="tokenId">The token id.</param>
            <param name="updatedUserId">The updated user id.</param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountService.GenerateCustPin(System.String,System.String)">
            <summary>
             Generate customer pin
            </summary>
            <param name="mainCustAccountId"></param>
            <param name="updatedUserId"></param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountService.CreateMainCustomer(AccountManager.Entities.MainCustAccount)">
            <summary>
            Create a new main customer account.
            </summary>
            <param name="mainCustAccount">Information of main customer account</param>
            <returns>
            <para>Result of creating new customer.</para>
            <para>RET_CODE=EXISTED_DATA: Account is already existed.</para>
            <para>RET_CODE=FAIL: Failed to create main customer account information.</para>
            <para>RET_CODE=SUCCESS: Create main customer successfully.</para>
            </returns>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountService.GetList(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int16,System.Int16,System.Int32,System.Int32)">
            <summary>
            Get a complete collection of <see cref="T:AccountManager.Entities.BrokerAccount"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountService.ForgetPassword(System.String,System.String,System.String@,AccountManager.Entities.MainCustAccount@)">
            <summary>
            Forgets the password.
            </summary>
            <param name="mainCustAccountId">The main cust account id.</param>
            <param name="messagePhone">The message phone.</param>
            <param name="newPassword">The new password.</param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountService.ForgetPin(System.String,System.String@)">
            <summary>
            Forgets the pin.
            </summary>
            <param name="mainCustAccountId">The main cust account id.</param>
            <param name="newPin">The new pin.</param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.MainCustAccountService.GetLanguageId(System.String)">
            <summary>
            Method that get language id of account information based on MainCustAccountId
            </summary>
            <param name="mainCustAccountId">The main cust account id.</param>
            <returns>
            Returns an instance of the <see cref="T:AccountManager.Entities.MainCustAccount"/> class.
            </returns>
        </member>
        <member name="T:AccountManager.Services.BuyRightService">
            <summary>
            An component type implementation of the 'BuyRight' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:AccountManager.Services.BuyRightServiceBase">
            <summary>
             An object representation of the 'BuyRight' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the BuyRight.cs file instead.
             All custom implementations should be done in the <see cref="T:AccountManager.Entities.BuyRight"/> class.
             </remarks>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:AccountManager.Entities.BuyRight"/> instance .
            </summary>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.CreateBuyRight(System.String,System.String,System.String,System.DateTime,System.Int64,System.Int64,System.Int64,System.Decimal,System.Decimal,System.Decimal,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.String,System.DateTime,System.String,System.Nullable{System.DateTime},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:AccountManager.Entities.BuyRight"/> instance.
            </summary>
            <param name="_subCustAccountId"></param>
            <param name="_secSymbol">Securities symbol</param>
            <param name="_market">Market id</param>
            <param name="_execDate">Executed date</param>
            <param name="_owningVol">Owning volume</param>
            <param name="_allowedVol">Volume allowed to buy</param>
            <param name="_registeredVol">Volume registered to buy</param>
            <param name="_right"></param>
            <param name="_rateRight">The rate of right</param>
            <param name="_price">Price to buy</param>
            <param name="_beginDateToRegister">Date to begin registering</param>
            <param name="_endDateToRegister">Date of end registering</param>
            <param name="_beginDateToTransfer">Date to begin transferring</param>
            <param name="_endDateToTransfer">Date to end transferring</param>
            <param name="_receivedDate">Date to receive stocks</param>
            <param name="_note">Note</param>
            <param name="_createdDate">Created date time</param>
            <param name="_createdUser">Created user</param>
            <param name="_updatedDate">Updated date time</param>
            <param name="_updatedUser">Updated user</param>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.GetBySubCustAccountId(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the FK_BuyRight_SubCustAccount key.
            	FK_BuyRight_SubCustAccount Description: 
            </summary>
            <param name="_subCustAccountId"></param>
            <returns>Returns a generic collection of BuyRight objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.GetBySubCustAccountId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the FK_BuyRight_SubCustAccount key.
            	FK_BuyRight_SubCustAccount Description: 
            </summary>
            <param name="_subCustAccountId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:AccountManager.Entities.TList`1"/> of <c>BuyRight</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.Get(AccountManager.Entities.BuyRightKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.GetById(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the primary key PK_BUYRIGHT index.
            </summary>
            <param name="_id">Auto increase id</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.BuyRight"/> class.</returns>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.GetById(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the primary key PK_BUYRIGHT index.
            </summary>
            <param name="_id">Auto increase id</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.BuyRight"/> class.</returns>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:AccountManager.Entities.BuyRight"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:AccountManager.Entities.BuyRight"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:AccountManager.Entities.TList`1"/> </returns>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:AccountManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>BuyRight</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:AccountManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>BuyRight</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:AccountManager.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>BuyRight</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{BuyRight} of <c>BuyRight</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>BuyRight</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,AccountManager.DataAccess.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:AccountManager.DataAccess.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>BuyRight</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>BuyRight</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,AccountManager.DataAccess.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:AccountManager.DataAccess.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>BuyRight</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>BuyRight</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.Insert(AccountManager.Entities.BuyRight)">
            <summary>
            public virtual method that Inserts a BuyRight object into the datasource using a transaction.
            </summary>
            <param name="entity">BuyRight object to Insert.</param>
            <remarks>After Inserting into the datasource, the BuyRight object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            BuyRight entity = new BuyRight();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	BuyRightService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.Insert(AccountManager.Entities.TList{AccountManager.Entities.BuyRight})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BuyRight</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>BuyRight</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of BuyRight.
             <code><![CDATA[
             TList<BuyRight> list = new TList<BuyRight>();
             BuyRight entity = new BuyRight();
             entity.StringProperty = "foo";
             BuyRight entity2 = new BuyRight();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BuyRightService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.Update(AccountManager.Entities.BuyRight)">
            <summary>
            public virtual method that Updates a BuyRight object into the datasource using a transaction.
            </summary>
            <param name="entity">BuyRight object to Update.</param>
            <remarks>After Updateing into the datasource, the BuyRight object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            BuyRight entity = BuyRightService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	BuyRightService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.Update(AccountManager.Entities.TList{AccountManager.Entities.BuyRight})">
             <summary>
             public virtual method that Updates rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BuyRight</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>BuyRight</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of BuyRight.
             <code><![CDATA[
             TList<BuyRight> list = new TList<BuyRight>();
             BuyRight entity = new BuyRight();
             entity.StringProperty = "foo";
             BuyRight entity2 = new BuyRight();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BuyRightService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.Save(AccountManager.Entities.BuyRight)">
            <summary>
            public virtual method that Saves a BuyRight object into the datasource using a transaction.
            </summary>
            <param name="entity">BuyRight object to Save.</param>
            <remarks>After Saveing into the datasource, the BuyRight object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            BuyRight entity = BuyRightService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	BuyRightService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.Save(AccountManager.Entities.TList{AccountManager.Entities.BuyRight})">
             <summary>
             public virtual method that Saves rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BuyRight</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>BuyRight</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of BuyRight.
             <code><![CDATA[
             TList<BuyRight> list = new TList<BuyRight>();
             BuyRight entity = new BuyRight();
             entity.StringProperty = "foo";
             BuyRight entity2 = new BuyRight();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BuyRightService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.Delete(AccountManager.Entities.BuyRight)">
            <summary>
            public virtual method that Deletes a BuyRight object into the datasource using a transaction.
            </summary>
            <param name="entity">BuyRight object to Delete.</param>
            <remarks>After Deleteing into the datasource, the BuyRight object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            BuyRight entity = BuyRightService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	BuyRightService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.Delete(AccountManager.Entities.TList{AccountManager.Entities.BuyRight})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BuyRight</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>BuyRight</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of BuyRight.
             <code><![CDATA[
             TList<BuyRight> list = new TList<BuyRight>();
             BuyRight entity = new BuyRight();
             entity.StringProperty = "foo";
             BuyRight entity2 = new BuyRight();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BuyRightService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.Delete(AccountManager.Entities.BuyRightKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 _id
            </summary>
            <param name="_id">BuyRight pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.DeepLoadById(System.Int64,System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:AccountManager.Entities.BuyRight"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:AccountManager.DataAccess.DeepLoadType"/>.
            </summary>
            <param name="_id">Auto increase id</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">BuyRight Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.BuyRight"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.DeepLoad(AccountManager.Entities.BuyRight)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">BuyRight Object</param>
            <remarks>
            <seealso cref="M:AccountManager.Services.BuyRightServiceBase.DeepLoad(AccountManager.Entities.BuyRight)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.DeepLoad(AccountManager.Entities.BuyRight,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.BuyRightServiceBase.DeepLoad(AccountManager.Entities.BuyRight)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">BuyRight Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.DeepLoad(AccountManager.Entities.BuyRight,System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:AccountManager.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:AccountManager.DataAccess.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:AccountManager.Entities.BuyRight"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">BuyRight Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.BuyRight})">
            <summary>
            Deep Loads the <see cref="T:AccountManager.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.BuyRightServiceBase.DeepLoad(AccountManager.Entities.BuyRight)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:AccountManager.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.BuyRight},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:AccountManager.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.BuyRightServiceBase.DeepLoad(AccountManager.Entities.BuyRight)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:AccountManager.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.BuyRight},System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:AccountManager.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:AccountManager.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:AccountManager.DataAccess.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:AccountManager.Entities.BuyRight"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.DeepSave(AccountManager.Entities.BuyRight)">
            <summary>
            public virtualDeep Saves the <see cref="T:AccountManager.Entities.BuyRight"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">BuyRight Object</param>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.DeepSave(AccountManager.Entities.BuyRight,AccountManager.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the BuyRight object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">BuyRight Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>BuyRight</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.DeepSave(AccountManager.Entities.TList{AccountManager.Entities.BuyRight})">
            <summary>
            Deep Save the entire <see cref="T:AccountManager.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{BuyRight} Object</param>
        </member>
        <member name="M:AccountManager.Services.BuyRightServiceBase.DeepSave(AccountManager.Entities.TList{AccountManager.Entities.BuyRight},AccountManager.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:AccountManager.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:AccountManager.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">BuyRight Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:AccountManager.Services.BuyRightServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:AccountManager.Services.BuyRightService.#ctor">
            <summary>
            Initializes a new instance of the BuyRightService class.
            </summary>
        </member>
        <member name="M:AccountManager.Services.BuyRightService.PutBuyRight(System.String,System.String,System.String,System.String,System.Int64,System.Int64,System.Decimal,System.Decimal,System.Decimal,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Puts the buy right.
            </summary>
            <param name="subCustAccountID">The sub cust account ID.</param>
            <param name="secSymbol">The sec symbol.</param>
            <param name="market">The market.</param>
            <param name="execDate">The exec date.</param>
            <param name="owningVol">The owning vol.</param>
            <param name="allowedVol">The allowed vol.</param>
            <param name="right">The right.</param>
            <param name="rateRight">The rate right.</param>
            <param name="price">The price.</param>
            <param name="beginDateToRegister">The begin date to register.</param>
            <param name="endDateToRegister">The end date to register.</param>
            <param name="beginDateToTransfer">The begin date to transfer.</param>
            <param name="endDateToTransfer">The end date to transfer.</param>
            <param name="receivedDate">The received date.</param>
            <param name="note">The note.</param>
            <param name="createdUser">The created user.</param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.BuyRightService.UpdateBuyRight(System.Int64,System.String,System.String,System.String,System.Int64,System.Int64,System.Decimal,System.Decimal,System.Decimal,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Updates the buy right.
            </summary>
            <param name="id">The id.</param>
            <param name="secSymbol">The sec symbol.</param>
            <param name="market">The market.</param>
            <param name="execDate">The exec date.</param>
            <param name="owningVol">The owning vol.</param>
            <param name="allowedVol">The allowed vol.</param>
            <param name="right">The right.</param>
            <param name="rateRight">The rate right.</param>
            <param name="price">The price.</param>
            <param name="beginDateToRegister">The begin date to register.</param>
            <param name="endDateToRegister">The end date to register.</param>
            <param name="beginDateToTransfer">The begin date to transfer.</param>
            <param name="endDateToTransfer">The end date to transfer.</param>
            <param name="receivedDate">The received date.</param>
            <param name="note">The note.</param>
            <param name="updatedUser">The updated user.</param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.BuyRightService.GetListBuyRight(System.Int64,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the list buy right.
            </summary>
            <param name="id">The id.</param>
            <param name="secSymbol">The sec symbol.</param>
            <param name="market">The market.</param>
            <param name="subCustAccountID">The sub cust account ID.</param>
            <param name="execDate">The exec date.</param>
            <param name="beginDateToRegister">The begin date to register.</param>
            <param name="endDateToRegister">The end date to register.</param>
            <param name="beginDateToTransfer">The begin date to transfer.</param>
            <param name="endDateToTransfer">The end date to transfer.</param>
            <param name="receivedDate">The received date.</param>
            <param name="note">The note.</param>
            <param name="brokerID">The broker ID.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.BuyRightService.DeleteBuyRight(System.Int64)">
            <summary>
            Deletes the buy right.
            </summary>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="T:AccountManager.Services.ContextView`2">
            <summary>
            Used to create a general view of the current context.  
            Useful for firing events and giving the UI a picture of 
            current State of Operation.
            </summary>
            <typeparam name="Entity">The Entity object</typeparam>
            <typeparam name="Domain">Type that holds </typeparam>
        </member>
        <member name="M:AccountManager.Services.ContextView`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:AccountManager.Services.ContextView`2"/> class.
            </summary>
        </member>
        <member name="M:AccountManager.Services.ContextView`2.#ctor(`0,AccountManager.Services.SecurityContext{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:AccountManager.Services.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
        </member>
        <member name="M:AccountManager.Services.ContextView`2.#ctor(`0,AccountManager.Services.SecurityContext{`0},AccountManager.DataAccess.TransactionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:AccountManager.Services.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
            <param name="transactionManager">The transaction manager.</param>
        </member>
        <member name="P:AccountManager.Services.ContextView`2.PersistingObject">
            <summary>
            Gets or sets the persisting object.
            </summary>
            <value>The persisting object.</value>
        </member>
        <member name="P:AccountManager.Services.ContextView`2.SecurityContext">
            <summary>
            Gets or sets the security context.
            </summary>
            <value>The security context.</value>
        </member>
        <member name="P:AccountManager.Services.ContextView`2.TransactionManager">
            <summary>
            Gets or sets the transaction manager.
            </summary>
            <value>The transaction manager.</value>
        </member>
        <member name="T:AccountManager.Services.BrokerPermissionService">
            <summary>
            An component type implementation of the 'BrokerPermission' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:AccountManager.Services.BrokerPermissionServiceBase">
            <summary>
             An object representation of the 'BrokerPermission' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the BrokerPermission.cs file instead.
             All custom implementations should be done in the <see cref="T:AccountManager.Entities.BrokerPermission"/> class.
             </remarks>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:AccountManager.Entities.BrokerPermission"/> instance .
            </summary>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.CreateBrokerPermission(System.String,System.Int32)">
            <summary>
             A simple factory method to create a new <see cref="T:AccountManager.Entities.BrokerPermission"/> instance.
            </summary>
            <param name="_brokerId"></param>
            <param name="_permissionId"></param>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.GetByBrokerId(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the FK_BrokerPermission_BrokerAccount key.
            	FK_BrokerPermission_BrokerAccount Description: 
            </summary>
            <param name="_brokerId"></param>
            <returns>Returns a generic collection of BrokerPermission objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.GetByBrokerId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the FK_BrokerPermission_BrokerAccount key.
            	FK_BrokerPermission_BrokerAccount Description: 
            </summary>
            <param name="_brokerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:AccountManager.Entities.TList`1"/> of <c>BrokerPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.GetByPermissionId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the FK_BrokerPermission_BrokerAMPermission key.
            	FK_BrokerPermission_BrokerAMPermission Description: 
            </summary>
            <param name="_permissionId"></param>
            <returns>Returns a generic collection of BrokerPermission objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.GetByPermissionId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the FK_BrokerPermission_BrokerAMPermission key.
            	FK_BrokerPermission_BrokerAMPermission Description: 
            </summary>
            <param name="_permissionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:AccountManager.Entities.TList`1"/> of <c>BrokerPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.Get(AccountManager.Entities.BrokerPermissionKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.GetByBrokerIdPermissionId(System.String,System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the primary key PK_BrokerPermission index.
            </summary>
            <param name="_brokerId"></param>
            <param name="_permissionId"></param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.BrokerPermission"/> class.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.GetByBrokerIdPermissionId(System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the primary key PK_BrokerPermission index.
            </summary>
            <param name="_brokerId"></param>
            <param name="_permissionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.BrokerPermission"/> class.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:AccountManager.Entities.BrokerPermission"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:AccountManager.Entities.BrokerPermission"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:AccountManager.Entities.TList`1"/> </returns>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:AccountManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>BrokerPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:AccountManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>BrokerPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:AccountManager.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>BrokerPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{BrokerPermission} of <c>BrokerPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>BrokerPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,AccountManager.DataAccess.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:AccountManager.DataAccess.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>BrokerPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>BrokerPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,AccountManager.DataAccess.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:AccountManager.DataAccess.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>BrokerPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>BrokerPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.Insert(AccountManager.Entities.BrokerPermission)">
            <summary>
            public virtual method that Inserts a BrokerPermission object into the datasource using a transaction.
            </summary>
            <param name="entity">BrokerPermission object to Insert.</param>
            <remarks>After Inserting into the datasource, the BrokerPermission object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            BrokerPermission entity = new BrokerPermission();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	BrokerPermissionService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.Insert(AccountManager.Entities.TList{AccountManager.Entities.BrokerPermission})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BrokerPermission</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>BrokerPermission</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of BrokerPermission.
             <code><![CDATA[
             TList<BrokerPermission> list = new TList<BrokerPermission>();
             BrokerPermission entity = new BrokerPermission();
             entity.StringProperty = "foo";
             BrokerPermission entity2 = new BrokerPermission();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BrokerPermissionService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.Update(AccountManager.Entities.BrokerPermission)">
            <summary>
            public virtual method that Updates a BrokerPermission object into the datasource using a transaction.
            </summary>
            <param name="entity">BrokerPermission object to Update.</param>
            <remarks>After Updateing into the datasource, the BrokerPermission object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            BrokerPermission entity = BrokerPermissionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	BrokerPermissionService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.Update(AccountManager.Entities.TList{AccountManager.Entities.BrokerPermission})">
             <summary>
             public virtual method that Updates rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BrokerPermission</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>BrokerPermission</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of BrokerPermission.
             <code><![CDATA[
             TList<BrokerPermission> list = new TList<BrokerPermission>();
             BrokerPermission entity = new BrokerPermission();
             entity.StringProperty = "foo";
             BrokerPermission entity2 = new BrokerPermission();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BrokerPermissionService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.Save(AccountManager.Entities.BrokerPermission)">
            <summary>
            public virtual method that Saves a BrokerPermission object into the datasource using a transaction.
            </summary>
            <param name="entity">BrokerPermission object to Save.</param>
            <remarks>After Saveing into the datasource, the BrokerPermission object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            BrokerPermission entity = BrokerPermissionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	BrokerPermissionService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.Save(AccountManager.Entities.TList{AccountManager.Entities.BrokerPermission})">
             <summary>
             public virtual method that Saves rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BrokerPermission</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>BrokerPermission</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of BrokerPermission.
             <code><![CDATA[
             TList<BrokerPermission> list = new TList<BrokerPermission>();
             BrokerPermission entity = new BrokerPermission();
             entity.StringProperty = "foo";
             BrokerPermission entity2 = new BrokerPermission();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BrokerPermissionService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.Delete(AccountManager.Entities.BrokerPermission)">
            <summary>
            public virtual method that Deletes a BrokerPermission object into the datasource using a transaction.
            </summary>
            <param name="entity">BrokerPermission object to Delete.</param>
            <remarks>After Deleteing into the datasource, the BrokerPermission object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            BrokerPermission entity = BrokerPermissionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	BrokerPermissionService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.Delete(AccountManager.Entities.TList{AccountManager.Entities.BrokerPermission})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BrokerPermission</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>BrokerPermission</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of BrokerPermission.
             <code><![CDATA[
             TList<BrokerPermission> list = new TList<BrokerPermission>();
             BrokerPermission entity = new BrokerPermission();
             entity.StringProperty = "foo";
             BrokerPermission entity2 = new BrokerPermission();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BrokerPermissionService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.Delete(AccountManager.Entities.BrokerPermissionKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.Delete(System.String,System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _brokerId, System.Int32 _permissionId
            </summary>
            <param name="_brokerId">BrokerPermission pk id.</param>
            <param name="_permissionId">BrokerPermission pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.DeleteByBrokerId(System.String)">
            <summary>
            This method wrap the '_BrokerPermission_DeleteByBrokerId' stored procedure. 
            </summary>
            <param name="brokerId"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.DeleteByBrokerId(System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the '_BrokerPermission_DeleteByBrokerId' stored procedure. 
            </summary>
            <param name="brokerId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.DeepLoadByBrokerIdPermissionId(System.String,System.Int32,System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:AccountManager.Entities.BrokerPermission"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:AccountManager.DataAccess.DeepLoadType"/>.
            </summary>
            <param name="_brokerId"></param>
            <param name="_permissionId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">BrokerPermission Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.BrokerPermission"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.DeepLoad(AccountManager.Entities.BrokerPermission)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">BrokerPermission Object</param>
            <remarks>
            <seealso cref="M:AccountManager.Services.BrokerPermissionServiceBase.DeepLoad(AccountManager.Entities.BrokerPermission)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.DeepLoad(AccountManager.Entities.BrokerPermission,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.BrokerPermissionServiceBase.DeepLoad(AccountManager.Entities.BrokerPermission)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">BrokerPermission Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.DeepLoad(AccountManager.Entities.BrokerPermission,System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:AccountManager.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:AccountManager.DataAccess.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:AccountManager.Entities.BrokerPermission"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">BrokerPermission Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.BrokerPermission})">
            <summary>
            Deep Loads the <see cref="T:AccountManager.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.BrokerPermissionServiceBase.DeepLoad(AccountManager.Entities.BrokerPermission)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:AccountManager.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.BrokerPermission},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:AccountManager.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.BrokerPermissionServiceBase.DeepLoad(AccountManager.Entities.BrokerPermission)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:AccountManager.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.BrokerPermission},System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:AccountManager.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:AccountManager.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:AccountManager.DataAccess.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:AccountManager.Entities.BrokerPermission"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.DeepSave(AccountManager.Entities.BrokerPermission)">
            <summary>
            public virtualDeep Saves the <see cref="T:AccountManager.Entities.BrokerPermission"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">BrokerPermission Object</param>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.DeepSave(AccountManager.Entities.BrokerPermission,AccountManager.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the BrokerPermission object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">BrokerPermission Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>BrokerPermission</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.DeepSave(AccountManager.Entities.TList{AccountManager.Entities.BrokerPermission})">
            <summary>
            Deep Save the entire <see cref="T:AccountManager.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{BrokerPermission} Object</param>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionServiceBase.DeepSave(AccountManager.Entities.TList{AccountManager.Entities.BrokerPermission},AccountManager.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:AccountManager.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:AccountManager.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">BrokerPermission Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:AccountManager.Services.BrokerPermissionServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionService.#ctor">
            <summary>
            Initializes a new instance of the BrokerPermissionService class.
            </summary>
        </member>
        <member name="M:AccountManager.Services.BrokerPermissionService.GetBrokerByPermission(System.Int32)">
            <summary>
            Gets the broker by permission.
            </summary>
            <param name="permissionID">The permission ID.</param>
            <returns></returns>
        </member>
        <member name="T:AccountManager.Services.BrokerAmPermissionService">
            <summary>
            An component type implementation of the 'BrokerAMPermission' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:AccountManager.Services.BrokerAmPermissionService.#ctor">
            <summary>
            Initializes a new instance of the BrokerAmPermissionService class.
            </summary>
        </member>
        <member name="T:AccountManager.Services.ResearchService">
            <summary>
            An component type implementation of the 'Research' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:AccountManager.Services.ResearchServiceBase">
            <summary>
             An object representation of the 'Research' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Research.cs file instead.
             All custom implementations should be done in the <see cref="T:AccountManager.Entities.Research"/> class.
             </remarks>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:AccountManager.Entities.Research"/> instance .
            </summary>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.CreateResearch(System.String,System.DateTime,System.String,System.String,System.Int32,System.Boolean,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:AccountManager.Entities.Research"/> instance.
            </summary>
            <param name="_researchId"></param>
            <param name="_uploadedDate"></param>
            <param name="_tittle"></param>
            <param name="_path"></param>
            <param name="_downloads"></param>
            <param name="_actived"></param>
            <param name="_uploadedUser"></param>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.Get(AccountManager.Entities.ResearchKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.GetByResearchId(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the primary key PK_Research index.
            </summary>
            <param name="_researchId"></param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.Research"/> class.</returns>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.GetByResearchId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the primary key PK_Research index.
            </summary>
            <param name="_researchId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.Research"/> class.</returns>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:AccountManager.Entities.Research"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:AccountManager.Entities.Research"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:AccountManager.Entities.TList`1"/> </returns>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:AccountManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Research</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:AccountManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Research</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:AccountManager.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Research</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Research} of <c>Research</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Research</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,AccountManager.DataAccess.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:AccountManager.DataAccess.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Research</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Research</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,AccountManager.DataAccess.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:AccountManager.DataAccess.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Research</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Research</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.Insert(AccountManager.Entities.Research)">
            <summary>
            public virtual method that Inserts a Research object into the datasource using a transaction.
            </summary>
            <param name="entity">Research object to Insert.</param>
            <remarks>After Inserting into the datasource, the Research object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Research entity = new Research();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ResearchService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.Insert(AccountManager.Entities.TList{AccountManager.Entities.Research})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Research</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Research</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Research.
             <code><![CDATA[
             TList<Research> list = new TList<Research>();
             Research entity = new Research();
             entity.StringProperty = "foo";
             Research entity2 = new Research();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ResearchService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.Update(AccountManager.Entities.Research)">
            <summary>
            public virtual method that Updates a Research object into the datasource using a transaction.
            </summary>
            <param name="entity">Research object to Update.</param>
            <remarks>After Updateing into the datasource, the Research object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Research entity = ResearchService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ResearchService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.Update(AccountManager.Entities.TList{AccountManager.Entities.Research})">
             <summary>
             public virtual method that Updates rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Research</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Research</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Research.
             <code><![CDATA[
             TList<Research> list = new TList<Research>();
             Research entity = new Research();
             entity.StringProperty = "foo";
             Research entity2 = new Research();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ResearchService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.Save(AccountManager.Entities.Research)">
            <summary>
            public virtual method that Saves a Research object into the datasource using a transaction.
            </summary>
            <param name="entity">Research object to Save.</param>
            <remarks>After Saveing into the datasource, the Research object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Research entity = ResearchService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ResearchService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.Save(AccountManager.Entities.TList{AccountManager.Entities.Research})">
             <summary>
             public virtual method that Saves rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Research</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Research</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Research.
             <code><![CDATA[
             TList<Research> list = new TList<Research>();
             Research entity = new Research();
             entity.StringProperty = "foo";
             Research entity2 = new Research();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ResearchService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.Delete(AccountManager.Entities.Research)">
            <summary>
            public virtual method that Deletes a Research object into the datasource using a transaction.
            </summary>
            <param name="entity">Research object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Research object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Research entity = ResearchService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ResearchService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.Delete(AccountManager.Entities.TList{AccountManager.Entities.Research})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Research</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Research</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Research.
             <code><![CDATA[
             TList<Research> list = new TList<Research>();
             Research entity = new Research();
             entity.StringProperty = "foo";
             Research entity2 = new Research();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ResearchService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.Delete(AccountManager.Entities.ResearchKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _researchId
            </summary>
            <param name="_researchId">Research pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.DeepLoadByResearchId(System.String,System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:AccountManager.Entities.Research"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:AccountManager.DataAccess.DeepLoadType"/>.
            </summary>
            <param name="_researchId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Research Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.Research"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.DeepLoad(AccountManager.Entities.Research)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Research Object</param>
            <remarks>
            <seealso cref="M:AccountManager.Services.ResearchServiceBase.DeepLoad(AccountManager.Entities.Research)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.DeepLoad(AccountManager.Entities.Research,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.ResearchServiceBase.DeepLoad(AccountManager.Entities.Research)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Research Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.DeepLoad(AccountManager.Entities.Research,System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:AccountManager.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:AccountManager.DataAccess.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:AccountManager.Entities.Research"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Research Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.Research})">
            <summary>
            Deep Loads the <see cref="T:AccountManager.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.ResearchServiceBase.DeepLoad(AccountManager.Entities.Research)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:AccountManager.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.Research},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:AccountManager.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.ResearchServiceBase.DeepLoad(AccountManager.Entities.Research)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:AccountManager.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.Research},System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:AccountManager.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:AccountManager.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:AccountManager.DataAccess.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:AccountManager.Entities.Research"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.DeepSave(AccountManager.Entities.Research)">
            <summary>
            public virtualDeep Saves the <see cref="T:AccountManager.Entities.Research"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Research Object</param>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.DeepSave(AccountManager.Entities.Research,AccountManager.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Research object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Research Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Research</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.DeepSave(AccountManager.Entities.TList{AccountManager.Entities.Research})">
            <summary>
            Deep Save the entire <see cref="T:AccountManager.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Research} Object</param>
        </member>
        <member name="M:AccountManager.Services.ResearchServiceBase.DeepSave(AccountManager.Entities.TList{AccountManager.Entities.Research},AccountManager.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:AccountManager.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:AccountManager.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Research Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:AccountManager.Services.ResearchServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:AccountManager.Services.ResearchService.#ctor">
            <summary>
            Initializes a new instance of the ResearchService class.
            </summary>
        </member>
        <member name="T:AccountManager.Services.WorkingDaysServiceBase">
            <summary>
             An object representation of the 'WorkingDays' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the WorkingDays.cs file instead.
             All custom implementations should be done in the <see cref="T:AccountManager.Entities.WorkingDays"/> class.
             </remarks>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:AccountManager.Entities.WorkingDays"/> instance .
            </summary>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.CreateWorkingDays(System.Int32,System.Boolean)">
            <summary>
             A simple factory method to create a new <see cref="T:AccountManager.Entities.WorkingDays"/> instance.
            </summary>
            <param name="_dateId">Id cua ngay(2=Thu 2, 3 = Thu 3, ..., 8=Chu nhat)</param>
            <param name="_isWorkingDay">true neu la working day, nguoc lai false</param>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.Get(AccountManager.Entities.WorkingDaysKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.GetByDateId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the primary key PK_WORKINGDAYS index.
            </summary>
            <param name="_dateId">Id cua ngay(2=Thu 2, 3 = Thu 3, ..., 8=Chu nhat)</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.WorkingDays"/> class.</returns>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.GetByDateId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the primary key PK_WORKINGDAYS index.
            </summary>
            <param name="_dateId">Id cua ngay(2=Thu 2, 3 = Thu 3, ..., 8=Chu nhat)</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.WorkingDays"/> class.</returns>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:AccountManager.Entities.WorkingDays"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:AccountManager.Entities.WorkingDays"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:AccountManager.Entities.TList`1"/> </returns>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:AccountManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>WorkingDays</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:AccountManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>WorkingDays</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:AccountManager.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>WorkingDays</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{WorkingDays} of <c>WorkingDays</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>WorkingDays</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,AccountManager.DataAccess.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:AccountManager.DataAccess.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>WorkingDays</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>WorkingDays</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,AccountManager.DataAccess.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:AccountManager.DataAccess.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>WorkingDays</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>WorkingDays</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.Insert(AccountManager.Entities.WorkingDays)">
            <summary>
            public virtual method that Inserts a WorkingDays object into the datasource using a transaction.
            </summary>
            <param name="entity">WorkingDays object to Insert.</param>
            <remarks>After Inserting into the datasource, the WorkingDays object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            WorkingDays entity = new WorkingDays();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	WorkingDaysService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.Insert(AccountManager.Entities.TList{AccountManager.Entities.WorkingDays})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>WorkingDays</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>WorkingDays</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of WorkingDays.
             <code><![CDATA[
             TList<WorkingDays> list = new TList<WorkingDays>();
             WorkingDays entity = new WorkingDays();
             entity.StringProperty = "foo";
             WorkingDays entity2 = new WorkingDays();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	WorkingDaysService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.Update(AccountManager.Entities.WorkingDays)">
            <summary>
            public virtual method that Updates a WorkingDays object into the datasource using a transaction.
            </summary>
            <param name="entity">WorkingDays object to Update.</param>
            <remarks>After Updateing into the datasource, the WorkingDays object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            WorkingDays entity = WorkingDaysService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	WorkingDaysService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.Update(AccountManager.Entities.TList{AccountManager.Entities.WorkingDays})">
             <summary>
             public virtual method that Updates rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>WorkingDays</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>WorkingDays</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of WorkingDays.
             <code><![CDATA[
             TList<WorkingDays> list = new TList<WorkingDays>();
             WorkingDays entity = new WorkingDays();
             entity.StringProperty = "foo";
             WorkingDays entity2 = new WorkingDays();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	WorkingDaysService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.Save(AccountManager.Entities.WorkingDays)">
            <summary>
            public virtual method that Saves a WorkingDays object into the datasource using a transaction.
            </summary>
            <param name="entity">WorkingDays object to Save.</param>
            <remarks>After Saveing into the datasource, the WorkingDays object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            WorkingDays entity = WorkingDaysService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	WorkingDaysService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.Save(AccountManager.Entities.TList{AccountManager.Entities.WorkingDays})">
             <summary>
             public virtual method that Saves rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>WorkingDays</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>WorkingDays</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of WorkingDays.
             <code><![CDATA[
             TList<WorkingDays> list = new TList<WorkingDays>();
             WorkingDays entity = new WorkingDays();
             entity.StringProperty = "foo";
             WorkingDays entity2 = new WorkingDays();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	WorkingDaysService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.Delete(AccountManager.Entities.WorkingDays)">
            <summary>
            public virtual method that Deletes a WorkingDays object into the datasource using a transaction.
            </summary>
            <param name="entity">WorkingDays object to Delete.</param>
            <remarks>After Deleteing into the datasource, the WorkingDays object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            WorkingDays entity = WorkingDaysService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	WorkingDaysService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.Delete(AccountManager.Entities.TList{AccountManager.Entities.WorkingDays})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>WorkingDays</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>WorkingDays</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of WorkingDays.
             <code><![CDATA[
             TList<WorkingDays> list = new TList<WorkingDays>();
             WorkingDays entity = new WorkingDays();
             entity.StringProperty = "foo";
             WorkingDays entity2 = new WorkingDays();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	WorkingDaysService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.Delete(AccountManager.Entities.WorkingDaysKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _dateId
            </summary>
            <param name="_dateId">WorkingDays pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.DeepLoadByDateId(System.Int32,System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:AccountManager.Entities.WorkingDays"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:AccountManager.DataAccess.DeepLoadType"/>.
            </summary>
            <param name="_dateId">Id cua ngay(2=Thu 2, 3 = Thu 3, ..., 8=Chu nhat)</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">WorkingDays Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.WorkingDays"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.DeepLoad(AccountManager.Entities.WorkingDays)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">WorkingDays Object</param>
            <remarks>
            <seealso cref="M:AccountManager.Services.WorkingDaysServiceBase.DeepLoad(AccountManager.Entities.WorkingDays)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.DeepLoad(AccountManager.Entities.WorkingDays,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.WorkingDaysServiceBase.DeepLoad(AccountManager.Entities.WorkingDays)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">WorkingDays Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.DeepLoad(AccountManager.Entities.WorkingDays,System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:AccountManager.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:AccountManager.DataAccess.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:AccountManager.Entities.WorkingDays"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">WorkingDays Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.WorkingDays})">
            <summary>
            Deep Loads the <see cref="T:AccountManager.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.WorkingDaysServiceBase.DeepLoad(AccountManager.Entities.WorkingDays)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:AccountManager.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.WorkingDays},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:AccountManager.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.WorkingDaysServiceBase.DeepLoad(AccountManager.Entities.WorkingDays)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:AccountManager.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.WorkingDays},System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:AccountManager.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:AccountManager.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:AccountManager.DataAccess.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:AccountManager.Entities.WorkingDays"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.DeepSave(AccountManager.Entities.WorkingDays)">
            <summary>
            public virtualDeep Saves the <see cref="T:AccountManager.Entities.WorkingDays"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">WorkingDays Object</param>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.DeepSave(AccountManager.Entities.WorkingDays,AccountManager.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the WorkingDays object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">WorkingDays Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>WorkingDays</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.DeepSave(AccountManager.Entities.TList{AccountManager.Entities.WorkingDays})">
            <summary>
            Deep Save the entire <see cref="T:AccountManager.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{WorkingDays} Object</param>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysServiceBase.DeepSave(AccountManager.Entities.TList{AccountManager.Entities.WorkingDays},AccountManager.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:AccountManager.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:AccountManager.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">WorkingDays Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:AccountManager.Services.WorkingDaysServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:AccountManager.Services.SubCustAccountPermissionServiceBase">
            <summary>
             An object representation of the 'SubCustAccountPermission' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the SubCustAccountPermission.cs file instead.
             All custom implementations should be done in the <see cref="T:AccountManager.Entities.SubCustAccountPermission"/> class.
             </remarks>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:AccountManager.Entities.SubCustAccountPermission"/> instance .
            </summary>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.CreateSubCustAccountPermission(System.String,System.Int32)">
            <summary>
             A simple factory method to create a new <see cref="T:AccountManager.Entities.SubCustAccountPermission"/> instance.
            </summary>
            <param name="_subCustAccountId"></param>
            <param name="_custServicesPermissionId"></param>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.GetByCustServicesPermissionId(System.Int32)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the FK_SubCustAccountPermission_CustServicesPermission key.
            	FK_SubCustAccountPermission_CustServicesPermission Description: 
            </summary>
            <param name="_custServicesPermissionId"></param>
            <returns>Returns a generic collection of SubCustAccountPermission objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.GetByCustServicesPermissionId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the FK_SubCustAccountPermission_CustServicesPermission key.
            	FK_SubCustAccountPermission_CustServicesPermission Description: 
            </summary>
            <param name="_custServicesPermissionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:AccountManager.Entities.TList`1"/> of <c>SubCustAccountPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.GetBySubCustAccountId(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the FK_SubCustAccountPermission_SubCustAccount key.
            	FK_SubCustAccountPermission_SubCustAccount Description: 
            </summary>
            <param name="_subCustAccountId"></param>
            <returns>Returns a generic collection of SubCustAccountPermission objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.GetBySubCustAccountId(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the FK_SubCustAccountPermission_SubCustAccount key.
            	FK_SubCustAccountPermission_SubCustAccount Description: 
            </summary>
            <param name="_subCustAccountId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:AccountManager.Entities.TList`1"/> of <c>SubCustAccountPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.Get(AccountManager.Entities.SubCustAccountPermissionKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.GetBySubCustAccountIdCustServicesPermissionId(System.String,System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the primary key PK_SubCustAccountPermission index.
            </summary>
            <param name="_subCustAccountId"></param>
            <param name="_custServicesPermissionId"></param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.SubCustAccountPermission"/> class.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.GetBySubCustAccountIdCustServicesPermissionId(System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the primary key PK_SubCustAccountPermission index.
            </summary>
            <param name="_subCustAccountId"></param>
            <param name="_custServicesPermissionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.SubCustAccountPermission"/> class.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:AccountManager.Entities.SubCustAccountPermission"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:AccountManager.Entities.SubCustAccountPermission"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:AccountManager.Entities.TList`1"/> </returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:AccountManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SubCustAccountPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:AccountManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SubCustAccountPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:AccountManager.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>SubCustAccountPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{SubCustAccountPermission} of <c>SubCustAccountPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>SubCustAccountPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,AccountManager.DataAccess.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:AccountManager.DataAccess.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>SubCustAccountPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>SubCustAccountPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,AccountManager.DataAccess.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:AccountManager.DataAccess.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SubCustAccountPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>SubCustAccountPermission</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.Insert(AccountManager.Entities.SubCustAccountPermission)">
            <summary>
            public virtual method that Inserts a SubCustAccountPermission object into the datasource using a transaction.
            </summary>
            <param name="entity">SubCustAccountPermission object to Insert.</param>
            <remarks>After Inserting into the datasource, the SubCustAccountPermission object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            SubCustAccountPermission entity = new SubCustAccountPermission();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	SubCustAccountPermissionService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.Insert(AccountManager.Entities.TList{AccountManager.Entities.SubCustAccountPermission})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SubCustAccountPermission</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>SubCustAccountPermission</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of SubCustAccountPermission.
             <code><![CDATA[
             TList<SubCustAccountPermission> list = new TList<SubCustAccountPermission>();
             SubCustAccountPermission entity = new SubCustAccountPermission();
             entity.StringProperty = "foo";
             SubCustAccountPermission entity2 = new SubCustAccountPermission();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SubCustAccountPermissionService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.Update(AccountManager.Entities.SubCustAccountPermission)">
            <summary>
            public virtual method that Updates a SubCustAccountPermission object into the datasource using a transaction.
            </summary>
            <param name="entity">SubCustAccountPermission object to Update.</param>
            <remarks>After Updateing into the datasource, the SubCustAccountPermission object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            SubCustAccountPermission entity = SubCustAccountPermissionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	SubCustAccountPermissionService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.Update(AccountManager.Entities.TList{AccountManager.Entities.SubCustAccountPermission})">
             <summary>
             public virtual method that Updates rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SubCustAccountPermission</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>SubCustAccountPermission</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of SubCustAccountPermission.
             <code><![CDATA[
             TList<SubCustAccountPermission> list = new TList<SubCustAccountPermission>();
             SubCustAccountPermission entity = new SubCustAccountPermission();
             entity.StringProperty = "foo";
             SubCustAccountPermission entity2 = new SubCustAccountPermission();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SubCustAccountPermissionService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.Save(AccountManager.Entities.SubCustAccountPermission)">
            <summary>
            public virtual method that Saves a SubCustAccountPermission object into the datasource using a transaction.
            </summary>
            <param name="entity">SubCustAccountPermission object to Save.</param>
            <remarks>After Saveing into the datasource, the SubCustAccountPermission object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            SubCustAccountPermission entity = SubCustAccountPermissionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	SubCustAccountPermissionService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.Save(AccountManager.Entities.TList{AccountManager.Entities.SubCustAccountPermission})">
             <summary>
             public virtual method that Saves rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SubCustAccountPermission</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>SubCustAccountPermission</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of SubCustAccountPermission.
             <code><![CDATA[
             TList<SubCustAccountPermission> list = new TList<SubCustAccountPermission>();
             SubCustAccountPermission entity = new SubCustAccountPermission();
             entity.StringProperty = "foo";
             SubCustAccountPermission entity2 = new SubCustAccountPermission();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SubCustAccountPermissionService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.Delete(AccountManager.Entities.SubCustAccountPermission)">
            <summary>
            public virtual method that Deletes a SubCustAccountPermission object into the datasource using a transaction.
            </summary>
            <param name="entity">SubCustAccountPermission object to Delete.</param>
            <remarks>After Deleteing into the datasource, the SubCustAccountPermission object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            SubCustAccountPermission entity = SubCustAccountPermissionService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	SubCustAccountPermissionService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.Delete(AccountManager.Entities.TList{AccountManager.Entities.SubCustAccountPermission})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>SubCustAccountPermission</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>SubCustAccountPermission</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of SubCustAccountPermission.
             <code><![CDATA[
             TList<SubCustAccountPermission> list = new TList<SubCustAccountPermission>();
             SubCustAccountPermission entity = new SubCustAccountPermission();
             entity.StringProperty = "foo";
             SubCustAccountPermission entity2 = new SubCustAccountPermission();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	SubCustAccountPermissionService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.Delete(AccountManager.Entities.SubCustAccountPermissionKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.Delete(System.String,System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String _subCustAccountId, System.Int32 _custServicesPermissionId
            </summary>
            <param name="_subCustAccountId">SubCustAccountPermission pk id.</param>
            <param name="_custServicesPermissionId">SubCustAccountPermission pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.DeepLoadBySubCustAccountIdCustServicesPermissionId(System.String,System.Int32,System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:AccountManager.Entities.SubCustAccountPermission"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:AccountManager.DataAccess.DeepLoadType"/>.
            </summary>
            <param name="_subCustAccountId"></param>
            <param name="_custServicesPermissionId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SubCustAccountPermission Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.SubCustAccountPermission"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.DeepLoad(AccountManager.Entities.SubCustAccountPermission)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">SubCustAccountPermission Object</param>
            <remarks>
            <seealso cref="M:AccountManager.Services.SubCustAccountPermissionServiceBase.DeepLoad(AccountManager.Entities.SubCustAccountPermission)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.DeepLoad(AccountManager.Entities.SubCustAccountPermission,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.SubCustAccountPermissionServiceBase.DeepLoad(AccountManager.Entities.SubCustAccountPermission)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">SubCustAccountPermission Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.DeepLoad(AccountManager.Entities.SubCustAccountPermission,System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:AccountManager.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:AccountManager.DataAccess.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:AccountManager.Entities.SubCustAccountPermission"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">SubCustAccountPermission Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.SubCustAccountPermission})">
            <summary>
            Deep Loads the <see cref="T:AccountManager.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.SubCustAccountPermissionServiceBase.DeepLoad(AccountManager.Entities.SubCustAccountPermission)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:AccountManager.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.SubCustAccountPermission},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:AccountManager.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.SubCustAccountPermissionServiceBase.DeepLoad(AccountManager.Entities.SubCustAccountPermission)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:AccountManager.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.SubCustAccountPermission},System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:AccountManager.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:AccountManager.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:AccountManager.DataAccess.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:AccountManager.Entities.SubCustAccountPermission"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.DeepSave(AccountManager.Entities.SubCustAccountPermission)">
            <summary>
            public virtualDeep Saves the <see cref="T:AccountManager.Entities.SubCustAccountPermission"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">SubCustAccountPermission Object</param>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.DeepSave(AccountManager.Entities.SubCustAccountPermission,AccountManager.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the SubCustAccountPermission object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">SubCustAccountPermission Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>SubCustAccountPermission</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.DeepSave(AccountManager.Entities.TList{AccountManager.Entities.SubCustAccountPermission})">
            <summary>
            Deep Save the entire <see cref="T:AccountManager.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{SubCustAccountPermission} Object</param>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionServiceBase.DeepSave(AccountManager.Entities.TList{AccountManager.Entities.SubCustAccountPermission},AccountManager.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:AccountManager.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:AccountManager.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">SubCustAccountPermission Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:AccountManager.Services.SubCustAccountPermissionServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:AccountManager.Services.SubCustAccountPermissionService">
            <summary>
            An component type implementation of the 'SubCustAccountPermission' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:AccountManager.Services.SubCustAccountPermissionService.#ctor">
            <summary>
            Initializes a new instance of the SubCustAccountPermissionService class.
            </summary>
        </member>
        <member name="T:AccountManager.Services.OpenCustAccountService">
            <summary>
            An component type implementation of the 'OpenCustAccount' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountService.#ctor">
            <summary>
            Initializes a new instance of the OpenCustAccountService class.
            </summary>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountService.GetList(System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get a complete collection of <see cref="T:AccountManager.Entities.BrokerAccount"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.OpenCustAccountService.UpdateOpenCustAccount(AccountManager.Entities.OpenCustAccount)">
            <summary>
             Update open cust account
            </summary>
            <param name="openCustAccount">Open Cust Account information</param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.CoreServices.GetCustInfoFromCore(System.String)">
            <summary>
            Gets the cust info from core.
            </summary>
            <param name="accountId">The account id.</param>
            <returns></returns>
        </member>
        <member name="T:AccountManager.Services.DomainUtil">
            <summary>
            DomainUtil class.
            </summary>
        </member>
        <member name="M:AccountManager.Services.DomainUtil.GetErrorsFromList``1(AccountManager.Entities.TList{``0})">
            <summary>
            Aggregates all the errors in a collection
            </summary>
        </member>
        <member name="M:AccountManager.Services.DomainUtil.HandleException(System.Exception,System.String)">
            <summary>
            Wraps call to tohe <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy"/> class which handles all exceptions based on the security policy.
            </summary>
        </member>
        <member name="M:AccountManager.Services.DomainUtil.GetDefaultByType(System.Data.DbType)">
            <summary>
            Get a default value for a given data type
            </summary>
            <param name="dataType">Data type for which to get the default value</param>
            <returns>An object of the default value.</returns>
        </member>
        <member name="M:AccountManager.Services.DomainUtil.GetDataValue(System.Data.IDataParameter)">
            <summary>
            Get Value or Default Value from an IDataParamater
            Based on DbType
            </summary>
            <param name="p">The IDataParameter instance type is used to determine the default value.</param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.DomainUtil.DefaultToDBNull(System.Object,System.Data.DbType)">
            <summary>
            Checks to see if the Default Value has been set to the parameter.
            If it's the default value, then create.
            </summary>
            <param name="val">The value we want to check.</param>
            <param name="dbtype">The DbType from wich we take the default value.</param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.DomainUtil.GetParameterValue``1(System.Data.IDataParameter)">
            <summary>
            Generic method to return the value of a nullable parameter
            </summary>
            <typeparam name="T">Type of value to return</typeparam>
            <param name="parameter">Parameter from which to extract the value</param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.DomainUtil.ConvertDataReaderToDataSet(System.Data.IDataReader)">
            <summary>
            Converts a IDataReader to a DataSet.  For use when a custom stored procedure returns an <see cref="T:System.Data.IDataReader"/>, it will
            convert all result sets returned as a DataSet.
            </summary>
            <param name="reader">The reader to convert</param>
            <returns>A dataset with one table per result in the reader</returns>
        </member>
        <member name="T:AccountManager.Services.HolidaysServiceBase">
            <summary>
             An object representation of the 'Holidays' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Holidays.cs file instead.
             All custom implementations should be done in the <see cref="T:AccountManager.Entities.Holidays"/> class.
             </remarks>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:AccountManager.Entities.Holidays"/> instance .
            </summary>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.CreateHolidays(System.DateTime,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:AccountManager.Entities.Holidays"/> instance.
            </summary>
            <param name="_holiday">Ngay le (Chi luu tru ngay, khong luu tru gio)</param>
            <param name="_note">Ghi chu</param>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.Get(AccountManager.Entities.HolidaysKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.GetByHoliday(System.DateTime)">
            <summary>
             method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the primary key PK_HOLIDAYS index.
            </summary>
            <param name="_holiday">Ngay le (Chi luu tru ngay, khong luu tru gio)</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.Holidays"/> class.</returns>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.GetByHoliday(System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:AccountManager.Entities.TList`1"/> from the datasource based on the primary key PK_HOLIDAYS index.
            </summary>
            <param name="_holiday">Ngay le (Chi luu tru ngay, khong luu tru gio)</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.Holidays"/> class.</returns>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:AccountManager.Entities.Holidays"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:AccountManager.Entities.Holidays"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:AccountManager.Entities.TList`1"/> </returns>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:AccountManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Holidays</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:AccountManager.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Holidays</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:AccountManager.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Holidays</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Holidays} of <c>Holidays</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Holidays</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,AccountManager.DataAccess.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:AccountManager.DataAccess.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Holidays</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Holidays</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,AccountManager.DataAccess.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:AccountManager.DataAccess.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Holidays</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.Find(AccountManager.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Holidays</c> objects.</returns>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.Insert(AccountManager.Entities.Holidays)">
            <summary>
            public virtual method that Inserts a Holidays object into the datasource using a transaction.
            </summary>
            <param name="entity">Holidays object to Insert.</param>
            <remarks>After Inserting into the datasource, the Holidays object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Holidays entity = new Holidays();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	HolidaysService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.Insert(AccountManager.Entities.TList{AccountManager.Entities.Holidays})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Holidays</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Holidays</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Holidays.
             <code><![CDATA[
             TList<Holidays> list = new TList<Holidays>();
             Holidays entity = new Holidays();
             entity.StringProperty = "foo";
             Holidays entity2 = new Holidays();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HolidaysService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.Update(AccountManager.Entities.Holidays)">
            <summary>
            public virtual method that Updates a Holidays object into the datasource using a transaction.
            </summary>
            <param name="entity">Holidays object to Update.</param>
            <remarks>After Updateing into the datasource, the Holidays object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Holidays entity = HolidaysService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	HolidaysService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.Update(AccountManager.Entities.TList{AccountManager.Entities.Holidays})">
             <summary>
             public virtual method that Updates rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Holidays</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Holidays</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Holidays.
             <code><![CDATA[
             TList<Holidays> list = new TList<Holidays>();
             Holidays entity = new Holidays();
             entity.StringProperty = "foo";
             Holidays entity2 = new Holidays();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HolidaysService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.Save(AccountManager.Entities.Holidays)">
            <summary>
            public virtual method that Saves a Holidays object into the datasource using a transaction.
            </summary>
            <param name="entity">Holidays object to Save.</param>
            <remarks>After Saveing into the datasource, the Holidays object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Holidays entity = HolidaysService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	HolidaysService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.Save(AccountManager.Entities.TList{AccountManager.Entities.Holidays})">
             <summary>
             public virtual method that Saves rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Holidays</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Holidays</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Holidays.
             <code><![CDATA[
             TList<Holidays> list = new TList<Holidays>();
             Holidays entity = new Holidays();
             entity.StringProperty = "foo";
             Holidays entity2 = new Holidays();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HolidaysService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.Delete(AccountManager.Entities.Holidays)">
            <summary>
            public virtual method that Deletes a Holidays object into the datasource using a transaction.
            </summary>
            <param name="entity">Holidays object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Holidays object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Holidays entity = HolidaysService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	HolidaysService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.Delete(AccountManager.Entities.TList{AccountManager.Entities.Holidays})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:AccountManager.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Holidays</c> objects in a <see cref="T:AccountManager.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Holidays</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Holidays.
             <code><![CDATA[
             TList<Holidays> list = new TList<Holidays>();
             Holidays entity = new Holidays();
             entity.StringProperty = "foo";
             Holidays entity2 = new Holidays();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HolidaysService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.Delete(AccountManager.Entities.HolidaysKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.Delete(System.DateTime)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.DateTime _holiday
            </summary>
            <param name="_holiday">Holidays pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.DeepLoadByHoliday(System.DateTime,System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:AccountManager.Entities.Holidays"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:AccountManager.DataAccess.DeepLoadType"/>.
            </summary>
            <param name="_holiday">Ngay le (Chi luu tru ngay, khong luu tru gio)</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Holidays Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.Holidays"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.DeepLoad(AccountManager.Entities.Holidays)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Holidays Object</param>
            <remarks>
            <seealso cref="M:AccountManager.Services.HolidaysServiceBase.DeepLoad(AccountManager.Entities.Holidays)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.DeepLoad(AccountManager.Entities.Holidays,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.HolidaysServiceBase.DeepLoad(AccountManager.Entities.Holidays)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Holidays Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.DeepLoad(AccountManager.Entities.Holidays,System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:AccountManager.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:AccountManager.DataAccess.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:AccountManager.Entities.Holidays"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Holidays Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.Holidays})">
            <summary>
            Deep Loads the <see cref="T:AccountManager.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.HolidaysServiceBase.DeepLoad(AccountManager.Entities.Holidays)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:AccountManager.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.Holidays},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:AccountManager.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:AccountManager.Services.HolidaysServiceBase.DeepLoad(AccountManager.Entities.Holidays)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:AccountManager.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.DeepLoad(AccountManager.Entities.TList{AccountManager.Entities.Holidays},System.Boolean,AccountManager.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:AccountManager.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:AccountManager.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:AccountManager.DataAccess.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:AccountManager.Entities.Holidays"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.DeepSave(AccountManager.Entities.Holidays)">
            <summary>
            public virtualDeep Saves the <see cref="T:AccountManager.Entities.Holidays"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Holidays Object</param>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.DeepSave(AccountManager.Entities.Holidays,AccountManager.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Holidays object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Holidays Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Holidays</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.DeepSave(AccountManager.Entities.TList{AccountManager.Entities.Holidays})">
            <summary>
            Deep Save the entire <see cref="T:AccountManager.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Holidays} Object</param>
        </member>
        <member name="M:AccountManager.Services.HolidaysServiceBase.DeepSave(AccountManager.Entities.TList{AccountManager.Entities.Holidays},AccountManager.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:AccountManager.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:AccountManager.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Holidays Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:AccountManager.Services.HolidaysServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:AccountManager.Services.WorkingDaysService">
            <summary>
            An component type implementation of the 'WorkingDays' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysService.#ctor">
            <summary>
            Initializes a new instance of the WorkingDaysService class.
            </summary>
        </member>
        <member name="M:AccountManager.Services.WorkingDaysService.UpdateWorkingDays(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
             Update working days status
            </summary>
            <param name="mondayStatus">Monday status</param>
            <param name="tuesdayStatus">Tuesday status</param>
            <param name="wednesdayStatus">Wednesday status</param>
            <param name="thursdayStatus">Thursday status</param>
            <param name="fridayStatus">Friday status</param>
            <param name="saturdayStatus">Saturday status</param>
            <param name="sundayStatus">Sunday status</param>
             <returns>
             <para>Result of updating working days</para>
             <para>RET_CODE=SUCCESS: Get account successfully.</para>
             </returns>
        </member>
        <member name="T:AccountManager.Services.ProcessStartingHandler">
            <summary>
            ProcessStartingHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:AccountManager.Services.ProcessEndedHandler">
            <summary>
            ProcessEndedHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:AccountManager.Services.ProcessorEventArgs">
            <summary>
            Processor Event Args
            </summary>
        </member>
        <member name="M:AccountManager.Services.ProcessorEventArgs.#ctor(AccountManager.Services.ProcessorBase)">
            <summary>
            Initializes a new instance of the ProcessorEventArgs class.
            </summary>
            <param name="processor"></param>
        </member>
        <member name="P:AccountManager.Services.ProcessorEventArgs.Processor">
            <summary>
            Gets or sets the processor.
            </summary>
            <value>The processor.</value>
        </member>
        <member name="T:AccountManager.Services.ServiceResult">
            <summary>
            The class provides a notification pattern for the processor execution.
            </summary>
        </member>
        <member name="P:AccountManager.Services.ServiceResult.HasErrors">
            <summary>
               Determines whethere the containing service, has errors.
            </summary>
        </member>
        <member name="P:AccountManager.Services.ServiceResult.Error">
            <summary>
               Provides a string of errors accumulated with a new line of delimeted errors.
            </summary>
        </member>
        <member name="P:AccountManager.Services.ServiceResult.ProcessBrokenRuleLists">
            <summary>
               Provides an aggregated group of BrokenRuleList for each of the executed processes.
            </summary>
        </member>
        <member name="P:AccountManager.Services.ServiceResult.ProcessorResultList">
            <summary>
               Determines whethere the containing processs results that were enlisted in the service.
            </summary>
        </member>
        <member name="P:AccountManager.Services.ServiceResult.ExceptionList">
             <summary>
            	Provides the List of UnHandled Exceptions that occured during processing.
             </summary>
            <value>A list of rules that were broken in the process</value>		
        </member>
        <member name="T:AccountManager.Services.LanguageService">
            <summary>
            An component type implementation of the 'Language' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:AccountManager.Services.LanguageService.GetLanguage(System.String)">
            <summary>
            Gets the language.
            </summary>
            <param name="languageId">The language id.</param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.Services.LanguageService.GetList(System.String,System.String)">
            <summary>
            Gets the list.
            </summary>
            <param name="languageId">The language id.</param>
            <param name="languageName">Name of the language.</param>
            <returns></returns>
        </member>
        <member name="T:AccountManager.Services.HolidaysService">
            <summary>
            An component type implementation of the 'Holidays' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:AccountManager.Services.HolidaysService.#ctor">
            <summary>
            Initializes a new instance of the HolidaysService class.
            </summary>
        </member>
        <member name="M:AccountManager.Services.HolidaysService.CreateHoliday(System.String,System.String)">
            <summary>
             Create holiday
            </summary>
            <param name="holiday">The holiday, format DD/MM/YYYY</param>
            <param name="note">The description</param>
             <returns>
             <para>Result of creating holiday</para>
             <para>RET_CODE=INCORRECT_FORMAT: The format is incorrect.</para>
             <para>RET_CODE=EXISTED_DATA: Data is existing.</para>
             <para>RET_CODE=FAIL: Fail to create holiday.</para>
             <para>RET_CODE=SUCCESS: Create holiday successfully.</para>
             </returns>
        </member>
        <member name="M:AccountManager.Services.HolidaysService.UpdateHoliday(System.String,System.String)">
            <summary>
             Update holiday
            </summary>
            <param name="holiday">The holiday, format DD/MM/YYYY</param>
            <param name="note">The description</param>
             <returns>
             <para>Result of updating holiday</para>
             <para>RET_CODE=INCORRECT_FORMAT: The format is incorrect.</para>
             <para>RET_CODE=NO_EXISTED_DATA: Data is not existing.</para>
             <para>RET_CODE=FAIL: Fail to update holiday.</para>
             <para>RET_CODE=SUCCESS: Update holiday successfully.</para>
             </returns>
        </member>
        <member name="M:AccountManager.Services.HolidaysService.GetListHolidays(System.String,System.String,System.Int32,System.Int32)">
            <summary>
             Get list holiday
            </summary>
            <param name="fromDate">The search from date, format DD/MM/YYYY</param>
            <param name="toDate">The search to date, format DD/MM/YYYY</param>
            <param name="pageIndex">Page index, begin with 1</param>
            <param name="pageSize">Page size</param>
             <returns>
             <para>A PagingObject&lt;List&lt;Holidays&gt;&gt; object contains total record, returned code, 
             returned message and a list of Holidays object that contains holiday information.</para>
             </returns>
        </member>
    </members>
</doc>
