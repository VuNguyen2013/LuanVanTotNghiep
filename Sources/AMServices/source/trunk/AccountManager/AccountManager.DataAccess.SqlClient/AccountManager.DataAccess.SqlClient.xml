<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AccountManager.DataAccess.SqlClient</name>
    </assembly>
    <members>
        <member name="T:AccountManager.DataAccess.SqlClient.SqlMainCustAccountProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AccountManager.Entities.MainCustAccount"/> entity.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlMainCustAccountProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlMainCustAccountProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlMainCustAccountProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlMainCustAccountProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlMainCustAccountProviderBase.Delete(AccountManager.DataAccess.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_mainCustAccountId">Main customer account id. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlMainCustAccountProviderBase.Find(AccountManager.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of AccountManager.Entities.MainCustAccount objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlMainCustAccountProviderBase.Find(AccountManager.DataAccess.TransactionManager,AccountManager.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of AccountManager.Entities.MainCustAccount objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlMainCustAccountProviderBase.GetAll(AccountManager.DataAccess.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.MainCustAccount objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlMainCustAccountProviderBase.GetPaged(AccountManager.DataAccess.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.MainCustAccount objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlMainCustAccountProviderBase.GetByBrokerId(AccountManager.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_MainCustAccount_BrokerAccount key.
            	FK_MainCustAccount_BrokerAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="_brokerId">Broker id</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.MainCustAccount objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlMainCustAccountProviderBase.GetByMainCustAccountId(AccountManager.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_MainCustAccount index.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="_mainCustAccountId">Main customer account id</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.MainCustAccount"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlMainCustAccountProviderBase.BulkInsert(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.TList{AccountManager.Entities.MainCustAccount})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the AccountManager.Entities.MainCustAccount object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlMainCustAccountProviderBase.Insert(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.MainCustAccount)">
            <summary>
            	Inserts a AccountManager.Entities.MainCustAccount object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="entity">AccountManager.Entities.MainCustAccount object to insert.</param>
            <remarks>
            	After inserting into the datasource, the AccountManager.Entities.MainCustAccount object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlMainCustAccountProviderBase.Update(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.MainCustAccount)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="entity">AccountManager.Entities.MainCustAccount object to update.</param>
            <remarks>
            	After updating the datasource, the AccountManager.Entities.MainCustAccount object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlMainCustAccountProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlMainCustAccountProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlMainCustAccountProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:AccountManager.DataAccess.SqlClient.SqlSubCustAccountProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AccountManager.Entities.SubCustAccount"/> entity.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSubCustAccountProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlSubCustAccountProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSubCustAccountProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlSubCustAccountProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSubCustAccountProviderBase.GetByCustServicesPermissionIdFromSubCustAccountPermission(AccountManager.DataAccess.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets SubCustAccount objects from the datasource by CustServicesPermissionID in the
            	SubCustAccountPermission table. Table SubCustAccount is related to table CustServicesPermission
            	through the (M:N) relationship defined in the SubCustAccountPermission table.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="_custServicesPermissionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of SubCustAccount objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSubCustAccountProviderBase.Delete(AccountManager.DataAccess.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_subCustAccountId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSubCustAccountProviderBase.Find(AccountManager.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of AccountManager.Entities.SubCustAccount objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSubCustAccountProviderBase.Find(AccountManager.DataAccess.TransactionManager,AccountManager.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of AccountManager.Entities.SubCustAccount objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSubCustAccountProviderBase.GetAll(AccountManager.DataAccess.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.SubCustAccount objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSubCustAccountProviderBase.GetPaged(AccountManager.DataAccess.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.SubCustAccount objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSubCustAccountProviderBase.GetByMainCustAccountId(AccountManager.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SubCustAccount_MainCustAccount key.
            	FK_SubCustAccount_MainCustAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="_mainCustAccountId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.SubCustAccount objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSubCustAccountProviderBase.GetBySubCustAccountId(AccountManager.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SubCustAccount index.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="_subCustAccountId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.SubCustAccount"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSubCustAccountProviderBase.BulkInsert(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.TList{AccountManager.Entities.SubCustAccount})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the AccountManager.Entities.SubCustAccount object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSubCustAccountProviderBase.Insert(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.SubCustAccount)">
            <summary>
            	Inserts a AccountManager.Entities.SubCustAccount object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="entity">AccountManager.Entities.SubCustAccount object to insert.</param>
            <remarks>
            	After inserting into the datasource, the AccountManager.Entities.SubCustAccount object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSubCustAccountProviderBase.Update(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.SubCustAccount)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="entity">AccountManager.Entities.SubCustAccount object to update.</param>
            <remarks>
            	After updating the datasource, the AccountManager.Entities.SubCustAccount object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlSubCustAccountProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlSubCustAccountProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlSubCustAccountProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:AccountManager.DataAccess.SqlClient.SqlLanguageProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AccountManager.Entities.Language"/> entity.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlLanguageProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlLanguageProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlLanguageProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlLanguageProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlLanguageProviderBase.Delete(AccountManager.DataAccess.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_languageId">Language id. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlLanguageProviderBase.Find(AccountManager.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of AccountManager.Entities.Language objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlLanguageProviderBase.Find(AccountManager.DataAccess.TransactionManager,AccountManager.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of AccountManager.Entities.Language objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlLanguageProviderBase.GetAll(AccountManager.DataAccess.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.Language objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlLanguageProviderBase.GetPaged(AccountManager.DataAccess.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.Language objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlLanguageProviderBase.GetByLanguageId(AccountManager.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_LANGUAGE index.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="_languageId">Language id</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.Language"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlLanguageProviderBase.BulkInsert(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.TList{AccountManager.Entities.Language})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the AccountManager.Entities.Language object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlLanguageProviderBase.Insert(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.Language)">
            <summary>
            	Inserts a AccountManager.Entities.Language object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="entity">AccountManager.Entities.Language object to insert.</param>
            <remarks>
            	After inserting into the datasource, the AccountManager.Entities.Language object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlLanguageProviderBase.Update(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.Language)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="entity">AccountManager.Entities.Language object to update.</param>
            <remarks>
            	After updating the datasource, the AccountManager.Entities.Language object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlLanguageProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlLanguageProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlLanguageProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:AccountManager.DataAccess.SqlClient.SqlHolidaysProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AccountManager.Entities.Holidays"/> entity.
            </summary>
        </member>
        <member name="T:AccountManager.DataAccess.SqlClient.SqlHolidaysProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AccountManager.Entities.Holidays"/> entity.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlHolidaysProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlHolidaysProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlHolidaysProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlHolidaysProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlHolidaysProviderBase.Delete(AccountManager.DataAccess.TransactionManager,System.DateTime)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_holiday">Ngay le (Chi luu tru ngay, khong luu tru gio). Primary Key.</param>	
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlHolidaysProviderBase.Find(AccountManager.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of AccountManager.Entities.Holidays objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlHolidaysProviderBase.Find(AccountManager.DataAccess.TransactionManager,AccountManager.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of AccountManager.Entities.Holidays objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlHolidaysProviderBase.GetAll(AccountManager.DataAccess.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.Holidays objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlHolidaysProviderBase.GetPaged(AccountManager.DataAccess.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.Holidays objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlHolidaysProviderBase.GetByHoliday(AccountManager.DataAccess.TransactionManager,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_HOLIDAYS index.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="_holiday">Ngay le (Chi luu tru ngay, khong luu tru gio)</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.Holidays"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlHolidaysProviderBase.BulkInsert(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.TList{AccountManager.Entities.Holidays})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the AccountManager.Entities.Holidays object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlHolidaysProviderBase.Insert(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.Holidays)">
            <summary>
            	Inserts a AccountManager.Entities.Holidays object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="entity">AccountManager.Entities.Holidays object to insert.</param>
            <remarks>
            	After inserting into the datasource, the AccountManager.Entities.Holidays object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlHolidaysProviderBase.Update(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.Holidays)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="entity">AccountManager.Entities.Holidays object to update.</param>
            <remarks>
            	After updating the datasource, the AccountManager.Entities.Holidays object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlHolidaysProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlHolidaysProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlHolidaysProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlHolidaysProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlHolidaysProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:AccountManager.DataAccess.SqlClient.StoredProcedureProvider">
            <summary>
            Summary description for Procedures.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.StoredProcedureProvider.#ctor">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.StoredProcedureProvider"/> instance.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.StoredProcedureProvider.Serialize(System.String)">
            <summary>
            Serializes the specified filename.
            </summary>
            <param name="filename">Filename.</param>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.StoredProcedureProvider.Deserialize">
            <summary>
            Deserializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.StoredProcedureProvider.GetProcedureBodyFromEmbeddedResource(System.String)">
            <summary>
            Get the query text from the embedded xml file.
            </summary>
            <param name="name">The name of the query.</param>
            <returns>the text of the query</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Boolean)">
            <summary>
            Get the command wrapper, either from the stored procedures or from the embedded queries.
            </summary>
            <param name="database">The database instance.</param>
            <param name="commandName">the name of the sp.</param>
            <param name="useStoredProcedure">Indicates if we want stored procedure.</param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Type,AccountManager.DataAccess.SqlFilterParameterCollection,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the command wrapper for a dynamically generated query and
            optionally includes server-side paging.
            </summary>
            <param name="database"></param>
            <param name="commandName"></param>
            <param name="columnEnum"></param>
            <param name="parameters"></param>
            <param name="orderBy"></param>
            <param name="start"></param>
            <param name="pageLength"></param>
            <returns></returns>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.StoredProcedureProvider.Current">
            <summary>
            Gets the current <see cref="T:AccountManager.DataAccess.SqlClient.StoredProcedureProvider"/> singleton instance.
            </summary>
            <value><see cref="T:AccountManager.DataAccess.SqlClient.StoredProcedureProvider"/></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.StoredProcedureProvider.Procedures">
            <summary>
            Gets or sets the procedures.
            </summary>
            <value>An <see cref="T:System.Collections.ArrayList"/> of <see cref="T:AccountManager.DataAccess.SqlClient.Procedure"/> objects.</value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.StoredProcedureProvider.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:AccountManager.DataAccess.SqlClient.Procedure"/> instance with the specified name.
            </summary>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.StoredProcedureProvider.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:AccountManager.DataAccess.SqlClient.Procedure"/> instance at the specified index.
            </summary>
        </member>
        <member name="T:AccountManager.DataAccess.SqlClient.Procedure">
            <summary>
            Represents a sql query.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.Procedure.#ctor">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.Procedure"/> instance.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.Procedure.Parameter(System.String)">
            <summary>
            Get the parameter from the specified name of the param.
            </summary>
            <param name="paramName">Name of the param.</param>
            <returns></returns>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.Procedure.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.Procedure.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.Procedure.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.Procedure.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.Procedure.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value></value>
        </member>
        <member name="T:AccountManager.DataAccess.SqlClient.Parameter">
            <summary>
            Respresents a query parameter.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.Parameter.#ctor">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.Parameter"/> instance.
            </summary>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.Parameter.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.Parameter.SqlType">
            <summary>
            Gets or sets the SqlType.
            </summary>
            <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.Parameter.Direction">
            <summary>
            Gets or sets the Direction.
            </summary>
            <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.Parameter.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.Parameter.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.Parameter.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value></value>
        </member>
        <member name="T:AccountManager.DataAccess.SqlClient.SqlSubCustAccountPermissionProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AccountManager.Entities.SubCustAccountPermission"/> entity.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSubCustAccountPermissionProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlSubCustAccountPermissionProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSubCustAccountPermissionProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlSubCustAccountPermissionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSubCustAccountPermissionProviderBase.Delete(AccountManager.DataAccess.TransactionManager,System.String,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_subCustAccountId">. Primary Key.</param>	
            <param name="_custServicesPermissionId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSubCustAccountPermissionProviderBase.Find(AccountManager.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of AccountManager.Entities.SubCustAccountPermission objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSubCustAccountPermissionProviderBase.Find(AccountManager.DataAccess.TransactionManager,AccountManager.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of AccountManager.Entities.SubCustAccountPermission objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSubCustAccountPermissionProviderBase.GetAll(AccountManager.DataAccess.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.SubCustAccountPermission objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSubCustAccountPermissionProviderBase.GetPaged(AccountManager.DataAccess.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.SubCustAccountPermission objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSubCustAccountPermissionProviderBase.GetByCustServicesPermissionId(AccountManager.DataAccess.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SubCustAccountPermission_CustServicesPermission key.
            	FK_SubCustAccountPermission_CustServicesPermission Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="_custServicesPermissionId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.SubCustAccountPermission objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSubCustAccountPermissionProviderBase.GetBySubCustAccountId(AccountManager.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_SubCustAccountPermission_SubCustAccount key.
            	FK_SubCustAccountPermission_SubCustAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="_subCustAccountId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.SubCustAccountPermission objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSubCustAccountPermissionProviderBase.GetBySubCustAccountIdCustServicesPermissionId(AccountManager.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SubCustAccountPermission index.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="_subCustAccountId"></param>
            <param name="_custServicesPermissionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.SubCustAccountPermission"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSubCustAccountPermissionProviderBase.BulkInsert(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.TList{AccountManager.Entities.SubCustAccountPermission})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the AccountManager.Entities.SubCustAccountPermission object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSubCustAccountPermissionProviderBase.Insert(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.SubCustAccountPermission)">
            <summary>
            	Inserts a AccountManager.Entities.SubCustAccountPermission object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="entity">AccountManager.Entities.SubCustAccountPermission object to insert.</param>
            <remarks>
            	After inserting into the datasource, the AccountManager.Entities.SubCustAccountPermission object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSubCustAccountPermissionProviderBase.Update(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.SubCustAccountPermission)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="entity">AccountManager.Entities.SubCustAccountPermission object to update.</param>
            <remarks>
            	After updating the datasource, the AccountManager.Entities.SubCustAccountPermission object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlSubCustAccountPermissionProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlSubCustAccountPermissionProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlSubCustAccountPermissionProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:AccountManager.DataAccess.SqlClient.SqlSmsCountProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AccountManager.Entities.SmsCount"/> entity.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSmsCountProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlSmsCountProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSmsCountProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlSmsCountProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSmsCountProviderBase.Delete(AccountManager.DataAccess.TransactionManager,System.DateTime)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_sendDate">SMS Sent date. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSmsCountProviderBase.Find(AccountManager.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of AccountManager.Entities.SmsCount objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSmsCountProviderBase.Find(AccountManager.DataAccess.TransactionManager,AccountManager.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of AccountManager.Entities.SmsCount objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSmsCountProviderBase.GetAll(AccountManager.DataAccess.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.SmsCount objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSmsCountProviderBase.GetPaged(AccountManager.DataAccess.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.SmsCount objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSmsCountProviderBase.GetBySendDate(AccountManager.DataAccess.TransactionManager,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_SMSCOUNT index.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="_sendDate">SMS Sent date</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.SmsCount"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSmsCountProviderBase.BulkInsert(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.TList{AccountManager.Entities.SmsCount})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the AccountManager.Entities.SmsCount object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSmsCountProviderBase.Insert(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.SmsCount)">
            <summary>
            	Inserts a AccountManager.Entities.SmsCount object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="entity">AccountManager.Entities.SmsCount object to insert.</param>
            <remarks>
            	After inserting into the datasource, the AccountManager.Entities.SmsCount object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSmsCountProviderBase.Update(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.SmsCount)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="entity">AccountManager.Entities.SmsCount object to update.</param>
            <remarks>
            	After updating the datasource, the AccountManager.Entities.SmsCount object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSmsCountProviderBase.GetTotal(AccountManager.DataAccess.TransactionManager,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            This method wraps the '_SMSCount_GetTotal' stored procedure. 
            </summary>	
            <param name="fromDate"> A <c>System.String</c> instance.</param>
            <param name="toDate"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlSmsCountProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlSmsCountProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlSmsCountProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider">
            <summary>
            This class is the Sql implementation of the NetTiersProvider.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider"/> class.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.CreateTransaction">
            <summary>
            Creates a new <c cref="T:AccountManager.DataAccess.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(AccountManager.DataAccess.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(AccountManager.DataAccess.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(AccountManager.DataAccess.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteReader(AccountManager.DataAccess.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteReader(AccountManager.DataAccess.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteReader(AccountManager.DataAccess.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteDataSet(AccountManager.DataAccess.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteDataSet(AccountManager.DataAccess.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteDataSet(AccountManager.DataAccess.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteScalar(AccountManager.DataAccess.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteScalar(AccountManager.DataAccess.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteScalar(AccountManager.DataAccess.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.UseStoredProcedure">
            <summary>
            Gets a value indicating whether to use stored procedure or not.
            </summary>
            <value>
            	<c>true</c> if this repository use stored procedures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.IsTransactionSupported">
            <summary>
             Indicates if the current <c cref="T:AccountManager.DataAccess.Bases.NetTiersProvider"/> implementation supports Transacton.
            </summary>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.OpenCustAccountProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:AccountManager.Entities.OpenCustAccount"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.SqlOpenCustAccountProvider">
            <summary>
            Gets the current <c cref="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.SqlOpenCustAccountProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.BrokerAccountProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:AccountManager.Entities.BrokerAccount"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.SqlBrokerAccountProvider">
            <summary>
            Gets the current <c cref="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.SqlBrokerAccountProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.MainCustAccountProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:AccountManager.Entities.MainCustAccount"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.SqlMainCustAccountProvider">
            <summary>
            Gets the current <c cref="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.SqlMainCustAccountProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.ResearchProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:AccountManager.Entities.Research"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.SqlResearchProvider">
            <summary>
            Gets the current <c cref="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.SqlResearchProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.SmsCountProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:AccountManager.Entities.SmsCount"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.SqlSmsCountProvider">
            <summary>
            Gets the current <c cref="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.SqlSmsCountProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.SubCustAccountProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:AccountManager.Entities.SubCustAccount"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.SqlSubCustAccountProvider">
            <summary>
            Gets the current <c cref="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.SqlSubCustAccountProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.LanguageProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:AccountManager.Entities.Language"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.SqlLanguageProvider">
            <summary>
            Gets the current <c cref="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.SqlLanguageProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.SubCustAccountPermissionProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:AccountManager.Entities.SubCustAccountPermission"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.SqlSubCustAccountPermissionProvider">
            <summary>
            Gets the current <c cref="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.SqlSubCustAccountPermissionProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.HolidaysProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:AccountManager.Entities.Holidays"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.SqlHolidaysProvider">
            <summary>
            Gets the current <c cref="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.SqlHolidaysProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.BrokerAmPermissionProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:AccountManager.Entities.BrokerAmPermission"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.SqlBrokerAmPermissionProvider">
            <summary>
            Gets the current <c cref="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.SqlBrokerAmPermissionProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.BuyRightProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:AccountManager.Entities.BuyRight"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.SqlBuyRightProvider">
            <summary>
            Gets the current <c cref="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.SqlBuyRightProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.BrokerPermissionProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:AccountManager.Entities.BrokerPermission"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.SqlBrokerPermissionProvider">
            <summary>
            Gets the current <c cref="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.SqlBrokerPermissionProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.CustServicesPermissionProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:AccountManager.Entities.CustServicesPermission"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.SqlCustServicesPermissionProvider">
            <summary>
            Gets the current <c cref="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.SqlCustServicesPermissionProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.ConfigurationsProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:AccountManager.Entities.Configurations"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.SqlConfigurationsProvider">
            <summary>
            Gets the current <c cref="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.SqlConfigurationsProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.WorkingDaysProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:AccountManager.Entities.WorkingDays"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.SqlWorkingDaysProvider">
            <summary>
            Gets the current <c cref="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.SqlWorkingDaysProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.CustomerActionHistoryProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:AccountManager.Entities.CustomerActionHistory"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.SqlCustomerActionHistoryProvider">
            <summary>
            Gets the current <c cref="P:AccountManager.DataAccess.SqlClient.SqlNetTiersProvider.SqlCustomerActionHistoryProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="T:AccountManager.DataAccess.SqlClient.SqlBrokerAmPermissionProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AccountManager.Entities.BrokerAmPermission"/> entity.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerAmPermissionProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlBrokerAmPermissionProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerAmPermissionProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlBrokerAmPermissionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerAmPermissionProviderBase.GetByBrokerIdFromBrokerPermission(AccountManager.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets BrokerAmPermission objects from the datasource by BrokerID in the
            	BrokerPermission table. Table BrokerAMPermission is related to table BrokerAccount
            	through the (M:N) relationship defined in the BrokerPermission table.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="_brokerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of BrokerAmPermission objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerAmPermissionProviderBase.Delete(AccountManager.DataAccess.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_permissionId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerAmPermissionProviderBase.Find(AccountManager.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of AccountManager.Entities.BrokerAmPermission objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerAmPermissionProviderBase.Find(AccountManager.DataAccess.TransactionManager,AccountManager.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of AccountManager.Entities.BrokerAmPermission objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerAmPermissionProviderBase.GetAll(AccountManager.DataAccess.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.BrokerAmPermission objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerAmPermissionProviderBase.GetPaged(AccountManager.DataAccess.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.BrokerAmPermission objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerAmPermissionProviderBase.GetByPermissionId(AccountManager.DataAccess.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_BrokerAMPermission index.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="_permissionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.BrokerAmPermission"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerAmPermissionProviderBase.BulkInsert(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.TList{AccountManager.Entities.BrokerAmPermission})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the AccountManager.Entities.BrokerAmPermission object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerAmPermissionProviderBase.Insert(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.BrokerAmPermission)">
            <summary>
            	Inserts a AccountManager.Entities.BrokerAmPermission object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="entity">AccountManager.Entities.BrokerAmPermission object to insert.</param>
            <remarks>
            	After inserting into the datasource, the AccountManager.Entities.BrokerAmPermission object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerAmPermissionProviderBase.Update(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.BrokerAmPermission)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="entity">AccountManager.Entities.BrokerAmPermission object to update.</param>
            <remarks>
            	After updating the datasource, the AccountManager.Entities.BrokerAmPermission object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlBrokerAmPermissionProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlBrokerAmPermissionProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlBrokerAmPermissionProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:AccountManager.DataAccess.SqlClient.SqlSubCustAccountProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AccountManager.Entities.SubCustAccount"/> entity.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSubCustAccountProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlSubCustAccountProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:AccountManager.DataAccess.SqlClient.SqlOpenCustAccountProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AccountManager.Entities.OpenCustAccount"/> entity.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlOpenCustAccountProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlOpenCustAccountProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlOpenCustAccountProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlOpenCustAccountProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlOpenCustAccountProviderBase.Delete(AccountManager.DataAccess.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_openId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlOpenCustAccountProviderBase.Find(AccountManager.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of AccountManager.Entities.OpenCustAccount objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlOpenCustAccountProviderBase.Find(AccountManager.DataAccess.TransactionManager,AccountManager.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of AccountManager.Entities.OpenCustAccount objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlOpenCustAccountProviderBase.GetAll(AccountManager.DataAccess.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.OpenCustAccount objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlOpenCustAccountProviderBase.GetPaged(AccountManager.DataAccess.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.OpenCustAccount objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlOpenCustAccountProviderBase.GetByOpenId(AccountManager.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_OpenCustAccount index.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="_openId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.OpenCustAccount"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlOpenCustAccountProviderBase.BulkInsert(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.TList{AccountManager.Entities.OpenCustAccount})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the AccountManager.Entities.OpenCustAccount object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlOpenCustAccountProviderBase.Insert(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.OpenCustAccount)">
            <summary>
            	Inserts a AccountManager.Entities.OpenCustAccount object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="entity">AccountManager.Entities.OpenCustAccount object to insert.</param>
            <remarks>
            	After inserting into the datasource, the AccountManager.Entities.OpenCustAccount object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlOpenCustAccountProviderBase.Update(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.OpenCustAccount)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="entity">AccountManager.Entities.OpenCustAccount object to update.</param>
            <remarks>
            	After updating the datasource, the AccountManager.Entities.OpenCustAccount object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlOpenCustAccountProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlOpenCustAccountProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlOpenCustAccountProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:AccountManager.DataAccess.SqlClient.SqlSubCustAccountPermissionProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AccountManager.Entities.SubCustAccountPermission"/> entity.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSubCustAccountPermissionProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlSubCustAccountPermissionProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:AccountManager.DataAccess.SqlClient.SqlMainCustAccountProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AccountManager.Entities.MainCustAccount"/> entity.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlMainCustAccountProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlMainCustAccountProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:AccountManager.DataAccess.SqlClient.SqlCustomerActionHistoryProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AccountManager.Entities.CustomerActionHistory"/> entity.
            </summary>
        </member>
        <member name="T:AccountManager.DataAccess.SqlClient.SqlCustomerActionHistoryProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AccountManager.Entities.CustomerActionHistory"/> entity.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlCustomerActionHistoryProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlCustomerActionHistoryProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlCustomerActionHistoryProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlCustomerActionHistoryProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlCustomerActionHistoryProviderBase.Delete(AccountManager.DataAccess.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">Auto increase ID. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlCustomerActionHistoryProviderBase.Find(AccountManager.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of AccountManager.Entities.CustomerActionHistory objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlCustomerActionHistoryProviderBase.Find(AccountManager.DataAccess.TransactionManager,AccountManager.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of AccountManager.Entities.CustomerActionHistory objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlCustomerActionHistoryProviderBase.GetAll(AccountManager.DataAccess.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.CustomerActionHistory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlCustomerActionHistoryProviderBase.GetPaged(AccountManager.DataAccess.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.CustomerActionHistory objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlCustomerActionHistoryProviderBase.GetByMainCustAccountId(AccountManager.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerActionHistory_MainCustAccount key.
            	FK_CustomerActionHistory_MainCustAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="_mainCustAccountId">Main customer account ID</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.CustomerActionHistory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlCustomerActionHistoryProviderBase.GetBySubCustAccountId(AccountManager.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_CustomerActionHistory_SubCustAccount key.
            	FK_CustomerActionHistory_SubCustAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="_subCustAccountId">Sub customer account ID</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.CustomerActionHistory objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlCustomerActionHistoryProviderBase.GetById(AccountManager.DataAccess.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_CustomerActionHistory index.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="_id">Auto increase ID</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.CustomerActionHistory"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlCustomerActionHistoryProviderBase.BulkInsert(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.TList{AccountManager.Entities.CustomerActionHistory})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the AccountManager.Entities.CustomerActionHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlCustomerActionHistoryProviderBase.Insert(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.CustomerActionHistory)">
            <summary>
            	Inserts a AccountManager.Entities.CustomerActionHistory object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="entity">AccountManager.Entities.CustomerActionHistory object to insert.</param>
            <remarks>
            	After inserting into the datasource, the AccountManager.Entities.CustomerActionHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlCustomerActionHistoryProviderBase.Update(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.CustomerActionHistory)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="entity">AccountManager.Entities.CustomerActionHistory object to update.</param>
            <remarks>
            	After updating the datasource, the AccountManager.Entities.CustomerActionHistory object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlCustomerActionHistoryProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlCustomerActionHistoryProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlCustomerActionHistoryProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlCustomerActionHistoryProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlCustomerActionHistoryProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:AccountManager.DataAccess.SqlClient.SqlConfigurationsProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AccountManager.Entities.Configurations"/> entity.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlConfigurationsProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlConfigurationsProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlConfigurationsProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlConfigurationsProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlConfigurationsProviderBase.Delete(AccountManager.DataAccess.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_name">Name of item. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlConfigurationsProviderBase.Find(AccountManager.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of AccountManager.Entities.Configurations objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlConfigurationsProviderBase.Find(AccountManager.DataAccess.TransactionManager,AccountManager.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of AccountManager.Entities.Configurations objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlConfigurationsProviderBase.GetAll(AccountManager.DataAccess.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.Configurations objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlConfigurationsProviderBase.GetPaged(AccountManager.DataAccess.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.Configurations objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlConfigurationsProviderBase.GetByName(AccountManager.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_CONFIGURATIONS index.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="_name">Name of item</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.Configurations"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlConfigurationsProviderBase.BulkInsert(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.TList{AccountManager.Entities.Configurations})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the AccountManager.Entities.Configurations object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlConfigurationsProviderBase.Insert(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.Configurations)">
            <summary>
            	Inserts a AccountManager.Entities.Configurations object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="entity">AccountManager.Entities.Configurations object to insert.</param>
            <remarks>
            	After inserting into the datasource, the AccountManager.Entities.Configurations object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlConfigurationsProviderBase.Update(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.Configurations)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="entity">AccountManager.Entities.Configurations object to update.</param>
            <remarks>
            	After updating the datasource, the AccountManager.Entities.Configurations object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlConfigurationsProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlConfigurationsProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlConfigurationsProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:AccountManager.DataAccess.SqlClient.SqlCustServicesPermissionProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AccountManager.Entities.CustServicesPermission"/> entity.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlCustServicesPermissionProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlCustServicesPermissionProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlCustServicesPermissionProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlCustServicesPermissionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlCustServicesPermissionProviderBase.GetBySubCustAccountIdFromSubCustAccountPermission(AccountManager.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets CustServicesPermission objects from the datasource by SubCustAccountID in the
            	SubCustAccountPermission table. Table CustServicesPermission is related to table SubCustAccount
            	through the (M:N) relationship defined in the SubCustAccountPermission table.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="_subCustAccountId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of CustServicesPermission objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlCustServicesPermissionProviderBase.Delete(AccountManager.DataAccess.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_custServicesPermissionId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlCustServicesPermissionProviderBase.Find(AccountManager.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of AccountManager.Entities.CustServicesPermission objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlCustServicesPermissionProviderBase.Find(AccountManager.DataAccess.TransactionManager,AccountManager.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of AccountManager.Entities.CustServicesPermission objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlCustServicesPermissionProviderBase.GetAll(AccountManager.DataAccess.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.CustServicesPermission objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlCustServicesPermissionProviderBase.GetPaged(AccountManager.DataAccess.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.CustServicesPermission objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlCustServicesPermissionProviderBase.GetByCustServicesPermissionId(AccountManager.DataAccess.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_CustServicesPermission index.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="_custServicesPermissionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.CustServicesPermission"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlCustServicesPermissionProviderBase.BulkInsert(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.TList{AccountManager.Entities.CustServicesPermission})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the AccountManager.Entities.CustServicesPermission object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlCustServicesPermissionProviderBase.Insert(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.CustServicesPermission)">
            <summary>
            	Inserts a AccountManager.Entities.CustServicesPermission object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="entity">AccountManager.Entities.CustServicesPermission object to insert.</param>
            <remarks>
            	After inserting into the datasource, the AccountManager.Entities.CustServicesPermission object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlCustServicesPermissionProviderBase.Update(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.CustServicesPermission)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="entity">AccountManager.Entities.CustServicesPermission object to update.</param>
            <remarks>
            	After updating the datasource, the AccountManager.Entities.CustServicesPermission object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlCustServicesPermissionProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlCustServicesPermissionProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlCustServicesPermissionProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:AccountManager.DataAccess.SqlClient.SqlOpenCustAccountProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AccountManager.Entities.OpenCustAccount"/> entity.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlOpenCustAccountProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlOpenCustAccountProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:AccountManager.DataAccess.SqlClient.SqlResearchProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AccountManager.Entities.Research"/> entity.
            </summary>
        </member>
        <member name="T:AccountManager.DataAccess.SqlClient.SqlResearchProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AccountManager.Entities.Research"/> entity.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlResearchProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlResearchProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlResearchProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlResearchProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlResearchProviderBase.Delete(AccountManager.DataAccess.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_researchId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlResearchProviderBase.Find(AccountManager.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of AccountManager.Entities.Research objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlResearchProviderBase.Find(AccountManager.DataAccess.TransactionManager,AccountManager.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of AccountManager.Entities.Research objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlResearchProviderBase.GetAll(AccountManager.DataAccess.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.Research objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlResearchProviderBase.GetPaged(AccountManager.DataAccess.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.Research objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlResearchProviderBase.GetByResearchId(AccountManager.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_Research index.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="_researchId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.Research"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlResearchProviderBase.BulkInsert(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.TList{AccountManager.Entities.Research})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the AccountManager.Entities.Research object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlResearchProviderBase.Insert(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.Research)">
            <summary>
            	Inserts a AccountManager.Entities.Research object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="entity">AccountManager.Entities.Research object to insert.</param>
            <remarks>
            	After inserting into the datasource, the AccountManager.Entities.Research object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlResearchProviderBase.Update(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.Research)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="entity">AccountManager.Entities.Research object to update.</param>
            <remarks>
            	After updating the datasource, the AccountManager.Entities.Research object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlResearchProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlResearchProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlResearchProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlResearchProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlResearchProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:AccountManager.DataAccess.SqlClient.SqlBuyRightProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AccountManager.Entities.BuyRight"/> entity.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBuyRightProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlBuyRightProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBuyRightProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlBuyRightProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBuyRightProviderBase.Delete(AccountManager.DataAccess.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_id">Auto increase id. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBuyRightProviderBase.Find(AccountManager.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of AccountManager.Entities.BuyRight objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBuyRightProviderBase.Find(AccountManager.DataAccess.TransactionManager,AccountManager.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of AccountManager.Entities.BuyRight objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBuyRightProviderBase.GetAll(AccountManager.DataAccess.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.BuyRight objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBuyRightProviderBase.GetPaged(AccountManager.DataAccess.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.BuyRight objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBuyRightProviderBase.GetBySubCustAccountId(AccountManager.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_BuyRight_SubCustAccount key.
            	FK_BuyRight_SubCustAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="_subCustAccountId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.BuyRight objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBuyRightProviderBase.GetById(AccountManager.DataAccess.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_BUYRIGHT index.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="_id">Auto increase id</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.BuyRight"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBuyRightProviderBase.BulkInsert(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.TList{AccountManager.Entities.BuyRight})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the AccountManager.Entities.BuyRight object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBuyRightProviderBase.Insert(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.BuyRight)">
            <summary>
            	Inserts a AccountManager.Entities.BuyRight object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="entity">AccountManager.Entities.BuyRight object to insert.</param>
            <remarks>
            	After inserting into the datasource, the AccountManager.Entities.BuyRight object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBuyRightProviderBase.Update(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.BuyRight)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="entity">AccountManager.Entities.BuyRight object to update.</param>
            <remarks>
            	After updating the datasource, the AccountManager.Entities.BuyRight object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlBuyRightProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlBuyRightProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlBuyRightProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:AccountManager.DataAccess.SqlClient.SqlWorkingDaysProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AccountManager.Entities.WorkingDays"/> entity.
            </summary>
        </member>
        <member name="T:AccountManager.DataAccess.SqlClient.SqlWorkingDaysProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AccountManager.Entities.WorkingDays"/> entity.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlWorkingDaysProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlWorkingDaysProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlWorkingDaysProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlWorkingDaysProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlWorkingDaysProviderBase.Delete(AccountManager.DataAccess.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_dateId">Id cua ngay(2=Thu 2, 3 = Thu 3, ..., 8=Chu nhat). Primary Key.</param>	
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlWorkingDaysProviderBase.Find(AccountManager.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of AccountManager.Entities.WorkingDays objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlWorkingDaysProviderBase.Find(AccountManager.DataAccess.TransactionManager,AccountManager.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of AccountManager.Entities.WorkingDays objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlWorkingDaysProviderBase.GetAll(AccountManager.DataAccess.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.WorkingDays objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlWorkingDaysProviderBase.GetPaged(AccountManager.DataAccess.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.WorkingDays objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlWorkingDaysProviderBase.GetByDateId(AccountManager.DataAccess.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_WORKINGDAYS index.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="_dateId">Id cua ngay(2=Thu 2, 3 = Thu 3, ..., 8=Chu nhat)</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.WorkingDays"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlWorkingDaysProviderBase.BulkInsert(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.TList{AccountManager.Entities.WorkingDays})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the AccountManager.Entities.WorkingDays object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlWorkingDaysProviderBase.Insert(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.WorkingDays)">
            <summary>
            	Inserts a AccountManager.Entities.WorkingDays object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="entity">AccountManager.Entities.WorkingDays object to insert.</param>
            <remarks>
            	After inserting into the datasource, the AccountManager.Entities.WorkingDays object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlWorkingDaysProviderBase.Update(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.WorkingDays)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="entity">AccountManager.Entities.WorkingDays object to update.</param>
            <remarks>
            	After updating the datasource, the AccountManager.Entities.WorkingDays object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlWorkingDaysProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlWorkingDaysProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlWorkingDaysProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlWorkingDaysProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlWorkingDaysProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:AccountManager.DataAccess.SqlClient.SqlCustServicesPermissionProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AccountManager.Entities.CustServicesPermission"/> entity.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlCustServicesPermissionProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlCustServicesPermissionProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:AccountManager.DataAccess.SqlClient.SqlSmsCountProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AccountManager.Entities.SmsCount"/> entity.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlSmsCountProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlSmsCountProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:AccountManager.DataAccess.SqlClient.SqlBrokerAccountProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AccountManager.Entities.BrokerAccount"/> entity.
            </summary>
        </member>
        <member name="T:AccountManager.DataAccess.SqlClient.SqlBrokerAccountProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AccountManager.Entities.BrokerAccount"/> entity.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerAccountProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlBrokerAccountProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerAccountProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlBrokerAccountProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerAccountProviderBase.GetByPermissionIdFromBrokerPermission(AccountManager.DataAccess.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets BrokerAccount objects from the datasource by PermissionID in the
            	BrokerPermission table. Table BrokerAccount is related to table BrokerAMPermission
            	through the (M:N) relationship defined in the BrokerPermission table.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="_permissionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns a <c>TList</c> of BrokerAccount objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerAccountProviderBase.Delete(AccountManager.DataAccess.TransactionManager,System.String)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_brokerId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerAccountProviderBase.Find(AccountManager.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of AccountManager.Entities.BrokerAccount objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerAccountProviderBase.Find(AccountManager.DataAccess.TransactionManager,AccountManager.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of AccountManager.Entities.BrokerAccount objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerAccountProviderBase.GetAll(AccountManager.DataAccess.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.BrokerAccount objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerAccountProviderBase.GetPaged(AccountManager.DataAccess.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.BrokerAccount objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerAccountProviderBase.GetByBrokerId(AccountManager.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_BrokerAccount index.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="_brokerId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.BrokerAccount"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerAccountProviderBase.BulkInsert(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.TList{AccountManager.Entities.BrokerAccount})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the AccountManager.Entities.BrokerAccount object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerAccountProviderBase.Insert(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.BrokerAccount)">
            <summary>
            	Inserts a AccountManager.Entities.BrokerAccount object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="entity">AccountManager.Entities.BrokerAccount object to insert.</param>
            <remarks>
            	After inserting into the datasource, the AccountManager.Entities.BrokerAccount object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerAccountProviderBase.Update(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.BrokerAccount)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="entity">AccountManager.Entities.BrokerAccount object to update.</param>
            <remarks>
            	After updating the datasource, the AccountManager.Entities.BrokerAccount object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlBrokerAccountProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlBrokerAccountProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlBrokerAccountProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerAccountProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlBrokerAccountProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:AccountManager.DataAccess.SqlClient.SqlBuyRightProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AccountManager.Entities.BuyRight"/> entity.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBuyRightProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlBuyRightProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:AccountManager.DataAccess.SqlClient.SqlConfigurationsProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AccountManager.Entities.Configurations"/> entity.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlConfigurationsProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlConfigurationsProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:AccountManager.DataAccess.SqlClient.SqlLanguageProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AccountManager.Entities.Language"/> entity.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlLanguageProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlLanguageProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlInformixProvider.GetCustInfoFromCore(System.String)">
            <summary>
            Gets the cust info from core.
            </summary>
            <param name="accountId">The account id. 
            This includes prefix: 085C/085F</param>
            <returns></returns>
        </member>
        <member name="T:AccountManager.DataAccess.SqlClient.SqlBrokerAmPermissionProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AccountManager.Entities.BrokerAmPermission"/> entity.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerAmPermissionProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlBrokerAmPermissionProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:AccountManager.DataAccess.SqlClient.SqlBrokerPermissionProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AccountManager.Entities.BrokerPermission"/> entity.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerPermissionProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlBrokerPermissionProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerPermissionProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlBrokerPermissionProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerPermissionProviderBase.Delete(AccountManager.DataAccess.TransactionManager,System.String,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_brokerId">. Primary Key.</param>	
            <param name="_permissionId">. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerPermissionProviderBase.Find(AccountManager.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of AccountManager.Entities.BrokerPermission objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerPermissionProviderBase.Find(AccountManager.DataAccess.TransactionManager,AccountManager.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:AccountManager.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of AccountManager.Entities.BrokerPermission objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerPermissionProviderBase.GetAll(AccountManager.DataAccess.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.BrokerPermission objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerPermissionProviderBase.GetPaged(AccountManager.DataAccess.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.BrokerPermission objects.</returns>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerPermissionProviderBase.GetByBrokerId(AccountManager.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_BrokerPermission_BrokerAccount key.
            	FK_BrokerPermission_BrokerAccount Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="_brokerId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.BrokerPermission objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerPermissionProviderBase.GetByPermissionId(AccountManager.DataAccess.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_BrokerPermission_BrokerAMPermission key.
            	FK_BrokerPermission_BrokerAMPermission Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="_permissionId"></param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of AccountManager.Entities.BrokerPermission objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerPermissionProviderBase.GetByBrokerIdPermissionId(AccountManager.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_BrokerPermission index.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="_brokerId"></param>
            <param name="_permissionId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:AccountManager.Entities.BrokerPermission"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerPermissionProviderBase.BulkInsert(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.TList{AccountManager.Entities.BrokerPermission})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the AccountManager.Entities.BrokerPermission object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerPermissionProviderBase.Insert(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.BrokerPermission)">
            <summary>
            	Inserts a AccountManager.Entities.BrokerPermission object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="entity">AccountManager.Entities.BrokerPermission object to insert.</param>
            <remarks>
            	After inserting into the datasource, the AccountManager.Entities.BrokerPermission object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerPermissionProviderBase.Update(AccountManager.DataAccess.TransactionManager,AccountManager.Entities.BrokerPermission)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object</param>
            <param name="entity">AccountManager.Entities.BrokerPermission object to update.</param>
            <remarks>
            	After updating the datasource, the AccountManager.Entities.BrokerPermission object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerPermissionProviderBase.DeleteByBrokerId(AccountManager.DataAccess.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wraps the '_BrokerPermission_DeleteByBrokerId' stored procedure. 
            </summary>	
            <param name="brokerId"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:AccountManager.DataAccess.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlBrokerPermissionProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlBrokerPermissionProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:AccountManager.DataAccess.SqlClient.SqlBrokerPermissionProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:AccountManager.DataAccess.SqlClient.SqlBrokerPermissionProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:AccountManager.Entities.BrokerPermission"/> entity.
            </summary>
        </member>
        <member name="M:AccountManager.DataAccess.SqlClient.SqlBrokerPermissionProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:AccountManager.DataAccess.SqlClient.SqlBrokerPermissionProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
    </members>
</doc>
