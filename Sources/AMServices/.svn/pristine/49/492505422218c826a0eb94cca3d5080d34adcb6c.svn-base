

/*
	File Generated by NetTiers templates [www.nettiers.com]
	Generated on : Wednesday, November 10, 2010
	Important: Do not modify this file. Edit the file MainCustAccountTest.cs instead.
*/

#region Using directives

using System;
using System.Xml;
using System.Xml.Serialization;
using NUnit.Framework;
using AccountManager.Entities;
using AccountManager.DataAccess;
using AccountManager.DataAccess.Bases;

#endregion

namespace AccountManager.UnitTests
{
    /// <summary>
    /// Provides tests for the and <see cref="MainCustAccount"/> objects (entity, collection and repository).
    /// </summary>
   public partial class MainCustAccountTest
    {
    	// the MainCustAccount instance used to test the repository.
		private MainCustAccount mock;
		
		// the TList<MainCustAccount> instance used to test the repository.
		private TList<MainCustAccount> mockCollection;
		
		private static TransactionManager CreateTransaction()
		{
			TransactionManager transactionManager = null;
			if (DataRepository.Provider.IsTransactionSupported)
			{
				transactionManager = DataRepository.Provider.CreateTransaction();
				transactionManager.BeginTransaction(System.Data.IsolationLevel.ReadUncommitted);
			}			
			return transactionManager;
		}
		       
        /// <summary>
		/// This method is used to construct the test environment prior to running the tests.
		/// </summary>        
        static public void Init_Generated()
        {		
        	System.Console.WriteLine(new String('-', 75));
			System.Console.WriteLine("-- Testing the MainCustAccount Entity with the {0} --", AccountManager.DataAccess.DataRepository.Provider.Name);
			System.Console.WriteLine(new String('-', 75));
        }
    
    	/// <summary>
		/// This method is used to restore the environment after the tests are completed.
		/// </summary>
		static public void CleanUp_Generated()
        {   		
			System.Console.WriteLine("All Tests Completed");
			System.Console.WriteLine();
        }
    
    
		/// <summary>
		/// Inserts a mock MainCustAccount entity into the database.
		/// </summary>
		private void Step_01_Insert_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				mock = CreateMockInstance(tm);
				Assert.IsTrue(DataRepository.MainCustAccountProvider.Insert(tm, mock), "Insert failed");
										
				System.Console.WriteLine("DataRepository.MainCustAccountProvider.Insert(mock):");			
				System.Console.WriteLine(mock);			
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		
		
		/// <summary>
		/// Selects all MainCustAccount objects of the database.
		/// </summary>
		private void Step_02_SelectAll_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				//Find
				int count = -1;
				
				mockCollection = DataRepository.MainCustAccountProvider.Find(tm, null, "", 0, 10, out count );
				Assert.IsTrue(count >= 0 && mockCollection != null, "Query Failed to issue Find Command.");
				
				System.Console.WriteLine("DataRepository.MainCustAccountProvider.Find():");			
				System.Console.WriteLine(mockCollection);
				
				// GetPaged
				count = -1;
				
				mockCollection = DataRepository.MainCustAccountProvider.GetPaged(tm, 0, 10, out count);
				Assert.IsTrue(count >= 0 && mockCollection != null, "Query Failed to issue GetPaged Command.");
				System.Console.WriteLine("#get paged count: " + count.ToString());
			}
		}
		
		
		
		
		/// <summary>
		/// Deep load all MainCustAccount children.
		/// </summary>
		private void Step_03_DeepLoad_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				int count = -1;
				mock =  CreateMockInstance(tm);
				mockCollection = DataRepository.MainCustAccountProvider.GetPaged(tm, 0, 10, out count);
			
				DataRepository.MainCustAccountProvider.DeepLoading += new EntityProviderBaseCore<MainCustAccount, MainCustAccountKey>.DeepLoadingEventHandler(
						delegate(object sender, DeepSessionEventArgs e)
						{
							if (e.DeepSession.Count > 3)
								e.Cancel = true;
						}
					);

				if (mockCollection.Count > 0)
				{
					
					DataRepository.MainCustAccountProvider.DeepLoad(tm, mockCollection[0]);
					System.Console.WriteLine("MainCustAccount instance correctly deep loaded at 1 level.");
									
					mockCollection.Add(mock);
					// DataRepository.MainCustAccountProvider.DeepSave(tm, mockCollection);
				}
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		
		/// <summary>
		/// Updates a mock MainCustAccount entity into the database.
		/// </summary>
		private void Step_04_Update_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				MainCustAccount mock = CreateMockInstance(tm);
				Assert.IsTrue(DataRepository.MainCustAccountProvider.Insert(tm, mock), "Insert failed");
				
				UpdateMockInstance(tm, mock);
				Assert.IsTrue(DataRepository.MainCustAccountProvider.Update(tm, mock), "Update failed.");			
				
				System.Console.WriteLine("DataRepository.MainCustAccountProvider.Update(mock):");			
				System.Console.WriteLine(mock);
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		
		
		/// <summary>
		/// Delete the mock MainCustAccount entity into the database.
		/// </summary>
		private void Step_05_Delete_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				mock =  (MainCustAccount)CreateMockInstance(tm);
				DataRepository.MainCustAccountProvider.Insert(tm, mock);
			
				Assert.IsTrue(DataRepository.MainCustAccountProvider.Delete(tm, mock), "Delete failed.");
				System.Console.WriteLine("DataRepository.MainCustAccountProvider.Delete(mock):");			
				System.Console.WriteLine(mock);
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		
		#region Serialization tests
		
		/// <summary>
		/// Serialize the mock MainCustAccount entity into a temporary file.
		/// </summary>
		private void Step_06_SerializeEntity_Generated()
		{	
			using (TransactionManager tm = CreateTransaction())
			{
				mock =  CreateMockInstance(tm);
				string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_MainCustAccount.xml");
			
				EntityHelper.SerializeXml(mock, fileName);
				Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock not found");
					
				System.Console.WriteLine("mock correctly serialized to a temporary file.");			
			}
		}
		
		/// <summary>
		/// Deserialize the mock MainCustAccount entity from a temporary file.
		/// </summary>
		private void Step_07_DeserializeEntity_Generated()
		{
			string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_MainCustAccount.xml");
			Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock file not found to deserialize");
			
			using (System.IO.StreamReader sr = System.IO.File.OpenText(fileName))
			{
				object item = EntityHelper.DeserializeEntityXml<MainCustAccount>(sr.ReadToEnd());
				sr.Close();
			}
			System.IO.File.Delete(fileName);
			
			System.Console.WriteLine("mock correctly deserialized from a temporary file.");
		}
		
		/// <summary>
		/// Serialize a MainCustAccount collection into a temporary file.
		/// </summary>
		private void Step_08_SerializeCollection_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_MainCustAccountCollection.xml");
				
				mock = CreateMockInstance(tm);
				TList<MainCustAccount> mockCollection = new TList<MainCustAccount>();
				mockCollection.Add(mock);
			
				EntityHelper.SerializeXml(mockCollection, fileName);
				
				Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock collection not found");
				System.Console.WriteLine("TList<MainCustAccount> correctly serialized to a temporary file.");					
			}
		}
		
		
		/// <summary>
		/// Deserialize a MainCustAccount collection from a temporary file.
		/// </summary>
		private void Step_09_DeserializeCollection_Generated()
		{
			string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_MainCustAccountCollection.xml");
			Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock file not found to deserialize");
			
			XmlSerializer mySerializer = new XmlSerializer(typeof(TList<MainCustAccount>)); 
			using (System.IO.FileStream myFileStream = new System.IO.FileStream(fileName,  System.IO.FileMode.Open))
			{
				TList<MainCustAccount> mockCollection = (TList<MainCustAccount>) mySerializer.Deserialize(myFileStream);
				myFileStream.Close();
			}
			
			System.IO.File.Delete(fileName);
			System.Console.WriteLine("TList<MainCustAccount> correctly deserialized from a temporary file.");	
		}
		#endregion
		
		
		
		/// <summary>
		/// Check the foreign key dal methods.
		/// </summary>
		private void Step_10_FK_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				MainCustAccount entity = CreateMockInstance(tm);
				bool result = DataRepository.MainCustAccountProvider.Insert(tm, entity);
				
				Assert.IsTrue(result, "Could Not Test FK, Insert Failed");
				
				TList<MainCustAccount> t0 = DataRepository.MainCustAccountProvider.GetByBrokerId(tm, entity.BrokerId, 0, 10);
			}
		}
		
		
		/// <summary>
		/// Check the indexes dal methods.
		/// </summary>
		private void Step_11_IX_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				MainCustAccount entity = CreateMockInstance(tm);
				bool result = DataRepository.MainCustAccountProvider.Insert(tm, entity);
				
				Assert.IsTrue(result, "Could Not Test IX, Insert Failed");

			
				MainCustAccount t0 = DataRepository.MainCustAccountProvider.GetByMainCustAccountId(tm, entity.MainCustAccountId);
			}
		}
		
		/// <summary>
		/// Test methods exposed by the EntityHelper class.
		/// </summary>
		private void Step_20_TestEntityHelper_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				mock = CreateMockInstance(tm);
				
				MainCustAccount entity = mock.Copy() as MainCustAccount;
				entity = (MainCustAccount)mock.Clone();
				Assert.IsTrue(MainCustAccount.ValueEquals(entity, mock), "Clone is not working");
			}
		}
		
		/// <summary>
		/// Test Find using the Query class
		/// </summary>
		private void Step_30_TestFindByQuery_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				//Insert Mock Instance
				MainCustAccount mock = CreateMockInstance(tm);
				bool result = DataRepository.MainCustAccountProvider.Insert(tm, mock);
				
				Assert.IsTrue(result, "Could Not Test FindByQuery, Insert Failed");

				MainCustAccountQuery query = new MainCustAccountQuery();
			
				query.AppendEquals(MainCustAccountColumn.MainCustAccountId, mock.MainCustAccountId.ToString());
				if(mock.FullName != null)
					query.AppendEquals(MainCustAccountColumn.FullName, mock.FullName.ToString());
				if(mock.Email != null)
					query.AppendEquals(MainCustAccountColumn.Email, mock.Email.ToString());
				if(mock.Phone != null)
					query.AppendEquals(MainCustAccountColumn.Phone, mock.Phone.ToString());
				query.AppendEquals(MainCustAccountColumn.Actived, mock.Actived.ToString());
				if(mock.Password != null)
					query.AppendEquals(MainCustAccountColumn.Password, mock.Password.ToString());
				if(mock.Pin != null)
					query.AppendEquals(MainCustAccountColumn.Pin, mock.Pin.ToString());
				if(mock.PassLockReason != null)
					query.AppendEquals(MainCustAccountColumn.PassLockReason, mock.PassLockReason.ToString());
				if(mock.PinLockReason != null)
					query.AppendEquals(MainCustAccountColumn.PinLockReason, mock.PinLockReason.ToString());
				if(mock.LockReason != null)
					query.AppendEquals(MainCustAccountColumn.LockReason, mock.LockReason.ToString());
				if(mock.TokenId != null)
					query.AppendEquals(MainCustAccountColumn.TokenId, mock.TokenId.ToString());
				if(mock.TokenName != null)
					query.AppendEquals(MainCustAccountColumn.TokenName, mock.TokenName.ToString());
				if(mock.TokenActived != null)
					query.AppendEquals(MainCustAccountColumn.TokenActived, mock.TokenActived.ToString());
				if(mock.PassIsNew != null)
					query.AppendEquals(MainCustAccountColumn.PassIsNew, mock.PassIsNew.ToString());
				if(mock.PinIsNew != null)
					query.AppendEquals(MainCustAccountColumn.PinIsNew, mock.PinIsNew.ToString());
				if(mock.PassExpDate != null)
					query.AppendEquals(MainCustAccountColumn.PassExpDate, mock.PassExpDate.ToString());
				if(mock.PinExpDate != null)
					query.AppendEquals(MainCustAccountColumn.PinExpDate, mock.PinExpDate.ToString());
				query.AppendEquals(MainCustAccountColumn.CustomerType, mock.CustomerType.ToString());
				query.AppendEquals(MainCustAccountColumn.AuthType, mock.AuthType.ToString());
				query.AppendEquals(MainCustAccountColumn.PinType, mock.PinType.ToString());
				if(mock.FailedLoginCount != null)
					query.AppendEquals(MainCustAccountColumn.FailedLoginCount, mock.FailedLoginCount.ToString());
				if(mock.FailedLoginTime != null)
					query.AppendEquals(MainCustAccountColumn.FailedLoginTime, mock.FailedLoginTime.ToString());
				query.AppendEquals(MainCustAccountColumn.CreatedDate, mock.CreatedDate.ToString());
				query.AppendEquals(MainCustAccountColumn.CreatedUser, mock.CreatedUser.ToString());
				if(mock.UpdatedUser != null)
					query.AppendEquals(MainCustAccountColumn.UpdatedUser, mock.UpdatedUser.ToString());
				if(mock.UpdatedDate != null)
					query.AppendEquals(MainCustAccountColumn.UpdatedDate, mock.UpdatedDate.ToString());
				
				TList<MainCustAccount> results = DataRepository.MainCustAccountProvider.Find(tm, query);
				
				Assert.IsTrue(results.Count == 1, "Find is not working correctly.  Failed to find the mock instance");
			}
		}
						
		#region Mock Instance
		///<summary>
		///  Returns a Typed MainCustAccount Entity with mock values.
		///</summary>
		static public MainCustAccount CreateMockInstance_Generated(TransactionManager tm)
		{		
			MainCustAccount mock = new MainCustAccount();
						
			mock.MainCustAccountId = TestUtility.Instance.RandomString(20, false);;
			mock.FullName = TestUtility.Instance.RandomString(24, false);;
			mock.Email = TestUtility.Instance.RandomString(14, false);;
			mock.Phone = TestUtility.Instance.RandomString(20, false);;
			mock.Actived = TestUtility.Instance.RandomBoolean();
			mock.Password = TestUtility.Instance.RandomString(24, false);;
			mock.Pin = TestUtility.Instance.RandomString(24, false);;
			mock.PassLockReason = TestUtility.Instance.RandomNumber();
			mock.PinLockReason = TestUtility.Instance.RandomNumber();
			mock.LockReason = TestUtility.Instance.RandomNumber();
			mock.TokenId = TestUtility.Instance.RandomString(20, false);;
			mock.TokenName = TestUtility.Instance.RandomString(20, false);;
			mock.TokenActived = TestUtility.Instance.RandomString(10, false);;
			mock.PassIsNew = TestUtility.Instance.RandomBoolean();
			mock.PinIsNew = TestUtility.Instance.RandomBoolean();
			mock.PassExpDate = TestUtility.Instance.RandomDateTime();
			mock.PinExpDate = TestUtility.Instance.RandomDateTime();
			mock.CustomerType = TestUtility.Instance.RandomNumber();
			mock.AuthType = TestUtility.Instance.RandomShort();
			mock.PinType = TestUtility.Instance.RandomShort();
			mock.FailedLoginCount = TestUtility.Instance.RandomNumber();
			mock.FailedLoginTime = TestUtility.Instance.RandomDateTime();
			mock.CreatedDate = TestUtility.Instance.RandomDateTime();
			mock.CreatedUser = TestUtility.Instance.RandomString(20, false);;
			mock.UpdatedUser = TestUtility.Instance.RandomString(20, false);;
			mock.UpdatedDate = TestUtility.Instance.RandomDateTime();
			
			int count0 = 0;
			TList<BrokerAccount> _collection0 = DataRepository.BrokerAccountProvider.GetPaged(tm, 0, 10, out count0);
			//_collection0.Shuffle();
			if (_collection0.Count > 0)
			{
				mock.BrokerId = _collection0[0].BrokerId;
						
			}
		
			// create a temporary collection and add the item to it
			TList<MainCustAccount> tempMockCollection = new TList<MainCustAccount>();
			tempMockCollection.Add(mock);
			tempMockCollection.Remove(mock);
			
		
		   return (MainCustAccount)mock;
		}
		
		
		///<summary>
		///  Update the Typed MainCustAccount Entity with modified mock values.
		///</summary>
		static public void UpdateMockInstance_Generated(TransactionManager tm, MainCustAccount mock)
		{
			mock.FullName = TestUtility.Instance.RandomString(24, false);;
			mock.Email = TestUtility.Instance.RandomString(14, false);;
			mock.Phone = TestUtility.Instance.RandomString(20, false);;
			mock.Actived = TestUtility.Instance.RandomBoolean();
			mock.Password = TestUtility.Instance.RandomString(24, false);;
			mock.Pin = TestUtility.Instance.RandomString(24, false);;
			mock.PassLockReason = TestUtility.Instance.RandomNumber();
			mock.PinLockReason = TestUtility.Instance.RandomNumber();
			mock.LockReason = TestUtility.Instance.RandomNumber();
			mock.TokenId = TestUtility.Instance.RandomString(20, false);;
			mock.TokenName = TestUtility.Instance.RandomString(20, false);;
			mock.TokenActived = TestUtility.Instance.RandomString(10, false);;
			mock.PassIsNew = TestUtility.Instance.RandomBoolean();
			mock.PinIsNew = TestUtility.Instance.RandomBoolean();
			mock.PassExpDate = TestUtility.Instance.RandomDateTime();
			mock.PinExpDate = TestUtility.Instance.RandomDateTime();
			mock.CustomerType = TestUtility.Instance.RandomNumber();
			mock.AuthType = TestUtility.Instance.RandomShort();
			mock.PinType = TestUtility.Instance.RandomShort();
			mock.FailedLoginCount = TestUtility.Instance.RandomNumber();
			mock.FailedLoginTime = TestUtility.Instance.RandomDateTime();
			mock.CreatedDate = TestUtility.Instance.RandomDateTime();
			mock.CreatedUser = TestUtility.Instance.RandomString(20, false);;
			mock.UpdatedUser = TestUtility.Instance.RandomString(20, false);;
			mock.UpdatedDate = TestUtility.Instance.RandomDateTime();
			
			int count0 = 0;
			TList<BrokerAccount> _collection0 = DataRepository.BrokerAccountProvider.GetPaged(tm, 0, 10, out count0);
			//_collection0.Shuffle();
			if (_collection0.Count > 0)
			{
				mock.BrokerId = _collection0[0].BrokerId;
			}
		}
		#endregion
    }
}
