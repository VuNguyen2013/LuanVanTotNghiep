
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Friday, November 12, 2010
	Important: Do not modify this file. Edit the file StockTransfer.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Web.Script.Serialization;

using ETradeFinance.Entities.Validation;
#endregion

namespace ETradeFinance.Entities
{
	///<summary>
	/// An object representation of the 'StockTransfer' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class StockTransferBase : EntityBase, IStockTransfer, IEntityId<StockTransferKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private StockTransferEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private StockTransferEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private StockTransferEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<StockTransfer> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event StockTransferEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event StockTransferEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="StockTransferBase"/> instance.
		///</summary>
		public StockTransferBase()
		{
			this.entityData = new StockTransferEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="StockTransferBase"/> instance.
		///</summary>
		///<param name="_requestTime">Thoi gian yeu cau chuyen co phieu</param>
		///<param name="_secSymbol">Ma co phieu chuyen</param>
		///<param name="_stockQuantity">So luong co phieu yeu cau chuyen</param>
		///<param name="_rejectedTime">Thoi gian yeu cau bi tu choi</param>
		///<param name="_rejectedReason">Nguyen nhan yeu cau bi tu choi</param>
		///<param name="_sourceAccountId">Tai khoan nguon</param>
		///<param name="_targetAccountId">Tai khoan dich</param>
		///<param name="_status">Trang thai cua yeu cau</param>
		///<param name="_brokerId">Id c?a broker x? lý request.</param>
		///<param name="_execTime">Ngày gi? x? lý</param>
		public StockTransferBase(System.DateTime _requestTime, string _secSymbol, int _stockQuantity, 
			System.DateTime? _rejectedTime, string _rejectedReason, string _sourceAccountId, string _targetAccountId, 
			string _status, string _brokerId, System.DateTime? _execTime)
		{
			this.entityData = new StockTransferEntityData();
			this.backupData = null;

			this.RequestTime = _requestTime;
			this.SecSymbol = _secSymbol;
			this.StockQuantity = _stockQuantity;
			this.RejectedTime = _rejectedTime;
			this.RejectedReason = _rejectedReason;
			this.SourceAccountId = _sourceAccountId;
			this.TargetAccountId = _targetAccountId;
			this.Status = _status;
			this.BrokerId = _brokerId;
			this.ExecTime = _execTime;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="StockTransfer"/> instance.
		///</summary>
		///<param name="_requestTime">Thoi gian yeu cau chuyen co phieu</param>
		///<param name="_secSymbol">Ma co phieu chuyen</param>
		///<param name="_stockQuantity">So luong co phieu yeu cau chuyen</param>
		///<param name="_rejectedTime">Thoi gian yeu cau bi tu choi</param>
		///<param name="_rejectedReason">Nguyen nhan yeu cau bi tu choi</param>
		///<param name="_sourceAccountId">Tai khoan nguon</param>
		///<param name="_targetAccountId">Tai khoan dich</param>
		///<param name="_status">Trang thai cua yeu cau</param>
		///<param name="_brokerId">Id c?a broker x? lý request.</param>
		///<param name="_execTime">Ngày gi? x? lý</param>
		public static StockTransfer CreateStockTransfer(System.DateTime _requestTime, string _secSymbol, int _stockQuantity, 
			System.DateTime? _rejectedTime, string _rejectedReason, string _sourceAccountId, string _targetAccountId, 
			string _status, string _brokerId, System.DateTime? _execTime)
		{
			StockTransfer newStockTransfer = new StockTransfer();
			newStockTransfer.RequestTime = _requestTime;
			newStockTransfer.SecSymbol = _secSymbol;
			newStockTransfer.StockQuantity = _stockQuantity;
			newStockTransfer.RejectedTime = _rejectedTime;
			newStockTransfer.RejectedReason = _rejectedReason;
			newStockTransfer.SourceAccountId = _sourceAccountId;
			newStockTransfer.TargetAccountId = _targetAccountId;
			newStockTransfer.Status = _status;
			newStockTransfer.BrokerId = _brokerId;
			newStockTransfer.ExecTime = _execTime;
			return newStockTransfer;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the StockTransferId property. 
		///		StockTransferID identifies StockTransfer
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@"StockTransferID identifies StockTransfer"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual long StockTransferId
		{
			get
			{
				return this.entityData.StockTransferId; 
			}
			
			set
			{
				if (this.entityData.StockTransferId == value)
					return;
					
				OnColumnChanging(StockTransferColumn.StockTransferId, this.entityData.StockTransferId);
				this.entityData.StockTransferId = value;
				this.EntityId.StockTransferId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StockTransferColumn.StockTransferId, this.entityData.StockTransferId);
				OnPropertyChanged("StockTransferId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RequestTime property. 
		///		Thoi gian yeu cau chuyen co phieu
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Thoi gian yeu cau chuyen co phieu"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime RequestTime
		{
			get
			{
				return this.entityData.RequestTime; 
			}
			
			set
			{
				if (this.entityData.RequestTime == value)
					return;
					
				OnColumnChanging(StockTransferColumn.RequestTime, this.entityData.RequestTime);
				this.entityData.RequestTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StockTransferColumn.RequestTime, this.entityData.RequestTime);
				OnPropertyChanged("RequestTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SecSymbol property. 
		///		Ma co phieu chuyen
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Ma co phieu chuyen"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 8)]
		public virtual string SecSymbol
		{
			get
			{
				return this.entityData.SecSymbol; 
			}
			
			set
			{
				if (this.entityData.SecSymbol == value)
					return;
					
				OnColumnChanging(StockTransferColumn.SecSymbol, this.entityData.SecSymbol);
				this.entityData.SecSymbol = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StockTransferColumn.SecSymbol, this.entityData.SecSymbol);
				OnPropertyChanged("SecSymbol");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StockQuantity property. 
		///		So luong co phieu yeu cau chuyen
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"So luong co phieu yeu cau chuyen"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual int StockQuantity
		{
			get
			{
				return this.entityData.StockQuantity; 
			}
			
			set
			{
				if (this.entityData.StockQuantity == value)
					return;
					
				OnColumnChanging(StockTransferColumn.StockQuantity, this.entityData.StockQuantity);
				this.entityData.StockQuantity = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StockTransferColumn.StockQuantity, this.entityData.StockQuantity);
				OnPropertyChanged("StockQuantity");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RejectedTime property. 
		///		Thoi gian yeu cau bi tu choi
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsRejectedTimeNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Thoi gian yeu cau bi tu choi"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? RejectedTime
		{
			get
			{
				return this.entityData.RejectedTime; 
			}
			
			set
			{
				if (this.entityData.RejectedTime == value)
					return;
					
				OnColumnChanging(StockTransferColumn.RejectedTime, this.entityData.RejectedTime);
				this.entityData.RejectedTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StockTransferColumn.RejectedTime, this.entityData.RejectedTime);
				OnPropertyChanged("RejectedTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RejectedReason property. 
		///		Nguyen nhan yeu cau bi tu choi
		/// </summary>
		/// <value>This type is text.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Nguyen nhan yeu cau bi tu choi"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual string RejectedReason
		{
			get
			{
				return this.entityData.RejectedReason; 
			}
			
			set
			{
				if (this.entityData.RejectedReason == value)
					return;
					
				OnColumnChanging(StockTransferColumn.RejectedReason, this.entityData.RejectedReason);
				this.entityData.RejectedReason = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StockTransferColumn.RejectedReason, this.entityData.RejectedReason);
				OnPropertyChanged("RejectedReason");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SourceAccountId property. 
		///		Tai khoan nguon
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Tai khoan nguon"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual string SourceAccountId
		{
			get
			{
				return this.entityData.SourceAccountId; 
			}
			
			set
			{
				if (this.entityData.SourceAccountId == value)
					return;
					
				OnColumnChanging(StockTransferColumn.SourceAccountId, this.entityData.SourceAccountId);
				this.entityData.SourceAccountId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StockTransferColumn.SourceAccountId, this.entityData.SourceAccountId);
				OnPropertyChanged("SourceAccountId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TargetAccountId property. 
		///		Tai khoan dich
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Tai khoan dich"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual string TargetAccountId
		{
			get
			{
				return this.entityData.TargetAccountId; 
			}
			
			set
			{
				if (this.entityData.TargetAccountId == value)
					return;
					
				OnColumnChanging(StockTransferColumn.TargetAccountId, this.entityData.TargetAccountId);
				this.entityData.TargetAccountId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StockTransferColumn.TargetAccountId, this.entityData.TargetAccountId);
				OnPropertyChanged("TargetAccountId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		Trang thai cua yeu cau
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Trang thai cua yeu cau"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 64)]
		public virtual string Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
					
				OnColumnChanging(StockTransferColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StockTransferColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BrokerId property. 
		///		Id c?a broker x? lý request.
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Id c?a broker x? lý request."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual string BrokerId
		{
			get
			{
				return this.entityData.BrokerId; 
			}
			
			set
			{
				if (this.entityData.BrokerId == value)
					return;
					
				OnColumnChanging(StockTransferColumn.BrokerId, this.entityData.BrokerId);
				this.entityData.BrokerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StockTransferColumn.BrokerId, this.entityData.BrokerId);
				OnPropertyChanged("BrokerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExecTime property. 
		///		Ngày gi? x? lý
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsExecTimeNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Ngày gi? x? lý"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ExecTime
		{
			get
			{
				return this.entityData.ExecTime; 
			}
			
			set
			{
				if (this.entityData.ExecTime == value)
					return;
					
				OnColumnChanging(StockTransferColumn.ExecTime, this.entityData.ExecTime);
				this.entityData.ExecTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StockTransferColumn.ExecTime, this.entityData.ExecTime);
				OnPropertyChanged("ExecTime");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("SecSymbol", "Sec Symbol"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SecSymbol", "Sec Symbol", 8));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("SourceAccountId", "Source Account Id"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SourceAccountId", "Source Account Id", 20));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("TargetAccountId", "Target Account Id"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TargetAccountId", "Target Account Id", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Status", "Status", 64));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("BrokerId", "Broker Id", 20));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public override string TableName
		{
			get { return "StockTransfer"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"StockTransferID", "RequestTime", "SecSymbol", "StockQuantity", "RejectedTime", "RejectedReason", "SourceAccountID", "TargetAccountID", "Status", "BrokerID", "ExecTime"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as StockTransferEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (StockTransfer) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
        [ScriptIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<StockTransfer>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as StockTransfer);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed StockTransfer Entity 
		///</summary>
		protected virtual StockTransfer Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			StockTransfer copy = new StockTransfer();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.StockTransferId = this.StockTransferId;
				copy.RequestTime = this.RequestTime;
				copy.SecSymbol = this.SecSymbol;
				copy.StockQuantity = this.StockQuantity;
				copy.RejectedTime = this.RejectedTime;
				copy.RejectedReason = this.RejectedReason;
				copy.SourceAccountId = this.SourceAccountId;
				copy.TargetAccountId = this.TargetAccountId;
				copy.Status = this.Status;
				copy.BrokerId = this.BrokerId;
				copy.ExecTime = this.ExecTime;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed StockTransfer Entity 
		///</summary>
		public virtual StockTransfer Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed StockTransfer Entity which is a deep copy of the current entity.
		///</summary>
		public virtual StockTransfer DeepCopy()
		{
			return EntityHelper.Clone<StockTransfer>(this as StockTransfer);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as StockTransferEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new StockTransferEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as StockTransferEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(StockTransferColumn column)
		{
			switch(column)
			{
					case StockTransferColumn.StockTransferId:
					return entityData.StockTransferId != _originalData.StockTransferId;
					case StockTransferColumn.RequestTime:
					return entityData.RequestTime != _originalData.RequestTime;
					case StockTransferColumn.SecSymbol:
					return entityData.SecSymbol != _originalData.SecSymbol;
					case StockTransferColumn.StockQuantity:
					return entityData.StockQuantity != _originalData.StockQuantity;
					case StockTransferColumn.RejectedTime:
					return entityData.RejectedTime != _originalData.RejectedTime;
					case StockTransferColumn.RejectedReason:
					return entityData.RejectedReason != _originalData.RejectedReason;
					case StockTransferColumn.SourceAccountId:
					return entityData.SourceAccountId != _originalData.SourceAccountId;
					case StockTransferColumn.TargetAccountId:
					return entityData.TargetAccountId != _originalData.TargetAccountId;
					case StockTransferColumn.Status:
					return entityData.Status != _originalData.Status;
					case StockTransferColumn.BrokerId:
					return entityData.BrokerId != _originalData.BrokerId;
					case StockTransferColumn.ExecTime:
					return entityData.ExecTime != _originalData.ExecTime;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< StockTransferColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.StockTransferId != _originalData.StockTransferId;
			result = result || entityData.RequestTime != _originalData.RequestTime;
			result = result || entityData.SecSymbol != _originalData.SecSymbol;
			result = result || entityData.StockQuantity != _originalData.StockQuantity;
			result = result || entityData.RejectedTime != _originalData.RejectedTime;
			result = result || entityData.RejectedReason != _originalData.RejectedReason;
			result = result || entityData.SourceAccountId != _originalData.SourceAccountId;
			result = result || entityData.TargetAccountId != _originalData.TargetAccountId;
			result = result || entityData.Status != _originalData.Status;
			result = result || entityData.BrokerId != _originalData.BrokerId;
			result = result || entityData.ExecTime != _originalData.ExecTime;
			return result;
		}	
		
		///<summary>
		///  Returns a StockTransfer Entity with the original data.
		///</summary>
		public StockTransfer GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateStockTransfer(
				_originalData.RequestTime,
				_originalData.SecSymbol,
				_originalData.StockQuantity,
				_originalData.RejectedTime,
				_originalData.RejectedReason,
				_originalData.SourceAccountId,
				_originalData.TargetAccountId,
				_originalData.Status,
				_originalData.BrokerId,
				_originalData.ExecTime
				);
				
			return (StockTransfer)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="StockTransferBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is StockTransferBase)
				return ValueEquals(this, (StockTransferBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="StockTransferBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.StockTransferId.GetHashCode() ^ 
					this.RequestTime.GetHashCode() ^ 
					this.SecSymbol.GetHashCode() ^ 
					this.StockQuantity.GetHashCode() ^ 
					((this.RejectedTime == null) ? string.Empty : this.RejectedTime.ToString()).GetHashCode() ^ 
					((this.RejectedReason == null) ? string.Empty : this.RejectedReason.ToString()).GetHashCode() ^ 
					this.SourceAccountId.GetHashCode() ^ 
					this.TargetAccountId.GetHashCode() ^ 
					((this.Status == null) ? string.Empty : this.Status.ToString()).GetHashCode() ^ 
					((this.BrokerId == null) ? string.Empty : this.BrokerId.ToString()).GetHashCode() ^ 
					((this.ExecTime == null) ? string.Empty : this.ExecTime.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="StockTransferBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(StockTransferBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="StockTransferBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="StockTransferBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="StockTransferBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(StockTransferBase Object1, StockTransferBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.StockTransferId != Object2.StockTransferId)
				equal = false;
			if (Object1.RequestTime != Object2.RequestTime)
				equal = false;
			if (Object1.SecSymbol != Object2.SecSymbol)
				equal = false;
			if (Object1.StockQuantity != Object2.StockQuantity)
				equal = false;
			if ( Object1.RejectedTime != null && Object2.RejectedTime != null )
			{
				if (Object1.RejectedTime != Object2.RejectedTime)
					equal = false;
			}
			else if (Object1.RejectedTime == null ^ Object2.RejectedTime == null )
			{
				equal = false;
			}
			if ( Object1.RejectedReason != null && Object2.RejectedReason != null )
			{
				if (Object1.RejectedReason != Object2.RejectedReason)
					equal = false;
			}
			else if (Object1.RejectedReason == null ^ Object2.RejectedReason == null )
			{
				equal = false;
			}
			if (Object1.SourceAccountId != Object2.SourceAccountId)
				equal = false;
			if (Object1.TargetAccountId != Object2.TargetAccountId)
				equal = false;
			if ( Object1.Status != null && Object2.Status != null )
			{
				if (Object1.Status != Object2.Status)
					equal = false;
			}
			else if (Object1.Status == null ^ Object2.Status == null )
			{
				equal = false;
			}
			if ( Object1.BrokerId != null && Object2.BrokerId != null )
			{
				if (Object1.BrokerId != Object2.BrokerId)
					equal = false;
			}
			else if (Object1.BrokerId == null ^ Object2.BrokerId == null )
			{
				equal = false;
			}
			if ( Object1.ExecTime != null && Object2.ExecTime != null )
			{
				if (Object1.ExecTime != Object2.ExecTime)
					equal = false;
			}
			else if (Object1.ExecTime == null ^ Object2.ExecTime == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((StockTransferBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static StockTransferComparer GetComparer()
        {
            return new StockTransferComparer();
        }
        */

        // Comparer delegates back to StockTransfer
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(StockTransfer rhs, StockTransferColumn which)
        {
            switch (which)
            {
            	
            	
            	case StockTransferColumn.StockTransferId:
            		return this.StockTransferId.CompareTo(rhs.StockTransferId);
            		
            		                 
            	
            	
            	case StockTransferColumn.RequestTime:
            		return this.RequestTime.CompareTo(rhs.RequestTime);
            		
            		                 
            	
            	
            	case StockTransferColumn.SecSymbol:
            		return this.SecSymbol.CompareTo(rhs.SecSymbol);
            		
            		                 
            	
            	
            	case StockTransferColumn.StockQuantity:
            		return this.StockQuantity.CompareTo(rhs.StockQuantity);
            		
            		                 
            	
            	
            	case StockTransferColumn.RejectedTime:
            		return this.RejectedTime.Value.CompareTo(rhs.RejectedTime.Value);
            		
            		                 
            	
            	
            	case StockTransferColumn.RejectedReason:
            		return this.RejectedReason.CompareTo(rhs.RejectedReason);
            		
            		                 
            	
            	
            	case StockTransferColumn.SourceAccountId:
            		return this.SourceAccountId.CompareTo(rhs.SourceAccountId);
            		
            		                 
            	
            	
            	case StockTransferColumn.TargetAccountId:
            		return this.TargetAccountId.CompareTo(rhs.TargetAccountId);
            		
            		                 
            	
            	
            	case StockTransferColumn.Status:
            		return this.Status.CompareTo(rhs.Status);
            		
            		                 
            	
            	
            	case StockTransferColumn.BrokerId:
            		return this.BrokerId.CompareTo(rhs.BrokerId);
            		
            		                 
            	
            	
            	case StockTransferColumn.ExecTime:
            		return this.ExecTime.Value.CompareTo(rhs.ExecTime.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
        [ScriptIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<StockTransferKey> Members
		
		// member variable for the EntityId property
		private StockTransferKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
        [ScriptIgnore]
		public virtual StockTransferKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new StockTransferKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute(), ScriptIgnore()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
        [ScriptIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("StockTransfer")
					.Append("|").Append( this.StockTransferId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{12}{11}- StockTransferId: {0}{11}- RequestTime: {1}{11}- SecSymbol: {2}{11}- StockQuantity: {3}{11}- RejectedTime: {4}{11}- RejectedReason: {5}{11}- SourceAccountId: {6}{11}- TargetAccountId: {7}{11}- Status: {8}{11}- BrokerId: {9}{11}- ExecTime: {10}{11}{13}", 
				this.StockTransferId,
				this.RequestTime,
				this.SecSymbol,
				this.StockQuantity,
				(this.RejectedTime == null) ? string.Empty : this.RejectedTime.ToString(),
				(this.RejectedReason == null) ? string.Empty : this.RejectedReason.ToString(),
				this.SourceAccountId,
				this.TargetAccountId,
				(this.Status == null) ? string.Empty : this.Status.ToString(),
				(this.BrokerId == null) ? string.Empty : this.BrokerId.ToString(),
				(this.ExecTime == null) ? string.Empty : this.ExecTime.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'StockTransfer' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class StockTransferEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// StockTransferID : StockTransferID identifies StockTransfer
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "StockTransfer"</remarks>
		public long StockTransferId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// RequestTime : Thoi gian yeu cau chuyen co phieu
		/// </summary>
		public System.DateTime		  RequestTime = DateTime.MinValue;
		
		/// <summary>
		/// SecSymbol : Ma co phieu chuyen
		/// </summary>
		public string		  SecSymbol = string.Empty;
		
		/// <summary>
		/// StockQuantity : So luong co phieu yeu cau chuyen
		/// </summary>
		public int		  StockQuantity = (int)0;
		
		/// <summary>
		/// RejectedTime : Thoi gian yeu cau bi tu choi
		/// </summary>
		public System.DateTime?		  RejectedTime = null;
		
		/// <summary>
		/// RejectedReason : Nguyen nhan yeu cau bi tu choi
		/// </summary>
		public string		  RejectedReason = null;
		
		/// <summary>
		/// SourceAccountID : Tai khoan nguon
		/// </summary>
		public string		  SourceAccountId = string.Empty;
		
		/// <summary>
		/// TargetAccountID : Tai khoan dich
		/// </summary>
		public string		  TargetAccountId = string.Empty;
		
		/// <summary>
		/// Status : Trang thai cua yeu cau
		/// </summary>
		public string		  Status = null;
		
		/// <summary>
		/// BrokerID : Id c?a broker x? lý request.
		/// </summary>
		public string		  BrokerId = null;
		
		/// <summary>
		/// ExecTime : Ngày gi? x? lý
		/// </summary>
		public System.DateTime?		  ExecTime = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			StockTransferEntityData _tmp = new StockTransferEntityData();
						
			_tmp.StockTransferId = this.StockTransferId;
			
			_tmp.RequestTime = this.RequestTime;
			_tmp.SecSymbol = this.SecSymbol;
			_tmp.StockQuantity = this.StockQuantity;
			_tmp.RejectedTime = this.RejectedTime;
			_tmp.RejectedReason = this.RejectedReason;
			_tmp.SourceAccountId = this.SourceAccountId;
			_tmp.TargetAccountId = this.TargetAccountId;
			_tmp.Status = this.Status;
			_tmp.BrokerId = this.BrokerId;
			_tmp.ExecTime = this.ExecTime;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			StockTransferEntityData _tmp = new StockTransferEntityData();
						
			_tmp.StockTransferId = this.StockTransferId;
			
			_tmp.RequestTime = this.RequestTime;
			_tmp.SecSymbol = this.SecSymbol;
			_tmp.StockQuantity = this.StockQuantity;
			_tmp.RejectedTime = this.RejectedTime;
			_tmp.RejectedReason = this.RejectedReason;
			_tmp.SourceAccountId = this.SourceAccountId;
			_tmp.TargetAccountId = this.TargetAccountId;
			_tmp.Status = this.Status;
			_tmp.BrokerId = this.BrokerId;
			_tmp.ExecTime = this.ExecTime;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="StockTransferColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(StockTransferColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="StockTransferColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(StockTransferColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="StockTransferColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(StockTransferColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				StockTransferEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new StockTransferEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="StockTransferColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(StockTransferColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				StockTransferEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new StockTransferEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region StockTransferEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="StockTransfer"/> object.
	/// </remarks>
	public class StockTransferEventArgs : System.EventArgs
	{
		private StockTransferColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the StockTransferEventArgs class.
		///</summary>
		public StockTransferEventArgs(StockTransferColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the StockTransferEventArgs class.
		///</summary>
		public StockTransferEventArgs(StockTransferColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The StockTransferColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="StockTransferColumn" />
		public StockTransferColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all StockTransfer related events.
	///</summary>
	public delegate void StockTransferEventHandler(object sender, StockTransferEventArgs e);
	
	#region StockTransferComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class StockTransferComparer : System.Collections.Generic.IComparer<StockTransfer>
	{
		StockTransferColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:StockTransferComparer"/> class.
        /// </summary>
		public StockTransferComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:StockTransferComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public StockTransferComparer(StockTransferColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="StockTransfer"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="StockTransfer"/> to compare.</param>
        /// <param name="b">The second <c>StockTransfer</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(StockTransfer a, StockTransfer b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(StockTransfer entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(StockTransfer a, StockTransfer b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public StockTransferColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region StockTransferKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="StockTransfer"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class StockTransferKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the StockTransferKey class.
		/// </summary>
		public StockTransferKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the StockTransferKey class.
		/// </summary>
		public StockTransferKey(StockTransferBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.StockTransferId = entity.StockTransferId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the StockTransferKey class.
		/// </summary>
		public StockTransferKey(long _stockTransferId)
		{
			#region Init Properties

			this.StockTransferId = _stockTransferId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private StockTransferBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public StockTransferBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the StockTransferId property
		private long _stockTransferId;
		
		/// <summary>
		/// Gets or sets the StockTransferId property.
		/// </summary>
		public long StockTransferId
		{
			get { return _stockTransferId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.StockTransferId = value;
				
				_stockTransferId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				StockTransferId = ( values["StockTransferId"] != null ) ? (long) EntityUtil.ChangeType(values["StockTransferId"], typeof(long)) : (long)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("StockTransferId", StockTransferId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("StockTransferId: {0}{1}",
								StockTransferId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region StockTransferColumn Enum
	
	/// <summary>
	/// Enumerate the StockTransfer columns.
	/// </summary>
	[Serializable]
	public enum StockTransferColumn : int
	{
		/// <summary>
		/// StockTransferId : StockTransferID identifies StockTransfer
		/// </summary>
		[EnumTextValue("StockTransferID")]
		[ColumnEnum("StockTransferID", typeof(long), System.Data.DbType.Int64, true, true, false)]
		StockTransferId = 1,
		/// <summary>
		/// RequestTime : Thoi gian yeu cau chuyen co phieu
		/// </summary>
		[EnumTextValue("RequestTime")]
		[ColumnEnum("RequestTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		RequestTime = 2,
		/// <summary>
		/// SecSymbol : Ma co phieu chuyen
		/// </summary>
		[EnumTextValue("SecSymbol")]
		[ColumnEnum("SecSymbol", typeof(string), System.Data.DbType.AnsiString, false, false, false, 8)]
		SecSymbol = 3,
		/// <summary>
		/// StockQuantity : So luong co phieu yeu cau chuyen
		/// </summary>
		[EnumTextValue("StockQuantity")]
		[ColumnEnum("StockQuantity", typeof(int), System.Data.DbType.Int32, false, false, false)]
		StockQuantity = 4,
		/// <summary>
		/// RejectedTime : Thoi gian yeu cau bi tu choi
		/// </summary>
		[EnumTextValue("RejectedTime")]
		[ColumnEnum("RejectedTime", typeof(System.DateTime?), System.Data.DbType.DateTime, false, false, true)]
		RejectedTime = 5,
		/// <summary>
		/// RejectedReason : Nguyen nhan yeu cau bi tu choi
		/// </summary>
		[EnumTextValue("RejectedReason")]
		[ColumnEnum("RejectedReason", typeof(string), System.Data.DbType.AnsiString, false, false, true)]
		RejectedReason = 6,
		/// <summary>
		/// SourceAccountId : Tai khoan nguon
		/// </summary>
		[EnumTextValue("SourceAccountID")]
		[ColumnEnum("SourceAccountID", typeof(string), System.Data.DbType.AnsiString, false, false, false, 20)]
		SourceAccountId = 7,
		/// <summary>
		/// TargetAccountId : Tai khoan dich
		/// </summary>
		[EnumTextValue("TargetAccountID")]
		[ColumnEnum("TargetAccountID", typeof(string), System.Data.DbType.AnsiString, false, false, false, 20)]
		TargetAccountId = 8,
		/// <summary>
		/// Status : Trang thai cua yeu cau
		/// </summary>
		[EnumTextValue("Status")]
		[ColumnEnum("Status", typeof(string), System.Data.DbType.AnsiString, false, false, true, 64)]
		Status = 9,
		/// <summary>
		/// BrokerId : Id c?a broker x? lý request.
		/// </summary>
		[EnumTextValue("BrokerID")]
		[ColumnEnum("BrokerID", typeof(string), System.Data.DbType.AnsiString, false, false, true, 20)]
		BrokerId = 10,
		/// <summary>
		/// ExecTime : Ngày gi? x? lý
		/// </summary>
		[EnumTextValue("ExecTime")]
		[ColumnEnum("ExecTime", typeof(System.DateTime?), System.Data.DbType.DateTime, false, false, true)]
		ExecTime = 11
	}//End enum

	#endregion StockTransferColumn Enum

} // end namespace
