
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Thursday, May 05, 2011
	Important: Do not modify this file. Edit the file CashTransfer.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Web.Script.Serialization;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using ETradeFinance.Entities.Validation;
#endregion

namespace ETradeFinance.Entities
{
	///<summary>
	/// An object representation of the 'CashTransfer' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class CashTransferBase : EntityBase, ICashTransfer, IEntityId<CashTransferKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private CashTransferEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private CashTransferEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private CashTransferEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<CashTransfer> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CashTransferEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CashTransferEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="CashTransferBase"/> instance.
		///</summary>
		public CashTransferBase()
		{
			this.entityData = new CashTransferEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="CashTransferBase"/> instance.
		///</summary>
		///<param name="_withdrawableAmt">Tong so tien co the rut (lay tu core)</param>
		///<param name="_transferedAmt">Tong so tien da yeu cau chuyen (dang cho xu ly, dang xu ly)</param>
		///<param name="_advOrderAmt">Tong so tien da dat lenh mua truoc va chua duoc gui vao core (tinh tren so CP chua khop )</param>
		///<param name="_avilableAmt">Tong so tien hien tai duoc phep chuyen/rut</param>
		///<param name="_requestAmt">So tien yeu cau chuyen</param>
		///<param name="_requestTime">Thoi gian(ngay gio) yeu cau chuyen tien</param>
		///<param name="_fee">Phi chuyen tien</param>
		///<param name="_vat"></param>
		///<param name="_amtAfterFee">So tien nhan duoc sau khi tru phi chuyen tien: AmountRemittanceFee = Amount - AdvanceFee</param>
		///<param name="_srcAccountId">Tai khoan nguon</param>
		///<param name="_destAccountId">Tai khoan dich(tai khoan chung khoan hoac tai khoan ngan hang)</param>
		///<param name="_transType">neu TK dich la tai khoan ngan hang=> TransType la rut tien, neu TK dich la TK chung khoan , TransType la chuyen tien</param>
		///<param name="_status">Trang thai cua yeu cau(dang cho, dang xu ly, da xu ly, ru choi boi broker, huy boi nha dau tu)</param>
		///<param name="_execTime">Ngày gi? x? lý</param>
		///<param name="_approvedAmt">So tien da duoc xu ly rut/chuyen (da nhap vao core)</param>
		///<param name="_note">Ghi chú</param>
		///<param name="_brokerId">Broker ID</param>
		///<param name="_bankName">Bank name</param>
		///<param name="_branchName">Branch name</param>
		public CashTransferBase(System.Decimal? _withdrawableAmt, System.Decimal? _transferedAmt, 
			System.Decimal? _advOrderAmt, System.Decimal? _avilableAmt, decimal _requestAmt, System.DateTime _requestTime, 
			System.Decimal? _fee, System.Decimal? _vat, System.Decimal? _amtAfterFee, string _srcAccountId, 
			string _destAccountId, System.Int32? _transType, System.Int32? _status, System.DateTime? _execTime, 
			System.Decimal? _approvedAmt, string _note, string _brokerId, string _bankName, 
			string _branchName)
		{
			this.entityData = new CashTransferEntityData();
			this.backupData = null;

			this.WithdrawableAmt = _withdrawableAmt;
			this.TransferedAmt = _transferedAmt;
			this.AdvOrderAmt = _advOrderAmt;
			this.AvilableAmt = _avilableAmt;
			this.RequestAmt = _requestAmt;
			this.RequestTime = _requestTime;
			this.Fee = _fee;
			this.Vat = _vat;
			this.AmtAfterFee = _amtAfterFee;
			this.SrcAccountId = _srcAccountId;
			this.DestAccountId = _destAccountId;
			this.TransType = _transType;
			this.Status = _status;
			this.ExecTime = _execTime;
			this.ApprovedAmt = _approvedAmt;
			this.Note = _note;
			this.BrokerId = _brokerId;
			this.BankName = _bankName;
			this.BranchName = _branchName;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="CashTransfer"/> instance.
		///</summary>
		///<param name="_withdrawableAmt">Tong so tien co the rut (lay tu core)</param>
		///<param name="_transferedAmt">Tong so tien da yeu cau chuyen (dang cho xu ly, dang xu ly)</param>
		///<param name="_advOrderAmt">Tong so tien da dat lenh mua truoc va chua duoc gui vao core (tinh tren so CP chua khop )</param>
		///<param name="_avilableAmt">Tong so tien hien tai duoc phep chuyen/rut</param>
		///<param name="_requestAmt">So tien yeu cau chuyen</param>
		///<param name="_requestTime">Thoi gian(ngay gio) yeu cau chuyen tien</param>
		///<param name="_fee">Phi chuyen tien</param>
		///<param name="_vat"></param>
		///<param name="_amtAfterFee">So tien nhan duoc sau khi tru phi chuyen tien: AmountRemittanceFee = Amount - AdvanceFee</param>
		///<param name="_srcAccountId">Tai khoan nguon</param>
		///<param name="_destAccountId">Tai khoan dich(tai khoan chung khoan hoac tai khoan ngan hang)</param>
		///<param name="_transType">neu TK dich la tai khoan ngan hang=> TransType la rut tien, neu TK dich la TK chung khoan , TransType la chuyen tien</param>
		///<param name="_status">Trang thai cua yeu cau(dang cho, dang xu ly, da xu ly, ru choi boi broker, huy boi nha dau tu)</param>
		///<param name="_execTime">Ngày gi? x? lý</param>
		///<param name="_approvedAmt">So tien da duoc xu ly rut/chuyen (da nhap vao core)</param>
		///<param name="_note">Ghi chú</param>
		///<param name="_brokerId">Broker ID</param>
		///<param name="_bankName">Bank name</param>
		///<param name="_branchName">Branch name</param>
		public static CashTransfer CreateCashTransfer(System.Decimal? _withdrawableAmt, System.Decimal? _transferedAmt, 
			System.Decimal? _advOrderAmt, System.Decimal? _avilableAmt, decimal _requestAmt, System.DateTime _requestTime, 
			System.Decimal? _fee, System.Decimal? _vat, System.Decimal? _amtAfterFee, string _srcAccountId, 
			string _destAccountId, System.Int32? _transType, System.Int32? _status, System.DateTime? _execTime, 
			System.Decimal? _approvedAmt, string _note, string _brokerId, string _bankName, 
			string _branchName)
		{
			CashTransfer newCashTransfer = new CashTransfer();
			newCashTransfer.WithdrawableAmt = _withdrawableAmt;
			newCashTransfer.TransferedAmt = _transferedAmt;
			newCashTransfer.AdvOrderAmt = _advOrderAmt;
			newCashTransfer.AvilableAmt = _avilableAmt;
			newCashTransfer.RequestAmt = _requestAmt;
			newCashTransfer.RequestTime = _requestTime;
			newCashTransfer.Fee = _fee;
			newCashTransfer.Vat = _vat;
			newCashTransfer.AmtAfterFee = _amtAfterFee;
			newCashTransfer.SrcAccountId = _srcAccountId;
			newCashTransfer.DestAccountId = _destAccountId;
			newCashTransfer.TransType = _transType;
			newCashTransfer.Status = _status;
			newCashTransfer.ExecTime = _execTime;
			newCashTransfer.ApprovedAmt = _approvedAmt;
			newCashTransfer.Note = _note;
			newCashTransfer.BrokerId = _brokerId;
			newCashTransfer.BankName = _bankName;
			newCashTransfer.BranchName = _branchName;
			return newCashTransfer;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		CashTransferID identifies CashTransfer
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@"CashTransferID identifies CashTransfer"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual long Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(CashTransferColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashTransferColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WithdrawableAmt property. 
		///		Tong so tien co the rut (lay tu core)
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsWithdrawableAmtNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Tong so tien co the rut (lay tu core)"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? WithdrawableAmt
		{
			get
			{
				return this.entityData.WithdrawableAmt; 
			}
			
			set
			{
				if (this.entityData.WithdrawableAmt == value)
					return;
					
				OnColumnChanging(CashTransferColumn.WithdrawableAmt, this.entityData.WithdrawableAmt);
				this.entityData.WithdrawableAmt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashTransferColumn.WithdrawableAmt, this.entityData.WithdrawableAmt);
				OnPropertyChanged("WithdrawableAmt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TransferedAmt property. 
		///		Tong so tien da yeu cau chuyen (dang cho xu ly, dang xu ly)
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTransferedAmtNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Tong so tien da yeu cau chuyen (dang cho xu ly, dang xu ly)"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TransferedAmt
		{
			get
			{
				return this.entityData.TransferedAmt; 
			}
			
			set
			{
				if (this.entityData.TransferedAmt == value)
					return;
					
				OnColumnChanging(CashTransferColumn.TransferedAmt, this.entityData.TransferedAmt);
				this.entityData.TransferedAmt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashTransferColumn.TransferedAmt, this.entityData.TransferedAmt);
				OnPropertyChanged("TransferedAmt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdvOrderAmt property. 
		///		Tong so tien da dat lenh mua truoc va chua duoc gui vao core (tinh tren so CP chua khop )
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAdvOrderAmtNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Tong so tien da dat lenh mua truoc va chua duoc gui vao core (tinh tren so CP chua khop )"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AdvOrderAmt
		{
			get
			{
				return this.entityData.AdvOrderAmt; 
			}
			
			set
			{
				if (this.entityData.AdvOrderAmt == value)
					return;
					
				OnColumnChanging(CashTransferColumn.AdvOrderAmt, this.entityData.AdvOrderAmt);
				this.entityData.AdvOrderAmt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashTransferColumn.AdvOrderAmt, this.entityData.AdvOrderAmt);
				OnPropertyChanged("AdvOrderAmt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AvilableAmt property. 
		///		Tong so tien hien tai duoc phep chuyen/rut
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAvilableAmtNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Tong so tien hien tai duoc phep chuyen/rut"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AvilableAmt
		{
			get
			{
				return this.entityData.AvilableAmt; 
			}
			
			set
			{
				if (this.entityData.AvilableAmt == value)
					return;
					
				OnColumnChanging(CashTransferColumn.AvilableAmt, this.entityData.AvilableAmt);
				this.entityData.AvilableAmt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashTransferColumn.AvilableAmt, this.entityData.AvilableAmt);
				OnPropertyChanged("AvilableAmt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RequestAmt property. 
		///		So tien yeu cau chuyen
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"So tien yeu cau chuyen"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual decimal RequestAmt
		{
			get
			{
				return this.entityData.RequestAmt; 
			}
			
			set
			{
				if (this.entityData.RequestAmt == value)
					return;
					
				OnColumnChanging(CashTransferColumn.RequestAmt, this.entityData.RequestAmt);
				this.entityData.RequestAmt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashTransferColumn.RequestAmt, this.entityData.RequestAmt);
				OnPropertyChanged("RequestAmt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RequestTime property. 
		///		Thoi gian(ngay gio) yeu cau chuyen tien
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Thoi gian(ngay gio) yeu cau chuyen tien"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime RequestTime
		{
			get
			{
				return this.entityData.RequestTime; 
			}
			
			set
			{
				if (this.entityData.RequestTime == value)
					return;
					
				OnColumnChanging(CashTransferColumn.RequestTime, this.entityData.RequestTime);
				this.entityData.RequestTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashTransferColumn.RequestTime, this.entityData.RequestTime);
				OnPropertyChanged("RequestTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Fee property. 
		///		Phi chuyen tien
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFeeNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Phi chuyen tien"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Fee
		{
			get
			{
				return this.entityData.Fee; 
			}
			
			set
			{
				if (this.entityData.Fee == value)
					return;
					
				OnColumnChanging(CashTransferColumn.Fee, this.entityData.Fee);
				this.entityData.Fee = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashTransferColumn.Fee, this.entityData.Fee);
				OnPropertyChanged("Fee");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Vat property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsVatNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Vat
		{
			get
			{
				return this.entityData.Vat; 
			}
			
			set
			{
				if (this.entityData.Vat == value)
					return;
					
				OnColumnChanging(CashTransferColumn.Vat, this.entityData.Vat);
				this.entityData.Vat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashTransferColumn.Vat, this.entityData.Vat);
				OnPropertyChanged("Vat");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AmtAfterFee property. 
		///		So tien nhan duoc sau khi tru phi chuyen tien: AmountRemittanceFee = Amount - AdvanceFee
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAmtAfterFeeNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"So tien nhan duoc sau khi tru phi chuyen tien: AmountRemittanceFee = Amount - AdvanceFee"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AmtAfterFee
		{
			get
			{
				return this.entityData.AmtAfterFee; 
			}
			
			set
			{
				if (this.entityData.AmtAfterFee == value)
					return;
					
				OnColumnChanging(CashTransferColumn.AmtAfterFee, this.entityData.AmtAfterFee);
				this.entityData.AmtAfterFee = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashTransferColumn.AmtAfterFee, this.entityData.AmtAfterFee);
				OnPropertyChanged("AmtAfterFee");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SrcAccountId property. 
		///		Tai khoan nguon
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Tai khoan nguon"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual string SrcAccountId
		{
			get
			{
				return this.entityData.SrcAccountId; 
			}
			
			set
			{
				if (this.entityData.SrcAccountId == value)
					return;
					
				OnColumnChanging(CashTransferColumn.SrcAccountId, this.entityData.SrcAccountId);
				this.entityData.SrcAccountId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashTransferColumn.SrcAccountId, this.entityData.SrcAccountId);
				OnPropertyChanged("SrcAccountId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DestAccountId property. 
		///		Tai khoan dich(tai khoan chung khoan hoac tai khoan ngan hang)
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Tai khoan dich(tai khoan chung khoan hoac tai khoan ngan hang)"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 64)]
		public virtual string DestAccountId
		{
			get
			{
				return this.entityData.DestAccountId; 
			}
			
			set
			{
				if (this.entityData.DestAccountId == value)
					return;
					
				OnColumnChanging(CashTransferColumn.DestAccountId, this.entityData.DestAccountId);
				this.entityData.DestAccountId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashTransferColumn.DestAccountId, this.entityData.DestAccountId);
				OnPropertyChanged("DestAccountId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TransType property. 
		///		neu TK dich la tai khoan ngan hang=> TransType la rut tien, neu TK dich la TK chung khoan , TransType la chuyen tien
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTransTypeNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"neu TK dich la tai khoan ngan hang=> TransType la rut tien, neu TK dich la TK chung khoan , TransType la chuyen tien"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? TransType
		{
			get
			{
				return this.entityData.TransType; 
			}
			
			set
			{
				if (this.entityData.TransType == value)
					return;
					
				OnColumnChanging(CashTransferColumn.TransType, this.entityData.TransType);
				this.entityData.TransType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashTransferColumn.TransType, this.entityData.TransType);
				OnPropertyChanged("TransType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		Trang thai cua yeu cau(dang cho, dang xu ly, da xu ly, ru choi boi broker, huy boi nha dau tu)
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsStatusNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Trang thai cua yeu cau(dang cho, dang xu ly, da xu ly, ru choi boi broker, huy boi nha dau tu)"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
					
				OnColumnChanging(CashTransferColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashTransferColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExecTime property. 
		///		Ngày gi? x? lý
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsExecTimeNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Ngày gi? x? lý"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ExecTime
		{
			get
			{
				return this.entityData.ExecTime; 
			}
			
			set
			{
				if (this.entityData.ExecTime == value)
					return;
					
				OnColumnChanging(CashTransferColumn.ExecTime, this.entityData.ExecTime);
				this.entityData.ExecTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashTransferColumn.ExecTime, this.entityData.ExecTime);
				OnPropertyChanged("ExecTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApprovedAmt property. 
		///		So tien da duoc xu ly rut/chuyen (da nhap vao core)
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsApprovedAmtNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"So tien da duoc xu ly rut/chuyen (da nhap vao core)"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ApprovedAmt
		{
			get
			{
				return this.entityData.ApprovedAmt; 
			}
			
			set
			{
				if (this.entityData.ApprovedAmt == value)
					return;
					
				OnColumnChanging(CashTransferColumn.ApprovedAmt, this.entityData.ApprovedAmt);
				this.entityData.ApprovedAmt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashTransferColumn.ApprovedAmt, this.entityData.ApprovedAmt);
				OnPropertyChanged("ApprovedAmt");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Note property. 
		///		Ghi chú
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Ghi chú"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual string Note
		{
			get
			{
				return this.entityData.Note; 
			}
			
			set
			{
				if (this.entityData.Note == value)
					return;
					
				OnColumnChanging(CashTransferColumn.Note, this.entityData.Note);
				this.entityData.Note = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashTransferColumn.Note, this.entityData.Note);
				OnPropertyChanged("Note");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BrokerId property. 
		///		Broker ID
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Broker ID"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual string BrokerId
		{
			get
			{
				return this.entityData.BrokerId; 
			}
			
			set
			{
				if (this.entityData.BrokerId == value)
					return;
					
				OnColumnChanging(CashTransferColumn.BrokerId, this.entityData.BrokerId);
				this.entityData.BrokerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashTransferColumn.BrokerId, this.entityData.BrokerId);
				OnPropertyChanged("BrokerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BankName property. 
		///		Bank name
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Bank name"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual string BankName
		{
			get
			{
				return this.entityData.BankName; 
			}
			
			set
			{
				if (this.entityData.BankName == value)
					return;
					
				OnColumnChanging(CashTransferColumn.BankName, this.entityData.BankName);
				this.entityData.BankName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashTransferColumn.BankName, this.entityData.BankName);
				OnPropertyChanged("BankName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BranchName property. 
		///		Branch name
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Branch name"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual string BranchName
		{
			get
			{
				return this.entityData.BranchName; 
			}
			
			set
			{
				if (this.entityData.BranchName == value)
					return;
					
				OnColumnChanging(CashTransferColumn.BranchName, this.entityData.BranchName);
				this.entityData.BranchName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashTransferColumn.BranchName, this.entityData.BranchName);
				OnPropertyChanged("BranchName");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("SrcAccountId", "Src Account Id"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SrcAccountId", "Src Account Id", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("DestAccountId", "Dest Account Id", 64));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("BrokerId", "Broker Id", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("BankName", "Bank Name", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("BranchName", "Branch Name", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public override string TableName
		{
			get { return "CashTransfer"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "WithdrawableAmt", "TransferedAmt", "AdvOrderAmt", "AvilableAmt", "RequestAmt", "RequestTime", "Fee", "VAT", "AmtAfterFee", "SrcAccountID", "DestAccountID", "TransType", "Status", "ExecTime", "ApprovedAmt", "Note", "BrokerID", "BankName", "BranchName"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as CashTransferEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (CashTransfer) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
        [ScriptIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<CashTransfer>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as CashTransfer);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed CashTransfer Entity 
		///</summary>
		protected virtual CashTransfer Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			CashTransfer copy = new CashTransfer();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.WithdrawableAmt = this.WithdrawableAmt;
				copy.TransferedAmt = this.TransferedAmt;
				copy.AdvOrderAmt = this.AdvOrderAmt;
				copy.AvilableAmt = this.AvilableAmt;
				copy.RequestAmt = this.RequestAmt;
				copy.RequestTime = this.RequestTime;
				copy.Fee = this.Fee;
				copy.Vat = this.Vat;
				copy.AmtAfterFee = this.AmtAfterFee;
				copy.SrcAccountId = this.SrcAccountId;
				copy.DestAccountId = this.DestAccountId;
				copy.TransType = this.TransType;
				copy.Status = this.Status;
				copy.ExecTime = this.ExecTime;
				copy.ApprovedAmt = this.ApprovedAmt;
				copy.Note = this.Note;
				copy.BrokerId = this.BrokerId;
				copy.BankName = this.BankName;
				copy.BranchName = this.BranchName;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed CashTransfer Entity 
		///</summary>
		public virtual CashTransfer Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed CashTransfer Entity which is a deep copy of the current entity.
		///</summary>
		public virtual CashTransfer DeepCopy()
		{
			return EntityHelper.Clone<CashTransfer>(this as CashTransfer);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as CashTransferEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new CashTransferEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as CashTransferEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(CashTransferColumn column)
		{
			switch(column)
			{
					case CashTransferColumn.Id:
					return entityData.Id != _originalData.Id;
					case CashTransferColumn.WithdrawableAmt:
					return entityData.WithdrawableAmt != _originalData.WithdrawableAmt;
					case CashTransferColumn.TransferedAmt:
					return entityData.TransferedAmt != _originalData.TransferedAmt;
					case CashTransferColumn.AdvOrderAmt:
					return entityData.AdvOrderAmt != _originalData.AdvOrderAmt;
					case CashTransferColumn.AvilableAmt:
					return entityData.AvilableAmt != _originalData.AvilableAmt;
					case CashTransferColumn.RequestAmt:
					return entityData.RequestAmt != _originalData.RequestAmt;
					case CashTransferColumn.RequestTime:
					return entityData.RequestTime != _originalData.RequestTime;
					case CashTransferColumn.Fee:
					return entityData.Fee != _originalData.Fee;
					case CashTransferColumn.Vat:
					return entityData.Vat != _originalData.Vat;
					case CashTransferColumn.AmtAfterFee:
					return entityData.AmtAfterFee != _originalData.AmtAfterFee;
					case CashTransferColumn.SrcAccountId:
					return entityData.SrcAccountId != _originalData.SrcAccountId;
					case CashTransferColumn.DestAccountId:
					return entityData.DestAccountId != _originalData.DestAccountId;
					case CashTransferColumn.TransType:
					return entityData.TransType != _originalData.TransType;
					case CashTransferColumn.Status:
					return entityData.Status != _originalData.Status;
					case CashTransferColumn.ExecTime:
					return entityData.ExecTime != _originalData.ExecTime;
					case CashTransferColumn.ApprovedAmt:
					return entityData.ApprovedAmt != _originalData.ApprovedAmt;
					case CashTransferColumn.Note:
					return entityData.Note != _originalData.Note;
					case CashTransferColumn.BrokerId:
					return entityData.BrokerId != _originalData.BrokerId;
					case CashTransferColumn.BankName:
					return entityData.BankName != _originalData.BankName;
					case CashTransferColumn.BranchName:
					return entityData.BranchName != _originalData.BranchName;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< CashTransferColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.WithdrawableAmt != _originalData.WithdrawableAmt;
			result = result || entityData.TransferedAmt != _originalData.TransferedAmt;
			result = result || entityData.AdvOrderAmt != _originalData.AdvOrderAmt;
			result = result || entityData.AvilableAmt != _originalData.AvilableAmt;
			result = result || entityData.RequestAmt != _originalData.RequestAmt;
			result = result || entityData.RequestTime != _originalData.RequestTime;
			result = result || entityData.Fee != _originalData.Fee;
			result = result || entityData.Vat != _originalData.Vat;
			result = result || entityData.AmtAfterFee != _originalData.AmtAfterFee;
			result = result || entityData.SrcAccountId != _originalData.SrcAccountId;
			result = result || entityData.DestAccountId != _originalData.DestAccountId;
			result = result || entityData.TransType != _originalData.TransType;
			result = result || entityData.Status != _originalData.Status;
			result = result || entityData.ExecTime != _originalData.ExecTime;
			result = result || entityData.ApprovedAmt != _originalData.ApprovedAmt;
			result = result || entityData.Note != _originalData.Note;
			result = result || entityData.BrokerId != _originalData.BrokerId;
			result = result || entityData.BankName != _originalData.BankName;
			result = result || entityData.BranchName != _originalData.BranchName;
			return result;
		}	
		
		///<summary>
		///  Returns a CashTransfer Entity with the original data.
		///</summary>
		public CashTransfer GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateCashTransfer(
				_originalData.WithdrawableAmt,
				_originalData.TransferedAmt,
				_originalData.AdvOrderAmt,
				_originalData.AvilableAmt,
				_originalData.RequestAmt,
				_originalData.RequestTime,
				_originalData.Fee,
				_originalData.Vat,
				_originalData.AmtAfterFee,
				_originalData.SrcAccountId,
				_originalData.DestAccountId,
				_originalData.TransType,
				_originalData.Status,
				_originalData.ExecTime,
				_originalData.ApprovedAmt,
				_originalData.Note,
				_originalData.BrokerId,
				_originalData.BankName,
				_originalData.BranchName
				);
				
			return (CashTransfer)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="CashTransferBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is CashTransferBase)
				return ValueEquals(this, (CashTransferBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="CashTransferBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.WithdrawableAmt == null) ? string.Empty : this.WithdrawableAmt.ToString()).GetHashCode() ^ 
					((this.TransferedAmt == null) ? string.Empty : this.TransferedAmt.ToString()).GetHashCode() ^ 
					((this.AdvOrderAmt == null) ? string.Empty : this.AdvOrderAmt.ToString()).GetHashCode() ^ 
					((this.AvilableAmt == null) ? string.Empty : this.AvilableAmt.ToString()).GetHashCode() ^ 
					this.RequestAmt.GetHashCode() ^ 
					this.RequestTime.GetHashCode() ^ 
					((this.Fee == null) ? string.Empty : this.Fee.ToString()).GetHashCode() ^ 
					((this.Vat == null) ? string.Empty : this.Vat.ToString()).GetHashCode() ^ 
					((this.AmtAfterFee == null) ? string.Empty : this.AmtAfterFee.ToString()).GetHashCode() ^ 
					this.SrcAccountId.GetHashCode() ^ 
					((this.DestAccountId == null) ? string.Empty : this.DestAccountId.ToString()).GetHashCode() ^ 
					((this.TransType == null) ? string.Empty : this.TransType.ToString()).GetHashCode() ^ 
					((this.Status == null) ? string.Empty : this.Status.ToString()).GetHashCode() ^ 
					((this.ExecTime == null) ? string.Empty : this.ExecTime.ToString()).GetHashCode() ^ 
					((this.ApprovedAmt == null) ? string.Empty : this.ApprovedAmt.ToString()).GetHashCode() ^ 
					((this.Note == null) ? string.Empty : this.Note.ToString()).GetHashCode() ^ 
					((this.BrokerId == null) ? string.Empty : this.BrokerId.ToString()).GetHashCode() ^ 
					((this.BankName == null) ? string.Empty : this.BankName.ToString()).GetHashCode() ^ 
					((this.BranchName == null) ? string.Empty : this.BranchName.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="CashTransferBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(CashTransferBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="CashTransferBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="CashTransferBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="CashTransferBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(CashTransferBase Object1, CashTransferBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.WithdrawableAmt != null && Object2.WithdrawableAmt != null )
			{
				if (Object1.WithdrawableAmt != Object2.WithdrawableAmt)
					equal = false;
			}
			else if (Object1.WithdrawableAmt == null ^ Object2.WithdrawableAmt == null )
			{
				equal = false;
			}
			if ( Object1.TransferedAmt != null && Object2.TransferedAmt != null )
			{
				if (Object1.TransferedAmt != Object2.TransferedAmt)
					equal = false;
			}
			else if (Object1.TransferedAmt == null ^ Object2.TransferedAmt == null )
			{
				equal = false;
			}
			if ( Object1.AdvOrderAmt != null && Object2.AdvOrderAmt != null )
			{
				if (Object1.AdvOrderAmt != Object2.AdvOrderAmt)
					equal = false;
			}
			else if (Object1.AdvOrderAmt == null ^ Object2.AdvOrderAmt == null )
			{
				equal = false;
			}
			if ( Object1.AvilableAmt != null && Object2.AvilableAmt != null )
			{
				if (Object1.AvilableAmt != Object2.AvilableAmt)
					equal = false;
			}
			else if (Object1.AvilableAmt == null ^ Object2.AvilableAmt == null )
			{
				equal = false;
			}
			if (Object1.RequestAmt != Object2.RequestAmt)
				equal = false;
			if (Object1.RequestTime != Object2.RequestTime)
				equal = false;
			if ( Object1.Fee != null && Object2.Fee != null )
			{
				if (Object1.Fee != Object2.Fee)
					equal = false;
			}
			else if (Object1.Fee == null ^ Object2.Fee == null )
			{
				equal = false;
			}
			if ( Object1.Vat != null && Object2.Vat != null )
			{
				if (Object1.Vat != Object2.Vat)
					equal = false;
			}
			else if (Object1.Vat == null ^ Object2.Vat == null )
			{
				equal = false;
			}
			if ( Object1.AmtAfterFee != null && Object2.AmtAfterFee != null )
			{
				if (Object1.AmtAfterFee != Object2.AmtAfterFee)
					equal = false;
			}
			else if (Object1.AmtAfterFee == null ^ Object2.AmtAfterFee == null )
			{
				equal = false;
			}
			if (Object1.SrcAccountId != Object2.SrcAccountId)
				equal = false;
			if ( Object1.DestAccountId != null && Object2.DestAccountId != null )
			{
				if (Object1.DestAccountId != Object2.DestAccountId)
					equal = false;
			}
			else if (Object1.DestAccountId == null ^ Object2.DestAccountId == null )
			{
				equal = false;
			}
			if ( Object1.TransType != null && Object2.TransType != null )
			{
				if (Object1.TransType != Object2.TransType)
					equal = false;
			}
			else if (Object1.TransType == null ^ Object2.TransType == null )
			{
				equal = false;
			}
			if ( Object1.Status != null && Object2.Status != null )
			{
				if (Object1.Status != Object2.Status)
					equal = false;
			}
			else if (Object1.Status == null ^ Object2.Status == null )
			{
				equal = false;
			}
			if ( Object1.ExecTime != null && Object2.ExecTime != null )
			{
				if (Object1.ExecTime != Object2.ExecTime)
					equal = false;
			}
			else if (Object1.ExecTime == null ^ Object2.ExecTime == null )
			{
				equal = false;
			}
			if ( Object1.ApprovedAmt != null && Object2.ApprovedAmt != null )
			{
				if (Object1.ApprovedAmt != Object2.ApprovedAmt)
					equal = false;
			}
			else if (Object1.ApprovedAmt == null ^ Object2.ApprovedAmt == null )
			{
				equal = false;
			}
			if ( Object1.Note != null && Object2.Note != null )
			{
				if (Object1.Note != Object2.Note)
					equal = false;
			}
			else if (Object1.Note == null ^ Object2.Note == null )
			{
				equal = false;
			}
			if ( Object1.BrokerId != null && Object2.BrokerId != null )
			{
				if (Object1.BrokerId != Object2.BrokerId)
					equal = false;
			}
			else if (Object1.BrokerId == null ^ Object2.BrokerId == null )
			{
				equal = false;
			}
			if ( Object1.BankName != null && Object2.BankName != null )
			{
				if (Object1.BankName != Object2.BankName)
					equal = false;
			}
			else if (Object1.BankName == null ^ Object2.BankName == null )
			{
				equal = false;
			}
			if ( Object1.BranchName != null && Object2.BranchName != null )
			{
				if (Object1.BranchName != Object2.BranchName)
					equal = false;
			}
			else if (Object1.BranchName == null ^ Object2.BranchName == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((CashTransferBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static CashTransferComparer GetComparer()
        {
            return new CashTransferComparer();
        }
        */

        // Comparer delegates back to CashTransfer
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(CashTransfer rhs, CashTransferColumn which)
        {
            switch (which)
            {
            	
            	
            	case CashTransferColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case CashTransferColumn.WithdrawableAmt:
            		return this.WithdrawableAmt.Value.CompareTo(rhs.WithdrawableAmt.Value);
            		
            		                 
            	
            	
            	case CashTransferColumn.TransferedAmt:
            		return this.TransferedAmt.Value.CompareTo(rhs.TransferedAmt.Value);
            		
            		                 
            	
            	
            	case CashTransferColumn.AdvOrderAmt:
            		return this.AdvOrderAmt.Value.CompareTo(rhs.AdvOrderAmt.Value);
            		
            		                 
            	
            	
            	case CashTransferColumn.AvilableAmt:
            		return this.AvilableAmt.Value.CompareTo(rhs.AvilableAmt.Value);
            		
            		                 
            	
            	
            	case CashTransferColumn.RequestAmt:
            		return this.RequestAmt.CompareTo(rhs.RequestAmt);
            		
            		                 
            	
            	
            	case CashTransferColumn.RequestTime:
            		return this.RequestTime.CompareTo(rhs.RequestTime);
            		
            		                 
            	
            	
            	case CashTransferColumn.Fee:
            		return this.Fee.Value.CompareTo(rhs.Fee.Value);
            		
            		                 
            	
            	
            	case CashTransferColumn.Vat:
            		return this.Vat.Value.CompareTo(rhs.Vat.Value);
            		
            		                 
            	
            	
            	case CashTransferColumn.AmtAfterFee:
            		return this.AmtAfterFee.Value.CompareTo(rhs.AmtAfterFee.Value);
            		
            		                 
            	
            	
            	case CashTransferColumn.SrcAccountId:
            		return this.SrcAccountId.CompareTo(rhs.SrcAccountId);
            		
            		                 
            	
            	
            	case CashTransferColumn.DestAccountId:
            		return this.DestAccountId.CompareTo(rhs.DestAccountId);
            		
            		                 
            	
            	
            	case CashTransferColumn.TransType:
            		return this.TransType.Value.CompareTo(rhs.TransType.Value);
            		
            		                 
            	
            	
            	case CashTransferColumn.Status:
            		return this.Status.Value.CompareTo(rhs.Status.Value);
            		
            		                 
            	
            	
            	case CashTransferColumn.ExecTime:
            		return this.ExecTime.Value.CompareTo(rhs.ExecTime.Value);
            		
            		                 
            	
            	
            	case CashTransferColumn.ApprovedAmt:
            		return this.ApprovedAmt.Value.CompareTo(rhs.ApprovedAmt.Value);
            		
            		                 
            	
            	
            	case CashTransferColumn.Note:
            		return this.Note.CompareTo(rhs.Note);
            		
            		                 
            	
            	
            	case CashTransferColumn.BrokerId:
            		return this.BrokerId.CompareTo(rhs.BrokerId);
            		
            		                 
            	
            	
            	case CashTransferColumn.BankName:
            		return this.BankName.CompareTo(rhs.BankName);
            		
            		                 
            	
            	
            	case CashTransferColumn.BranchName:
            		return this.BranchName.CompareTo(rhs.BranchName);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
        [ScriptIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<CashTransferKey> Members
		
		// member variable for the EntityId property
		private CashTransferKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
        [ScriptIgnore]
		public virtual CashTransferKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new CashTransferKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute(), ScriptIgnore()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
        [ScriptIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("CashTransfer")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{21}{20}- Id: {0}{20}- WithdrawableAmt: {1}{20}- TransferedAmt: {2}{20}- AdvOrderAmt: {3}{20}- AvilableAmt: {4}{20}- RequestAmt: {5}{20}- RequestTime: {6}{20}- Fee: {7}{20}- Vat: {8}{20}- AmtAfterFee: {9}{20}- SrcAccountId: {10}{20}- DestAccountId: {11}{20}- TransType: {12}{20}- Status: {13}{20}- ExecTime: {14}{20}- ApprovedAmt: {15}{20}- Note: {16}{20}- BrokerId: {17}{20}- BankName: {18}{20}- BranchName: {19}{20}{22}", 
				this.Id,
				(this.WithdrawableAmt == null) ? string.Empty : this.WithdrawableAmt.ToString(),
				(this.TransferedAmt == null) ? string.Empty : this.TransferedAmt.ToString(),
				(this.AdvOrderAmt == null) ? string.Empty : this.AdvOrderAmt.ToString(),
				(this.AvilableAmt == null) ? string.Empty : this.AvilableAmt.ToString(),
				this.RequestAmt,
				this.RequestTime,
				(this.Fee == null) ? string.Empty : this.Fee.ToString(),
				(this.Vat == null) ? string.Empty : this.Vat.ToString(),
				(this.AmtAfterFee == null) ? string.Empty : this.AmtAfterFee.ToString(),
				this.SrcAccountId,
				(this.DestAccountId == null) ? string.Empty : this.DestAccountId.ToString(),
				(this.TransType == null) ? string.Empty : this.TransType.ToString(),
				(this.Status == null) ? string.Empty : this.Status.ToString(),
				(this.ExecTime == null) ? string.Empty : this.ExecTime.ToString(),
				(this.ApprovedAmt == null) ? string.Empty : this.ApprovedAmt.ToString(),
				(this.Note == null) ? string.Empty : this.Note.ToString(),
				(this.BrokerId == null) ? string.Empty : this.BrokerId.ToString(),
				(this.BankName == null) ? string.Empty : this.BankName.ToString(),
				(this.BranchName == null) ? string.Empty : this.BranchName.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'CashTransfer' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class CashTransferEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ID : CashTransferID identifies CashTransfer
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "CashTransfer"</remarks>
		public long Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// WithdrawableAmt : Tong so tien co the rut (lay tu core)
		/// </summary>
		public System.Decimal?		  WithdrawableAmt = null;
		
		/// <summary>
		/// TransferedAmt : Tong so tien da yeu cau chuyen (dang cho xu ly, dang xu ly)
		/// </summary>
		public System.Decimal?		  TransferedAmt = null;
		
		/// <summary>
		/// AdvOrderAmt : Tong so tien da dat lenh mua truoc va chua duoc gui vao core (tinh tren so CP chua khop )
		/// </summary>
		public System.Decimal?		  AdvOrderAmt = null;
		
		/// <summary>
		/// AvilableAmt : Tong so tien hien tai duoc phep chuyen/rut
		/// </summary>
		public System.Decimal?		  AvilableAmt = null;
		
		/// <summary>
		/// RequestAmt : So tien yeu cau chuyen
		/// </summary>
		public decimal		  RequestAmt = 0.0m;
		
		/// <summary>
		/// RequestTime : Thoi gian(ngay gio) yeu cau chuyen tien
		/// </summary>
		public System.DateTime		  RequestTime = DateTime.MinValue;
		
		/// <summary>
		/// Fee : Phi chuyen tien
		/// </summary>
		public System.Decimal?		  Fee = null;
		
		/// <summary>
		/// VAT : 
		/// </summary>
		public System.Decimal?		  Vat = null;
		
		/// <summary>
		/// AmtAfterFee : So tien nhan duoc sau khi tru phi chuyen tien: AmountRemittanceFee = Amount - AdvanceFee
		/// </summary>
		public System.Decimal?		  AmtAfterFee = null;
		
		/// <summary>
		/// SrcAccountID : Tai khoan nguon
		/// </summary>
		public string		  SrcAccountId = string.Empty;
		
		/// <summary>
		/// DestAccountID : Tai khoan dich(tai khoan chung khoan hoac tai khoan ngan hang)
		/// </summary>
		public string		  DestAccountId = null;
		
		/// <summary>
		/// TransType : neu TK dich la tai khoan ngan hang=> TransType la rut tien, neu TK dich la TK chung khoan , TransType la chuyen tien
		/// </summary>
		public System.Int32?		  TransType = null;
		
		/// <summary>
		/// Status : Trang thai cua yeu cau(dang cho, dang xu ly, da xu ly, ru choi boi broker, huy boi nha dau tu)
		/// </summary>
		public System.Int32?		  Status = null;
		
		/// <summary>
		/// ExecTime : Ngày gi? x? lý
		/// </summary>
		public System.DateTime?		  ExecTime = null;
		
		/// <summary>
		/// ApprovedAmt : So tien da duoc xu ly rut/chuyen (da nhap vao core)
		/// </summary>
		public System.Decimal?		  ApprovedAmt = null;
		
		/// <summary>
		/// Note : Ghi chú
		/// </summary>
		public string		  Note = null;
		
		/// <summary>
		/// BrokerID : Broker ID
		/// </summary>
		public string		  BrokerId = null;
		
		/// <summary>
		/// BankName : Bank name
		/// </summary>
		public string		  BankName = null;
		
		/// <summary>
		/// BranchName : Branch name
		/// </summary>
		public string		  BranchName = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			CashTransferEntityData _tmp = new CashTransferEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.WithdrawableAmt = this.WithdrawableAmt;
			_tmp.TransferedAmt = this.TransferedAmt;
			_tmp.AdvOrderAmt = this.AdvOrderAmt;
			_tmp.AvilableAmt = this.AvilableAmt;
			_tmp.RequestAmt = this.RequestAmt;
			_tmp.RequestTime = this.RequestTime;
			_tmp.Fee = this.Fee;
			_tmp.Vat = this.Vat;
			_tmp.AmtAfterFee = this.AmtAfterFee;
			_tmp.SrcAccountId = this.SrcAccountId;
			_tmp.DestAccountId = this.DestAccountId;
			_tmp.TransType = this.TransType;
			_tmp.Status = this.Status;
			_tmp.ExecTime = this.ExecTime;
			_tmp.ApprovedAmt = this.ApprovedAmt;
			_tmp.Note = this.Note;
			_tmp.BrokerId = this.BrokerId;
			_tmp.BankName = this.BankName;
			_tmp.BranchName = this.BranchName;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			CashTransferEntityData _tmp = new CashTransferEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.WithdrawableAmt = this.WithdrawableAmt;
			_tmp.TransferedAmt = this.TransferedAmt;
			_tmp.AdvOrderAmt = this.AdvOrderAmt;
			_tmp.AvilableAmt = this.AvilableAmt;
			_tmp.RequestAmt = this.RequestAmt;
			_tmp.RequestTime = this.RequestTime;
			_tmp.Fee = this.Fee;
			_tmp.Vat = this.Vat;
			_tmp.AmtAfterFee = this.AmtAfterFee;
			_tmp.SrcAccountId = this.SrcAccountId;
			_tmp.DestAccountId = this.DestAccountId;
			_tmp.TransType = this.TransType;
			_tmp.Status = this.Status;
			_tmp.ExecTime = this.ExecTime;
			_tmp.ApprovedAmt = this.ApprovedAmt;
			_tmp.Note = this.Note;
			_tmp.BrokerId = this.BrokerId;
			_tmp.BankName = this.BankName;
			_tmp.BranchName = this.BranchName;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CashTransferColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(CashTransferColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CashTransferColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(CashTransferColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CashTransferColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(CashTransferColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				CashTransferEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new CashTransferEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CashTransferColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(CashTransferColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				CashTransferEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new CashTransferEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region CashTransferEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="CashTransfer"/> object.
	/// </remarks>
	public class CashTransferEventArgs : System.EventArgs
	{
		private CashTransferColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the CashTransferEventArgs class.
		///</summary>
		public CashTransferEventArgs(CashTransferColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the CashTransferEventArgs class.
		///</summary>
		public CashTransferEventArgs(CashTransferColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The CashTransferColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="CashTransferColumn" />
		public CashTransferColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all CashTransfer related events.
	///</summary>
	public delegate void CashTransferEventHandler(object sender, CashTransferEventArgs e);
	
	#region CashTransferComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class CashTransferComparer : System.Collections.Generic.IComparer<CashTransfer>
	{
		CashTransferColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:CashTransferComparer"/> class.
        /// </summary>
		public CashTransferComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:CashTransferComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public CashTransferComparer(CashTransferColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="CashTransfer"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="CashTransfer"/> to compare.</param>
        /// <param name="b">The second <c>CashTransfer</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(CashTransfer a, CashTransfer b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(CashTransfer entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(CashTransfer a, CashTransfer b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public CashTransferColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region CashTransferKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="CashTransfer"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class CashTransferKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the CashTransferKey class.
		/// </summary>
		public CashTransferKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the CashTransferKey class.
		/// </summary>
		public CashTransferKey(CashTransferBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the CashTransferKey class.
		/// </summary>
		public CashTransferKey(long _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private CashTransferBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public CashTransferBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private long _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public long Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (long) EntityUtil.ChangeType(values["Id"], typeof(long)) : (long)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region CashTransferColumn Enum
	
	/// <summary>
	/// Enumerate the CashTransfer columns.
	/// </summary>
	[Serializable]
	public enum CashTransferColumn : int
	{
		/// <summary>
		/// Id : CashTransferID identifies CashTransfer
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(long), System.Data.DbType.Int64, true, true, false)]
		Id = 1,
		/// <summary>
		/// WithdrawableAmt : Tong so tien co the rut (lay tu core)
		/// </summary>
		[EnumTextValue("WithdrawableAmt")]
		[ColumnEnum("WithdrawableAmt", typeof(System.Decimal?), System.Data.DbType.Decimal, false, false, true)]
		WithdrawableAmt = 2,
		/// <summary>
		/// TransferedAmt : Tong so tien da yeu cau chuyen (dang cho xu ly, dang xu ly)
		/// </summary>
		[EnumTextValue("TransferedAmt")]
		[ColumnEnum("TransferedAmt", typeof(System.Decimal?), System.Data.DbType.Decimal, false, false, true)]
		TransferedAmt = 3,
		/// <summary>
		/// AdvOrderAmt : Tong so tien da dat lenh mua truoc va chua duoc gui vao core (tinh tren so CP chua khop )
		/// </summary>
		[EnumTextValue("AdvOrderAmt")]
		[ColumnEnum("AdvOrderAmt", typeof(System.Decimal?), System.Data.DbType.Decimal, false, false, true)]
		AdvOrderAmt = 4,
		/// <summary>
		/// AvilableAmt : Tong so tien hien tai duoc phep chuyen/rut
		/// </summary>
		[EnumTextValue("AvilableAmt")]
		[ColumnEnum("AvilableAmt", typeof(System.Decimal?), System.Data.DbType.Decimal, false, false, true)]
		AvilableAmt = 5,
		/// <summary>
		/// RequestAmt : So tien yeu cau chuyen
		/// </summary>
		[EnumTextValue("RequestAmt")]
		[ColumnEnum("RequestAmt", typeof(decimal), System.Data.DbType.Decimal, false, false, false)]
		RequestAmt = 6,
		/// <summary>
		/// RequestTime : Thoi gian(ngay gio) yeu cau chuyen tien
		/// </summary>
		[EnumTextValue("RequestTime")]
		[ColumnEnum("RequestTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		RequestTime = 7,
		/// <summary>
		/// Fee : Phi chuyen tien
		/// </summary>
		[EnumTextValue("Fee")]
		[ColumnEnum("Fee", typeof(System.Decimal?), System.Data.DbType.Decimal, false, false, true)]
		Fee = 8,
		/// <summary>
		/// Vat : 
		/// </summary>
		[EnumTextValue("VAT")]
		[ColumnEnum("VAT", typeof(System.Decimal?), System.Data.DbType.Decimal, false, false, true)]
		Vat = 9,
		/// <summary>
		/// AmtAfterFee : So tien nhan duoc sau khi tru phi chuyen tien: AmountRemittanceFee = Amount - AdvanceFee
		/// </summary>
		[EnumTextValue("AmtAfterFee")]
		[ColumnEnum("AmtAfterFee", typeof(System.Decimal?), System.Data.DbType.Decimal, false, false, true)]
		AmtAfterFee = 10,
		/// <summary>
		/// SrcAccountId : Tai khoan nguon
		/// </summary>
		[EnumTextValue("SrcAccountID")]
		[ColumnEnum("SrcAccountID", typeof(string), System.Data.DbType.AnsiString, false, false, false, 20)]
		SrcAccountId = 11,
		/// <summary>
		/// DestAccountId : Tai khoan dich(tai khoan chung khoan hoac tai khoan ngan hang)
		/// </summary>
		[EnumTextValue("DestAccountID")]
		[ColumnEnum("DestAccountID", typeof(string), System.Data.DbType.AnsiString, false, false, true, 64)]
		DestAccountId = 12,
		/// <summary>
		/// TransType : neu TK dich la tai khoan ngan hang=> TransType la rut tien, neu TK dich la TK chung khoan , TransType la chuyen tien
		/// </summary>
		[EnumTextValue("TransType")]
		[ColumnEnum("TransType", typeof(System.Int32?), System.Data.DbType.Int32, false, false, true)]
		TransType = 13,
		/// <summary>
		/// Status : Trang thai cua yeu cau(dang cho, dang xu ly, da xu ly, ru choi boi broker, huy boi nha dau tu)
		/// </summary>
		[EnumTextValue("Status")]
		[ColumnEnum("Status", typeof(System.Int32?), System.Data.DbType.Int32, false, false, true)]
		Status = 14,
		/// <summary>
		/// ExecTime : Ngày gi? x? lý
		/// </summary>
		[EnumTextValue("ExecTime")]
		[ColumnEnum("ExecTime", typeof(System.DateTime?), System.Data.DbType.DateTime, false, false, true)]
		ExecTime = 15,
		/// <summary>
		/// ApprovedAmt : So tien da duoc xu ly rut/chuyen (da nhap vao core)
		/// </summary>
		[EnumTextValue("ApprovedAmt")]
		[ColumnEnum("ApprovedAmt", typeof(System.Decimal?), System.Data.DbType.Decimal, false, false, true)]
		ApprovedAmt = 16,
		/// <summary>
		/// Note : Ghi chú
		/// </summary>
		[EnumTextValue("Note")]
		[ColumnEnum("Note", typeof(string), System.Data.DbType.String, false, false, true)]
		Note = 17,
		/// <summary>
		/// BrokerId : Broker ID
		/// </summary>
		[EnumTextValue("BrokerID")]
		[ColumnEnum("BrokerID", typeof(string), System.Data.DbType.AnsiString, false, false, true, 20)]
		BrokerId = 18,
		/// <summary>
		/// BankName : Bank name
		/// </summary>
		[EnumTextValue("BankName")]
		[ColumnEnum("BankName", typeof(string), System.Data.DbType.String, false, false, true, 100)]
		BankName = 19,
		/// <summary>
		/// BranchName : Branch name
		/// </summary>
		[EnumTextValue("BranchName")]
		[ColumnEnum("BranchName", typeof(string), System.Data.DbType.String, false, false, true, 100)]
		BranchName = 20
	}//End enum

	#endregion CashTransferColumn Enum

} // end namespace
