
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Wednesday, January 19, 2011
	Important: Do not modify this file. Edit the file ConditionOrderDetail.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Web.Script.Serialization;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using ETradeOrders.Entities.Validation;
#endregion

namespace ETradeOrders.Entities
{
	///<summary>
	/// An object representation of the 'ConditionOrderDetail' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ConditionOrderDetailBase : EntityBase, IConditionOrderDetail, IEntityId<ConditionOrderDetailKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ConditionOrderDetailEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ConditionOrderDetailEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ConditionOrderDetailEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ConditionOrderDetail> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ConditionOrderDetailEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ConditionOrderDetailEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ConditionOrderDetailBase"/> instance.
		///</summary>
		public ConditionOrderDetailBase()
		{
			this.entityData = new ConditionOrderDetailEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ConditionOrderDetailBase"/> instance.
		///</summary>
		///<param name="_volume">Volume putted at that day</param>
		///<param name="_matchedVolume">MatchedVolume at that day</param>
		///<param name="_avgPrice">Average price</param>
		///<param name="_orderStatus">Status of order</param>
		///<param name="_conditionOrderId">Foreign key to ConditionOrder table</param>
		///<param name="_fisOrderId"></param>
		///<param name="_ordRejReason"></param>
		///<param name="_numOfMatch"></param>
		///<param name="_cancelledVol"></param>
		///<param name="_createdDateTime">Created date time</param>
		///<param name="_updatedDateTime">Updated date time</param>
		public ConditionOrderDetailBase(int _volume, int _matchedVolume, System.Decimal? _avgPrice, 
			System.Int16? _orderStatus, long _conditionOrderId, System.Int32? _fisOrderId, 
			System.Int32? _ordRejReason, System.Int32? _numOfMatch, System.Int32? _cancelledVol, 
			System.DateTime _createdDateTime, System.DateTime? _updatedDateTime)
		{
			this.entityData = new ConditionOrderDetailEntityData();
			this.backupData = null;

			this.Volume = _volume;
			this.MatchedVolume = _matchedVolume;
			this.AvgPrice = _avgPrice;
			this.OrderStatus = _orderStatus;
			this.ConditionOrderId = _conditionOrderId;
			this.FisOrderId = _fisOrderId;
			this.OrdRejReason = _ordRejReason;
			this.NumOfMatch = _numOfMatch;
			this.CancelledVol = _cancelledVol;
			this.CreatedDateTime = _createdDateTime;
			this.UpdatedDateTime = _updatedDateTime;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ConditionOrderDetail"/> instance.
		///</summary>
		///<param name="_volume">Volume putted at that day</param>
		///<param name="_matchedVolume">MatchedVolume at that day</param>
		///<param name="_avgPrice">Average price</param>
		///<param name="_orderStatus">Status of order</param>
		///<param name="_conditionOrderId">Foreign key to ConditionOrder table</param>
		///<param name="_fisOrderId"></param>
		///<param name="_ordRejReason"></param>
		///<param name="_numOfMatch"></param>
		///<param name="_cancelledVol"></param>
		///<param name="_createdDateTime">Created date time</param>
		///<param name="_updatedDateTime">Updated date time</param>
		public static ConditionOrderDetail CreateConditionOrderDetail(int _volume, int _matchedVolume, System.Decimal? _avgPrice, 
			System.Int16? _orderStatus, long _conditionOrderId, System.Int32? _fisOrderId, 
			System.Int32? _ordRejReason, System.Int32? _numOfMatch, System.Int32? _cancelledVol, 
			System.DateTime _createdDateTime, System.DateTime? _updatedDateTime)
		{
			ConditionOrderDetail newConditionOrderDetail = new ConditionOrderDetail();
			newConditionOrderDetail.Volume = _volume;
			newConditionOrderDetail.MatchedVolume = _matchedVolume;
			newConditionOrderDetail.AvgPrice = _avgPrice;
			newConditionOrderDetail.OrderStatus = _orderStatus;
			newConditionOrderDetail.ConditionOrderId = _conditionOrderId;
			newConditionOrderDetail.FisOrderId = _fisOrderId;
			newConditionOrderDetail.OrdRejReason = _ordRejReason;
			newConditionOrderDetail.NumOfMatch = _numOfMatch;
			newConditionOrderDetail.CancelledVol = _cancelledVol;
			newConditionOrderDetail.CreatedDateTime = _createdDateTime;
			newConditionOrderDetail.UpdatedDateTime = _updatedDateTime;
			return newConditionOrderDetail;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the DetailId property. 
		///		Auto increase key
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@"Auto increase key"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual long DetailId
		{
			get
			{
				return this.entityData.DetailId; 
			}
			
			set
			{
				if (this.entityData.DetailId == value)
					return;
					
				OnColumnChanging(ConditionOrderDetailColumn.DetailId, this.entityData.DetailId);
				this.entityData.DetailId = value;
				this.EntityId.DetailId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ConditionOrderDetailColumn.DetailId, this.entityData.DetailId);
				OnPropertyChanged("DetailId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Volume property. 
		///		Volume putted at that day
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Volume putted at that day"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public override int Volume
		{
			get
			{
				return this.entityData.Volume; 
			}
			
			set
			{
				if (this.entityData.Volume == value)
					return;
					
				OnColumnChanging(ConditionOrderDetailColumn.Volume, this.entityData.Volume);
				this.entityData.Volume = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ConditionOrderDetailColumn.Volume, this.entityData.Volume);
				OnPropertyChanged("Volume");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MatchedVolume property. 
		///		MatchedVolume at that day
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"MatchedVolume at that day"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual int MatchedVolume
		{
			get
			{
				return this.entityData.MatchedVolume; 
			}
			
			set
			{
				if (this.entityData.MatchedVolume == value)
					return;
					
				OnColumnChanging(ConditionOrderDetailColumn.MatchedVolume, this.entityData.MatchedVolume);
				this.entityData.MatchedVolume = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ConditionOrderDetailColumn.MatchedVolume, this.entityData.MatchedVolume);
				OnPropertyChanged("MatchedVolume");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AvgPrice property. 
		///		Average price
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAvgPriceNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Average price"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AvgPrice
		{
			get
			{
				return this.entityData.AvgPrice; 
			}
			
			set
			{
				if (this.entityData.AvgPrice == value)
					return;
					
				OnColumnChanging(ConditionOrderDetailColumn.AvgPrice, this.entityData.AvgPrice);
				this.entityData.AvgPrice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ConditionOrderDetailColumn.AvgPrice, this.entityData.AvgPrice);
				OnPropertyChanged("AvgPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OrderStatus property. 
		///		Status of order
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsOrderStatusNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Status of order"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? OrderStatus
		{
			get
			{
				return this.entityData.OrderStatus; 
			}
			
			set
			{
				if (this.entityData.OrderStatus == value)
					return;
					
				OnColumnChanging(ConditionOrderDetailColumn.OrderStatus, this.entityData.OrderStatus);
				this.entityData.OrderStatus = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ConditionOrderDetailColumn.OrderStatus, this.entityData.OrderStatus);
				OnPropertyChanged("OrderStatus");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ConditionOrderId property. 
		///		Foreign key to ConditionOrder table
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Foreign key to ConditionOrder table"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual long ConditionOrderId
		{
			get
			{
				return this.entityData.ConditionOrderId; 
			}
			
			set
			{
				if (this.entityData.ConditionOrderId == value)
					return;
					
				OnColumnChanging(ConditionOrderDetailColumn.ConditionOrderId, this.entityData.ConditionOrderId);
				this.entityData.ConditionOrderId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ConditionOrderDetailColumn.ConditionOrderId, this.entityData.ConditionOrderId);
				OnPropertyChanged("ConditionOrderId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FisOrderId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsFisOrderIdNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? FisOrderId
		{
			get
			{
				return this.entityData.FisOrderId; 
			}
			
			set
			{
				if (this.entityData.FisOrderId == value)
					return;
					
				OnColumnChanging(ConditionOrderDetailColumn.FisOrderId, this.entityData.FisOrderId);
				this.entityData.FisOrderId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ConditionOrderDetailColumn.FisOrderId, this.entityData.FisOrderId);
				OnPropertyChanged("FisOrderId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OrdRejReason property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsOrdRejReasonNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? OrdRejReason
		{
			get
			{
				return this.entityData.OrdRejReason; 
			}
			
			set
			{
				if (this.entityData.OrdRejReason == value)
					return;
					
				OnColumnChanging(ConditionOrderDetailColumn.OrdRejReason, this.entityData.OrdRejReason);
				this.entityData.OrdRejReason = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ConditionOrderDetailColumn.OrdRejReason, this.entityData.OrdRejReason);
				OnPropertyChanged("OrdRejReason");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NumOfMatch property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsNumOfMatchNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? NumOfMatch
		{
			get
			{
				return this.entityData.NumOfMatch; 
			}
			
			set
			{
				if (this.entityData.NumOfMatch == value)
					return;
					
				OnColumnChanging(ConditionOrderDetailColumn.NumOfMatch, this.entityData.NumOfMatch);
				this.entityData.NumOfMatch = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ConditionOrderDetailColumn.NumOfMatch, this.entityData.NumOfMatch);
				OnPropertyChanged("NumOfMatch");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CancelledVol property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCancelledVolNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CancelledVol
		{
			get
			{
				return this.entityData.CancelledVol; 
			}
			
			set
			{
				if (this.entityData.CancelledVol == value)
					return;
					
				OnColumnChanging(ConditionOrderDetailColumn.CancelledVol, this.entityData.CancelledVol);
				this.entityData.CancelledVol = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ConditionOrderDetailColumn.CancelledVol, this.entityData.CancelledVol);
				OnPropertyChanged("CancelledVol");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedDateTime property. 
		///		Created date time
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Created date time"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime CreatedDateTime
		{
			get
			{
				return this.entityData.CreatedDateTime; 
			}
			
			set
			{
				if (this.entityData.CreatedDateTime == value)
					return;
					
				OnColumnChanging(ConditionOrderDetailColumn.CreatedDateTime, this.entityData.CreatedDateTime);
				this.entityData.CreatedDateTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ConditionOrderDetailColumn.CreatedDateTime, this.entityData.CreatedDateTime);
				OnPropertyChanged("CreatedDateTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdatedDateTime property. 
		///		Updated date time
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsUpdatedDateTimeNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Updated date time"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? UpdatedDateTime
		{
			get
			{
				return this.entityData.UpdatedDateTime; 
			}
			
			set
			{
				if (this.entityData.UpdatedDateTime == value)
					return;
					
				OnColumnChanging(ConditionOrderDetailColumn.UpdatedDateTime, this.entityData.UpdatedDateTime);
				this.entityData.UpdatedDateTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ConditionOrderDetailColumn.UpdatedDateTime, this.entityData.UpdatedDateTime);
				OnPropertyChanged("UpdatedDateTime");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="ConditionOrder"/>.
		/// </summary>
		/// <value>The source ConditionOrder for ConditionOrderId.</value>
        [XmlIgnore()]
        [ScriptIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ConditionOrder ConditionOrderIdSource
      	{
            get { return entityData.ConditionOrderIdSource; }
            set { entityData.ConditionOrderIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public override string TableName
		{
			get { return "ConditionOrderDetail"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"DetailId", "Volume", "MatchedVolume", "AvgPrice", "OrderStatus", "ConditionOrderID", "FISOrderID", "OrdRejReason", "NumOfMatch", "CancelledVol", "CreatedDateTime", "UpdatedDateTime"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ConditionOrderDetailEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ConditionOrderDetail) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
        [ScriptIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ConditionOrderDetail>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ConditionOrderDetail);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ConditionOrderDetail Entity 
		///</summary>
		protected virtual ConditionOrderDetail Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			ConditionOrderDetail copy = new ConditionOrderDetail();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.DetailId = this.DetailId;
				copy.Volume = this.Volume;
				copy.MatchedVolume = this.MatchedVolume;
				copy.AvgPrice = this.AvgPrice;
				copy.OrderStatus = this.OrderStatus;
				copy.ConditionOrderId = this.ConditionOrderId;
				copy.FisOrderId = this.FisOrderId;
				copy.OrdRejReason = this.OrdRejReason;
				copy.NumOfMatch = this.NumOfMatch;
				copy.CancelledVol = this.CancelledVol;
				copy.CreatedDateTime = this.CreatedDateTime;
				copy.UpdatedDateTime = this.UpdatedDateTime;
			
			if (this.ConditionOrderIdSource != null && existingCopies.Contains(this.ConditionOrderIdSource))
				copy.ConditionOrderIdSource = existingCopies[this.ConditionOrderIdSource] as ConditionOrder;
			else
				copy.ConditionOrderIdSource = MakeCopyOf(this.ConditionOrderIdSource, existingCopies) as ConditionOrder;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed ConditionOrderDetail Entity 
		///</summary>
		public virtual ConditionOrderDetail Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed ConditionOrderDetail Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ConditionOrderDetail DeepCopy()
		{
			return EntityHelper.Clone<ConditionOrderDetail>(this as ConditionOrderDetail);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ConditionOrderDetailEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ConditionOrderDetailEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ConditionOrderDetailEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ConditionOrderDetailColumn column)
		{
			switch(column)
			{
					case ConditionOrderDetailColumn.DetailId:
					return entityData.DetailId != _originalData.DetailId;
					case ConditionOrderDetailColumn.Volume:
					return entityData.Volume != _originalData.Volume;
					case ConditionOrderDetailColumn.MatchedVolume:
					return entityData.MatchedVolume != _originalData.MatchedVolume;
					case ConditionOrderDetailColumn.AvgPrice:
					return entityData.AvgPrice != _originalData.AvgPrice;
					case ConditionOrderDetailColumn.OrderStatus:
					return entityData.OrderStatus != _originalData.OrderStatus;
					case ConditionOrderDetailColumn.ConditionOrderId:
					return entityData.ConditionOrderId != _originalData.ConditionOrderId;
					case ConditionOrderDetailColumn.FisOrderId:
					return entityData.FisOrderId != _originalData.FisOrderId;
					case ConditionOrderDetailColumn.OrdRejReason:
					return entityData.OrdRejReason != _originalData.OrdRejReason;
					case ConditionOrderDetailColumn.NumOfMatch:
					return entityData.NumOfMatch != _originalData.NumOfMatch;
					case ConditionOrderDetailColumn.CancelledVol:
					return entityData.CancelledVol != _originalData.CancelledVol;
					case ConditionOrderDetailColumn.CreatedDateTime:
					return entityData.CreatedDateTime != _originalData.CreatedDateTime;
					case ConditionOrderDetailColumn.UpdatedDateTime:
					return entityData.UpdatedDateTime != _originalData.UpdatedDateTime;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ConditionOrderDetailColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.DetailId != _originalData.DetailId;
			result = result || entityData.Volume != _originalData.Volume;
			result = result || entityData.MatchedVolume != _originalData.MatchedVolume;
			result = result || entityData.AvgPrice != _originalData.AvgPrice;
			result = result || entityData.OrderStatus != _originalData.OrderStatus;
			result = result || entityData.ConditionOrderId != _originalData.ConditionOrderId;
			result = result || entityData.FisOrderId != _originalData.FisOrderId;
			result = result || entityData.OrdRejReason != _originalData.OrdRejReason;
			result = result || entityData.NumOfMatch != _originalData.NumOfMatch;
			result = result || entityData.CancelledVol != _originalData.CancelledVol;
			result = result || entityData.CreatedDateTime != _originalData.CreatedDateTime;
			result = result || entityData.UpdatedDateTime != _originalData.UpdatedDateTime;
			return result;
		}	
		
		///<summary>
		///  Returns a ConditionOrderDetail Entity with the original data.
		///</summary>
		public ConditionOrderDetail GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateConditionOrderDetail(
				_originalData.Volume,
				_originalData.MatchedVolume,
				_originalData.AvgPrice,
				_originalData.OrderStatus,
				_originalData.ConditionOrderId,
				_originalData.FisOrderId,
				_originalData.OrdRejReason,
				_originalData.NumOfMatch,
				_originalData.CancelledVol,
				_originalData.CreatedDateTime,
				_originalData.UpdatedDateTime
				);
				
			return (ConditionOrderDetail)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ConditionOrderDetailBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ConditionOrderDetailBase)
				return ValueEquals(this, (ConditionOrderDetailBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ConditionOrderDetailBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.DetailId.GetHashCode() ^ 
					this.Volume.GetHashCode() ^ 
					this.MatchedVolume.GetHashCode() ^ 
					((this.AvgPrice == null) ? string.Empty : this.AvgPrice.ToString()).GetHashCode() ^ 
					((this.OrderStatus == null) ? string.Empty : this.OrderStatus.ToString()).GetHashCode() ^ 
					this.ConditionOrderId.GetHashCode() ^ 
					((this.FisOrderId == null) ? string.Empty : this.FisOrderId.ToString()).GetHashCode() ^ 
					((this.OrdRejReason == null) ? string.Empty : this.OrdRejReason.ToString()).GetHashCode() ^ 
					((this.NumOfMatch == null) ? string.Empty : this.NumOfMatch.ToString()).GetHashCode() ^ 
					((this.CancelledVol == null) ? string.Empty : this.CancelledVol.ToString()).GetHashCode() ^ 
					this.CreatedDateTime.GetHashCode() ^ 
					((this.UpdatedDateTime == null) ? string.Empty : this.UpdatedDateTime.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ConditionOrderDetailBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ConditionOrderDetailBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ConditionOrderDetailBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ConditionOrderDetailBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ConditionOrderDetailBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ConditionOrderDetailBase Object1, ConditionOrderDetailBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.DetailId != Object2.DetailId)
				equal = false;
			if (Object1.Volume != Object2.Volume)
				equal = false;
			if (Object1.MatchedVolume != Object2.MatchedVolume)
				equal = false;
			if ( Object1.AvgPrice != null && Object2.AvgPrice != null )
			{
				if (Object1.AvgPrice != Object2.AvgPrice)
					equal = false;
			}
			else if (Object1.AvgPrice == null ^ Object2.AvgPrice == null )
			{
				equal = false;
			}
			if ( Object1.OrderStatus != null && Object2.OrderStatus != null )
			{
				if (Object1.OrderStatus != Object2.OrderStatus)
					equal = false;
			}
			else if (Object1.OrderStatus == null ^ Object2.OrderStatus == null )
			{
				equal = false;
			}
			if (Object1.ConditionOrderId != Object2.ConditionOrderId)
				equal = false;
			if ( Object1.FisOrderId != null && Object2.FisOrderId != null )
			{
				if (Object1.FisOrderId != Object2.FisOrderId)
					equal = false;
			}
			else if (Object1.FisOrderId == null ^ Object2.FisOrderId == null )
			{
				equal = false;
			}
			if ( Object1.OrdRejReason != null && Object2.OrdRejReason != null )
			{
				if (Object1.OrdRejReason != Object2.OrdRejReason)
					equal = false;
			}
			else if (Object1.OrdRejReason == null ^ Object2.OrdRejReason == null )
			{
				equal = false;
			}
			if ( Object1.NumOfMatch != null && Object2.NumOfMatch != null )
			{
				if (Object1.NumOfMatch != Object2.NumOfMatch)
					equal = false;
			}
			else if (Object1.NumOfMatch == null ^ Object2.NumOfMatch == null )
			{
				equal = false;
			}
			if ( Object1.CancelledVol != null && Object2.CancelledVol != null )
			{
				if (Object1.CancelledVol != Object2.CancelledVol)
					equal = false;
			}
			else if (Object1.CancelledVol == null ^ Object2.CancelledVol == null )
			{
				equal = false;
			}
			if (Object1.CreatedDateTime != Object2.CreatedDateTime)
				equal = false;
			if ( Object1.UpdatedDateTime != null && Object2.UpdatedDateTime != null )
			{
				if (Object1.UpdatedDateTime != Object2.UpdatedDateTime)
					equal = false;
			}
			else if (Object1.UpdatedDateTime == null ^ Object2.UpdatedDateTime == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ConditionOrderDetailBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ConditionOrderDetailComparer GetComparer()
        {
            return new ConditionOrderDetailComparer();
        }
        */

        // Comparer delegates back to ConditionOrderDetail
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ConditionOrderDetail rhs, ConditionOrderDetailColumn which)
        {
            switch (which)
            {
            	
            	
            	case ConditionOrderDetailColumn.DetailId:
            		return this.DetailId.CompareTo(rhs.DetailId);
            		
            		                 
            	
            	
            	case ConditionOrderDetailColumn.Volume:
            		return this.Volume.CompareTo(rhs.Volume);
            		
            		                 
            	
            	
            	case ConditionOrderDetailColumn.MatchedVolume:
            		return this.MatchedVolume.CompareTo(rhs.MatchedVolume);
            		
            		                 
            	
            	
            	case ConditionOrderDetailColumn.AvgPrice:
            		return this.AvgPrice.Value.CompareTo(rhs.AvgPrice.Value);
            		
            		                 
            	
            	
            	case ConditionOrderDetailColumn.OrderStatus:
            		return this.OrderStatus.Value.CompareTo(rhs.OrderStatus.Value);
            		
            		                 
            	
            	
            	case ConditionOrderDetailColumn.ConditionOrderId:
            		return this.ConditionOrderId.CompareTo(rhs.ConditionOrderId);
            		
            		                 
            	
            	
            	case ConditionOrderDetailColumn.FisOrderId:
            		return this.FisOrderId.Value.CompareTo(rhs.FisOrderId.Value);
            		
            		                 
            	
            	
            	case ConditionOrderDetailColumn.OrdRejReason:
            		return this.OrdRejReason.Value.CompareTo(rhs.OrdRejReason.Value);
            		
            		                 
            	
            	
            	case ConditionOrderDetailColumn.NumOfMatch:
            		return this.NumOfMatch.Value.CompareTo(rhs.NumOfMatch.Value);
            		
            		                 
            	
            	
            	case ConditionOrderDetailColumn.CancelledVol:
            		return this.CancelledVol.Value.CompareTo(rhs.CancelledVol.Value);
            		
            		                 
            	
            	
            	case ConditionOrderDetailColumn.CreatedDateTime:
            		return this.CreatedDateTime.CompareTo(rhs.CreatedDateTime);
            		
            		                 
            	
            	
            	case ConditionOrderDetailColumn.UpdatedDateTime:
            		return this.UpdatedDateTime.Value.CompareTo(rhs.UpdatedDateTime.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
        [ScriptIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ConditionOrderDetailKey> Members
		
		// member variable for the EntityId property
		private ConditionOrderDetailKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
        [ScriptIgnore]
		public virtual ConditionOrderDetailKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ConditionOrderDetailKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute(), ScriptIgnore()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
        [ScriptIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ConditionOrderDetail")
					.Append("|").Append( this.DetailId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- DetailId: {0}{12}- Volume: {1}{12}- MatchedVolume: {2}{12}- AvgPrice: {3}{12}- OrderStatus: {4}{12}- ConditionOrderId: {5}{12}- FisOrderId: {6}{12}- OrdRejReason: {7}{12}- NumOfMatch: {8}{12}- CancelledVol: {9}{12}- CreatedDateTime: {10}{12}- UpdatedDateTime: {11}{12}{14}", 
				this.DetailId,
				this.Volume,
				this.MatchedVolume,
				(this.AvgPrice == null) ? string.Empty : this.AvgPrice.ToString(),
				(this.OrderStatus == null) ? string.Empty : this.OrderStatus.ToString(),
				this.ConditionOrderId,
				(this.FisOrderId == null) ? string.Empty : this.FisOrderId.ToString(),
				(this.OrdRejReason == null) ? string.Empty : this.OrdRejReason.ToString(),
				(this.NumOfMatch == null) ? string.Empty : this.NumOfMatch.ToString(),
				(this.CancelledVol == null) ? string.Empty : this.CancelledVol.ToString(),
				this.CreatedDateTime,
				(this.UpdatedDateTime == null) ? string.Empty : this.UpdatedDateTime.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ConditionOrderDetail' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ConditionOrderDetailEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// DetailId : Auto increase key
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ConditionOrderDetail"</remarks>
		public long DetailId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// Volume : Volume putted at that day
		/// </summary>
		public int		  Volume = (int)0;
		
		/// <summary>
		/// MatchedVolume : MatchedVolume at that day
		/// </summary>
		public int		  MatchedVolume = (int)0;
		
		/// <summary>
		/// AvgPrice : Average price
		/// </summary>
		public System.Decimal?		  AvgPrice = null;
		
		/// <summary>
		/// OrderStatus : Status of order
		/// </summary>
		public System.Int16?		  OrderStatus = null;
		
		/// <summary>
		/// ConditionOrderID : Foreign key to ConditionOrder table
		/// </summary>
		public long		  ConditionOrderId = (long)0;
		
		/// <summary>
		/// FISOrderID : 
		/// </summary>
		public System.Int32?		  FisOrderId = null;
		
		/// <summary>
		/// OrdRejReason : 
		/// </summary>
		public System.Int32?		  OrdRejReason = null;
		
		/// <summary>
		/// NumOfMatch : 
		/// </summary>
		public System.Int32?		  NumOfMatch = null;
		
		/// <summary>
		/// CancelledVol : 
		/// </summary>
		public System.Int32?		  CancelledVol = null;
		
		/// <summary>
		/// CreatedDateTime : Created date time
		/// </summary>
		public System.DateTime		  CreatedDateTime = DateTime.MinValue;
		
		/// <summary>
		/// UpdatedDateTime : Updated date time
		/// </summary>
		public System.DateTime?		  UpdatedDateTime = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private ConditionOrder _conditionOrderIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ConditionOrder"/>.
		/// </summary>
		/// <value>The source ConditionOrder for ConditionOrderId.</value>
		[XmlIgnore()]
        [ScriptIgnore()]
		[Browsable(false)]
		public virtual ConditionOrder ConditionOrderIdSource
      	{
            get { return this._conditionOrderIdSource; }
            set { this._conditionOrderIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ConditionOrderDetailEntityData _tmp = new ConditionOrderDetailEntityData();
						
			_tmp.DetailId = this.DetailId;
			
			_tmp.Volume = this.Volume;
			_tmp.MatchedVolume = this.MatchedVolume;
			_tmp.AvgPrice = this.AvgPrice;
			_tmp.OrderStatus = this.OrderStatus;
			_tmp.ConditionOrderId = this.ConditionOrderId;
			_tmp.FisOrderId = this.FisOrderId;
			_tmp.OrdRejReason = this.OrdRejReason;
			_tmp.NumOfMatch = this.NumOfMatch;
			_tmp.CancelledVol = this.CancelledVol;
			_tmp.CreatedDateTime = this.CreatedDateTime;
			_tmp.UpdatedDateTime = this.UpdatedDateTime;
			
			#region Source Parent Composite Entities
			if (this.ConditionOrderIdSource != null)
				_tmp.ConditionOrderIdSource = MakeCopyOf(this.ConditionOrderIdSource) as ConditionOrder;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ConditionOrderDetailEntityData _tmp = new ConditionOrderDetailEntityData();
						
			_tmp.DetailId = this.DetailId;
			
			_tmp.Volume = this.Volume;
			_tmp.MatchedVolume = this.MatchedVolume;
			_tmp.AvgPrice = this.AvgPrice;
			_tmp.OrderStatus = this.OrderStatus;
			_tmp.ConditionOrderId = this.ConditionOrderId;
			_tmp.FisOrderId = this.FisOrderId;
			_tmp.OrdRejReason = this.OrdRejReason;
			_tmp.NumOfMatch = this.NumOfMatch;
			_tmp.CancelledVol = this.CancelledVol;
			_tmp.CreatedDateTime = this.CreatedDateTime;
			_tmp.UpdatedDateTime = this.UpdatedDateTime;
			
			#region Source Parent Composite Entities
			if (this.ConditionOrderIdSource != null && existingCopies.Contains(this.ConditionOrderIdSource))
				_tmp.ConditionOrderIdSource = existingCopies[this.ConditionOrderIdSource] as ConditionOrder;
			else
				_tmp.ConditionOrderIdSource = MakeCopyOf(this.ConditionOrderIdSource, existingCopies) as ConditionOrder;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ConditionOrderDetailColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ConditionOrderDetailColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ConditionOrderDetailColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ConditionOrderDetailColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ConditionOrderDetailColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ConditionOrderDetailColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ConditionOrderDetailEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ConditionOrderDetailEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ConditionOrderDetailColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ConditionOrderDetailColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ConditionOrderDetailEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ConditionOrderDetailEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ConditionOrderDetailEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ConditionOrderDetail"/> object.
	/// </remarks>
	public class ConditionOrderDetailEventArgs : System.EventArgs
	{
		private ConditionOrderDetailColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ConditionOrderDetailEventArgs class.
		///</summary>
		public ConditionOrderDetailEventArgs(ConditionOrderDetailColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ConditionOrderDetailEventArgs class.
		///</summary>
		public ConditionOrderDetailEventArgs(ConditionOrderDetailColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ConditionOrderDetailColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ConditionOrderDetailColumn" />
		public ConditionOrderDetailColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ConditionOrderDetail related events.
	///</summary>
	public delegate void ConditionOrderDetailEventHandler(object sender, ConditionOrderDetailEventArgs e);
	
	#region ConditionOrderDetailComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ConditionOrderDetailComparer : System.Collections.Generic.IComparer<ConditionOrderDetail>
	{
		ConditionOrderDetailColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ConditionOrderDetailComparer"/> class.
        /// </summary>
		public ConditionOrderDetailComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ConditionOrderDetailComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ConditionOrderDetailComparer(ConditionOrderDetailColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="ConditionOrderDetail"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="ConditionOrderDetail"/> to compare.</param>
        /// <param name="b">The second <c>ConditionOrderDetail</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ConditionOrderDetail a, ConditionOrderDetail b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ConditionOrderDetail entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ConditionOrderDetail a, ConditionOrderDetail b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ConditionOrderDetailColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ConditionOrderDetailKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ConditionOrderDetail"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ConditionOrderDetailKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ConditionOrderDetailKey class.
		/// </summary>
		public ConditionOrderDetailKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ConditionOrderDetailKey class.
		/// </summary>
		public ConditionOrderDetailKey(ConditionOrderDetailBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.DetailId = entity.DetailId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ConditionOrderDetailKey class.
		/// </summary>
		public ConditionOrderDetailKey(long _detailId)
		{
			#region Init Properties

			this.DetailId = _detailId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ConditionOrderDetailBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ConditionOrderDetailBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the DetailId property
		private long _detailId;
		
		/// <summary>
		/// Gets or sets the DetailId property.
		/// </summary>
		public long DetailId
		{
			get { return _detailId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.DetailId = value;
				
				_detailId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				DetailId = ( values["DetailId"] != null ) ? (long) EntityUtil.ChangeType(values["DetailId"], typeof(long)) : (long)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("DetailId", DetailId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("DetailId: {0}{1}",
								DetailId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ConditionOrderDetailColumn Enum
	
	/// <summary>
	/// Enumerate the ConditionOrderDetail columns.
	/// </summary>
	[Serializable]
	public enum ConditionOrderDetailColumn : int
	{
		/// <summary>
		/// DetailId : Auto increase key
		/// </summary>
		[EnumTextValue("DetailId")]
		[ColumnEnum("DetailId", typeof(long), System.Data.DbType.Int64, true, true, false)]
		DetailId = 1,
		/// <summary>
		/// Volume : Volume putted at that day
		/// </summary>
		[EnumTextValue("Volume")]
		[ColumnEnum("Volume", typeof(int), System.Data.DbType.Int32, false, false, false)]
		Volume = 2,
		/// <summary>
		/// MatchedVolume : MatchedVolume at that day
		/// </summary>
		[EnumTextValue("MatchedVolume")]
		[ColumnEnum("MatchedVolume", typeof(int), System.Data.DbType.Int32, false, false, false)]
		MatchedVolume = 3,
		/// <summary>
		/// AvgPrice : Average price
		/// </summary>
		[EnumTextValue("AvgPrice")]
		[ColumnEnum("AvgPrice", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AvgPrice = 4,
		/// <summary>
		/// OrderStatus : Status of order
		/// </summary>
		[EnumTextValue("OrderStatus")]
		[ColumnEnum("OrderStatus", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		OrderStatus = 5,
		/// <summary>
		/// ConditionOrderId : Foreign key to ConditionOrder table
		/// </summary>
		[EnumTextValue("ConditionOrderID")]
		[ColumnEnum("ConditionOrderID", typeof(long), System.Data.DbType.Int64, false, false, false)]
		ConditionOrderId = 6,
		/// <summary>
		/// FisOrderId : 
		/// </summary>
		[EnumTextValue("FISOrderID")]
		[ColumnEnum("FISOrderID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		FisOrderId = 7,
		/// <summary>
		/// OrdRejReason : 
		/// </summary>
		[EnumTextValue("OrdRejReason")]
		[ColumnEnum("OrdRejReason", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		OrdRejReason = 8,
		/// <summary>
		/// NumOfMatch : 
		/// </summary>
		[EnumTextValue("NumOfMatch")]
		[ColumnEnum("NumOfMatch", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		NumOfMatch = 9,
		/// <summary>
		/// CancelledVol : 
		/// </summary>
		[EnumTextValue("CancelledVol")]
		[ColumnEnum("CancelledVol", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CancelledVol = 10,
		/// <summary>
		/// CreatedDateTime : Created date time
		/// </summary>
		[EnumTextValue("CreatedDateTime")]
		[ColumnEnum("CreatedDateTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		CreatedDateTime = 11,
		/// <summary>
		/// UpdatedDateTime : Updated date time
		/// </summary>
		[EnumTextValue("UpdatedDateTime")]
		[ColumnEnum("UpdatedDateTime", typeof(System.DateTime?), System.Data.DbType.DateTime, false, false, true)]
		UpdatedDateTime = 12
	}//End enum

	#endregion ConditionOrderDetailColumn Enum

} // end namespace
