
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file QuickOrder.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Web.Script.Serialization;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using ETradeOrders.Entities.Validation;
#endregion

namespace ETradeOrders.Entities
{
	///<summary>
	/// An object representation of the 'QuickOrder' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class QuickOrderBase : EntityBase, IQuickOrder, IEntityId<QuickOrderKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private QuickOrderEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private QuickOrderEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private QuickOrderEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<QuickOrder> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event QuickOrderEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event QuickOrderEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="QuickOrderBase"/> instance.
		///</summary>
		public QuickOrderBase()
		{
			this.entityData = new QuickOrderEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="QuickOrderBase"/> instance.
		///</summary>
		///<param name="_secSymbol">Ma chung khoan</param>
		///<param name="_side">B = Mua, S = Ban</param>
		///<param name="_volume">Khoi luong co phieu mua hay ban</param>
		///<param name="_subCustAccountId">Tai khoan thuc hien giao dich</param>
		///<param name="_market">Thi truong</param>
		///<param name="_tradeTime">Ngày gi? d?t l?nh</param>
		///<param name="_typeOfQuick">Loai Dieu kien (0: dieu kien index, 1: dieu kien gia chung khoan, 2: dieu kien ATO, 3: dieu kien ATC)</param>
		///<param name="_status">Tr?ng thái c?a l?nh d?t nhanh, dã du?c d?y vào h? th?ng hay dang ch?.</param>
		public QuickOrderBase(System.String _secSymbol, System.String _side, System.Int32 _volume, 
			System.String _subCustAccountId, System.String _market, System.DateTime _tradeTime, System.Int16? _typeOfQuick, 
			System.String _status)
		{
			this.entityData = new QuickOrderEntityData();
			this.backupData = null;

			this.SecSymbol = _secSymbol;
			this.Side = _side;
			this.Volume = _volume;
			this.SubCustAccountId = _subCustAccountId;
			this.Market = _market;
			this.TradeTime = _tradeTime;
			this.TypeOfQuick = _typeOfQuick;
			this.Status = _status;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="QuickOrder"/> instance.
		///</summary>
		///<param name="_secSymbol">Ma chung khoan</param>
		///<param name="_side">B = Mua, S = Ban</param>
		///<param name="_volume">Khoi luong co phieu mua hay ban</param>
		///<param name="_subCustAccountId">Tai khoan thuc hien giao dich</param>
		///<param name="_market">Thi truong</param>
		///<param name="_tradeTime">Ngày gi? d?t l?nh</param>
		///<param name="_typeOfQuick">Loai Dieu kien (0: dieu kien index, 1: dieu kien gia chung khoan, 2: dieu kien ATO, 3: dieu kien ATC)</param>
		///<param name="_status">Tr?ng thái c?a l?nh d?t nhanh, dã du?c d?y vào h? th?ng hay dang ch?.</param>
		public static QuickOrder CreateQuickOrder(System.String _secSymbol, System.String _side, System.Int32 _volume, 
			System.String _subCustAccountId, System.String _market, System.DateTime _tradeTime, System.Int16? _typeOfQuick, 
			System.String _status)
		{
			QuickOrder newQuickOrder = new QuickOrder();
			newQuickOrder.SecSymbol = _secSymbol;
			newQuickOrder.Side = _side;
			newQuickOrder.Volume = _volume;
			newQuickOrder.SubCustAccountId = _subCustAccountId;
			newQuickOrder.Market = _market;
			newQuickOrder.TradeTime = _tradeTime;
			newQuickOrder.TypeOfQuick = _typeOfQuick;
			newQuickOrder.Status = _status;
			return newQuickOrder;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the QuickOrderId property. 
		///		QuickOrderID identifies QuickOrder
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@"QuickOrderID identifies QuickOrder"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 QuickOrderId
		{
			get
			{
				return this.entityData.QuickOrderId; 
			}
			
			set
			{
				if (this.entityData.QuickOrderId == value)
					return;
					
				OnColumnChanging(QuickOrderColumn.QuickOrderId, this.entityData.QuickOrderId);
				this.entityData.QuickOrderId = value;
				this.EntityId.QuickOrderId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuickOrderColumn.QuickOrderId, this.entityData.QuickOrderId);
				OnPropertyChanged("QuickOrderId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SecSymbol property. 
		///		Ma chung khoan
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Ma chung khoan"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 8)]
		public virtual System.String SecSymbol
		{
			get
			{
				return this.entityData.SecSymbol; 
			}
			
			set
			{
				if (this.entityData.SecSymbol == value)
					return;
					
				OnColumnChanging(QuickOrderColumn.SecSymbol, this.entityData.SecSymbol);
				this.entityData.SecSymbol = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuickOrderColumn.SecSymbol, this.entityData.SecSymbol);
				OnPropertyChanged("SecSymbol");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Side property. 
		///		B = Mua, S = Ban
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"B = Mua, S = Ban"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 1)]
		public virtual System.String Side
		{
			get
			{
				return this.entityData.Side; 
			}
			
			set
			{
				if (this.entityData.Side == value)
					return;
					
				OnColumnChanging(QuickOrderColumn.Side, this.entityData.Side);
				this.entityData.Side = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuickOrderColumn.Side, this.entityData.Side);
				OnPropertyChanged("Side");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Volume property. 
		///		Khoi luong co phieu mua hay ban
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Khoi luong co phieu mua hay ban"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public override System.Int32 Volume
		{
			get
			{
				return this.entityData.Volume; 
			}
			
			set
			{
				if (this.entityData.Volume == value)
					return;
					
				OnColumnChanging(QuickOrderColumn.Volume, this.entityData.Volume);
				this.entityData.Volume = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuickOrderColumn.Volume, this.entityData.Volume);
				OnPropertyChanged("Volume");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SubCustAccountId property. 
		///		Tai khoan thuc hien giao dich
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Tai khoan thuc hien giao dich"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual System.String SubCustAccountId
		{
			get
			{
				return this.entityData.SubCustAccountId; 
			}
			
			set
			{
				if (this.entityData.SubCustAccountId == value)
					return;
					
				OnColumnChanging(QuickOrderColumn.SubCustAccountId, this.entityData.SubCustAccountId);
				this.entityData.SubCustAccountId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuickOrderColumn.SubCustAccountId, this.entityData.SubCustAccountId);
				OnPropertyChanged("SubCustAccountId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Market property. 
		///		Thi truong
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Thi truong"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 1)]
		public virtual System.String Market
		{
			get
			{
				return this.entityData.Market; 
			}
			
			set
			{
				if (this.entityData.Market == value)
					return;
					
				OnColumnChanging(QuickOrderColumn.Market, this.entityData.Market);
				this.entityData.Market = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuickOrderColumn.Market, this.entityData.Market);
				OnPropertyChanged("Market");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TradeTime property. 
		///		Ngày gi? d?t l?nh
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Ngày gi? d?t l?nh"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime TradeTime
		{
			get
			{
				return this.entityData.TradeTime; 
			}
			
			set
			{
				if (this.entityData.TradeTime == value)
					return;
					
				OnColumnChanging(QuickOrderColumn.TradeTime, this.entityData.TradeTime);
				this.entityData.TradeTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuickOrderColumn.TradeTime, this.entityData.TradeTime);
				OnPropertyChanged("TradeTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TypeOfQuick property. 
		///		Loai Dieu kien (0: dieu kien index, 1: dieu kien gia chung khoan, 2: dieu kien ATO, 3: dieu kien ATC)
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsTypeOfQuickNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Loai Dieu kien (0: dieu kien index, 1: dieu kien gia chung khoan, 2: dieu kien ATO, 3: dieu kien ATC)"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? TypeOfQuick
		{
			get
			{
				return this.entityData.TypeOfQuick; 
			}
			
			set
			{
				if (this.entityData.TypeOfQuick == value)
					return;
					
				OnColumnChanging(QuickOrderColumn.TypeOfQuick, this.entityData.TypeOfQuick);
				this.entityData.TypeOfQuick = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuickOrderColumn.TypeOfQuick, this.entityData.TypeOfQuick);
				OnPropertyChanged("TypeOfQuick");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		Tr?ng thái c?a l?nh d?t nhanh, dã du?c d?y vào h? th?ng hay dang ch?.
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Tr?ng thái c?a l?nh d?t nhanh, dã du?c d?y vào h? th?ng hay dang ch?."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
					
				OnColumnChanging(QuickOrderColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuickOrderColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of ExecOrder objects
		///	which are related to this object through the relation FK_ExecOrder_QuickOrder
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ExecOrder> ExecOrderCollection
		{
			get { return entityData.ExecOrderCollection; }
			set { entityData.ExecOrderCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("SecSymbol", "Sec Symbol"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SecSymbol", "Sec Symbol", 8));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Side", "Side"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Side", "Side", 1));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("SubCustAccountId", "Sub Cust Account Id"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SubCustAccountId", "Sub Cust Account Id", 20));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Market", "Market"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Market", "Market", 1));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Status", "Status", 1));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public override string TableName
		{
			get { return "QuickOrder"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"QuickOrderID", "SecSymbol", "Side", "Volume", "SubCustAccountID", "Market", "TradeTime", "TypeOfQuick", "Status"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as QuickOrderEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (QuickOrder) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
        [ScriptIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<QuickOrder>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as QuickOrder);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed QuickOrder Entity 
		///</summary>
		protected virtual QuickOrder Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			QuickOrder copy = new QuickOrder();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.QuickOrderId = this.QuickOrderId;
				copy.SecSymbol = this.SecSymbol;
				copy.Side = this.Side;
				copy.Volume = this.Volume;
				copy.SubCustAccountId = this.SubCustAccountId;
				copy.Market = this.Market;
				copy.TradeTime = this.TradeTime;
				copy.TypeOfQuick = this.TypeOfQuick;
				copy.Status = this.Status;
			
		
			//deep copy nested objects
			copy.ExecOrderCollection = (TList<ExecOrder>) MakeCopyOf(this.ExecOrderCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed QuickOrder Entity 
		///</summary>
		public virtual QuickOrder Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed QuickOrder Entity which is a deep copy of the current entity.
		///</summary>
		public virtual QuickOrder DeepCopy()
		{
			return EntityHelper.Clone<QuickOrder>(this as QuickOrder);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as QuickOrderEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new QuickOrderEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as QuickOrderEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(QuickOrderColumn column)
		{
			switch(column)
			{
					case QuickOrderColumn.QuickOrderId:
					return entityData.QuickOrderId != _originalData.QuickOrderId;
					case QuickOrderColumn.SecSymbol:
					return entityData.SecSymbol != _originalData.SecSymbol;
					case QuickOrderColumn.Side:
					return entityData.Side != _originalData.Side;
					case QuickOrderColumn.Volume:
					return entityData.Volume != _originalData.Volume;
					case QuickOrderColumn.SubCustAccountId:
					return entityData.SubCustAccountId != _originalData.SubCustAccountId;
					case QuickOrderColumn.Market:
					return entityData.Market != _originalData.Market;
					case QuickOrderColumn.TradeTime:
					return entityData.TradeTime != _originalData.TradeTime;
					case QuickOrderColumn.TypeOfQuick:
					return entityData.TypeOfQuick != _originalData.TypeOfQuick;
					case QuickOrderColumn.Status:
					return entityData.Status != _originalData.Status;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< QuickOrderColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.QuickOrderId != _originalData.QuickOrderId;
			result = result || entityData.SecSymbol != _originalData.SecSymbol;
			result = result || entityData.Side != _originalData.Side;
			result = result || entityData.Volume != _originalData.Volume;
			result = result || entityData.SubCustAccountId != _originalData.SubCustAccountId;
			result = result || entityData.Market != _originalData.Market;
			result = result || entityData.TradeTime != _originalData.TradeTime;
			result = result || entityData.TypeOfQuick != _originalData.TypeOfQuick;
			result = result || entityData.Status != _originalData.Status;
			return result;
		}	
		
		///<summary>
		///  Returns a QuickOrder Entity with the original data.
		///</summary>
		public QuickOrder GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateQuickOrder(
				_originalData.SecSymbol,
				_originalData.Side,
				_originalData.Volume,
				_originalData.SubCustAccountId,
				_originalData.Market,
				_originalData.TradeTime,
				_originalData.TypeOfQuick,
				_originalData.Status
				);
				
			return (QuickOrder)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="QuickOrderBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is QuickOrderBase)
				return ValueEquals(this, (QuickOrderBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="QuickOrderBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.QuickOrderId.GetHashCode() ^ 
					this.SecSymbol.GetHashCode() ^ 
					this.Side.GetHashCode() ^ 
					this.Volume.GetHashCode() ^ 
					this.SubCustAccountId.GetHashCode() ^ 
					this.Market.GetHashCode() ^ 
					this.TradeTime.GetHashCode() ^ 
					((this.TypeOfQuick == null) ? string.Empty : this.TypeOfQuick.ToString()).GetHashCode() ^ 
					((this.Status == null) ? string.Empty : this.Status.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="QuickOrderBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(QuickOrderBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="QuickOrderBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="QuickOrderBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="QuickOrderBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(QuickOrderBase Object1, QuickOrderBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.QuickOrderId != Object2.QuickOrderId)
				equal = false;
			if (Object1.SecSymbol != Object2.SecSymbol)
				equal = false;
			if (Object1.Side != Object2.Side)
				equal = false;
			if (Object1.Volume != Object2.Volume)
				equal = false;
			if (Object1.SubCustAccountId != Object2.SubCustAccountId)
				equal = false;
			if (Object1.Market != Object2.Market)
				equal = false;
			if (Object1.TradeTime != Object2.TradeTime)
				equal = false;
			if ( Object1.TypeOfQuick != null && Object2.TypeOfQuick != null )
			{
				if (Object1.TypeOfQuick != Object2.TypeOfQuick)
					equal = false;
			}
			else if (Object1.TypeOfQuick == null ^ Object2.TypeOfQuick == null )
			{
				equal = false;
			}
			if ( Object1.Status != null && Object2.Status != null )
			{
				if (Object1.Status != Object2.Status)
					equal = false;
			}
			else if (Object1.Status == null ^ Object2.Status == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((QuickOrderBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static QuickOrderComparer GetComparer()
        {
            return new QuickOrderComparer();
        }
        */

        // Comparer delegates back to QuickOrder
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(QuickOrder rhs, QuickOrderColumn which)
        {
            switch (which)
            {
            	
            	
            	case QuickOrderColumn.QuickOrderId:
            		return this.QuickOrderId.CompareTo(rhs.QuickOrderId);
            		
            		                 
            	
            	
            	case QuickOrderColumn.SecSymbol:
            		return this.SecSymbol.CompareTo(rhs.SecSymbol);
            		
            		                 
            	
            	
            	case QuickOrderColumn.Side:
            		return this.Side.CompareTo(rhs.Side);
            		
            		                 
            	
            	
            	case QuickOrderColumn.Volume:
            		return this.Volume.CompareTo(rhs.Volume);
            		
            		                 
            	
            	
            	case QuickOrderColumn.SubCustAccountId:
            		return this.SubCustAccountId.CompareTo(rhs.SubCustAccountId);
            		
            		                 
            	
            	
            	case QuickOrderColumn.Market:
            		return this.Market.CompareTo(rhs.Market);
            		
            		                 
            	
            	
            	case QuickOrderColumn.TradeTime:
            		return this.TradeTime.CompareTo(rhs.TradeTime);
            		
            		                 
            	
            	
            	case QuickOrderColumn.TypeOfQuick:
            		return this.TypeOfQuick.Value.CompareTo(rhs.TypeOfQuick.Value);
            		
            		                 
            	
            	
            	case QuickOrderColumn.Status:
            		return this.Status.CompareTo(rhs.Status);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
        [ScriptIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<QuickOrderKey> Members
		
		// member variable for the EntityId property
		private QuickOrderKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
        [ScriptIgnore]
		public virtual QuickOrderKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new QuickOrderKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute(), ScriptIgnore()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
        [ScriptIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("QuickOrder")
					.Append("|").Append( this.QuickOrderId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{10}{9}- QuickOrderId: {0}{9}- SecSymbol: {1}{9}- Side: {2}{9}- Volume: {3}{9}- SubCustAccountId: {4}{9}- Market: {5}{9}- TradeTime: {6}{9}- TypeOfQuick: {7}{9}- Status: {8}{9}{11}", 
				this.QuickOrderId,
				this.SecSymbol,
				this.Side,
				this.Volume,
				this.SubCustAccountId,
				this.Market,
				this.TradeTime,
				(this.TypeOfQuick == null) ? string.Empty : this.TypeOfQuick.ToString(),
				(this.Status == null) ? string.Empty : this.Status.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'QuickOrder' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class QuickOrderEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// QuickOrderID : QuickOrderID identifies QuickOrder
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "QuickOrder"</remarks>
		public System.Int32 QuickOrderId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SecSymbol : Ma chung khoan
		/// </summary>
		public System.String		  SecSymbol = string.Empty;
		
		/// <summary>
		/// Side : B = Mua, S = Ban
		/// </summary>
		public System.String		  Side = string.Empty;
		
		/// <summary>
		/// Volume : Khoi luong co phieu mua hay ban
		/// </summary>
		public System.Int32		  Volume = (int)0;
		
		/// <summary>
		/// SubCustAccountID : Tai khoan thuc hien giao dich
		/// </summary>
		public System.String		  SubCustAccountId = string.Empty;
		
		/// <summary>
		/// Market : Thi truong
		/// </summary>
		public System.String		  Market = string.Empty;
		
		/// <summary>
		/// TradeTime : Ngày gi? d?t l?nh
		/// </summary>
		public System.DateTime		  TradeTime = DateTime.MinValue;
		
		/// <summary>
		/// TypeOfQuick : Loai Dieu kien (0: dieu kien index, 1: dieu kien gia chung khoan, 2: dieu kien ATO, 3: dieu kien ATC)
		/// </summary>
		public System.Int16?		  TypeOfQuick = null;
		
		/// <summary>
		/// Status : Tr?ng thái c?a l?nh d?t nhanh, dã du?c d?y vào h? th?ng hay dang ch?.
		/// </summary>
		public System.String		  Status = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region ExecOrderCollection
		
		private TList<ExecOrder> _execOrderQuickOrderId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _execOrderQuickOrderId
		/// </summary>
		
		public TList<ExecOrder> ExecOrderCollection
		{
			get
			{
				if (_execOrderQuickOrderId == null)
				{
				_execOrderQuickOrderId = new TList<ExecOrder>();
				}
	
				return _execOrderQuickOrderId;
			}
			set { _execOrderQuickOrderId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			QuickOrderEntityData _tmp = new QuickOrderEntityData();
						
			_tmp.QuickOrderId = this.QuickOrderId;
			
			_tmp.SecSymbol = this.SecSymbol;
			_tmp.Side = this.Side;
			_tmp.Volume = this.Volume;
			_tmp.SubCustAccountId = this.SubCustAccountId;
			_tmp.Market = this.Market;
			_tmp.TradeTime = this.TradeTime;
			_tmp.TypeOfQuick = this.TypeOfQuick;
			_tmp.Status = this.Status;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._execOrderQuickOrderId != null)
				_tmp.ExecOrderCollection = (TList<ExecOrder>) MakeCopyOf(this.ExecOrderCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			QuickOrderEntityData _tmp = new QuickOrderEntityData();
						
			_tmp.QuickOrderId = this.QuickOrderId;
			
			_tmp.SecSymbol = this.SecSymbol;
			_tmp.Side = this.Side;
			_tmp.Volume = this.Volume;
			_tmp.SubCustAccountId = this.SubCustAccountId;
			_tmp.Market = this.Market;
			_tmp.TradeTime = this.TradeTime;
			_tmp.TypeOfQuick = this.TypeOfQuick;
			_tmp.Status = this.Status;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.ExecOrderCollection = (TList<ExecOrder>) MakeCopyOf(this.ExecOrderCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="QuickOrderColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(QuickOrderColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="QuickOrderColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(QuickOrderColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="QuickOrderColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(QuickOrderColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				QuickOrderEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new QuickOrderEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="QuickOrderColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(QuickOrderColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				QuickOrderEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new QuickOrderEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region QuickOrderEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="QuickOrder"/> object.
	/// </remarks>
	public class QuickOrderEventArgs : System.EventArgs
	{
		private QuickOrderColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the QuickOrderEventArgs class.
		///</summary>
		public QuickOrderEventArgs(QuickOrderColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the QuickOrderEventArgs class.
		///</summary>
		public QuickOrderEventArgs(QuickOrderColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The QuickOrderColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="QuickOrderColumn" />
		public QuickOrderColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all QuickOrder related events.
	///</summary>
	public delegate void QuickOrderEventHandler(object sender, QuickOrderEventArgs e);
	
	#region QuickOrderComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class QuickOrderComparer : System.Collections.Generic.IComparer<QuickOrder>
	{
		QuickOrderColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:QuickOrderComparer"/> class.
        /// </summary>
		public QuickOrderComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:QuickOrderComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public QuickOrderComparer(QuickOrderColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="QuickOrder"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="QuickOrder"/> to compare.</param>
        /// <param name="b">The second <c>QuickOrder</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(QuickOrder a, QuickOrder b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(QuickOrder entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(QuickOrder a, QuickOrder b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public QuickOrderColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region QuickOrderKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="QuickOrder"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class QuickOrderKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the QuickOrderKey class.
		/// </summary>
		public QuickOrderKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the QuickOrderKey class.
		/// </summary>
		public QuickOrderKey(QuickOrderBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.QuickOrderId = entity.QuickOrderId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the QuickOrderKey class.
		/// </summary>
		public QuickOrderKey(System.Int32 _quickOrderId)
		{
			#region Init Properties

			this.QuickOrderId = _quickOrderId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private QuickOrderBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public QuickOrderBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the QuickOrderId property
		private System.Int32 _quickOrderId;
		
		/// <summary>
		/// Gets or sets the QuickOrderId property.
		/// </summary>
		public System.Int32 QuickOrderId
		{
			get { return _quickOrderId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.QuickOrderId = value;
				
				_quickOrderId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				QuickOrderId = ( values["QuickOrderId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["QuickOrderId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("QuickOrderId", QuickOrderId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("QuickOrderId: {0}{1}",
								QuickOrderId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region QuickOrderColumn Enum
	
	/// <summary>
	/// Enumerate the QuickOrder columns.
	/// </summary>
	[Serializable]
	public enum QuickOrderColumn : int
	{
		/// <summary>
		/// QuickOrderId : QuickOrderID identifies QuickOrder
		/// </summary>
		[EnumTextValue("QuickOrderID")]
		[ColumnEnum("QuickOrderID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		QuickOrderId = 1,
		/// <summary>
		/// SecSymbol : Ma chung khoan
		/// </summary>
		[EnumTextValue("SecSymbol")]
		[ColumnEnum("SecSymbol", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 8)]
		SecSymbol = 2,
		/// <summary>
		/// Side : B = Mua, S = Ban
		/// </summary>
		[EnumTextValue("Side")]
		[ColumnEnum("Side", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 1)]
		Side = 3,
		/// <summary>
		/// Volume : Khoi luong co phieu mua hay ban
		/// </summary>
		[EnumTextValue("Volume")]
		[ColumnEnum("Volume", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		Volume = 4,
		/// <summary>
		/// SubCustAccountId : Tai khoan thuc hien giao dich
		/// </summary>
		[EnumTextValue("SubCustAccountID")]
		[ColumnEnum("SubCustAccountID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		SubCustAccountId = 5,
		/// <summary>
		/// Market : Thi truong
		/// </summary>
		[EnumTextValue("Market")]
		[ColumnEnum("Market", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 1)]
		Market = 6,
		/// <summary>
		/// TradeTime : Ngày gi? d?t l?nh
		/// </summary>
		[EnumTextValue("TradeTime")]
		[ColumnEnum("TradeTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		TradeTime = 7,
		/// <summary>
		/// TypeOfQuick : Loai Dieu kien (0: dieu kien index, 1: dieu kien gia chung khoan, 2: dieu kien ATO, 3: dieu kien ATC)
		/// </summary>
		[EnumTextValue("TypeOfQuick")]
		[ColumnEnum("TypeOfQuick", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		TypeOfQuick = 8,
		/// <summary>
		/// Status : Tr?ng thái c?a l?nh d?t nhanh, dã du?c d?y vào h? th?ng hay dang ch?.
		/// </summary>
		[EnumTextValue("Status")]
		[ColumnEnum("Status", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 1)]
		Status = 9
	}//End enum

	#endregion QuickOrderColumn Enum

} // end namespace
