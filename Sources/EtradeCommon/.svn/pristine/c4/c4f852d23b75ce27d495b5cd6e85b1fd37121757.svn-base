
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file ExecOrder.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Web.Script.Serialization;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using ETradeOrders.Entities.Validation;
#endregion

namespace ETradeOrders.Entities
{
	///<summary>
	/// An object representation of the 'ExecOrder' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class ExecOrderBase : EntityBase, IExecOrder, IEntityId<ExecOrderKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ExecOrderEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ExecOrderEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ExecOrderEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ExecOrder> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ExecOrderEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ExecOrderEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ExecOrderBase"/> instance.
		///</summary>
		public ExecOrderBase()
		{
			this.entityData = new ExecOrderEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ExecOrderBase"/> instance.
		///</summary>
		///<param name="_refOrderId">ID cua order duoc tao ra boi GW</param>
		///<param name="_messageType">Loai cua message (7a = new order, 7b = ack, 7e = lenh da thuc thi, 7c = cancel order, 6a = order tu broker, 7d = change order, 6d = change tu broker, 3D = cancel deal )</param>
		///<param name="_fisOrderId">order id sinh ra tu FIS</param>
		///<param name="_secSymbol">Ma chung khoan</param>
		///<param name="_side">B = Mua, S = Ban</param>
		///<param name="_price">Gia chung khoan</param>
		///<param name="_avgPrice">Gia trung binh</param>
		///<param name="_conPrice">Dieu kien lenh, A = preOpen, C = closeOpen</param>
		///<param name="_volume">Khoi luong co phieu mua hay ban</param>
		///<param name="_executedVol">Khoi luong khop</param>
		///<param name="_executedPrice">Gia khop</param>
		///<param name="_cancelVolume">Khoi luong huy</param>
		///<param name="_cancelledVolume">Khoi luong duoc huy</param>
		///<param name="_subCustAccountId">Tai khoan thuc hien giao dich</param>
		///<param name="_execTransType">Loai lenh (0 = new, 1 = cancel, 2 = change acc)</param>
		///<param name="_tradeTime">Thoi gian d?t l?nh vào h? th?ng</param>
		///<param name="_matchedTime">Thoi gian khop</param>
		///<param name="_cancelledTime">Thoi gian lenh duoc huy</param>
		///<param name="_orderStatus">Trang thai lenh ( ORD_NOTHING = -1, ORD_PENDING = 0, ORD_WAITING = 1, ORD_FINISHED = 2, ORD_REJECTED = 3)</param>
		///<param name="_ordRejReason">nguyen nhan lenh bi tu choi</param>
		///<param name="_confirmNo">ID duoc gan boi san giao dich</param>
		///<param name="_cancelledConfirmNo">ID cua lenh huy duoc gan boi san giao dich</param>
		///<param name="_sourceId">0=SET, 1 = FIS</param>
		///<param name="_execType">N=normal, C = crossing</param>
		///<param name="_cancelledExecType">N=normal, C = crossing</param>
		///<param name="_portOrClient">Loai khach hang</param>
		///<param name="_market">Thi truong</param>
		///<param name="_marketStatus">Trang thai thi truong</param>
		///<param name="_orderSource">Lenh tu web hay tu nguon khac (W = Web,)</param>
		///<param name="_isNewOrder">Lenh moi, chua duoc xem thong tin</param>
		///<param name="_sequence">Thu tu cua lenh</param>
		///<param name="_numOfMatch">So lan khop</param>
		///<param name="_quickOrderId">ID is of OrderInfo</param>
		///<param name="_conditionOrderId">ConditionOrderID is of ExecOrder</param>
		///<param name="_isNewStatus"></param>
		///<param name="_isNewVolume"></param>
		///<param name="_newPrice"></param>
		///<param name="_changedOrderStatus"></param>
		///<param name="_condition"></param>
		public ExecOrderBase(System.String _refOrderId, System.String _messageType, System.Int32? _fisOrderId, 
			System.String _secSymbol, System.String _side, System.Decimal _price, System.Decimal? _avgPrice, 
			System.String _conPrice, System.Int32 _volume, System.Int32? _executedVol, System.Decimal? _executedPrice, 
			System.Int32? _cancelVolume, System.Int32? _cancelledVolume, System.String _subCustAccountId, 
			System.Int32? _execTransType, System.DateTime? _tradeTime, System.DateTime? _matchedTime, System.DateTime? _cancelledTime, 
			System.Int16? _orderStatus, System.Int32? _ordRejReason, System.String _confirmNo, System.String _cancelledConfirmNo, 
			System.Int16? _sourceId, System.String _execType, System.String _cancelledExecType, System.String _portOrClient, 
			System.String _market, System.String _marketStatus, System.String _orderSource, System.Boolean? _isNewOrder, 
			System.Int32 _sequence, System.Int32? _numOfMatch, System.Int32? _quickOrderId, System.Int64? _conditionOrderId, 
			System.Boolean? _isNewStatus, System.Boolean? _isNewVolume, System.Decimal? _newPrice, System.Int16? _changedOrderStatus, 
			System.String _condition)
		{
			this.entityData = new ExecOrderEntityData();
			this.backupData = null;

			this.RefOrderId = _refOrderId;
			this.MessageType = _messageType;
			this.FisOrderId = _fisOrderId;
			this.SecSymbol = _secSymbol;
			this.Side = _side;
			this.Price = _price;
			this.AvgPrice = _avgPrice;
			this.ConPrice = _conPrice;
			this.Volume = _volume;
			this.ExecutedVol = _executedVol;
			this.ExecutedPrice = _executedPrice;
			this.CancelVolume = _cancelVolume;
			this.CancelledVolume = _cancelledVolume;
			this.SubCustAccountId = _subCustAccountId;
			this.ExecTransType = _execTransType;
			this.TradeTime = _tradeTime;
			this.MatchedTime = _matchedTime;
			this.CancelledTime = _cancelledTime;
			this.OrderStatus = _orderStatus;
			this.OrdRejReason = _ordRejReason;
			this.ConfirmNo = _confirmNo;
			this.CancelledConfirmNo = _cancelledConfirmNo;
			this.SourceId = _sourceId;
			this.ExecType = _execType;
			this.CancelledExecType = _cancelledExecType;
			this.PortOrClient = _portOrClient;
			this.Market = _market;
			this.MarketStatus = _marketStatus;
			this.OrderSource = _orderSource;
			this.IsNewOrder = _isNewOrder;
			this.Sequence = _sequence;
			this.NumOfMatch = _numOfMatch;
			this.QuickOrderId = _quickOrderId;
			this.ConditionOrderId = _conditionOrderId;
			this.IsNewStatus = _isNewStatus;
			this.IsNewVolume = _isNewVolume;
			this.NewPrice = _newPrice;
			this.ChangedOrderStatus = _changedOrderStatus;
			this.Condition = _condition;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ExecOrder"/> instance.
		///</summary>
		///<param name="_refOrderId">ID cua order duoc tao ra boi GW</param>
		///<param name="_messageType">Loai cua message (7a = new order, 7b = ack, 7e = lenh da thuc thi, 7c = cancel order, 6a = order tu broker, 7d = change order, 6d = change tu broker, 3D = cancel deal )</param>
		///<param name="_fisOrderId">order id sinh ra tu FIS</param>
		///<param name="_secSymbol">Ma chung khoan</param>
		///<param name="_side">B = Mua, S = Ban</param>
		///<param name="_price">Gia chung khoan</param>
		///<param name="_avgPrice">Gia trung binh</param>
		///<param name="_conPrice">Dieu kien lenh, A = preOpen, C = closeOpen</param>
		///<param name="_volume">Khoi luong co phieu mua hay ban</param>
		///<param name="_executedVol">Khoi luong khop</param>
		///<param name="_executedPrice">Gia khop</param>
		///<param name="_cancelVolume">Khoi luong huy</param>
		///<param name="_cancelledVolume">Khoi luong duoc huy</param>
		///<param name="_subCustAccountId">Tai khoan thuc hien giao dich</param>
		///<param name="_execTransType">Loai lenh (0 = new, 1 = cancel, 2 = change acc)</param>
		///<param name="_tradeTime">Thoi gian d?t l?nh vào h? th?ng</param>
		///<param name="_matchedTime">Thoi gian khop</param>
		///<param name="_cancelledTime">Thoi gian lenh duoc huy</param>
		///<param name="_orderStatus">Trang thai lenh ( ORD_NOTHING = -1, ORD_PENDING = 0, ORD_WAITING = 1, ORD_FINISHED = 2, ORD_REJECTED = 3)</param>
		///<param name="_ordRejReason">nguyen nhan lenh bi tu choi</param>
		///<param name="_confirmNo">ID duoc gan boi san giao dich</param>
		///<param name="_cancelledConfirmNo">ID cua lenh huy duoc gan boi san giao dich</param>
		///<param name="_sourceId">0=SET, 1 = FIS</param>
		///<param name="_execType">N=normal, C = crossing</param>
		///<param name="_cancelledExecType">N=normal, C = crossing</param>
		///<param name="_portOrClient">Loai khach hang</param>
		///<param name="_market">Thi truong</param>
		///<param name="_marketStatus">Trang thai thi truong</param>
		///<param name="_orderSource">Lenh tu web hay tu nguon khac (W = Web,)</param>
		///<param name="_isNewOrder">Lenh moi, chua duoc xem thong tin</param>
		///<param name="_sequence">Thu tu cua lenh</param>
		///<param name="_numOfMatch">So lan khop</param>
		///<param name="_quickOrderId">ID is of OrderInfo</param>
		///<param name="_conditionOrderId">ConditionOrderID is of ExecOrder</param>
		///<param name="_isNewStatus"></param>
		///<param name="_isNewVolume"></param>
		///<param name="_newPrice"></param>
		///<param name="_changedOrderStatus"></param>
		///<param name="_condition"></param>
		public static ExecOrder CreateExecOrder(System.String _refOrderId, System.String _messageType, System.Int32? _fisOrderId, 
			System.String _secSymbol, System.String _side, System.Decimal _price, System.Decimal? _avgPrice, 
			System.String _conPrice, System.Int32 _volume, System.Int32? _executedVol, System.Decimal? _executedPrice, 
			System.Int32? _cancelVolume, System.Int32? _cancelledVolume, System.String _subCustAccountId, 
			System.Int32? _execTransType, System.DateTime? _tradeTime, System.DateTime? _matchedTime, System.DateTime? _cancelledTime, 
			System.Int16? _orderStatus, System.Int32? _ordRejReason, System.String _confirmNo, System.String _cancelledConfirmNo, 
			System.Int16? _sourceId, System.String _execType, System.String _cancelledExecType, System.String _portOrClient, 
			System.String _market, System.String _marketStatus, System.String _orderSource, System.Boolean? _isNewOrder, 
			System.Int32 _sequence, System.Int32? _numOfMatch, System.Int32? _quickOrderId, System.Int64? _conditionOrderId, 
			System.Boolean? _isNewStatus, System.Boolean? _isNewVolume, System.Decimal? _newPrice, System.Int16? _changedOrderStatus, 
			System.String _condition)
		{
			ExecOrder newExecOrder = new ExecOrder();
			newExecOrder.RefOrderId = _refOrderId;
			newExecOrder.MessageType = _messageType;
			newExecOrder.FisOrderId = _fisOrderId;
			newExecOrder.SecSymbol = _secSymbol;
			newExecOrder.Side = _side;
			newExecOrder.Price = _price;
			newExecOrder.AvgPrice = _avgPrice;
			newExecOrder.ConPrice = _conPrice;
			newExecOrder.Volume = _volume;
			newExecOrder.ExecutedVol = _executedVol;
			newExecOrder.ExecutedPrice = _executedPrice;
			newExecOrder.CancelVolume = _cancelVolume;
			newExecOrder.CancelledVolume = _cancelledVolume;
			newExecOrder.SubCustAccountId = _subCustAccountId;
			newExecOrder.ExecTransType = _execTransType;
			newExecOrder.TradeTime = _tradeTime;
			newExecOrder.MatchedTime = _matchedTime;
			newExecOrder.CancelledTime = _cancelledTime;
			newExecOrder.OrderStatus = _orderStatus;
			newExecOrder.OrdRejReason = _ordRejReason;
			newExecOrder.ConfirmNo = _confirmNo;
			newExecOrder.CancelledConfirmNo = _cancelledConfirmNo;
			newExecOrder.SourceId = _sourceId;
			newExecOrder.ExecType = _execType;
			newExecOrder.CancelledExecType = _cancelledExecType;
			newExecOrder.PortOrClient = _portOrClient;
			newExecOrder.Market = _market;
			newExecOrder.MarketStatus = _marketStatus;
			newExecOrder.OrderSource = _orderSource;
			newExecOrder.IsNewOrder = _isNewOrder;
			newExecOrder.Sequence = _sequence;
			newExecOrder.NumOfMatch = _numOfMatch;
			newExecOrder.QuickOrderId = _quickOrderId;
			newExecOrder.ConditionOrderId = _conditionOrderId;
			newExecOrder.IsNewStatus = _isNewStatus;
			newExecOrder.IsNewVolume = _isNewVolume;
			newExecOrder.NewPrice = _newPrice;
			newExecOrder.ChangedOrderStatus = _changedOrderStatus;
			newExecOrder.Condition = _condition;
			return newExecOrder;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the OrderId property. 
		///		OrderID identifies ExecOrder
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@"OrderID identifies ExecOrder"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 OrderId
		{
			get
			{
				return this.entityData.OrderId; 
			}
			
			set
			{
				if (this.entityData.OrderId == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.OrderId, this.entityData.OrderId);
				this.entityData.OrderId = value;
				this.EntityId.OrderId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.OrderId, this.entityData.OrderId);
				OnPropertyChanged("OrderId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RefOrderId property. 
		///		ID cua order duoc tao ra boi GW
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"ID cua order duoc tao ra boi GW"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 64)]
		public virtual System.String RefOrderId
		{
			get
			{
				return this.entityData.RefOrderId; 
			}
			
			set
			{
				if (this.entityData.RefOrderId == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.RefOrderId, this.entityData.RefOrderId);
				this.entityData.RefOrderId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.RefOrderId, this.entityData.RefOrderId);
				OnPropertyChanged("RefOrderId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MessageType property. 
		///		Loai cua message (7a = new order, 7b = ack, 7e = lenh da thuc thi, 7c = cancel order, 6a = order tu broker, 7d = change order, 6d = change tu broker, 3D = cancel deal )
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Loai cua message (7a = new order, 7b = ack, 7e = lenh da thuc thi, 7c = cancel order, 6a = order tu broker, 7d = change order, 6d = change tu broker, 3D = cancel deal )"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 2)]
		public virtual System.String MessageType
		{
			get
			{
				return this.entityData.MessageType; 
			}
			
			set
			{
				if (this.entityData.MessageType == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.MessageType, this.entityData.MessageType);
				this.entityData.MessageType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.MessageType, this.entityData.MessageType);
				OnPropertyChanged("MessageType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FisOrderId property. 
		///		order id sinh ra tu FIS
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsFisOrderIdNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"order id sinh ra tu FIS"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? FisOrderId
		{
			get
			{
				return this.entityData.FisOrderId; 
			}
			
			set
			{
				if (this.entityData.FisOrderId == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.FisOrderId, this.entityData.FisOrderId);
				this.entityData.FisOrderId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.FisOrderId, this.entityData.FisOrderId);
				OnPropertyChanged("FisOrderId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SecSymbol property. 
		///		Ma chung khoan
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Ma chung khoan"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 8)]
		public virtual System.String SecSymbol
		{
			get
			{
				return this.entityData.SecSymbol; 
			}
			
			set
			{
				if (this.entityData.SecSymbol == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.SecSymbol, this.entityData.SecSymbol);
				this.entityData.SecSymbol = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.SecSymbol, this.entityData.SecSymbol);
				OnPropertyChanged("SecSymbol");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Side property. 
		///		B = Mua, S = Ban
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"B = Mua, S = Ban"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 1)]
		public virtual System.String Side
		{
			get
			{
				return this.entityData.Side; 
			}
			
			set
			{
				if (this.entityData.Side == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.Side, this.entityData.Side);
				this.entityData.Side = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.Side, this.entityData.Side);
				OnPropertyChanged("Side");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Price property. 
		///		Gia chung khoan
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Gia chung khoan"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal Price
		{
			get
			{
				return this.entityData.Price; 
			}
			
			set
			{
				if (this.entityData.Price == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.Price, this.entityData.Price);
				this.entityData.Price = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.Price, this.entityData.Price);
				OnPropertyChanged("Price");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AvgPrice property. 
		///		Gia trung binh
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAvgPriceNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Gia trung binh"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AvgPrice
		{
			get
			{
				return this.entityData.AvgPrice; 
			}
			
			set
			{
				if (this.entityData.AvgPrice == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.AvgPrice, this.entityData.AvgPrice);
				this.entityData.AvgPrice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.AvgPrice, this.entityData.AvgPrice);
				OnPropertyChanged("AvgPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ConPrice property. 
		///		Dieu kien lenh, A = preOpen, C = closeOpen
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Dieu kien lenh, A = preOpen, C = closeOpen"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String ConPrice
		{
			get
			{
				return this.entityData.ConPrice; 
			}
			
			set
			{
				if (this.entityData.ConPrice == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.ConPrice, this.entityData.ConPrice);
				this.entityData.ConPrice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.ConPrice, this.entityData.ConPrice);
				OnPropertyChanged("ConPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Volume property. 
		///		Khoi luong co phieu mua hay ban
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Khoi luong co phieu mua hay ban"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public override System.Int32 Volume
		{
			get
			{
				return this.entityData.Volume; 
			}
			
			set
			{
				if (this.entityData.Volume == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.Volume, this.entityData.Volume);
				this.entityData.Volume = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.Volume, this.entityData.Volume);
				OnPropertyChanged("Volume");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExecutedVol property. 
		///		Khoi luong khop
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsExecutedVolNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Khoi luong khop"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ExecutedVol
		{
			get
			{
				return this.entityData.ExecutedVol; 
			}
			
			set
			{
				if (this.entityData.ExecutedVol == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.ExecutedVol, this.entityData.ExecutedVol);
				this.entityData.ExecutedVol = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.ExecutedVol, this.entityData.ExecutedVol);
				OnPropertyChanged("ExecutedVol");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExecutedPrice property. 
		///		Gia khop
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsExecutedPriceNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Gia khop"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ExecutedPrice
		{
			get
			{
				return this.entityData.ExecutedPrice; 
			}
			
			set
			{
				if (this.entityData.ExecutedPrice == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.ExecutedPrice, this.entityData.ExecutedPrice);
				this.entityData.ExecutedPrice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.ExecutedPrice, this.entityData.ExecutedPrice);
				OnPropertyChanged("ExecutedPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CancelVolume property. 
		///		Khoi luong huy
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCancelVolumeNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Khoi luong huy"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CancelVolume
		{
			get
			{
				return this.entityData.CancelVolume; 
			}
			
			set
			{
				if (this.entityData.CancelVolume == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.CancelVolume, this.entityData.CancelVolume);
				this.entityData.CancelVolume = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.CancelVolume, this.entityData.CancelVolume);
				OnPropertyChanged("CancelVolume");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CancelledVolume property. 
		///		Khoi luong duoc huy
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCancelledVolumeNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Khoi luong duoc huy"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CancelledVolume
		{
			get
			{
				return this.entityData.CancelledVolume; 
			}
			
			set
			{
				if (this.entityData.CancelledVolume == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.CancelledVolume, this.entityData.CancelledVolume);
				this.entityData.CancelledVolume = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.CancelledVolume, this.entityData.CancelledVolume);
				OnPropertyChanged("CancelledVolume");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SubCustAccountId property. 
		///		Tai khoan thuc hien giao dich
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Tai khoan thuc hien giao dich"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual System.String SubCustAccountId
		{
			get
			{
				return this.entityData.SubCustAccountId; 
			}
			
			set
			{
				if (this.entityData.SubCustAccountId == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.SubCustAccountId, this.entityData.SubCustAccountId);
				this.entityData.SubCustAccountId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.SubCustAccountId, this.entityData.SubCustAccountId);
				OnPropertyChanged("SubCustAccountId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExecTransType property. 
		///		Loai lenh (0 = new, 1 = cancel, 2 = change acc)
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsExecTransTypeNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Loai lenh (0 = new, 1 = cancel, 2 = change acc)"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ExecTransType
		{
			get
			{
				return this.entityData.ExecTransType; 
			}
			
			set
			{
				if (this.entityData.ExecTransType == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.ExecTransType, this.entityData.ExecTransType);
				this.entityData.ExecTransType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.ExecTransType, this.entityData.ExecTransType);
				OnPropertyChanged("ExecTransType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TradeTime property. 
		///		Thoi gian d?t l?nh vào h? th?ng
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsTradeTimeNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Thoi gian d?t l?nh vào h? th?ng"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? TradeTime
		{
			get
			{
				return this.entityData.TradeTime; 
			}
			
			set
			{
				if (this.entityData.TradeTime == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.TradeTime, this.entityData.TradeTime);
				this.entityData.TradeTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.TradeTime, this.entityData.TradeTime);
				OnPropertyChanged("TradeTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MatchedTime property. 
		///		Thoi gian khop
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsMatchedTimeNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Thoi gian khop"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? MatchedTime
		{
			get
			{
				return this.entityData.MatchedTime; 
			}
			
			set
			{
				if (this.entityData.MatchedTime == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.MatchedTime, this.entityData.MatchedTime);
				this.entityData.MatchedTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.MatchedTime, this.entityData.MatchedTime);
				OnPropertyChanged("MatchedTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CancelledTime property. 
		///		Thoi gian lenh duoc huy
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCancelledTimeNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Thoi gian lenh duoc huy"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CancelledTime
		{
			get
			{
				return this.entityData.CancelledTime; 
			}
			
			set
			{
				if (this.entityData.CancelledTime == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.CancelledTime, this.entityData.CancelledTime);
				this.entityData.CancelledTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.CancelledTime, this.entityData.CancelledTime);
				OnPropertyChanged("CancelledTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OrderStatus property. 
		///		Trang thai lenh ( ORD_NOTHING = -1, ORD_PENDING = 0, ORD_WAITING = 1, ORD_FINISHED = 2, ORD_REJECTED = 3)
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsOrderStatusNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Trang thai lenh ( ORD_NOTHING = -1, ORD_PENDING = 0, ORD_WAITING = 1, ORD_FINISHED = 2, ORD_REJECTED = 3)"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? OrderStatus
		{
			get
			{
				return this.entityData.OrderStatus; 
			}
			
			set
			{
				if (this.entityData.OrderStatus == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.OrderStatus, this.entityData.OrderStatus);
				this.entityData.OrderStatus = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.OrderStatus, this.entityData.OrderStatus);
				OnPropertyChanged("OrderStatus");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OrdRejReason property. 
		///		nguyen nhan lenh bi tu choi
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsOrdRejReasonNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"nguyen nhan lenh bi tu choi"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? OrdRejReason
		{
			get
			{
				return this.entityData.OrdRejReason; 
			}
			
			set
			{
				if (this.entityData.OrdRejReason == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.OrdRejReason, this.entityData.OrdRejReason);
				this.entityData.OrdRejReason = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.OrdRejReason, this.entityData.OrdRejReason);
				OnPropertyChanged("OrdRejReason");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ConfirmNo property. 
		///		ID duoc gan boi san giao dich
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"ID duoc gan boi san giao dich"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 6)]
		public virtual System.String ConfirmNo
		{
			get
			{
				return this.entityData.ConfirmNo; 
			}
			
			set
			{
				if (this.entityData.ConfirmNo == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.ConfirmNo, this.entityData.ConfirmNo);
				this.entityData.ConfirmNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.ConfirmNo, this.entityData.ConfirmNo);
				OnPropertyChanged("ConfirmNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CancelledConfirmNo property. 
		///		ID cua lenh huy duoc gan boi san giao dich
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"ID cua lenh huy duoc gan boi san giao dich"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 6)]
		public virtual System.String CancelledConfirmNo
		{
			get
			{
				return this.entityData.CancelledConfirmNo; 
			}
			
			set
			{
				if (this.entityData.CancelledConfirmNo == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.CancelledConfirmNo, this.entityData.CancelledConfirmNo);
				this.entityData.CancelledConfirmNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.CancelledConfirmNo, this.entityData.CancelledConfirmNo);
				OnPropertyChanged("CancelledConfirmNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SourceId property. 
		///		0=SET, 1 = FIS
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsSourceIdNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"0=SET, 1 = FIS"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? SourceId
		{
			get
			{
				return this.entityData.SourceId; 
			}
			
			set
			{
				if (this.entityData.SourceId == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.SourceId, this.entityData.SourceId);
				this.entityData.SourceId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.SourceId, this.entityData.SourceId);
				OnPropertyChanged("SourceId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExecType property. 
		///		N=normal, C = crossing
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"N=normal, C = crossing"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String ExecType
		{
			get
			{
				return this.entityData.ExecType; 
			}
			
			set
			{
				if (this.entityData.ExecType == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.ExecType, this.entityData.ExecType);
				this.entityData.ExecType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.ExecType, this.entityData.ExecType);
				OnPropertyChanged("ExecType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CancelledExecType property. 
		///		N=normal, C = crossing
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"N=normal, C = crossing"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String CancelledExecType
		{
			get
			{
				return this.entityData.CancelledExecType; 
			}
			
			set
			{
				if (this.entityData.CancelledExecType == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.CancelledExecType, this.entityData.CancelledExecType);
				this.entityData.CancelledExecType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.CancelledExecType, this.entityData.CancelledExecType);
				OnPropertyChanged("CancelledExecType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PortOrClient property. 
		///		Loai khach hang
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Loai khach hang"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String PortOrClient
		{
			get
			{
				return this.entityData.PortOrClient; 
			}
			
			set
			{
				if (this.entityData.PortOrClient == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.PortOrClient, this.entityData.PortOrClient);
				this.entityData.PortOrClient = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.PortOrClient, this.entityData.PortOrClient);
				OnPropertyChanged("PortOrClient");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Market property. 
		///		Thi truong
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Thi truong"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 1)]
		public virtual System.String Market
		{
			get
			{
				return this.entityData.Market; 
			}
			
			set
			{
				if (this.entityData.Market == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.Market, this.entityData.Market);
				this.entityData.Market = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.Market, this.entityData.Market);
				OnPropertyChanged("Market");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MarketStatus property. 
		///		Trang thai thi truong
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Trang thai thi truong"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String MarketStatus
		{
			get
			{
				return this.entityData.MarketStatus; 
			}
			
			set
			{
				if (this.entityData.MarketStatus == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.MarketStatus, this.entityData.MarketStatus);
				this.entityData.MarketStatus = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.MarketStatus, this.entityData.MarketStatus);
				OnPropertyChanged("MarketStatus");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OrderSource property. 
		///		Lenh tu web hay tu nguon khac (W = Web,)
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Lenh tu web hay tu nguon khac (W = Web,)"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String OrderSource
		{
			get
			{
				return this.entityData.OrderSource; 
			}
			
			set
			{
				if (this.entityData.OrderSource == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.OrderSource, this.entityData.OrderSource);
				this.entityData.OrderSource = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.OrderSource, this.entityData.OrderSource);
				OnPropertyChanged("OrderSource");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsNewOrder property. 
		///		Lenh moi, chua duoc xem thong tin
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsNewOrderNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Lenh moi, chua duoc xem thong tin"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsNewOrder
		{
			get
			{
				return this.entityData.IsNewOrder; 
			}
			
			set
			{
				if (this.entityData.IsNewOrder == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.IsNewOrder, this.entityData.IsNewOrder);
				this.entityData.IsNewOrder = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.IsNewOrder, this.entityData.IsNewOrder);
				OnPropertyChanged("IsNewOrder");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Sequence property. 
		///		Thu tu cua lenh
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Thu tu cua lenh"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 Sequence
		{
			get
			{
				return this.entityData.Sequence; 
			}
			
			set
			{
				if (this.entityData.Sequence == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.Sequence, this.entityData.Sequence);
				this.entityData.Sequence = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.Sequence, this.entityData.Sequence);
				OnPropertyChanged("Sequence");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NumOfMatch property. 
		///		So lan khop
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsNumOfMatchNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"So lan khop"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? NumOfMatch
		{
			get
			{
				return this.entityData.NumOfMatch; 
			}
			
			set
			{
				if (this.entityData.NumOfMatch == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.NumOfMatch, this.entityData.NumOfMatch);
				this.entityData.NumOfMatch = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.NumOfMatch, this.entityData.NumOfMatch);
				OnPropertyChanged("NumOfMatch");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the QuickOrderId property. 
		///		ID is of OrderInfo
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsQuickOrderIdNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"ID is of OrderInfo"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? QuickOrderId
		{
			get
			{
				return this.entityData.QuickOrderId; 
			}
			
			set
			{
				if (this.entityData.QuickOrderId == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.QuickOrderId, this.entityData.QuickOrderId);
				this.entityData.QuickOrderId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.QuickOrderId, this.entityData.QuickOrderId);
				OnPropertyChanged("QuickOrderId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ConditionOrderId property. 
		///		ConditionOrderID is of ExecOrder
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsConditionOrderIdNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"ConditionOrderID is of ExecOrder"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? ConditionOrderId
		{
			get
			{
				return this.entityData.ConditionOrderId; 
			}
			
			set
			{
				if (this.entityData.ConditionOrderId == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.ConditionOrderId, this.entityData.ConditionOrderId);
				this.entityData.ConditionOrderId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.ConditionOrderId, this.entityData.ConditionOrderId);
				OnPropertyChanged("ConditionOrderId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsNewStatus property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsNewStatusNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsNewStatus
		{
			get
			{
				return this.entityData.IsNewStatus; 
			}
			
			set
			{
				if (this.entityData.IsNewStatus == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.IsNewStatus, this.entityData.IsNewStatus);
				this.entityData.IsNewStatus = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.IsNewStatus, this.entityData.IsNewStatus);
				OnPropertyChanged("IsNewStatus");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IsNewVolume property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsIsNewVolumeNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? IsNewVolume
		{
			get
			{
				return this.entityData.IsNewVolume; 
			}
			
			set
			{
				if (this.entityData.IsNewVolume == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.IsNewVolume, this.entityData.IsNewVolume);
				this.entityData.IsNewVolume = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.IsNewVolume, this.entityData.IsNewVolume);
				OnPropertyChanged("IsNewVolume");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NewPrice property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsNewPriceNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? NewPrice
		{
			get
			{
				return this.entityData.NewPrice; 
			}
			
			set
			{
				if (this.entityData.NewPrice == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.NewPrice, this.entityData.NewPrice);
				this.entityData.NewPrice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.NewPrice, this.entityData.NewPrice);
				OnPropertyChanged("NewPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ChangedOrderStatus property. 
		///		
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsChangedOrderStatusNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? ChangedOrderStatus
		{
			get
			{
				return this.entityData.ChangedOrderStatus; 
			}
			
			set
			{
				if (this.entityData.ChangedOrderStatus == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.ChangedOrderStatus, this.entityData.ChangedOrderStatus);
				this.entityData.ChangedOrderStatus = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.ChangedOrderStatus, this.entityData.ChangedOrderStatus);
				OnPropertyChanged("ChangedOrderStatus");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Condition property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String Condition
		{
			get
			{
				return this.entityData.Condition; 
			}
			
			set
			{
				if (this.entityData.Condition == value)
					return;
					
				OnColumnChanging(ExecOrderColumn.Condition, this.entityData.Condition);
				this.entityData.Condition = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ExecOrderColumn.Condition, this.entityData.Condition);
				OnPropertyChanged("Condition");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="ConditionOrder"/>.
		/// </summary>
		/// <value>The source ConditionOrder for ConditionOrderId.</value>
        [XmlIgnore()]
        [ScriptIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ConditionOrder ConditionOrderIdSource
      	{
            get { return entityData.ConditionOrderIdSource; }
            set { entityData.ConditionOrderIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="QuickOrder"/>.
		/// </summary>
		/// <value>The source QuickOrder for QuickOrderId.</value>
        [XmlIgnore()]
        [ScriptIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual QuickOrder QuickOrderIdSource
      	{
            get { return entityData.QuickOrderIdSource; }
            set { entityData.QuickOrderIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("RefOrderId", "Ref Order Id", 64));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MessageType", "Message Type", 2));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("SecSymbol", "Sec Symbol"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SecSymbol", "Sec Symbol", 8));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Side", "Side"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Side", "Side", 1));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ConPrice", "Con Price", 1));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("SubCustAccountId", "Sub Cust Account Id"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SubCustAccountId", "Sub Cust Account Id", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ConfirmNo", "Confirm No", 6));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CancelledConfirmNo", "Cancelled Confirm No", 6));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ExecType", "Exec Type", 1));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CancelledExecType", "Cancelled Exec Type", 1));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PortOrClient", "Port Or Client", 1));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Market", "Market"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Market", "Market", 1));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MarketStatus", "Market Status", 1));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("OrderSource", "Order Source", 1));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Condition", "Condition", 1));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public override string TableName
		{
			get { return "ExecOrder"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"OrderID", "RefOrderID", "MessageType", "FISOrderID", "SecSymbol", "Side", "Price", "AvgPrice", "ConPrice", "Volume", "ExecutedVol", "ExecutedPrice", "CancelVolume", "CancelledVolume", "SubCustAccountID", "ExecTransType", "TradeTime", "MatchedTime", "CancelledTime", "OrderStatus", "OrdRejReason", "ConfirmNo", "CancelledConfirmNo", "SourceID", "ExecType", "CancelledExecType", "PortOrClient", "Market", "MarketStatus", "OrderSource", "IsNewOrder", "Sequence", "NumOfMatch", "QuickOrderID", "ConditionOrderID", "IsNewStatus", "IsNewVolume", "NewPrice", "ChangedOrderStatus", "Condition"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ExecOrderEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ExecOrder) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
        [ScriptIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ExecOrder>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ExecOrder);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ExecOrder Entity 
		///</summary>
		protected virtual ExecOrder Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			ExecOrder copy = new ExecOrder();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.OrderId = this.OrderId;
				copy.RefOrderId = this.RefOrderId;
				copy.MessageType = this.MessageType;
				copy.FisOrderId = this.FisOrderId;
				copy.SecSymbol = this.SecSymbol;
				copy.Side = this.Side;
				copy.Price = this.Price;
				copy.AvgPrice = this.AvgPrice;
				copy.ConPrice = this.ConPrice;
				copy.Volume = this.Volume;
				copy.ExecutedVol = this.ExecutedVol;
				copy.ExecutedPrice = this.ExecutedPrice;
				copy.CancelVolume = this.CancelVolume;
				copy.CancelledVolume = this.CancelledVolume;
				copy.SubCustAccountId = this.SubCustAccountId;
				copy.ExecTransType = this.ExecTransType;
				copy.TradeTime = this.TradeTime;
				copy.MatchedTime = this.MatchedTime;
				copy.CancelledTime = this.CancelledTime;
				copy.OrderStatus = this.OrderStatus;
				copy.OrdRejReason = this.OrdRejReason;
				copy.ConfirmNo = this.ConfirmNo;
				copy.CancelledConfirmNo = this.CancelledConfirmNo;
				copy.SourceId = this.SourceId;
				copy.ExecType = this.ExecType;
				copy.CancelledExecType = this.CancelledExecType;
				copy.PortOrClient = this.PortOrClient;
				copy.Market = this.Market;
				copy.MarketStatus = this.MarketStatus;
				copy.OrderSource = this.OrderSource;
				copy.IsNewOrder = this.IsNewOrder;
				copy.Sequence = this.Sequence;
				copy.NumOfMatch = this.NumOfMatch;
				copy.QuickOrderId = this.QuickOrderId;
				copy.ConditionOrderId = this.ConditionOrderId;
				copy.IsNewStatus = this.IsNewStatus;
				copy.IsNewVolume = this.IsNewVolume;
				copy.NewPrice = this.NewPrice;
				copy.ChangedOrderStatus = this.ChangedOrderStatus;
				copy.Condition = this.Condition;
			
			if (this.ConditionOrderIdSource != null && existingCopies.Contains(this.ConditionOrderIdSource))
				copy.ConditionOrderIdSource = existingCopies[this.ConditionOrderIdSource] as ConditionOrder;
			else
				copy.ConditionOrderIdSource = MakeCopyOf(this.ConditionOrderIdSource, existingCopies) as ConditionOrder;
			if (this.QuickOrderIdSource != null && existingCopies.Contains(this.QuickOrderIdSource))
				copy.QuickOrderIdSource = existingCopies[this.QuickOrderIdSource] as QuickOrder;
			else
				copy.QuickOrderIdSource = MakeCopyOf(this.QuickOrderIdSource, existingCopies) as QuickOrder;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed ExecOrder Entity 
		///</summary>
		public virtual ExecOrder Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed ExecOrder Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ExecOrder DeepCopy()
		{
			return EntityHelper.Clone<ExecOrder>(this as ExecOrder);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ExecOrderEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new ExecOrderEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ExecOrderEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ExecOrderColumn column)
		{
			switch(column)
			{
					case ExecOrderColumn.OrderId:
					return entityData.OrderId != _originalData.OrderId;
					case ExecOrderColumn.RefOrderId:
					return entityData.RefOrderId != _originalData.RefOrderId;
					case ExecOrderColumn.MessageType:
					return entityData.MessageType != _originalData.MessageType;
					case ExecOrderColumn.FisOrderId:
					return entityData.FisOrderId != _originalData.FisOrderId;
					case ExecOrderColumn.SecSymbol:
					return entityData.SecSymbol != _originalData.SecSymbol;
					case ExecOrderColumn.Side:
					return entityData.Side != _originalData.Side;
					case ExecOrderColumn.Price:
					return entityData.Price != _originalData.Price;
					case ExecOrderColumn.AvgPrice:
					return entityData.AvgPrice != _originalData.AvgPrice;
					case ExecOrderColumn.ConPrice:
					return entityData.ConPrice != _originalData.ConPrice;
					case ExecOrderColumn.Volume:
					return entityData.Volume != _originalData.Volume;
					case ExecOrderColumn.ExecutedVol:
					return entityData.ExecutedVol != _originalData.ExecutedVol;
					case ExecOrderColumn.ExecutedPrice:
					return entityData.ExecutedPrice != _originalData.ExecutedPrice;
					case ExecOrderColumn.CancelVolume:
					return entityData.CancelVolume != _originalData.CancelVolume;
					case ExecOrderColumn.CancelledVolume:
					return entityData.CancelledVolume != _originalData.CancelledVolume;
					case ExecOrderColumn.SubCustAccountId:
					return entityData.SubCustAccountId != _originalData.SubCustAccountId;
					case ExecOrderColumn.ExecTransType:
					return entityData.ExecTransType != _originalData.ExecTransType;
					case ExecOrderColumn.TradeTime:
					return entityData.TradeTime != _originalData.TradeTime;
					case ExecOrderColumn.MatchedTime:
					return entityData.MatchedTime != _originalData.MatchedTime;
					case ExecOrderColumn.CancelledTime:
					return entityData.CancelledTime != _originalData.CancelledTime;
					case ExecOrderColumn.OrderStatus:
					return entityData.OrderStatus != _originalData.OrderStatus;
					case ExecOrderColumn.OrdRejReason:
					return entityData.OrdRejReason != _originalData.OrdRejReason;
					case ExecOrderColumn.ConfirmNo:
					return entityData.ConfirmNo != _originalData.ConfirmNo;
					case ExecOrderColumn.CancelledConfirmNo:
					return entityData.CancelledConfirmNo != _originalData.CancelledConfirmNo;
					case ExecOrderColumn.SourceId:
					return entityData.SourceId != _originalData.SourceId;
					case ExecOrderColumn.ExecType:
					return entityData.ExecType != _originalData.ExecType;
					case ExecOrderColumn.CancelledExecType:
					return entityData.CancelledExecType != _originalData.CancelledExecType;
					case ExecOrderColumn.PortOrClient:
					return entityData.PortOrClient != _originalData.PortOrClient;
					case ExecOrderColumn.Market:
					return entityData.Market != _originalData.Market;
					case ExecOrderColumn.MarketStatus:
					return entityData.MarketStatus != _originalData.MarketStatus;
					case ExecOrderColumn.OrderSource:
					return entityData.OrderSource != _originalData.OrderSource;
					case ExecOrderColumn.IsNewOrder:
					return entityData.IsNewOrder != _originalData.IsNewOrder;
					case ExecOrderColumn.Sequence:
					return entityData.Sequence != _originalData.Sequence;
					case ExecOrderColumn.NumOfMatch:
					return entityData.NumOfMatch != _originalData.NumOfMatch;
					case ExecOrderColumn.QuickOrderId:
					return entityData.QuickOrderId != _originalData.QuickOrderId;
					case ExecOrderColumn.ConditionOrderId:
					return entityData.ConditionOrderId != _originalData.ConditionOrderId;
					case ExecOrderColumn.IsNewStatus:
					return entityData.IsNewStatus != _originalData.IsNewStatus;
					case ExecOrderColumn.IsNewVolume:
					return entityData.IsNewVolume != _originalData.IsNewVolume;
					case ExecOrderColumn.NewPrice:
					return entityData.NewPrice != _originalData.NewPrice;
					case ExecOrderColumn.ChangedOrderStatus:
					return entityData.ChangedOrderStatus != _originalData.ChangedOrderStatus;
					case ExecOrderColumn.Condition:
					return entityData.Condition != _originalData.Condition;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< ExecOrderColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.OrderId != _originalData.OrderId;
			result = result || entityData.RefOrderId != _originalData.RefOrderId;
			result = result || entityData.MessageType != _originalData.MessageType;
			result = result || entityData.FisOrderId != _originalData.FisOrderId;
			result = result || entityData.SecSymbol != _originalData.SecSymbol;
			result = result || entityData.Side != _originalData.Side;
			result = result || entityData.Price != _originalData.Price;
			result = result || entityData.AvgPrice != _originalData.AvgPrice;
			result = result || entityData.ConPrice != _originalData.ConPrice;
			result = result || entityData.Volume != _originalData.Volume;
			result = result || entityData.ExecutedVol != _originalData.ExecutedVol;
			result = result || entityData.ExecutedPrice != _originalData.ExecutedPrice;
			result = result || entityData.CancelVolume != _originalData.CancelVolume;
			result = result || entityData.CancelledVolume != _originalData.CancelledVolume;
			result = result || entityData.SubCustAccountId != _originalData.SubCustAccountId;
			result = result || entityData.ExecTransType != _originalData.ExecTransType;
			result = result || entityData.TradeTime != _originalData.TradeTime;
			result = result || entityData.MatchedTime != _originalData.MatchedTime;
			result = result || entityData.CancelledTime != _originalData.CancelledTime;
			result = result || entityData.OrderStatus != _originalData.OrderStatus;
			result = result || entityData.OrdRejReason != _originalData.OrdRejReason;
			result = result || entityData.ConfirmNo != _originalData.ConfirmNo;
			result = result || entityData.CancelledConfirmNo != _originalData.CancelledConfirmNo;
			result = result || entityData.SourceId != _originalData.SourceId;
			result = result || entityData.ExecType != _originalData.ExecType;
			result = result || entityData.CancelledExecType != _originalData.CancelledExecType;
			result = result || entityData.PortOrClient != _originalData.PortOrClient;
			result = result || entityData.Market != _originalData.Market;
			result = result || entityData.MarketStatus != _originalData.MarketStatus;
			result = result || entityData.OrderSource != _originalData.OrderSource;
			result = result || entityData.IsNewOrder != _originalData.IsNewOrder;
			result = result || entityData.Sequence != _originalData.Sequence;
			result = result || entityData.NumOfMatch != _originalData.NumOfMatch;
			result = result || entityData.QuickOrderId != _originalData.QuickOrderId;
			result = result || entityData.ConditionOrderId != _originalData.ConditionOrderId;
			result = result || entityData.IsNewStatus != _originalData.IsNewStatus;
			result = result || entityData.IsNewVolume != _originalData.IsNewVolume;
			result = result || entityData.NewPrice != _originalData.NewPrice;
			result = result || entityData.ChangedOrderStatus != _originalData.ChangedOrderStatus;
			result = result || entityData.Condition != _originalData.Condition;
			return result;
		}	
		
		///<summary>
		///  Returns a ExecOrder Entity with the original data.
		///</summary>
		public ExecOrder GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateExecOrder(
				_originalData.RefOrderId,
				_originalData.MessageType,
				_originalData.FisOrderId,
				_originalData.SecSymbol,
				_originalData.Side,
				_originalData.Price,
				_originalData.AvgPrice,
				_originalData.ConPrice,
				_originalData.Volume,
				_originalData.ExecutedVol,
				_originalData.ExecutedPrice,
				_originalData.CancelVolume,
				_originalData.CancelledVolume,
				_originalData.SubCustAccountId,
				_originalData.ExecTransType,
				_originalData.TradeTime,
				_originalData.MatchedTime,
				_originalData.CancelledTime,
				_originalData.OrderStatus,
				_originalData.OrdRejReason,
				_originalData.ConfirmNo,
				_originalData.CancelledConfirmNo,
				_originalData.SourceId,
				_originalData.ExecType,
				_originalData.CancelledExecType,
				_originalData.PortOrClient,
				_originalData.Market,
				_originalData.MarketStatus,
				_originalData.OrderSource,
				_originalData.IsNewOrder,
				_originalData.Sequence,
				_originalData.NumOfMatch,
				_originalData.QuickOrderId,
				_originalData.ConditionOrderId,
				_originalData.IsNewStatus,
				_originalData.IsNewVolume,
				_originalData.NewPrice,
				_originalData.ChangedOrderStatus,
				_originalData.Condition
				);
				
			return (ExecOrder)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ExecOrderBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is ExecOrderBase)
				return ValueEquals(this, (ExecOrderBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ExecOrderBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.OrderId.GetHashCode() ^ 
					((this.RefOrderId == null) ? string.Empty : this.RefOrderId.ToString()).GetHashCode() ^ 
					((this.MessageType == null) ? string.Empty : this.MessageType.ToString()).GetHashCode() ^ 
					((this.FisOrderId == null) ? string.Empty : this.FisOrderId.ToString()).GetHashCode() ^ 
					this.SecSymbol.GetHashCode() ^ 
					this.Side.GetHashCode() ^ 
					this.Price.GetHashCode() ^ 
					((this.AvgPrice == null) ? string.Empty : this.AvgPrice.ToString()).GetHashCode() ^ 
					((this.ConPrice == null) ? string.Empty : this.ConPrice.ToString()).GetHashCode() ^ 
					this.Volume.GetHashCode() ^ 
					((this.ExecutedVol == null) ? string.Empty : this.ExecutedVol.ToString()).GetHashCode() ^ 
					((this.ExecutedPrice == null) ? string.Empty : this.ExecutedPrice.ToString()).GetHashCode() ^ 
					((this.CancelVolume == null) ? string.Empty : this.CancelVolume.ToString()).GetHashCode() ^ 
					((this.CancelledVolume == null) ? string.Empty : this.CancelledVolume.ToString()).GetHashCode() ^ 
					this.SubCustAccountId.GetHashCode() ^ 
					((this.ExecTransType == null) ? string.Empty : this.ExecTransType.ToString()).GetHashCode() ^ 
					((this.TradeTime == null) ? string.Empty : this.TradeTime.ToString()).GetHashCode() ^ 
					((this.MatchedTime == null) ? string.Empty : this.MatchedTime.ToString()).GetHashCode() ^ 
					((this.CancelledTime == null) ? string.Empty : this.CancelledTime.ToString()).GetHashCode() ^ 
					((this.OrderStatus == null) ? string.Empty : this.OrderStatus.ToString()).GetHashCode() ^ 
					((this.OrdRejReason == null) ? string.Empty : this.OrdRejReason.ToString()).GetHashCode() ^ 
					((this.ConfirmNo == null) ? string.Empty : this.ConfirmNo.ToString()).GetHashCode() ^ 
					((this.CancelledConfirmNo == null) ? string.Empty : this.CancelledConfirmNo.ToString()).GetHashCode() ^ 
					((this.SourceId == null) ? string.Empty : this.SourceId.ToString()).GetHashCode() ^ 
					((this.ExecType == null) ? string.Empty : this.ExecType.ToString()).GetHashCode() ^ 
					((this.CancelledExecType == null) ? string.Empty : this.CancelledExecType.ToString()).GetHashCode() ^ 
					((this.PortOrClient == null) ? string.Empty : this.PortOrClient.ToString()).GetHashCode() ^ 
					this.Market.GetHashCode() ^ 
					((this.MarketStatus == null) ? string.Empty : this.MarketStatus.ToString()).GetHashCode() ^ 
					((this.OrderSource == null) ? string.Empty : this.OrderSource.ToString()).GetHashCode() ^ 
					((this.IsNewOrder == null) ? string.Empty : this.IsNewOrder.ToString()).GetHashCode() ^ 
					this.Sequence.GetHashCode() ^ 
					((this.NumOfMatch == null) ? string.Empty : this.NumOfMatch.ToString()).GetHashCode() ^ 
					((this.QuickOrderId == null) ? string.Empty : this.QuickOrderId.ToString()).GetHashCode() ^ 
					((this.ConditionOrderId == null) ? string.Empty : this.ConditionOrderId.ToString()).GetHashCode() ^ 
					((this.IsNewStatus == null) ? string.Empty : this.IsNewStatus.ToString()).GetHashCode() ^ 
					((this.IsNewVolume == null) ? string.Empty : this.IsNewVolume.ToString()).GetHashCode() ^ 
					((this.NewPrice == null) ? string.Empty : this.NewPrice.ToString()).GetHashCode() ^ 
					((this.ChangedOrderStatus == null) ? string.Empty : this.ChangedOrderStatus.ToString()).GetHashCode() ^ 
					((this.Condition == null) ? string.Empty : this.Condition.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ExecOrderBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ExecOrderBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="ExecOrderBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="ExecOrderBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ExecOrderBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(ExecOrderBase Object1, ExecOrderBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.OrderId != Object2.OrderId)
				equal = false;
			if ( Object1.RefOrderId != null && Object2.RefOrderId != null )
			{
				if (Object1.RefOrderId != Object2.RefOrderId)
					equal = false;
			}
			else if (Object1.RefOrderId == null ^ Object2.RefOrderId == null )
			{
				equal = false;
			}
			if ( Object1.MessageType != null && Object2.MessageType != null )
			{
				if (Object1.MessageType != Object2.MessageType)
					equal = false;
			}
			else if (Object1.MessageType == null ^ Object2.MessageType == null )
			{
				equal = false;
			}
			if ( Object1.FisOrderId != null && Object2.FisOrderId != null )
			{
				if (Object1.FisOrderId != Object2.FisOrderId)
					equal = false;
			}
			else if (Object1.FisOrderId == null ^ Object2.FisOrderId == null )
			{
				equal = false;
			}
			if (Object1.SecSymbol != Object2.SecSymbol)
				equal = false;
			if (Object1.Side != Object2.Side)
				equal = false;
			if (Object1.Price != Object2.Price)
				equal = false;
			if ( Object1.AvgPrice != null && Object2.AvgPrice != null )
			{
				if (Object1.AvgPrice != Object2.AvgPrice)
					equal = false;
			}
			else if (Object1.AvgPrice == null ^ Object2.AvgPrice == null )
			{
				equal = false;
			}
			if ( Object1.ConPrice != null && Object2.ConPrice != null )
			{
				if (Object1.ConPrice != Object2.ConPrice)
					equal = false;
			}
			else if (Object1.ConPrice == null ^ Object2.ConPrice == null )
			{
				equal = false;
			}
			if (Object1.Volume != Object2.Volume)
				equal = false;
			if ( Object1.ExecutedVol != null && Object2.ExecutedVol != null )
			{
				if (Object1.ExecutedVol != Object2.ExecutedVol)
					equal = false;
			}
			else if (Object1.ExecutedVol == null ^ Object2.ExecutedVol == null )
			{
				equal = false;
			}
			if ( Object1.ExecutedPrice != null && Object2.ExecutedPrice != null )
			{
				if (Object1.ExecutedPrice != Object2.ExecutedPrice)
					equal = false;
			}
			else if (Object1.ExecutedPrice == null ^ Object2.ExecutedPrice == null )
			{
				equal = false;
			}
			if ( Object1.CancelVolume != null && Object2.CancelVolume != null )
			{
				if (Object1.CancelVolume != Object2.CancelVolume)
					equal = false;
			}
			else if (Object1.CancelVolume == null ^ Object2.CancelVolume == null )
			{
				equal = false;
			}
			if ( Object1.CancelledVolume != null && Object2.CancelledVolume != null )
			{
				if (Object1.CancelledVolume != Object2.CancelledVolume)
					equal = false;
			}
			else if (Object1.CancelledVolume == null ^ Object2.CancelledVolume == null )
			{
				equal = false;
			}
			if (Object1.SubCustAccountId != Object2.SubCustAccountId)
				equal = false;
			if ( Object1.ExecTransType != null && Object2.ExecTransType != null )
			{
				if (Object1.ExecTransType != Object2.ExecTransType)
					equal = false;
			}
			else if (Object1.ExecTransType == null ^ Object2.ExecTransType == null )
			{
				equal = false;
			}
			if ( Object1.TradeTime != null && Object2.TradeTime != null )
			{
				if (Object1.TradeTime != Object2.TradeTime)
					equal = false;
			}
			else if (Object1.TradeTime == null ^ Object2.TradeTime == null )
			{
				equal = false;
			}
			if ( Object1.MatchedTime != null && Object2.MatchedTime != null )
			{
				if (Object1.MatchedTime != Object2.MatchedTime)
					equal = false;
			}
			else if (Object1.MatchedTime == null ^ Object2.MatchedTime == null )
			{
				equal = false;
			}
			if ( Object1.CancelledTime != null && Object2.CancelledTime != null )
			{
				if (Object1.CancelledTime != Object2.CancelledTime)
					equal = false;
			}
			else if (Object1.CancelledTime == null ^ Object2.CancelledTime == null )
			{
				equal = false;
			}
			if ( Object1.OrderStatus != null && Object2.OrderStatus != null )
			{
				if (Object1.OrderStatus != Object2.OrderStatus)
					equal = false;
			}
			else if (Object1.OrderStatus == null ^ Object2.OrderStatus == null )
			{
				equal = false;
			}
			if ( Object1.OrdRejReason != null && Object2.OrdRejReason != null )
			{
				if (Object1.OrdRejReason != Object2.OrdRejReason)
					equal = false;
			}
			else if (Object1.OrdRejReason == null ^ Object2.OrdRejReason == null )
			{
				equal = false;
			}
			if ( Object1.ConfirmNo != null && Object2.ConfirmNo != null )
			{
				if (Object1.ConfirmNo != Object2.ConfirmNo)
					equal = false;
			}
			else if (Object1.ConfirmNo == null ^ Object2.ConfirmNo == null )
			{
				equal = false;
			}
			if ( Object1.CancelledConfirmNo != null && Object2.CancelledConfirmNo != null )
			{
				if (Object1.CancelledConfirmNo != Object2.CancelledConfirmNo)
					equal = false;
			}
			else if (Object1.CancelledConfirmNo == null ^ Object2.CancelledConfirmNo == null )
			{
				equal = false;
			}
			if ( Object1.SourceId != null && Object2.SourceId != null )
			{
				if (Object1.SourceId != Object2.SourceId)
					equal = false;
			}
			else if (Object1.SourceId == null ^ Object2.SourceId == null )
			{
				equal = false;
			}
			if ( Object1.ExecType != null && Object2.ExecType != null )
			{
				if (Object1.ExecType != Object2.ExecType)
					equal = false;
			}
			else if (Object1.ExecType == null ^ Object2.ExecType == null )
			{
				equal = false;
			}
			if ( Object1.CancelledExecType != null && Object2.CancelledExecType != null )
			{
				if (Object1.CancelledExecType != Object2.CancelledExecType)
					equal = false;
			}
			else if (Object1.CancelledExecType == null ^ Object2.CancelledExecType == null )
			{
				equal = false;
			}
			if ( Object1.PortOrClient != null && Object2.PortOrClient != null )
			{
				if (Object1.PortOrClient != Object2.PortOrClient)
					equal = false;
			}
			else if (Object1.PortOrClient == null ^ Object2.PortOrClient == null )
			{
				equal = false;
			}
			if (Object1.Market != Object2.Market)
				equal = false;
			if ( Object1.MarketStatus != null && Object2.MarketStatus != null )
			{
				if (Object1.MarketStatus != Object2.MarketStatus)
					equal = false;
			}
			else if (Object1.MarketStatus == null ^ Object2.MarketStatus == null )
			{
				equal = false;
			}
			if ( Object1.OrderSource != null && Object2.OrderSource != null )
			{
				if (Object1.OrderSource != Object2.OrderSource)
					equal = false;
			}
			else if (Object1.OrderSource == null ^ Object2.OrderSource == null )
			{
				equal = false;
			}
			if ( Object1.IsNewOrder != null && Object2.IsNewOrder != null )
			{
				if (Object1.IsNewOrder != Object2.IsNewOrder)
					equal = false;
			}
			else if (Object1.IsNewOrder == null ^ Object2.IsNewOrder == null )
			{
				equal = false;
			}
			if (Object1.Sequence != Object2.Sequence)
				equal = false;
			if ( Object1.NumOfMatch != null && Object2.NumOfMatch != null )
			{
				if (Object1.NumOfMatch != Object2.NumOfMatch)
					equal = false;
			}
			else if (Object1.NumOfMatch == null ^ Object2.NumOfMatch == null )
			{
				equal = false;
			}
			if ( Object1.QuickOrderId != null && Object2.QuickOrderId != null )
			{
				if (Object1.QuickOrderId != Object2.QuickOrderId)
					equal = false;
			}
			else if (Object1.QuickOrderId == null ^ Object2.QuickOrderId == null )
			{
				equal = false;
			}
			if ( Object1.ConditionOrderId != null && Object2.ConditionOrderId != null )
			{
				if (Object1.ConditionOrderId != Object2.ConditionOrderId)
					equal = false;
			}
			else if (Object1.ConditionOrderId == null ^ Object2.ConditionOrderId == null )
			{
				equal = false;
			}
			if ( Object1.IsNewStatus != null && Object2.IsNewStatus != null )
			{
				if (Object1.IsNewStatus != Object2.IsNewStatus)
					equal = false;
			}
			else if (Object1.IsNewStatus == null ^ Object2.IsNewStatus == null )
			{
				equal = false;
			}
			if ( Object1.IsNewVolume != null && Object2.IsNewVolume != null )
			{
				if (Object1.IsNewVolume != Object2.IsNewVolume)
					equal = false;
			}
			else if (Object1.IsNewVolume == null ^ Object2.IsNewVolume == null )
			{
				equal = false;
			}
			if ( Object1.NewPrice != null && Object2.NewPrice != null )
			{
				if (Object1.NewPrice != Object2.NewPrice)
					equal = false;
			}
			else if (Object1.NewPrice == null ^ Object2.NewPrice == null )
			{
				equal = false;
			}
			if ( Object1.ChangedOrderStatus != null && Object2.ChangedOrderStatus != null )
			{
				if (Object1.ChangedOrderStatus != Object2.ChangedOrderStatus)
					equal = false;
			}
			else if (Object1.ChangedOrderStatus == null ^ Object2.ChangedOrderStatus == null )
			{
				equal = false;
			}
			if ( Object1.Condition != null && Object2.Condition != null )
			{
				if (Object1.Condition != Object2.Condition)
					equal = false;
			}
			else if (Object1.Condition == null ^ Object2.Condition == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ExecOrderBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ExecOrderComparer GetComparer()
        {
            return new ExecOrderComparer();
        }
        */

        // Comparer delegates back to ExecOrder
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ExecOrder rhs, ExecOrderColumn which)
        {
            switch (which)
            {
            	
            	
            	case ExecOrderColumn.OrderId:
            		return this.OrderId.CompareTo(rhs.OrderId);
            		
            		                 
            	
            	
            	case ExecOrderColumn.RefOrderId:
            		return this.RefOrderId.CompareTo(rhs.RefOrderId);
            		
            		                 
            	
            	
            	case ExecOrderColumn.MessageType:
            		return this.MessageType.CompareTo(rhs.MessageType);
            		
            		                 
            	
            	
            	case ExecOrderColumn.FisOrderId:
            		return this.FisOrderId.Value.CompareTo(rhs.FisOrderId.Value);
            		
            		                 
            	
            	
            	case ExecOrderColumn.SecSymbol:
            		return this.SecSymbol.CompareTo(rhs.SecSymbol);
            		
            		                 
            	
            	
            	case ExecOrderColumn.Side:
            		return this.Side.CompareTo(rhs.Side);
            		
            		                 
            	
            	
            	case ExecOrderColumn.Price:
            		return this.Price.CompareTo(rhs.Price);
            		
            		                 
            	
            	
            	case ExecOrderColumn.AvgPrice:
            		return this.AvgPrice.Value.CompareTo(rhs.AvgPrice.Value);
            		
            		                 
            	
            	
            	case ExecOrderColumn.ConPrice:
            		return this.ConPrice.CompareTo(rhs.ConPrice);
            		
            		                 
            	
            	
            	case ExecOrderColumn.Volume:
            		return this.Volume.CompareTo(rhs.Volume);
            		
            		                 
            	
            	
            	case ExecOrderColumn.ExecutedVol:
            		return this.ExecutedVol.Value.CompareTo(rhs.ExecutedVol.Value);
            		
            		                 
            	
            	
            	case ExecOrderColumn.ExecutedPrice:
            		return this.ExecutedPrice.Value.CompareTo(rhs.ExecutedPrice.Value);
            		
            		                 
            	
            	
            	case ExecOrderColumn.CancelVolume:
            		return this.CancelVolume.Value.CompareTo(rhs.CancelVolume.Value);
            		
            		                 
            	
            	
            	case ExecOrderColumn.CancelledVolume:
            		return this.CancelledVolume.Value.CompareTo(rhs.CancelledVolume.Value);
            		
            		                 
            	
            	
            	case ExecOrderColumn.SubCustAccountId:
            		return this.SubCustAccountId.CompareTo(rhs.SubCustAccountId);
            		
            		                 
            	
            	
            	case ExecOrderColumn.ExecTransType:
            		return this.ExecTransType.Value.CompareTo(rhs.ExecTransType.Value);
            		
            		                 
            	
            	
            	case ExecOrderColumn.TradeTime:
            		return this.TradeTime.Value.CompareTo(rhs.TradeTime.Value);
            		
            		                 
            	
            	
            	case ExecOrderColumn.MatchedTime:
            		return this.MatchedTime.Value.CompareTo(rhs.MatchedTime.Value);
            		
            		                 
            	
            	
            	case ExecOrderColumn.CancelledTime:
            		return this.CancelledTime.Value.CompareTo(rhs.CancelledTime.Value);
            		
            		                 
            	
            	
            	case ExecOrderColumn.OrderStatus:
            		return this.OrderStatus.Value.CompareTo(rhs.OrderStatus.Value);
            		
            		                 
            	
            	
            	case ExecOrderColumn.OrdRejReason:
            		return this.OrdRejReason.Value.CompareTo(rhs.OrdRejReason.Value);
            		
            		                 
            	
            	
            	case ExecOrderColumn.ConfirmNo:
            		return this.ConfirmNo.CompareTo(rhs.ConfirmNo);
            		
            		                 
            	
            	
            	case ExecOrderColumn.CancelledConfirmNo:
            		return this.CancelledConfirmNo.CompareTo(rhs.CancelledConfirmNo);
            		
            		                 
            	
            	
            	case ExecOrderColumn.SourceId:
            		return this.SourceId.Value.CompareTo(rhs.SourceId.Value);
            		
            		                 
            	
            	
            	case ExecOrderColumn.ExecType:
            		return this.ExecType.CompareTo(rhs.ExecType);
            		
            		                 
            	
            	
            	case ExecOrderColumn.CancelledExecType:
            		return this.CancelledExecType.CompareTo(rhs.CancelledExecType);
            		
            		                 
            	
            	
            	case ExecOrderColumn.PortOrClient:
            		return this.PortOrClient.CompareTo(rhs.PortOrClient);
            		
            		                 
            	
            	
            	case ExecOrderColumn.Market:
            		return this.Market.CompareTo(rhs.Market);
            		
            		                 
            	
            	
            	case ExecOrderColumn.MarketStatus:
            		return this.MarketStatus.CompareTo(rhs.MarketStatus);
            		
            		                 
            	
            	
            	case ExecOrderColumn.OrderSource:
            		return this.OrderSource.CompareTo(rhs.OrderSource);
            		
            		                 
            	
            	
            	case ExecOrderColumn.IsNewOrder:
            		return this.IsNewOrder.Value.CompareTo(rhs.IsNewOrder.Value);
            		
            		                 
            	
            	
            	case ExecOrderColumn.Sequence:
            		return this.Sequence.CompareTo(rhs.Sequence);
            		
            		                 
            	
            	
            	case ExecOrderColumn.NumOfMatch:
            		return this.NumOfMatch.Value.CompareTo(rhs.NumOfMatch.Value);
            		
            		                 
            	
            	
            	case ExecOrderColumn.QuickOrderId:
            		return this.QuickOrderId.Value.CompareTo(rhs.QuickOrderId.Value);
            		
            		                 
            	
            	
            	case ExecOrderColumn.ConditionOrderId:
            		return this.ConditionOrderId.Value.CompareTo(rhs.ConditionOrderId.Value);
            		
            		                 
            	
            	
            	case ExecOrderColumn.IsNewStatus:
            		return this.IsNewStatus.Value.CompareTo(rhs.IsNewStatus.Value);
            		
            		                 
            	
            	
            	case ExecOrderColumn.IsNewVolume:
            		return this.IsNewVolume.Value.CompareTo(rhs.IsNewVolume.Value);
            		
            		                 
            	
            	
            	case ExecOrderColumn.NewPrice:
            		return this.NewPrice.Value.CompareTo(rhs.NewPrice.Value);
            		
            		                 
            	
            	
            	case ExecOrderColumn.ChangedOrderStatus:
            		return this.ChangedOrderStatus.Value.CompareTo(rhs.ChangedOrderStatus.Value);
            		
            		                 
            	
            	
            	case ExecOrderColumn.Condition:
            		return this.Condition.CompareTo(rhs.Condition);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
        [ScriptIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ExecOrderKey> Members
		
		// member variable for the EntityId property
		private ExecOrderKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
        [ScriptIgnore]
		public virtual ExecOrderKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ExecOrderKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute(), ScriptIgnore()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
        [ScriptIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ExecOrder")
					.Append("|").Append( this.OrderId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{41}{40}- OrderId: {0}{40}- RefOrderId: {1}{40}- MessageType: {2}{40}- FisOrderId: {3}{40}- SecSymbol: {4}{40}- Side: {5}{40}- Price: {6}{40}- AvgPrice: {7}{40}- ConPrice: {8}{40}- Volume: {9}{40}- ExecutedVol: {10}{40}- ExecutedPrice: {11}{40}- CancelVolume: {12}{40}- CancelledVolume: {13}{40}- SubCustAccountId: {14}{40}- ExecTransType: {15}{40}- TradeTime: {16}{40}- MatchedTime: {17}{40}- CancelledTime: {18}{40}- OrderStatus: {19}{40}- OrdRejReason: {20}{40}- ConfirmNo: {21}{40}- CancelledConfirmNo: {22}{40}- SourceId: {23}{40}- ExecType: {24}{40}- CancelledExecType: {25}{40}- PortOrClient: {26}{40}- Market: {27}{40}- MarketStatus: {28}{40}- OrderSource: {29}{40}- IsNewOrder: {30}{40}- Sequence: {31}{40}- NumOfMatch: {32}{40}- QuickOrderId: {33}{40}- ConditionOrderId: {34}{40}- IsNewStatus: {35}{40}- IsNewVolume: {36}{40}- NewPrice: {37}{40}- ChangedOrderStatus: {38}{40}- Condition: {39}{40}{42}", 
				this.OrderId,
				(this.RefOrderId == null) ? string.Empty : this.RefOrderId.ToString(),
				(this.MessageType == null) ? string.Empty : this.MessageType.ToString(),
				(this.FisOrderId == null) ? string.Empty : this.FisOrderId.ToString(),
				this.SecSymbol,
				this.Side,
				this.Price,
				(this.AvgPrice == null) ? string.Empty : this.AvgPrice.ToString(),
				(this.ConPrice == null) ? string.Empty : this.ConPrice.ToString(),
				this.Volume,
				(this.ExecutedVol == null) ? string.Empty : this.ExecutedVol.ToString(),
				(this.ExecutedPrice == null) ? string.Empty : this.ExecutedPrice.ToString(),
				(this.CancelVolume == null) ? string.Empty : this.CancelVolume.ToString(),
				(this.CancelledVolume == null) ? string.Empty : this.CancelledVolume.ToString(),
				this.SubCustAccountId,
				(this.ExecTransType == null) ? string.Empty : this.ExecTransType.ToString(),
				(this.TradeTime == null) ? string.Empty : this.TradeTime.ToString(),
				(this.MatchedTime == null) ? string.Empty : this.MatchedTime.ToString(),
				(this.CancelledTime == null) ? string.Empty : this.CancelledTime.ToString(),
				(this.OrderStatus == null) ? string.Empty : this.OrderStatus.ToString(),
				(this.OrdRejReason == null) ? string.Empty : this.OrdRejReason.ToString(),
				(this.ConfirmNo == null) ? string.Empty : this.ConfirmNo.ToString(),
				(this.CancelledConfirmNo == null) ? string.Empty : this.CancelledConfirmNo.ToString(),
				(this.SourceId == null) ? string.Empty : this.SourceId.ToString(),
				(this.ExecType == null) ? string.Empty : this.ExecType.ToString(),
				(this.CancelledExecType == null) ? string.Empty : this.CancelledExecType.ToString(),
				(this.PortOrClient == null) ? string.Empty : this.PortOrClient.ToString(),
				this.Market,
				(this.MarketStatus == null) ? string.Empty : this.MarketStatus.ToString(),
				(this.OrderSource == null) ? string.Empty : this.OrderSource.ToString(),
				(this.IsNewOrder == null) ? string.Empty : this.IsNewOrder.ToString(),
				this.Sequence,
				(this.NumOfMatch == null) ? string.Empty : this.NumOfMatch.ToString(),
				(this.QuickOrderId == null) ? string.Empty : this.QuickOrderId.ToString(),
				(this.ConditionOrderId == null) ? string.Empty : this.ConditionOrderId.ToString(),
				(this.IsNewStatus == null) ? string.Empty : this.IsNewStatus.ToString(),
				(this.IsNewVolume == null) ? string.Empty : this.IsNewVolume.ToString(),
				(this.NewPrice == null) ? string.Empty : this.NewPrice.ToString(),
				(this.ChangedOrderStatus == null) ? string.Empty : this.ChangedOrderStatus.ToString(),
				(this.Condition == null) ? string.Empty : this.Condition.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ExecOrder' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ExecOrderEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// OrderID : OrderID identifies ExecOrder
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ExecOrder"</remarks>
		public System.Int32 OrderId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// RefOrderID : ID cua order duoc tao ra boi GW
		/// </summary>
		public System.String		  RefOrderId = null;
		
		/// <summary>
		/// MessageType : Loai cua message (7a = new order, 7b = ack, 7e = lenh da thuc thi, 7c = cancel order, 6a = order tu broker, 7d = change order, 6d = change tu broker, 3D = cancel deal )
		/// </summary>
		public System.String		  MessageType = null;
		
		/// <summary>
		/// FISOrderID : order id sinh ra tu FIS
		/// </summary>
		public System.Int32?		  FisOrderId = null;
		
		/// <summary>
		/// SecSymbol : Ma chung khoan
		/// </summary>
		public System.String		  SecSymbol = string.Empty;
		
		/// <summary>
		/// Side : B = Mua, S = Ban
		/// </summary>
		public System.String		  Side = string.Empty;
		
		/// <summary>
		/// Price : Gia chung khoan
		/// </summary>
		public System.Decimal		  Price = 0.0m;
		
		/// <summary>
		/// AvgPrice : Gia trung binh
		/// </summary>
		public System.Decimal?		  AvgPrice = null;
		
		/// <summary>
		/// ConPrice : Dieu kien lenh, A = preOpen, C = closeOpen
		/// </summary>
		public System.String		  ConPrice = null;
		
		/// <summary>
		/// Volume : Khoi luong co phieu mua hay ban
		/// </summary>
		public System.Int32		  Volume = (int)0;
		
		/// <summary>
		/// ExecutedVol : Khoi luong khop
		/// </summary>
		public System.Int32?		  ExecutedVol = null;
		
		/// <summary>
		/// ExecutedPrice : Gia khop
		/// </summary>
		public System.Decimal?		  ExecutedPrice = null;
		
		/// <summary>
		/// CancelVolume : Khoi luong huy
		/// </summary>
		public System.Int32?		  CancelVolume = null;
		
		/// <summary>
		/// CancelledVolume : Khoi luong duoc huy
		/// </summary>
		public System.Int32?		  CancelledVolume = null;
		
		/// <summary>
		/// SubCustAccountID : Tai khoan thuc hien giao dich
		/// </summary>
		public System.String		  SubCustAccountId = string.Empty;
		
		/// <summary>
		/// ExecTransType : Loai lenh (0 = new, 1 = cancel, 2 = change acc)
		/// </summary>
		public System.Int32?		  ExecTransType = null;
		
		/// <summary>
		/// TradeTime : Thoi gian d?t l?nh vào h? th?ng
		/// </summary>
		public System.DateTime?		  TradeTime = null;
		
		/// <summary>
		/// MatchedTime : Thoi gian khop
		/// </summary>
		public System.DateTime?		  MatchedTime = null;
		
		/// <summary>
		/// CancelledTime : Thoi gian lenh duoc huy
		/// </summary>
		public System.DateTime?		  CancelledTime = null;
		
		/// <summary>
		/// OrderStatus : Trang thai lenh ( ORD_NOTHING = -1, ORD_PENDING = 0, ORD_WAITING = 1, ORD_FINISHED = 2, ORD_REJECTED = 3)
		/// </summary>
		public System.Int16?		  OrderStatus = null;
		
		/// <summary>
		/// OrdRejReason : nguyen nhan lenh bi tu choi
		/// </summary>
		public System.Int32?		  OrdRejReason = null;
		
		/// <summary>
		/// ConfirmNo : ID duoc gan boi san giao dich
		/// </summary>
		public System.String		  ConfirmNo = null;
		
		/// <summary>
		/// CancelledConfirmNo : ID cua lenh huy duoc gan boi san giao dich
		/// </summary>
		public System.String		  CancelledConfirmNo = null;
		
		/// <summary>
		/// SourceID : 0=SET, 1 = FIS
		/// </summary>
		public System.Int16?		  SourceId = null;
		
		/// <summary>
		/// ExecType : N=normal, C = crossing
		/// </summary>
		public System.String		  ExecType = null;
		
		/// <summary>
		/// CancelledExecType : N=normal, C = crossing
		/// </summary>
		public System.String		  CancelledExecType = null;
		
		/// <summary>
		/// PortOrClient : Loai khach hang
		/// </summary>
		public System.String		  PortOrClient = null;
		
		/// <summary>
		/// Market : Thi truong
		/// </summary>
		public System.String		  Market = string.Empty;
		
		/// <summary>
		/// MarketStatus : Trang thai thi truong
		/// </summary>
		public System.String		  MarketStatus = null;
		
		/// <summary>
		/// OrderSource : Lenh tu web hay tu nguon khac (W = Web,)
		/// </summary>
		public System.String		  OrderSource = null;
		
		/// <summary>
		/// IsNewOrder : Lenh moi, chua duoc xem thong tin
		/// </summary>
		public System.Boolean?		  IsNewOrder = null;
		
		/// <summary>
		/// Sequence : Thu tu cua lenh
		/// </summary>
		public System.Int32		  Sequence = (int)0;
		
		/// <summary>
		/// NumOfMatch : So lan khop
		/// </summary>
		public System.Int32?		  NumOfMatch = null;
		
		/// <summary>
		/// QuickOrderID : ID is of OrderInfo
		/// </summary>
		public System.Int32?		  QuickOrderId = null;
		
		/// <summary>
		/// ConditionOrderID : ConditionOrderID is of ExecOrder
		/// </summary>
		public System.Int64?		  ConditionOrderId = null;
		
		/// <summary>
		/// IsNewStatus : 
		/// </summary>
		public System.Boolean?		  IsNewStatus = null;
		
		/// <summary>
		/// IsNewVolume : 
		/// </summary>
		public System.Boolean?		  IsNewVolume = null;
		
		/// <summary>
		/// NewPrice : 
		/// </summary>
		public System.Decimal?		  NewPrice = null;
		
		/// <summary>
		/// ChangedOrderStatus : 
		/// </summary>
		public System.Int16?		  ChangedOrderStatus = null;
		
		/// <summary>
		/// Condition : 
		/// </summary>
		public System.String		  Condition = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private ConditionOrder _conditionOrderIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ConditionOrder"/>.
		/// </summary>
		/// <value>The source ConditionOrder for ConditionOrderId.</value>
		[XmlIgnore()]
        [ScriptIgnore()]
		[Browsable(false)]
		public virtual ConditionOrder ConditionOrderIdSource
      	{
            get { return this._conditionOrderIdSource; }
            set { this._conditionOrderIdSource = value; }
      	}
		private QuickOrder _quickOrderIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="QuickOrder"/>.
		/// </summary>
		/// <value>The source QuickOrder for QuickOrderId.</value>
		[XmlIgnore()]
        [ScriptIgnore()]
		[Browsable(false)]
		public virtual QuickOrder QuickOrderIdSource
      	{
            get { return this._quickOrderIdSource; }
            set { this._quickOrderIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ExecOrderEntityData _tmp = new ExecOrderEntityData();
						
			_tmp.OrderId = this.OrderId;
			
			_tmp.RefOrderId = this.RefOrderId;
			_tmp.MessageType = this.MessageType;
			_tmp.FisOrderId = this.FisOrderId;
			_tmp.SecSymbol = this.SecSymbol;
			_tmp.Side = this.Side;
			_tmp.Price = this.Price;
			_tmp.AvgPrice = this.AvgPrice;
			_tmp.ConPrice = this.ConPrice;
			_tmp.Volume = this.Volume;
			_tmp.ExecutedVol = this.ExecutedVol;
			_tmp.ExecutedPrice = this.ExecutedPrice;
			_tmp.CancelVolume = this.CancelVolume;
			_tmp.CancelledVolume = this.CancelledVolume;
			_tmp.SubCustAccountId = this.SubCustAccountId;
			_tmp.ExecTransType = this.ExecTransType;
			_tmp.TradeTime = this.TradeTime;
			_tmp.MatchedTime = this.MatchedTime;
			_tmp.CancelledTime = this.CancelledTime;
			_tmp.OrderStatus = this.OrderStatus;
			_tmp.OrdRejReason = this.OrdRejReason;
			_tmp.ConfirmNo = this.ConfirmNo;
			_tmp.CancelledConfirmNo = this.CancelledConfirmNo;
			_tmp.SourceId = this.SourceId;
			_tmp.ExecType = this.ExecType;
			_tmp.CancelledExecType = this.CancelledExecType;
			_tmp.PortOrClient = this.PortOrClient;
			_tmp.Market = this.Market;
			_tmp.MarketStatus = this.MarketStatus;
			_tmp.OrderSource = this.OrderSource;
			_tmp.IsNewOrder = this.IsNewOrder;
			_tmp.Sequence = this.Sequence;
			_tmp.NumOfMatch = this.NumOfMatch;
			_tmp.QuickOrderId = this.QuickOrderId;
			_tmp.ConditionOrderId = this.ConditionOrderId;
			_tmp.IsNewStatus = this.IsNewStatus;
			_tmp.IsNewVolume = this.IsNewVolume;
			_tmp.NewPrice = this.NewPrice;
			_tmp.ChangedOrderStatus = this.ChangedOrderStatus;
			_tmp.Condition = this.Condition;
			
			#region Source Parent Composite Entities
			if (this.ConditionOrderIdSource != null)
				_tmp.ConditionOrderIdSource = MakeCopyOf(this.ConditionOrderIdSource) as ConditionOrder;
			if (this.QuickOrderIdSource != null)
				_tmp.QuickOrderIdSource = MakeCopyOf(this.QuickOrderIdSource) as QuickOrder;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			ExecOrderEntityData _tmp = new ExecOrderEntityData();
						
			_tmp.OrderId = this.OrderId;
			
			_tmp.RefOrderId = this.RefOrderId;
			_tmp.MessageType = this.MessageType;
			_tmp.FisOrderId = this.FisOrderId;
			_tmp.SecSymbol = this.SecSymbol;
			_tmp.Side = this.Side;
			_tmp.Price = this.Price;
			_tmp.AvgPrice = this.AvgPrice;
			_tmp.ConPrice = this.ConPrice;
			_tmp.Volume = this.Volume;
			_tmp.ExecutedVol = this.ExecutedVol;
			_tmp.ExecutedPrice = this.ExecutedPrice;
			_tmp.CancelVolume = this.CancelVolume;
			_tmp.CancelledVolume = this.CancelledVolume;
			_tmp.SubCustAccountId = this.SubCustAccountId;
			_tmp.ExecTransType = this.ExecTransType;
			_tmp.TradeTime = this.TradeTime;
			_tmp.MatchedTime = this.MatchedTime;
			_tmp.CancelledTime = this.CancelledTime;
			_tmp.OrderStatus = this.OrderStatus;
			_tmp.OrdRejReason = this.OrdRejReason;
			_tmp.ConfirmNo = this.ConfirmNo;
			_tmp.CancelledConfirmNo = this.CancelledConfirmNo;
			_tmp.SourceId = this.SourceId;
			_tmp.ExecType = this.ExecType;
			_tmp.CancelledExecType = this.CancelledExecType;
			_tmp.PortOrClient = this.PortOrClient;
			_tmp.Market = this.Market;
			_tmp.MarketStatus = this.MarketStatus;
			_tmp.OrderSource = this.OrderSource;
			_tmp.IsNewOrder = this.IsNewOrder;
			_tmp.Sequence = this.Sequence;
			_tmp.NumOfMatch = this.NumOfMatch;
			_tmp.QuickOrderId = this.QuickOrderId;
			_tmp.ConditionOrderId = this.ConditionOrderId;
			_tmp.IsNewStatus = this.IsNewStatus;
			_tmp.IsNewVolume = this.IsNewVolume;
			_tmp.NewPrice = this.NewPrice;
			_tmp.ChangedOrderStatus = this.ChangedOrderStatus;
			_tmp.Condition = this.Condition;
			
			#region Source Parent Composite Entities
			if (this.ConditionOrderIdSource != null && existingCopies.Contains(this.ConditionOrderIdSource))
				_tmp.ConditionOrderIdSource = existingCopies[this.ConditionOrderIdSource] as ConditionOrder;
			else
				_tmp.ConditionOrderIdSource = MakeCopyOf(this.ConditionOrderIdSource, existingCopies) as ConditionOrder;
			if (this.QuickOrderIdSource != null && existingCopies.Contains(this.QuickOrderIdSource))
				_tmp.QuickOrderIdSource = existingCopies[this.QuickOrderIdSource] as QuickOrder;
			else
				_tmp.QuickOrderIdSource = MakeCopyOf(this.QuickOrderIdSource, existingCopies) as QuickOrder;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ExecOrderColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(ExecOrderColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ExecOrderColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(ExecOrderColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ExecOrderColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(ExecOrderColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ExecOrderEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ExecOrderEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ExecOrderColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(ExecOrderColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ExecOrderEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ExecOrderEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ExecOrderEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ExecOrder"/> object.
	/// </remarks>
	public class ExecOrderEventArgs : System.EventArgs
	{
		private ExecOrderColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ExecOrderEventArgs class.
		///</summary>
		public ExecOrderEventArgs(ExecOrderColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ExecOrderEventArgs class.
		///</summary>
		public ExecOrderEventArgs(ExecOrderColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ExecOrderColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ExecOrderColumn" />
		public ExecOrderColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ExecOrder related events.
	///</summary>
	public delegate void ExecOrderEventHandler(object sender, ExecOrderEventArgs e);
	
	#region ExecOrderComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ExecOrderComparer : System.Collections.Generic.IComparer<ExecOrder>
	{
		ExecOrderColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ExecOrderComparer"/> class.
        /// </summary>
		public ExecOrderComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ExecOrderComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ExecOrderComparer(ExecOrderColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="ExecOrder"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="ExecOrder"/> to compare.</param>
        /// <param name="b">The second <c>ExecOrder</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ExecOrder a, ExecOrder b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ExecOrder entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ExecOrder a, ExecOrder b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ExecOrderColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ExecOrderKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ExecOrder"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ExecOrderKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ExecOrderKey class.
		/// </summary>
		public ExecOrderKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ExecOrderKey class.
		/// </summary>
		public ExecOrderKey(ExecOrderBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.OrderId = entity.OrderId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ExecOrderKey class.
		/// </summary>
		public ExecOrderKey(System.Int32 _orderId)
		{
			#region Init Properties

			this.OrderId = _orderId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ExecOrderBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ExecOrderBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the OrderId property
		private System.Int32 _orderId;
		
		/// <summary>
		/// Gets or sets the OrderId property.
		/// </summary>
		public System.Int32 OrderId
		{
			get { return _orderId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.OrderId = value;
				
				_orderId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				OrderId = ( values["OrderId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["OrderId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("OrderId", OrderId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("OrderId: {0}{1}",
								OrderId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ExecOrderColumn Enum
	
	/// <summary>
	/// Enumerate the ExecOrder columns.
	/// </summary>
	[Serializable]
	public enum ExecOrderColumn : int
	{
		/// <summary>
		/// OrderId : OrderID identifies ExecOrder
		/// </summary>
		[EnumTextValue("OrderID")]
		[ColumnEnum("OrderID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		OrderId = 1,
		/// <summary>
		/// RefOrderId : ID cua order duoc tao ra boi GW
		/// </summary>
		[EnumTextValue("RefOrderID")]
		[ColumnEnum("RefOrderID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 64)]
		RefOrderId = 2,
		/// <summary>
		/// MessageType : Loai cua message (7a = new order, 7b = ack, 7e = lenh da thuc thi, 7c = cancel order, 6a = order tu broker, 7d = change order, 6d = change tu broker, 3D = cancel deal )
		/// </summary>
		[EnumTextValue("MessageType")]
		[ColumnEnum("MessageType", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 2)]
		MessageType = 3,
		/// <summary>
		/// FisOrderId : order id sinh ra tu FIS
		/// </summary>
		[EnumTextValue("FISOrderID")]
		[ColumnEnum("FISOrderID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		FisOrderId = 4,
		/// <summary>
		/// SecSymbol : Ma chung khoan
		/// </summary>
		[EnumTextValue("SecSymbol")]
		[ColumnEnum("SecSymbol", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 8)]
		SecSymbol = 5,
		/// <summary>
		/// Side : B = Mua, S = Ban
		/// </summary>
		[EnumTextValue("Side")]
		[ColumnEnum("Side", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 1)]
		Side = 6,
		/// <summary>
		/// Price : Gia chung khoan
		/// </summary>
		[EnumTextValue("Price")]
		[ColumnEnum("Price", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		Price = 7,
		/// <summary>
		/// AvgPrice : Gia trung binh
		/// </summary>
		[EnumTextValue("AvgPrice")]
		[ColumnEnum("AvgPrice", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AvgPrice = 8,
		/// <summary>
		/// ConPrice : Dieu kien lenh, A = preOpen, C = closeOpen
		/// </summary>
		[EnumTextValue("ConPrice")]
		[ColumnEnum("ConPrice", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 1)]
		ConPrice = 9,
		/// <summary>
		/// Volume : Khoi luong co phieu mua hay ban
		/// </summary>
		[EnumTextValue("Volume")]
		[ColumnEnum("Volume", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		Volume = 10,
		/// <summary>
		/// ExecutedVol : Khoi luong khop
		/// </summary>
		[EnumTextValue("ExecutedVol")]
		[ColumnEnum("ExecutedVol", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ExecutedVol = 11,
		/// <summary>
		/// ExecutedPrice : Gia khop
		/// </summary>
		[EnumTextValue("ExecutedPrice")]
		[ColumnEnum("ExecutedPrice", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ExecutedPrice = 12,
		/// <summary>
		/// CancelVolume : Khoi luong huy
		/// </summary>
		[EnumTextValue("CancelVolume")]
		[ColumnEnum("CancelVolume", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CancelVolume = 13,
		/// <summary>
		/// CancelledVolume : Khoi luong duoc huy
		/// </summary>
		[EnumTextValue("CancelledVolume")]
		[ColumnEnum("CancelledVolume", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CancelledVolume = 14,
		/// <summary>
		/// SubCustAccountId : Tai khoan thuc hien giao dich
		/// </summary>
		[EnumTextValue("SubCustAccountID")]
		[ColumnEnum("SubCustAccountID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		SubCustAccountId = 15,
		/// <summary>
		/// ExecTransType : Loai lenh (0 = new, 1 = cancel, 2 = change acc)
		/// </summary>
		[EnumTextValue("ExecTransType")]
		[ColumnEnum("ExecTransType", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ExecTransType = 16,
		/// <summary>
		/// TradeTime : Thoi gian d?t l?nh vào h? th?ng
		/// </summary>
		[EnumTextValue("TradeTime")]
		[ColumnEnum("TradeTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		TradeTime = 17,
		/// <summary>
		/// MatchedTime : Thoi gian khop
		/// </summary>
		[EnumTextValue("MatchedTime")]
		[ColumnEnum("MatchedTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		MatchedTime = 18,
		/// <summary>
		/// CancelledTime : Thoi gian lenh duoc huy
		/// </summary>
		[EnumTextValue("CancelledTime")]
		[ColumnEnum("CancelledTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CancelledTime = 19,
		/// <summary>
		/// OrderStatus : Trang thai lenh ( ORD_NOTHING = -1, ORD_PENDING = 0, ORD_WAITING = 1, ORD_FINISHED = 2, ORD_REJECTED = 3)
		/// </summary>
		[EnumTextValue("OrderStatus")]
		[ColumnEnum("OrderStatus", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		OrderStatus = 20,
		/// <summary>
		/// OrdRejReason : nguyen nhan lenh bi tu choi
		/// </summary>
		[EnumTextValue("OrdRejReason")]
		[ColumnEnum("OrdRejReason", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		OrdRejReason = 21,
		/// <summary>
		/// ConfirmNo : ID duoc gan boi san giao dich
		/// </summary>
		[EnumTextValue("ConfirmNo")]
		[ColumnEnum("ConfirmNo", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 6)]
		ConfirmNo = 22,
		/// <summary>
		/// CancelledConfirmNo : ID cua lenh huy duoc gan boi san giao dich
		/// </summary>
		[EnumTextValue("CancelledConfirmNo")]
		[ColumnEnum("CancelledConfirmNo", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 6)]
		CancelledConfirmNo = 23,
		/// <summary>
		/// SourceId : 0=SET, 1 = FIS
		/// </summary>
		[EnumTextValue("SourceID")]
		[ColumnEnum("SourceID", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		SourceId = 24,
		/// <summary>
		/// ExecType : N=normal, C = crossing
		/// </summary>
		[EnumTextValue("ExecType")]
		[ColumnEnum("ExecType", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 1)]
		ExecType = 25,
		/// <summary>
		/// CancelledExecType : N=normal, C = crossing
		/// </summary>
		[EnumTextValue("CancelledExecType")]
		[ColumnEnum("CancelledExecType", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 1)]
		CancelledExecType = 26,
		/// <summary>
		/// PortOrClient : Loai khach hang
		/// </summary>
		[EnumTextValue("PortOrClient")]
		[ColumnEnum("PortOrClient", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 1)]
		PortOrClient = 27,
		/// <summary>
		/// Market : Thi truong
		/// </summary>
		[EnumTextValue("Market")]
		[ColumnEnum("Market", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 1)]
		Market = 28,
		/// <summary>
		/// MarketStatus : Trang thai thi truong
		/// </summary>
		[EnumTextValue("MarketStatus")]
		[ColumnEnum("MarketStatus", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 1)]
		MarketStatus = 29,
		/// <summary>
		/// OrderSource : Lenh tu web hay tu nguon khac (W = Web,)
		/// </summary>
		[EnumTextValue("OrderSource")]
		[ColumnEnum("OrderSource", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 1)]
		OrderSource = 30,
		/// <summary>
		/// IsNewOrder : Lenh moi, chua duoc xem thong tin
		/// </summary>
		[EnumTextValue("IsNewOrder")]
		[ColumnEnum("IsNewOrder", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsNewOrder = 31,
		/// <summary>
		/// Sequence : Thu tu cua lenh
		/// </summary>
		[EnumTextValue("Sequence")]
		[ColumnEnum("Sequence", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		Sequence = 32,
		/// <summary>
		/// NumOfMatch : So lan khop
		/// </summary>
		[EnumTextValue("NumOfMatch")]
		[ColumnEnum("NumOfMatch", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		NumOfMatch = 33,
		/// <summary>
		/// QuickOrderId : ID is of OrderInfo
		/// </summary>
		[EnumTextValue("QuickOrderID")]
		[ColumnEnum("QuickOrderID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		QuickOrderId = 34,
		/// <summary>
		/// ConditionOrderId : ConditionOrderID is of ExecOrder
		/// </summary>
		[EnumTextValue("ConditionOrderID")]
		[ColumnEnum("ConditionOrderID", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		ConditionOrderId = 35,
		/// <summary>
		/// IsNewStatus : 
		/// </summary>
		[EnumTextValue("IsNewStatus")]
		[ColumnEnum("IsNewStatus", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsNewStatus = 36,
		/// <summary>
		/// IsNewVolume : 
		/// </summary>
		[EnumTextValue("IsNewVolume")]
		[ColumnEnum("IsNewVolume", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		IsNewVolume = 37,
		/// <summary>
		/// NewPrice : 
		/// </summary>
		[EnumTextValue("NewPrice")]
		[ColumnEnum("NewPrice", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		NewPrice = 38,
		/// <summary>
		/// ChangedOrderStatus : 
		/// </summary>
		[EnumTextValue("ChangedOrderStatus")]
		[ColumnEnum("ChangedOrderStatus", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		ChangedOrderStatus = 39,
		/// <summary>
		/// Condition : 
		/// </summary>
		[EnumTextValue("Condition")]
		[ColumnEnum("Condition", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 1)]
		Condition = 40
	}//End enum

	#endregion ExecOrderColumn Enum

} // end namespace
