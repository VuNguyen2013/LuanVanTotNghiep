
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Friday, November 12, 2010
	Important: Do not modify this file. Edit the file TradedHistory.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Web.Script.Serialization;

using ETradeHistory.Entities.Validation;
#endregion

namespace ETradeHistory.Entities
{
	///<summary>
	/// An object representation of the 'TradedHistory' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class TradedHistoryBase : EntityBase, ITradedHistory, IEntityId<TradedHistoryKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private TradedHistoryEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private TradedHistoryEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private TradedHistoryEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<TradedHistory> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event TradedHistoryEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event TradedHistoryEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="TradedHistoryBase"/> instance.
		///</summary>
		public TradedHistoryBase()
		{
			this.entityData = new TradedHistoryEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="TradedHistoryBase"/> instance.
		///</summary>
		///<param name="_tradeTime"></param>
		///<param name="_subCustAccountId"></param>
		///<param name="_type">Loai log (NEW_ORDER, LOGON, LOGOUT, CANCEL_ORD, CHANGE_ORD)</param>
		///<param name="_fisOrderId">order id sinh ra tu FIS</param>
		///<param name="_secSymbol">Ma chung khoan</param>
		///<param name="_side">B = Mua, S = Ban</param>
		///<param name="_price">Gia chung khoan</param>
		///<param name="_conPrice">Dieu kien lenh, A = preOpen, C = closeOpen</param>
		///<param name="_volume">Khoi luong co phieu mua hay ban</param>
		///<param name="_executedVol">Khoi luong khop</param>
		///<param name="_executedPrice">Gia khop</param>
		///<param name="_cancelledVolume">Khoi luong duoc huy</param>
		///<param name="_matchedTime">Thoi gian khop</param>
		///<param name="_cancelledTime">Thoi gian lenh duoc huy</param>
		///<param name="_ordRejReason">nguyen nhan lenh bi tu choi</param>
		///<param name="_cancelledRejReason">Nguyen nhan viec huy lenh bi tu choi</param>
		///<param name="_sourceId">0=SET, 1 = FIS</param>
		///<param name="_market">Thi truong</param>
		///<param name="_refOrderId">RefOrderID is of TradedHistory</param>
		///<param name="_effDate">Ngày hi?u l?c c?a l?nh ÐK.</param>
		///<param name="_expDate">Ngày h?t h?n c?a l?nh ÐK</param>
		///<param name="_minValue">Giá tr? nhò nh?t c?a l?nh ÐK</param>
		///<param name="_maxValue">Giá tr? l?n nh?t c?a l?nh ÐK</param>
		public TradedHistoryBase(System.DateTime _tradeTime, string _subCustAccountId, string _type, 
			System.Int32? _fisOrderId, string _secSymbol, string _side, decimal _price, 
			string _conPrice, long _volume, System.Int64? _executedVol, System.Decimal? _executedPrice, 
			System.Int64? _cancelledVolume, System.DateTime? _matchedTime, System.DateTime? _cancelledTime, 
			System.Int32? _ordRejReason, System.Int32? _cancelledRejReason, System.Int16? _sourceId, 
			string _market, string _refOrderId, System.DateTime? _effDate, System.DateTime? _expDate, 
			System.Decimal? _minValue, System.Decimal? _maxValue)
		{
			this.entityData = new TradedHistoryEntityData();
			this.backupData = null;

			this.TradeTime = _tradeTime;
			this.SubCustAccountId = _subCustAccountId;
			this.Type = _type;
			this.FisOrderId = _fisOrderId;
			this.SecSymbol = _secSymbol;
			this.Side = _side;
			this.Price = _price;
			this.ConPrice = _conPrice;
			this.Volume = _volume;
			this.ExecutedVol = _executedVol;
			this.ExecutedPrice = _executedPrice;
			this.CancelledVolume = _cancelledVolume;
			this.MatchedTime = _matchedTime;
			this.CancelledTime = _cancelledTime;
			this.OrdRejReason = _ordRejReason;
			this.CancelledRejReason = _cancelledRejReason;
			this.SourceId = _sourceId;
			this.Market = _market;
			this.RefOrderId = _refOrderId;
			this.EffDate = _effDate;
			this.ExpDate = _expDate;
			this.MinValue = _minValue;
			this.MaxValue = _maxValue;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="TradedHistory"/> instance.
		///</summary>
		///<param name="_tradeTime"></param>
		///<param name="_subCustAccountId"></param>
		///<param name="_type">Loai log (NEW_ORDER, LOGON, LOGOUT, CANCEL_ORD, CHANGE_ORD)</param>
		///<param name="_fisOrderId">order id sinh ra tu FIS</param>
		///<param name="_secSymbol">Ma chung khoan</param>
		///<param name="_side">B = Mua, S = Ban</param>
		///<param name="_price">Gia chung khoan</param>
		///<param name="_conPrice">Dieu kien lenh, A = preOpen, C = closeOpen</param>
		///<param name="_volume">Khoi luong co phieu mua hay ban</param>
		///<param name="_executedVol">Khoi luong khop</param>
		///<param name="_executedPrice">Gia khop</param>
		///<param name="_cancelledVolume">Khoi luong duoc huy</param>
		///<param name="_matchedTime">Thoi gian khop</param>
		///<param name="_cancelledTime">Thoi gian lenh duoc huy</param>
		///<param name="_ordRejReason">nguyen nhan lenh bi tu choi</param>
		///<param name="_cancelledRejReason">Nguyen nhan viec huy lenh bi tu choi</param>
		///<param name="_sourceId">0=SET, 1 = FIS</param>
		///<param name="_market">Thi truong</param>
		///<param name="_refOrderId">RefOrderID is of TradedHistory</param>
		///<param name="_effDate">Ngày hi?u l?c c?a l?nh ÐK.</param>
		///<param name="_expDate">Ngày h?t h?n c?a l?nh ÐK</param>
		///<param name="_minValue">Giá tr? nhò nh?t c?a l?nh ÐK</param>
		///<param name="_maxValue">Giá tr? l?n nh?t c?a l?nh ÐK</param>
		public static TradedHistory CreateTradedHistory(System.DateTime _tradeTime, string _subCustAccountId, string _type, 
			System.Int32? _fisOrderId, string _secSymbol, string _side, decimal _price, 
			string _conPrice, long _volume, System.Int64? _executedVol, System.Decimal? _executedPrice, 
			System.Int64? _cancelledVolume, System.DateTime? _matchedTime, System.DateTime? _cancelledTime, 
			System.Int32? _ordRejReason, System.Int32? _cancelledRejReason, System.Int16? _sourceId, 
			string _market, string _refOrderId, System.DateTime? _effDate, System.DateTime? _expDate, 
			System.Decimal? _minValue, System.Decimal? _maxValue)
		{
			TradedHistory newTradedHistory = new TradedHistory();
			newTradedHistory.TradeTime = _tradeTime;
			newTradedHistory.SubCustAccountId = _subCustAccountId;
			newTradedHistory.Type = _type;
			newTradedHistory.FisOrderId = _fisOrderId;
			newTradedHistory.SecSymbol = _secSymbol;
			newTradedHistory.Side = _side;
			newTradedHistory.Price = _price;
			newTradedHistory.ConPrice = _conPrice;
			newTradedHistory.Volume = _volume;
			newTradedHistory.ExecutedVol = _executedVol;
			newTradedHistory.ExecutedPrice = _executedPrice;
			newTradedHistory.CancelledVolume = _cancelledVolume;
			newTradedHistory.MatchedTime = _matchedTime;
			newTradedHistory.CancelledTime = _cancelledTime;
			newTradedHistory.OrdRejReason = _ordRejReason;
			newTradedHistory.CancelledRejReason = _cancelledRejReason;
			newTradedHistory.SourceId = _sourceId;
			newTradedHistory.Market = _market;
			newTradedHistory.RefOrderId = _refOrderId;
			newTradedHistory.EffDate = _effDate;
			newTradedHistory.ExpDate = _expDate;
			newTradedHistory.MinValue = _minValue;
			newTradedHistory.MaxValue = _maxValue;
			return newTradedHistory;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		ID identifies TradedHistory
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@"ID identifies TradedHistory"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public override long Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(TradedHistoryColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TradedHistoryColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TradeTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public override System.DateTime TradeTime
		{
			get
			{
				return this.entityData.TradeTime; 
			}
			
			set
			{
				if (this.entityData.TradeTime == value)
					return;
					
				OnColumnChanging(TradedHistoryColumn.TradeTime, this.entityData.TradeTime);
				this.entityData.TradeTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TradedHistoryColumn.TradeTime, this.entityData.TradeTime);
				OnPropertyChanged("TradeTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SubCustAccountId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public override string SubCustAccountId
		{
			get
			{
				return this.entityData.SubCustAccountId; 
			}
			
			set
			{
				if (this.entityData.SubCustAccountId == value)
					return;
					
				OnColumnChanging(TradedHistoryColumn.SubCustAccountId, this.entityData.SubCustAccountId);
				this.entityData.SubCustAccountId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TradedHistoryColumn.SubCustAccountId, this.entityData.SubCustAccountId);
				OnPropertyChanged("SubCustAccountId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Type property. 
		///		Loai log (NEW_ORDER, LOGON, LOGOUT, CANCEL_ORD, CHANGE_ORD)
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Loai log (NEW_ORDER, LOGON, LOGOUT, CANCEL_ORD, CHANGE_ORD)"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual string Type
		{
			get
			{
				return this.entityData.Type; 
			}
			
			set
			{
				if (this.entityData.Type == value)
					return;
					
				OnColumnChanging(TradedHistoryColumn.Type, this.entityData.Type);
				this.entityData.Type = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TradedHistoryColumn.Type, this.entityData.Type);
				OnPropertyChanged("Type");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FisOrderId property. 
		///		order id sinh ra tu FIS
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsFisOrderIdNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"order id sinh ra tu FIS"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public override System.Int32? FisOrderId
		{
			get
			{
				return this.entityData.FisOrderId; 
			}
			
			set
			{
				if (this.entityData.FisOrderId == value)
					return;
					
				OnColumnChanging(TradedHistoryColumn.FisOrderId, this.entityData.FisOrderId);
				this.entityData.FisOrderId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TradedHistoryColumn.FisOrderId, this.entityData.FisOrderId);
				OnPropertyChanged("FisOrderId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SecSymbol property. 
		///		Ma chung khoan
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Ma chung khoan"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 8)]
		public override string SecSymbol
		{
			get
			{
				return this.entityData.SecSymbol; 
			}
			
			set
			{
				if (this.entityData.SecSymbol == value)
					return;
					
				OnColumnChanging(TradedHistoryColumn.SecSymbol, this.entityData.SecSymbol);
				this.entityData.SecSymbol = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TradedHistoryColumn.SecSymbol, this.entityData.SecSymbol);
				OnPropertyChanged("SecSymbol");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Side property. 
		///		B = Mua, S = Ban
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"B = Mua, S = Ban"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 1)]
		public virtual string Side
		{
			get
			{
				return this.entityData.Side; 
			}
			
			set
			{
				if (this.entityData.Side == value)
					return;
					
				OnColumnChanging(TradedHistoryColumn.Side, this.entityData.Side);
				this.entityData.Side = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TradedHistoryColumn.Side, this.entityData.Side);
				OnPropertyChanged("Side");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Price property. 
		///		Gia chung khoan
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Gia chung khoan"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public override decimal Price
		{
			get
			{
				return this.entityData.Price; 
			}
			
			set
			{
				if (this.entityData.Price == value)
					return;
					
				OnColumnChanging(TradedHistoryColumn.Price, this.entityData.Price);
				this.entityData.Price = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TradedHistoryColumn.Price, this.entityData.Price);
				OnPropertyChanged("Price");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ConPrice property. 
		///		Dieu kien lenh, A = preOpen, C = closeOpen
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Dieu kien lenh, A = preOpen, C = closeOpen"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual string ConPrice
		{
			get
			{
				return this.entityData.ConPrice; 
			}
			
			set
			{
				if (this.entityData.ConPrice == value)
					return;
					
				OnColumnChanging(TradedHistoryColumn.ConPrice, this.entityData.ConPrice);
				this.entityData.ConPrice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TradedHistoryColumn.ConPrice, this.entityData.ConPrice);
				OnPropertyChanged("ConPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Volume property. 
		///		Khoi luong co phieu mua hay ban
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Khoi luong co phieu mua hay ban"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual long Volume
		{
			get
			{
				return this.entityData.Volume; 
			}
			
			set
			{
				if (this.entityData.Volume == value)
					return;
					
				OnColumnChanging(TradedHistoryColumn.Volume, this.entityData.Volume);
				this.entityData.Volume = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TradedHistoryColumn.Volume, this.entityData.Volume);
				OnPropertyChanged("Volume");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExecutedVol property. 
		///		Khoi luong khop
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsExecutedVolNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Khoi luong khop"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? ExecutedVol
		{
			get
			{
				return this.entityData.ExecutedVol; 
			}
			
			set
			{
				if (this.entityData.ExecutedVol == value)
					return;
					
				OnColumnChanging(TradedHistoryColumn.ExecutedVol, this.entityData.ExecutedVol);
				this.entityData.ExecutedVol = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TradedHistoryColumn.ExecutedVol, this.entityData.ExecutedVol);
				OnPropertyChanged("ExecutedVol");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExecutedPrice property. 
		///		Gia khop
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsExecutedPriceNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Gia khop"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ExecutedPrice
		{
			get
			{
				return this.entityData.ExecutedPrice; 
			}
			
			set
			{
				if (this.entityData.ExecutedPrice == value)
					return;
					
				OnColumnChanging(TradedHistoryColumn.ExecutedPrice, this.entityData.ExecutedPrice);
				this.entityData.ExecutedPrice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TradedHistoryColumn.ExecutedPrice, this.entityData.ExecutedPrice);
				OnPropertyChanged("ExecutedPrice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CancelledVolume property. 
		///		Khoi luong duoc huy
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsCancelledVolumeNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Khoi luong duoc huy"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? CancelledVolume
		{
			get
			{
				return this.entityData.CancelledVolume; 
			}
			
			set
			{
				if (this.entityData.CancelledVolume == value)
					return;
					
				OnColumnChanging(TradedHistoryColumn.CancelledVolume, this.entityData.CancelledVolume);
				this.entityData.CancelledVolume = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TradedHistoryColumn.CancelledVolume, this.entityData.CancelledVolume);
				OnPropertyChanged("CancelledVolume");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MatchedTime property. 
		///		Thoi gian khop
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsMatchedTimeNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Thoi gian khop"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? MatchedTime
		{
			get
			{
				return this.entityData.MatchedTime; 
			}
			
			set
			{
				if (this.entityData.MatchedTime == value)
					return;
					
				OnColumnChanging(TradedHistoryColumn.MatchedTime, this.entityData.MatchedTime);
				this.entityData.MatchedTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TradedHistoryColumn.MatchedTime, this.entityData.MatchedTime);
				OnPropertyChanged("MatchedTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CancelledTime property. 
		///		Thoi gian lenh duoc huy
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCancelledTimeNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Thoi gian lenh duoc huy"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CancelledTime
		{
			get
			{
				return this.entityData.CancelledTime; 
			}
			
			set
			{
				if (this.entityData.CancelledTime == value)
					return;
					
				OnColumnChanging(TradedHistoryColumn.CancelledTime, this.entityData.CancelledTime);
				this.entityData.CancelledTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TradedHistoryColumn.CancelledTime, this.entityData.CancelledTime);
				OnPropertyChanged("CancelledTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OrdRejReason property. 
		///		nguyen nhan lenh bi tu choi
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsOrdRejReasonNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"nguyen nhan lenh bi tu choi"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? OrdRejReason
		{
			get
			{
				return this.entityData.OrdRejReason; 
			}
			
			set
			{
				if (this.entityData.OrdRejReason == value)
					return;
					
				OnColumnChanging(TradedHistoryColumn.OrdRejReason, this.entityData.OrdRejReason);
				this.entityData.OrdRejReason = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TradedHistoryColumn.OrdRejReason, this.entityData.OrdRejReason);
				OnPropertyChanged("OrdRejReason");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CancelledRejReason property. 
		///		Nguyen nhan viec huy lenh bi tu choi
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCancelledRejReasonNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Nguyen nhan viec huy lenh bi tu choi"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CancelledRejReason
		{
			get
			{
				return this.entityData.CancelledRejReason; 
			}
			
			set
			{
				if (this.entityData.CancelledRejReason == value)
					return;
					
				OnColumnChanging(TradedHistoryColumn.CancelledRejReason, this.entityData.CancelledRejReason);
				this.entityData.CancelledRejReason = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TradedHistoryColumn.CancelledRejReason, this.entityData.CancelledRejReason);
				OnPropertyChanged("CancelledRejReason");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SourceId property. 
		///		0=SET, 1 = FIS
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsSourceIdNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"0=SET, 1 = FIS"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? SourceId
		{
			get
			{
				return this.entityData.SourceId; 
			}
			
			set
			{
				if (this.entityData.SourceId == value)
					return;
					
				OnColumnChanging(TradedHistoryColumn.SourceId, this.entityData.SourceId);
				this.entityData.SourceId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TradedHistoryColumn.SourceId, this.entityData.SourceId);
				OnPropertyChanged("SourceId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Market property. 
		///		Thi truong
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Thi truong"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 1)]
		public override string Market
		{
			get
			{
				return this.entityData.Market; 
			}
			
			set
			{
				if (this.entityData.Market == value)
					return;
					
				OnColumnChanging(TradedHistoryColumn.Market, this.entityData.Market);
				this.entityData.Market = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TradedHistoryColumn.Market, this.entityData.Market);
				OnPropertyChanged("Market");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RefOrderId property. 
		///		RefOrderID is of TradedHistory
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"RefOrderID is of TradedHistory"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 64)]
		public override string RefOrderId
		{
			get
			{
				return this.entityData.RefOrderId; 
			}
			
			set
			{
				if (this.entityData.RefOrderId == value)
					return;
					
				OnColumnChanging(TradedHistoryColumn.RefOrderId, this.entityData.RefOrderId);
				this.entityData.RefOrderId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TradedHistoryColumn.RefOrderId, this.entityData.RefOrderId);
				OnPropertyChanged("RefOrderId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EffDate property. 
		///		Ngày hi?u l?c c?a l?nh ÐK.
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsEffDateNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Ngày hi?u l?c c?a l?nh ÐK."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? EffDate
		{
			get
			{
				return this.entityData.EffDate; 
			}
			
			set
			{
				if (this.entityData.EffDate == value)
					return;
					
				OnColumnChanging(TradedHistoryColumn.EffDate, this.entityData.EffDate);
				this.entityData.EffDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TradedHistoryColumn.EffDate, this.entityData.EffDate);
				OnPropertyChanged("EffDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExpDate property. 
		///		Ngày h?t h?n c?a l?nh ÐK
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsExpDateNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Ngày h?t h?n c?a l?nh ÐK"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ExpDate
		{
			get
			{
				return this.entityData.ExpDate; 
			}
			
			set
			{
				if (this.entityData.ExpDate == value)
					return;
					
				OnColumnChanging(TradedHistoryColumn.ExpDate, this.entityData.ExpDate);
				this.entityData.ExpDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TradedHistoryColumn.ExpDate, this.entityData.ExpDate);
				OnPropertyChanged("ExpDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MinValue property. 
		///		Giá tr? nhò nh?t c?a l?nh ÐK
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMinValueNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Giá tr? nhò nh?t c?a l?nh ÐK"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MinValue
		{
			get
			{
				return this.entityData.MinValue; 
			}
			
			set
			{
				if (this.entityData.MinValue == value)
					return;
					
				OnColumnChanging(TradedHistoryColumn.MinValue, this.entityData.MinValue);
				this.entityData.MinValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TradedHistoryColumn.MinValue, this.entityData.MinValue);
				OnPropertyChanged("MinValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaxValue property. 
		///		Giá tr? l?n nh?t c?a l?nh ÐK
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMaxValueNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Giá tr? l?n nh?t c?a l?nh ÐK"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MaxValue
		{
			get
			{
				return this.entityData.MaxValue; 
			}
			
			set
			{
				if (this.entityData.MaxValue == value)
					return;
					
				OnColumnChanging(TradedHistoryColumn.MaxValue, this.entityData.MaxValue);
				this.entityData.MaxValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TradedHistoryColumn.MaxValue, this.entityData.MaxValue);
				OnPropertyChanged("MaxValue");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("SubCustAccountId", "Sub Cust Account Id"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SubCustAccountId", "Sub Cust Account Id", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Type", "Type", 10));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("SecSymbol", "Sec Symbol"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SecSymbol", "Sec Symbol", 8));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Side", "Side"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Side", "Side", 1));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ConPrice", "Con Price", 1));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Market", "Market"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Market", "Market", 1));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("RefOrderId", "Ref Order Id", 64));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public override string TableName
		{
			get { return "TradedHistory"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "TradeTime", "SubCustAccountID", "Type", "FISOrderID", "SecSymbol", "Side", "Price", "ConPrice", "Volume", "ExecutedVol", "ExecutedPrice", "CancelledVolume", "MatchedTime", "CancelledTime", "OrdRejReason", "CancelledRejReason", "SourceID", "Market", "RefOrderID", "EffDate", "ExpDate", "MinValue", "MaxValue"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as TradedHistoryEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (TradedHistory) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
        [ScriptIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<TradedHistory>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as TradedHistory);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed TradedHistory Entity 
		///</summary>
		protected virtual TradedHistory Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			TradedHistory copy = new TradedHistory();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.TradeTime = this.TradeTime;
				copy.SubCustAccountId = this.SubCustAccountId;
				copy.Type = this.Type;
				copy.FisOrderId = this.FisOrderId;
				copy.SecSymbol = this.SecSymbol;
				copy.Side = this.Side;
				copy.Price = this.Price;
				copy.ConPrice = this.ConPrice;
				copy.Volume = this.Volume;
				copy.ExecutedVol = this.ExecutedVol;
				copy.ExecutedPrice = this.ExecutedPrice;
				copy.CancelledVolume = this.CancelledVolume;
				copy.MatchedTime = this.MatchedTime;
				copy.CancelledTime = this.CancelledTime;
				copy.OrdRejReason = this.OrdRejReason;
				copy.CancelledRejReason = this.CancelledRejReason;
				copy.SourceId = this.SourceId;
				copy.Market = this.Market;
				copy.RefOrderId = this.RefOrderId;
				copy.EffDate = this.EffDate;
				copy.ExpDate = this.ExpDate;
				copy.MinValue = this.MinValue;
				copy.MaxValue = this.MaxValue;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed TradedHistory Entity 
		///</summary>
		public virtual TradedHistory Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed TradedHistory Entity which is a deep copy of the current entity.
		///</summary>
		public virtual TradedHistory DeepCopy()
		{
			return EntityHelper.Clone<TradedHistory>(this as TradedHistory);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as TradedHistoryEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new TradedHistoryEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as TradedHistoryEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(TradedHistoryColumn column)
		{
			switch(column)
			{
					case TradedHistoryColumn.Id:
					return entityData.Id != _originalData.Id;
					case TradedHistoryColumn.TradeTime:
					return entityData.TradeTime != _originalData.TradeTime;
					case TradedHistoryColumn.SubCustAccountId:
					return entityData.SubCustAccountId != _originalData.SubCustAccountId;
					case TradedHistoryColumn.Type:
					return entityData.Type != _originalData.Type;
					case TradedHistoryColumn.FisOrderId:
					return entityData.FisOrderId != _originalData.FisOrderId;
					case TradedHistoryColumn.SecSymbol:
					return entityData.SecSymbol != _originalData.SecSymbol;
					case TradedHistoryColumn.Side:
					return entityData.Side != _originalData.Side;
					case TradedHistoryColumn.Price:
					return entityData.Price != _originalData.Price;
					case TradedHistoryColumn.ConPrice:
					return entityData.ConPrice != _originalData.ConPrice;
					case TradedHistoryColumn.Volume:
					return entityData.Volume != _originalData.Volume;
					case TradedHistoryColumn.ExecutedVol:
					return entityData.ExecutedVol != _originalData.ExecutedVol;
					case TradedHistoryColumn.ExecutedPrice:
					return entityData.ExecutedPrice != _originalData.ExecutedPrice;
					case TradedHistoryColumn.CancelledVolume:
					return entityData.CancelledVolume != _originalData.CancelledVolume;
					case TradedHistoryColumn.MatchedTime:
					return entityData.MatchedTime != _originalData.MatchedTime;
					case TradedHistoryColumn.CancelledTime:
					return entityData.CancelledTime != _originalData.CancelledTime;
					case TradedHistoryColumn.OrdRejReason:
					return entityData.OrdRejReason != _originalData.OrdRejReason;
					case TradedHistoryColumn.CancelledRejReason:
					return entityData.CancelledRejReason != _originalData.CancelledRejReason;
					case TradedHistoryColumn.SourceId:
					return entityData.SourceId != _originalData.SourceId;
					case TradedHistoryColumn.Market:
					return entityData.Market != _originalData.Market;
					case TradedHistoryColumn.RefOrderId:
					return entityData.RefOrderId != _originalData.RefOrderId;
					case TradedHistoryColumn.EffDate:
					return entityData.EffDate != _originalData.EffDate;
					case TradedHistoryColumn.ExpDate:
					return entityData.ExpDate != _originalData.ExpDate;
					case TradedHistoryColumn.MinValue:
					return entityData.MinValue != _originalData.MinValue;
					case TradedHistoryColumn.MaxValue:
					return entityData.MaxValue != _originalData.MaxValue;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< TradedHistoryColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.TradeTime != _originalData.TradeTime;
			result = result || entityData.SubCustAccountId != _originalData.SubCustAccountId;
			result = result || entityData.Type != _originalData.Type;
			result = result || entityData.FisOrderId != _originalData.FisOrderId;
			result = result || entityData.SecSymbol != _originalData.SecSymbol;
			result = result || entityData.Side != _originalData.Side;
			result = result || entityData.Price != _originalData.Price;
			result = result || entityData.ConPrice != _originalData.ConPrice;
			result = result || entityData.Volume != _originalData.Volume;
			result = result || entityData.ExecutedVol != _originalData.ExecutedVol;
			result = result || entityData.ExecutedPrice != _originalData.ExecutedPrice;
			result = result || entityData.CancelledVolume != _originalData.CancelledVolume;
			result = result || entityData.MatchedTime != _originalData.MatchedTime;
			result = result || entityData.CancelledTime != _originalData.CancelledTime;
			result = result || entityData.OrdRejReason != _originalData.OrdRejReason;
			result = result || entityData.CancelledRejReason != _originalData.CancelledRejReason;
			result = result || entityData.SourceId != _originalData.SourceId;
			result = result || entityData.Market != _originalData.Market;
			result = result || entityData.RefOrderId != _originalData.RefOrderId;
			result = result || entityData.EffDate != _originalData.EffDate;
			result = result || entityData.ExpDate != _originalData.ExpDate;
			result = result || entityData.MinValue != _originalData.MinValue;
			result = result || entityData.MaxValue != _originalData.MaxValue;
			return result;
		}	
		
		///<summary>
		///  Returns a TradedHistory Entity with the original data.
		///</summary>
		public TradedHistory GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateTradedHistory(
				_originalData.TradeTime,
				_originalData.SubCustAccountId,
				_originalData.Type,
				_originalData.FisOrderId,
				_originalData.SecSymbol,
				_originalData.Side,
				_originalData.Price,
				_originalData.ConPrice,
				_originalData.Volume,
				_originalData.ExecutedVol,
				_originalData.ExecutedPrice,
				_originalData.CancelledVolume,
				_originalData.MatchedTime,
				_originalData.CancelledTime,
				_originalData.OrdRejReason,
				_originalData.CancelledRejReason,
				_originalData.SourceId,
				_originalData.Market,
				_originalData.RefOrderId,
				_originalData.EffDate,
				_originalData.ExpDate,
				_originalData.MinValue,
				_originalData.MaxValue
				);
				
			return (TradedHistory)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="TradedHistoryBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is TradedHistoryBase)
				return ValueEquals(this, (TradedHistoryBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="TradedHistoryBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					this.TradeTime.GetHashCode() ^ 
					this.SubCustAccountId.GetHashCode() ^ 
					((this.Type == null) ? string.Empty : this.Type.ToString()).GetHashCode() ^ 
					((this.FisOrderId == null) ? string.Empty : this.FisOrderId.ToString()).GetHashCode() ^ 
					this.SecSymbol.GetHashCode() ^ 
					this.Side.GetHashCode() ^ 
					this.Price.GetHashCode() ^ 
					((this.ConPrice == null) ? string.Empty : this.ConPrice.ToString()).GetHashCode() ^ 
					this.Volume.GetHashCode() ^ 
					((this.ExecutedVol == null) ? string.Empty : this.ExecutedVol.ToString()).GetHashCode() ^ 
					((this.ExecutedPrice == null) ? string.Empty : this.ExecutedPrice.ToString()).GetHashCode() ^ 
					((this.CancelledVolume == null) ? string.Empty : this.CancelledVolume.ToString()).GetHashCode() ^ 
					((this.MatchedTime == null) ? string.Empty : this.MatchedTime.ToString()).GetHashCode() ^ 
					((this.CancelledTime == null) ? string.Empty : this.CancelledTime.ToString()).GetHashCode() ^ 
					((this.OrdRejReason == null) ? string.Empty : this.OrdRejReason.ToString()).GetHashCode() ^ 
					((this.CancelledRejReason == null) ? string.Empty : this.CancelledRejReason.ToString()).GetHashCode() ^ 
					((this.SourceId == null) ? string.Empty : this.SourceId.ToString()).GetHashCode() ^ 
					this.Market.GetHashCode() ^ 
					((this.RefOrderId == null) ? string.Empty : this.RefOrderId.ToString()).GetHashCode() ^ 
					((this.EffDate == null) ? string.Empty : this.EffDate.ToString()).GetHashCode() ^ 
					((this.ExpDate == null) ? string.Empty : this.ExpDate.ToString()).GetHashCode() ^ 
					((this.MinValue == null) ? string.Empty : this.MinValue.ToString()).GetHashCode() ^ 
					((this.MaxValue == null) ? string.Empty : this.MaxValue.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="TradedHistoryBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(TradedHistoryBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="TradedHistoryBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="TradedHistoryBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="TradedHistoryBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(TradedHistoryBase Object1, TradedHistoryBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.TradeTime != Object2.TradeTime)
				equal = false;
			if (Object1.SubCustAccountId != Object2.SubCustAccountId)
				equal = false;
			if ( Object1.Type != null && Object2.Type != null )
			{
				if (Object1.Type != Object2.Type)
					equal = false;
			}
			else if (Object1.Type == null ^ Object2.Type == null )
			{
				equal = false;
			}
			if ( Object1.FisOrderId != null && Object2.FisOrderId != null )
			{
				if (Object1.FisOrderId != Object2.FisOrderId)
					equal = false;
			}
			else if (Object1.FisOrderId == null ^ Object2.FisOrderId == null )
			{
				equal = false;
			}
			if (Object1.SecSymbol != Object2.SecSymbol)
				equal = false;
			if (Object1.Side != Object2.Side)
				equal = false;
			if (Object1.Price != Object2.Price)
				equal = false;
			if ( Object1.ConPrice != null && Object2.ConPrice != null )
			{
				if (Object1.ConPrice != Object2.ConPrice)
					equal = false;
			}
			else if (Object1.ConPrice == null ^ Object2.ConPrice == null )
			{
				equal = false;
			}
			if (Object1.Volume != Object2.Volume)
				equal = false;
			if ( Object1.ExecutedVol != null && Object2.ExecutedVol != null )
			{
				if (Object1.ExecutedVol != Object2.ExecutedVol)
					equal = false;
			}
			else if (Object1.ExecutedVol == null ^ Object2.ExecutedVol == null )
			{
				equal = false;
			}
			if ( Object1.ExecutedPrice != null && Object2.ExecutedPrice != null )
			{
				if (Object1.ExecutedPrice != Object2.ExecutedPrice)
					equal = false;
			}
			else if (Object1.ExecutedPrice == null ^ Object2.ExecutedPrice == null )
			{
				equal = false;
			}
			if ( Object1.CancelledVolume != null && Object2.CancelledVolume != null )
			{
				if (Object1.CancelledVolume != Object2.CancelledVolume)
					equal = false;
			}
			else if (Object1.CancelledVolume == null ^ Object2.CancelledVolume == null )
			{
				equal = false;
			}
			if ( Object1.MatchedTime != null && Object2.MatchedTime != null )
			{
				if (Object1.MatchedTime != Object2.MatchedTime)
					equal = false;
			}
			else if (Object1.MatchedTime == null ^ Object2.MatchedTime == null )
			{
				equal = false;
			}
			if ( Object1.CancelledTime != null && Object2.CancelledTime != null )
			{
				if (Object1.CancelledTime != Object2.CancelledTime)
					equal = false;
			}
			else if (Object1.CancelledTime == null ^ Object2.CancelledTime == null )
			{
				equal = false;
			}
			if ( Object1.OrdRejReason != null && Object2.OrdRejReason != null )
			{
				if (Object1.OrdRejReason != Object2.OrdRejReason)
					equal = false;
			}
			else if (Object1.OrdRejReason == null ^ Object2.OrdRejReason == null )
			{
				equal = false;
			}
			if ( Object1.CancelledRejReason != null && Object2.CancelledRejReason != null )
			{
				if (Object1.CancelledRejReason != Object2.CancelledRejReason)
					equal = false;
			}
			else if (Object1.CancelledRejReason == null ^ Object2.CancelledRejReason == null )
			{
				equal = false;
			}
			if ( Object1.SourceId != null && Object2.SourceId != null )
			{
				if (Object1.SourceId != Object2.SourceId)
					equal = false;
			}
			else if (Object1.SourceId == null ^ Object2.SourceId == null )
			{
				equal = false;
			}
			if (Object1.Market != Object2.Market)
				equal = false;
			if ( Object1.RefOrderId != null && Object2.RefOrderId != null )
			{
				if (Object1.RefOrderId != Object2.RefOrderId)
					equal = false;
			}
			else if (Object1.RefOrderId == null ^ Object2.RefOrderId == null )
			{
				equal = false;
			}
			if ( Object1.EffDate != null && Object2.EffDate != null )
			{
				if (Object1.EffDate != Object2.EffDate)
					equal = false;
			}
			else if (Object1.EffDate == null ^ Object2.EffDate == null )
			{
				equal = false;
			}
			if ( Object1.ExpDate != null && Object2.ExpDate != null )
			{
				if (Object1.ExpDate != Object2.ExpDate)
					equal = false;
			}
			else if (Object1.ExpDate == null ^ Object2.ExpDate == null )
			{
				equal = false;
			}
			if ( Object1.MinValue != null && Object2.MinValue != null )
			{
				if (Object1.MinValue != Object2.MinValue)
					equal = false;
			}
			else if (Object1.MinValue == null ^ Object2.MinValue == null )
			{
				equal = false;
			}
			if ( Object1.MaxValue != null && Object2.MaxValue != null )
			{
				if (Object1.MaxValue != Object2.MaxValue)
					equal = false;
			}
			else if (Object1.MaxValue == null ^ Object2.MaxValue == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((TradedHistoryBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static TradedHistoryComparer GetComparer()
        {
            return new TradedHistoryComparer();
        }
        */

        // Comparer delegates back to TradedHistory
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(TradedHistory rhs, TradedHistoryColumn which)
        {
            switch (which)
            {
            	
            	
            	case TradedHistoryColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case TradedHistoryColumn.TradeTime:
            		return this.TradeTime.CompareTo(rhs.TradeTime);
            		
            		                 
            	
            	
            	case TradedHistoryColumn.SubCustAccountId:
            		return this.SubCustAccountId.CompareTo(rhs.SubCustAccountId);
            		
            		                 
            	
            	
            	case TradedHistoryColumn.Type:
            		return this.Type.CompareTo(rhs.Type);
            		
            		                 
            	
            	
            	case TradedHistoryColumn.FisOrderId:
            		return this.FisOrderId.Value.CompareTo(rhs.FisOrderId.Value);
            		
            		                 
            	
            	
            	case TradedHistoryColumn.SecSymbol:
            		return this.SecSymbol.CompareTo(rhs.SecSymbol);
            		
            		                 
            	
            	
            	case TradedHistoryColumn.Side:
            		return this.Side.CompareTo(rhs.Side);
            		
            		                 
            	
            	
            	case TradedHistoryColumn.Price:
            		return this.Price.CompareTo(rhs.Price);
            		
            		                 
            	
            	
            	case TradedHistoryColumn.ConPrice:
            		return this.ConPrice.CompareTo(rhs.ConPrice);
            		
            		                 
            	
            	
            	case TradedHistoryColumn.Volume:
            		return this.Volume.CompareTo(rhs.Volume);
            		
            		                 
            	
            	
            	case TradedHistoryColumn.ExecutedVol:
            		return this.ExecutedVol.Value.CompareTo(rhs.ExecutedVol.Value);
            		
            		                 
            	
            	
            	case TradedHistoryColumn.ExecutedPrice:
            		return this.ExecutedPrice.Value.CompareTo(rhs.ExecutedPrice.Value);
            		
            		                 
            	
            	
            	case TradedHistoryColumn.CancelledVolume:
            		return this.CancelledVolume.Value.CompareTo(rhs.CancelledVolume.Value);
            		
            		                 
            	
            	
            	case TradedHistoryColumn.MatchedTime:
            		return this.MatchedTime.Value.CompareTo(rhs.MatchedTime.Value);
            		
            		                 
            	
            	
            	case TradedHistoryColumn.CancelledTime:
            		return this.CancelledTime.Value.CompareTo(rhs.CancelledTime.Value);
            		
            		                 
            	
            	
            	case TradedHistoryColumn.OrdRejReason:
            		return this.OrdRejReason.Value.CompareTo(rhs.OrdRejReason.Value);
            		
            		                 
            	
            	
            	case TradedHistoryColumn.CancelledRejReason:
            		return this.CancelledRejReason.Value.CompareTo(rhs.CancelledRejReason.Value);
            		
            		                 
            	
            	
            	case TradedHistoryColumn.SourceId:
            		return this.SourceId.Value.CompareTo(rhs.SourceId.Value);
            		
            		                 
            	
            	
            	case TradedHistoryColumn.Market:
            		return this.Market.CompareTo(rhs.Market);
            		
            		                 
            	
            	
            	case TradedHistoryColumn.RefOrderId:
            		return this.RefOrderId.CompareTo(rhs.RefOrderId);
            		
            		                 
            	
            	
            	case TradedHistoryColumn.EffDate:
            		return this.EffDate.Value.CompareTo(rhs.EffDate.Value);
            		
            		                 
            	
            	
            	case TradedHistoryColumn.ExpDate:
            		return this.ExpDate.Value.CompareTo(rhs.ExpDate.Value);
            		
            		                 
            	
            	
            	case TradedHistoryColumn.MinValue:
            		return this.MinValue.Value.CompareTo(rhs.MinValue.Value);
            		
            		                 
            	
            	
            	case TradedHistoryColumn.MaxValue:
            		return this.MaxValue.Value.CompareTo(rhs.MaxValue.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
        [ScriptIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<TradedHistoryKey> Members
		
		// member variable for the EntityId property
		private TradedHistoryKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
        [ScriptIgnore]
		public virtual TradedHistoryKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new TradedHistoryKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute(), ScriptIgnore()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
        [ScriptIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("TradedHistory")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{25}{24}- Id: {0}{24}- TradeTime: {1}{24}- SubCustAccountId: {2}{24}- Type: {3}{24}- FisOrderId: {4}{24}- SecSymbol: {5}{24}- Side: {6}{24}- Price: {7}{24}- ConPrice: {8}{24}- Volume: {9}{24}- ExecutedVol: {10}{24}- ExecutedPrice: {11}{24}- CancelledVolume: {12}{24}- MatchedTime: {13}{24}- CancelledTime: {14}{24}- OrdRejReason: {15}{24}- CancelledRejReason: {16}{24}- SourceId: {17}{24}- Market: {18}{24}- RefOrderId: {19}{24}- EffDate: {20}{24}- ExpDate: {21}{24}- MinValue: {22}{24}- MaxValue: {23}{24}{26}", 
				this.Id,
				this.TradeTime,
				this.SubCustAccountId,
				(this.Type == null) ? string.Empty : this.Type.ToString(),
				(this.FisOrderId == null) ? string.Empty : this.FisOrderId.ToString(),
				this.SecSymbol,
				this.Side,
				this.Price,
				(this.ConPrice == null) ? string.Empty : this.ConPrice.ToString(),
				this.Volume,
				(this.ExecutedVol == null) ? string.Empty : this.ExecutedVol.ToString(),
				(this.ExecutedPrice == null) ? string.Empty : this.ExecutedPrice.ToString(),
				(this.CancelledVolume == null) ? string.Empty : this.CancelledVolume.ToString(),
				(this.MatchedTime == null) ? string.Empty : this.MatchedTime.ToString(),
				(this.CancelledTime == null) ? string.Empty : this.CancelledTime.ToString(),
				(this.OrdRejReason == null) ? string.Empty : this.OrdRejReason.ToString(),
				(this.CancelledRejReason == null) ? string.Empty : this.CancelledRejReason.ToString(),
				(this.SourceId == null) ? string.Empty : this.SourceId.ToString(),
				this.Market,
				(this.RefOrderId == null) ? string.Empty : this.RefOrderId.ToString(),
				(this.EffDate == null) ? string.Empty : this.EffDate.ToString(),
				(this.ExpDate == null) ? string.Empty : this.ExpDate.ToString(),
				(this.MinValue == null) ? string.Empty : this.MinValue.ToString(),
				(this.MaxValue == null) ? string.Empty : this.MaxValue.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'TradedHistory' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class TradedHistoryEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ID : ID identifies TradedHistory
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "TradedHistory"</remarks>
		public long Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// TradeTime : 
		/// </summary>
		public System.DateTime		  TradeTime = DateTime.MinValue;
		
		/// <summary>
		/// SubCustAccountID : 
		/// </summary>
		public string		  SubCustAccountId = string.Empty;
		
		/// <summary>
		/// Type : Loai log (NEW_ORDER, LOGON, LOGOUT, CANCEL_ORD, CHANGE_ORD)
		/// </summary>
		public string		  Type = null;
		
		/// <summary>
		/// FISOrderID : order id sinh ra tu FIS
		/// </summary>
		public System.Int32?		  FisOrderId = null;
		
		/// <summary>
		/// SecSymbol : Ma chung khoan
		/// </summary>
		public string		  SecSymbol = string.Empty;
		
		/// <summary>
		/// Side : B = Mua, S = Ban
		/// </summary>
		public string		  Side = string.Empty;
		
		/// <summary>
		/// Price : Gia chung khoan
		/// </summary>
		public decimal		  Price = 0.0m;
		
		/// <summary>
		/// ConPrice : Dieu kien lenh, A = preOpen, C = closeOpen
		/// </summary>
		public string		  ConPrice = null;
		
		/// <summary>
		/// Volume : Khoi luong co phieu mua hay ban
		/// </summary>
		public long		  Volume = (long)0;
		
		/// <summary>
		/// ExecutedVol : Khoi luong khop
		/// </summary>
		public System.Int64?		  ExecutedVol = null;
		
		/// <summary>
		/// ExecutedPrice : Gia khop
		/// </summary>
		public System.Decimal?		  ExecutedPrice = null;
		
		/// <summary>
		/// CancelledVolume : Khoi luong duoc huy
		/// </summary>
		public System.Int64?		  CancelledVolume = null;
		
		/// <summary>
		/// MatchedTime : Thoi gian khop
		/// </summary>
		public System.DateTime?		  MatchedTime = null;
		
		/// <summary>
		/// CancelledTime : Thoi gian lenh duoc huy
		/// </summary>
		public System.DateTime?		  CancelledTime = null;
		
		/// <summary>
		/// OrdRejReason : nguyen nhan lenh bi tu choi
		/// </summary>
		public System.Int32?		  OrdRejReason = null;
		
		/// <summary>
		/// CancelledRejReason : Nguyen nhan viec huy lenh bi tu choi
		/// </summary>
		public System.Int32?		  CancelledRejReason = null;
		
		/// <summary>
		/// SourceID : 0=SET, 1 = FIS
		/// </summary>
		public System.Int16?		  SourceId = null;
		
		/// <summary>
		/// Market : Thi truong
		/// </summary>
		public string		  Market = string.Empty;
		
		/// <summary>
		/// RefOrderID : RefOrderID is of TradedHistory
		/// </summary>
		public string		  RefOrderId = null;
		
		/// <summary>
		/// EffDate : Ngày hi?u l?c c?a l?nh ÐK.
		/// </summary>
		public System.DateTime?		  EffDate = null;
		
		/// <summary>
		/// ExpDate : Ngày h?t h?n c?a l?nh ÐK
		/// </summary>
		public System.DateTime?		  ExpDate = null;
		
		/// <summary>
		/// MinValue : Giá tr? nhò nh?t c?a l?nh ÐK
		/// </summary>
		public System.Decimal?		  MinValue = null;
		
		/// <summary>
		/// MaxValue : Giá tr? l?n nh?t c?a l?nh ÐK
		/// </summary>
		public System.Decimal?		  MaxValue = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			TradedHistoryEntityData _tmp = new TradedHistoryEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.TradeTime = this.TradeTime;
			_tmp.SubCustAccountId = this.SubCustAccountId;
			_tmp.Type = this.Type;
			_tmp.FisOrderId = this.FisOrderId;
			_tmp.SecSymbol = this.SecSymbol;
			_tmp.Side = this.Side;
			_tmp.Price = this.Price;
			_tmp.ConPrice = this.ConPrice;
			_tmp.Volume = this.Volume;
			_tmp.ExecutedVol = this.ExecutedVol;
			_tmp.ExecutedPrice = this.ExecutedPrice;
			_tmp.CancelledVolume = this.CancelledVolume;
			_tmp.MatchedTime = this.MatchedTime;
			_tmp.CancelledTime = this.CancelledTime;
			_tmp.OrdRejReason = this.OrdRejReason;
			_tmp.CancelledRejReason = this.CancelledRejReason;
			_tmp.SourceId = this.SourceId;
			_tmp.Market = this.Market;
			_tmp.RefOrderId = this.RefOrderId;
			_tmp.EffDate = this.EffDate;
			_tmp.ExpDate = this.ExpDate;
			_tmp.MinValue = this.MinValue;
			_tmp.MaxValue = this.MaxValue;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			TradedHistoryEntityData _tmp = new TradedHistoryEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.TradeTime = this.TradeTime;
			_tmp.SubCustAccountId = this.SubCustAccountId;
			_tmp.Type = this.Type;
			_tmp.FisOrderId = this.FisOrderId;
			_tmp.SecSymbol = this.SecSymbol;
			_tmp.Side = this.Side;
			_tmp.Price = this.Price;
			_tmp.ConPrice = this.ConPrice;
			_tmp.Volume = this.Volume;
			_tmp.ExecutedVol = this.ExecutedVol;
			_tmp.ExecutedPrice = this.ExecutedPrice;
			_tmp.CancelledVolume = this.CancelledVolume;
			_tmp.MatchedTime = this.MatchedTime;
			_tmp.CancelledTime = this.CancelledTime;
			_tmp.OrdRejReason = this.OrdRejReason;
			_tmp.CancelledRejReason = this.CancelledRejReason;
			_tmp.SourceId = this.SourceId;
			_tmp.Market = this.Market;
			_tmp.RefOrderId = this.RefOrderId;
			_tmp.EffDate = this.EffDate;
			_tmp.ExpDate = this.ExpDate;
			_tmp.MinValue = this.MinValue;
			_tmp.MaxValue = this.MaxValue;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TradedHistoryColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(TradedHistoryColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TradedHistoryColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(TradedHistoryColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TradedHistoryColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(TradedHistoryColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				TradedHistoryEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new TradedHistoryEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TradedHistoryColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(TradedHistoryColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				TradedHistoryEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new TradedHistoryEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region TradedHistoryEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="TradedHistory"/> object.
	/// </remarks>
	public class TradedHistoryEventArgs : System.EventArgs
	{
		private TradedHistoryColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the TradedHistoryEventArgs class.
		///</summary>
		public TradedHistoryEventArgs(TradedHistoryColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the TradedHistoryEventArgs class.
		///</summary>
		public TradedHistoryEventArgs(TradedHistoryColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The TradedHistoryColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="TradedHistoryColumn" />
		public TradedHistoryColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all TradedHistory related events.
	///</summary>
	public delegate void TradedHistoryEventHandler(object sender, TradedHistoryEventArgs e);
	
	#region TradedHistoryComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class TradedHistoryComparer : System.Collections.Generic.IComparer<TradedHistory>
	{
		TradedHistoryColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:TradedHistoryComparer"/> class.
        /// </summary>
		public TradedHistoryComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:TradedHistoryComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public TradedHistoryComparer(TradedHistoryColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="TradedHistory"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="TradedHistory"/> to compare.</param>
        /// <param name="b">The second <c>TradedHistory</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(TradedHistory a, TradedHistory b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(TradedHistory entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(TradedHistory a, TradedHistory b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public TradedHistoryColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region TradedHistoryKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="TradedHistory"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class TradedHistoryKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the TradedHistoryKey class.
		/// </summary>
		public TradedHistoryKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the TradedHistoryKey class.
		/// </summary>
		public TradedHistoryKey(TradedHistoryBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the TradedHistoryKey class.
		/// </summary>
		public TradedHistoryKey(long _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private TradedHistoryBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public TradedHistoryBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private long _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public long Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (long) EntityUtil.ChangeType(values["Id"], typeof(long)) : (long)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region TradedHistoryColumn Enum
	
	/// <summary>
	/// Enumerate the TradedHistory columns.
	/// </summary>
	[Serializable]
	public enum TradedHistoryColumn : int
	{
		/// <summary>
		/// Id : ID identifies TradedHistory
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(long), System.Data.DbType.Int64, true, true, false)]
		Id = 1,
		/// <summary>
		/// TradeTime : 
		/// </summary>
		[EnumTextValue("TradeTime")]
		[ColumnEnum("TradeTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		TradeTime = 2,
		/// <summary>
		/// SubCustAccountId : 
		/// </summary>
		[EnumTextValue("SubCustAccountID")]
		[ColumnEnum("SubCustAccountID", typeof(string), System.Data.DbType.AnsiString, false, false, false, 20)]
		SubCustAccountId = 3,
		/// <summary>
		/// Type : Loai log (NEW_ORDER, LOGON, LOGOUT, CANCEL_ORD, CHANGE_ORD)
		/// </summary>
		[EnumTextValue("Type")]
		[ColumnEnum("Type", typeof(string), System.Data.DbType.AnsiString, false, false, true, 10)]
		Type = 4,
		/// <summary>
		/// FisOrderId : order id sinh ra tu FIS
		/// </summary>
		[EnumTextValue("FISOrderID")]
		[ColumnEnum("FISOrderID", typeof(System.Int32?), System.Data.DbType.Int32, false, false, true)]
		FisOrderId = 5,
		/// <summary>
		/// SecSymbol : Ma chung khoan
		/// </summary>
		[EnumTextValue("SecSymbol")]
		[ColumnEnum("SecSymbol", typeof(string), System.Data.DbType.AnsiString, false, false, false, 8)]
		SecSymbol = 6,
		/// <summary>
		/// Side : B = Mua, S = Ban
		/// </summary>
		[EnumTextValue("Side")]
		[ColumnEnum("Side", typeof(string), System.Data.DbType.AnsiString, false, false, false, 1)]
		Side = 7,
		/// <summary>
		/// Price : Gia chung khoan
		/// </summary>
		[EnumTextValue("Price")]
		[ColumnEnum("Price", typeof(decimal), System.Data.DbType.Decimal, false, false, false)]
		Price = 8,
		/// <summary>
		/// ConPrice : Dieu kien lenh, A = preOpen, C = closeOpen
		/// </summary>
		[EnumTextValue("ConPrice")]
		[ColumnEnum("ConPrice", typeof(string), System.Data.DbType.AnsiString, false, false, true, 1)]
		ConPrice = 9,
		/// <summary>
		/// Volume : Khoi luong co phieu mua hay ban
		/// </summary>
		[EnumTextValue("Volume")]
		[ColumnEnum("Volume", typeof(long), System.Data.DbType.Int64, false, false, false)]
		Volume = 10,
		/// <summary>
		/// ExecutedVol : Khoi luong khop
		/// </summary>
		[EnumTextValue("ExecutedVol")]
		[ColumnEnum("ExecutedVol", typeof(System.Int64?), System.Data.DbType.Int64, false, false, true)]
		ExecutedVol = 11,
		/// <summary>
		/// ExecutedPrice : Gia khop
		/// </summary>
		[EnumTextValue("ExecutedPrice")]
		[ColumnEnum("ExecutedPrice", typeof(System.Decimal?), System.Data.DbType.Decimal, false, false, true)]
		ExecutedPrice = 12,
		/// <summary>
		/// CancelledVolume : Khoi luong duoc huy
		/// </summary>
		[EnumTextValue("CancelledVolume")]
		[ColumnEnum("CancelledVolume", typeof(System.Int64?), System.Data.DbType.Int64, false, false, true)]
		CancelledVolume = 13,
		/// <summary>
		/// MatchedTime : Thoi gian khop
		/// </summary>
		[EnumTextValue("MatchedTime")]
		[ColumnEnum("MatchedTime", typeof(System.DateTime?), System.Data.DbType.DateTime, false, false, true)]
		MatchedTime = 14,
		/// <summary>
		/// CancelledTime : Thoi gian lenh duoc huy
		/// </summary>
		[EnumTextValue("CancelledTime")]
		[ColumnEnum("CancelledTime", typeof(System.DateTime?), System.Data.DbType.DateTime, false, false, true)]
		CancelledTime = 15,
		/// <summary>
		/// OrdRejReason : nguyen nhan lenh bi tu choi
		/// </summary>
		[EnumTextValue("OrdRejReason")]
		[ColumnEnum("OrdRejReason", typeof(System.Int32?), System.Data.DbType.Int32, false, false, true)]
		OrdRejReason = 16,
		/// <summary>
		/// CancelledRejReason : Nguyen nhan viec huy lenh bi tu choi
		/// </summary>
		[EnumTextValue("CancelledRejReason")]
		[ColumnEnum("CancelledRejReason", typeof(System.Int32?), System.Data.DbType.Int32, false, false, true)]
		CancelledRejReason = 17,
		/// <summary>
		/// SourceId : 0=SET, 1 = FIS
		/// </summary>
		[EnumTextValue("SourceID")]
		[ColumnEnum("SourceID", typeof(System.Int16?), System.Data.DbType.Int16, false, false, true)]
		SourceId = 18,
		/// <summary>
		/// Market : Thi truong
		/// </summary>
		[EnumTextValue("Market")]
		[ColumnEnum("Market", typeof(string), System.Data.DbType.AnsiString, false, false, false, 1)]
		Market = 19,
		/// <summary>
		/// RefOrderId : RefOrderID is of TradedHistory
		/// </summary>
		[EnumTextValue("RefOrderID")]
		[ColumnEnum("RefOrderID", typeof(string), System.Data.DbType.AnsiString, false, false, true, 64)]
		RefOrderId = 20,
		/// <summary>
		/// EffDate : Ngày hi?u l?c c?a l?nh ÐK.
		/// </summary>
		[EnumTextValue("EffDate")]
		[ColumnEnum("EffDate", typeof(System.DateTime?), System.Data.DbType.DateTime, false, false, true)]
		EffDate = 21,
		/// <summary>
		/// ExpDate : Ngày h?t h?n c?a l?nh ÐK
		/// </summary>
		[EnumTextValue("ExpDate")]
		[ColumnEnum("ExpDate", typeof(System.DateTime?), System.Data.DbType.DateTime, false, false, true)]
		ExpDate = 22,
		/// <summary>
		/// MinValue : Giá tr? nhò nh?t c?a l?nh ÐK
		/// </summary>
		[EnumTextValue("MinValue")]
		[ColumnEnum("MinValue", typeof(System.Decimal?), System.Data.DbType.Decimal, false, false, true)]
		MinValue = 23,
		/// <summary>
		/// MaxValue : Giá tr? l?n nh?t c?a l?nh ÐK
		/// </summary>
		[EnumTextValue("MaxValue")]
		[ColumnEnum("MaxValue", typeof(System.Decimal?), System.Data.DbType.Decimal, false, false, true)]
		MaxValue = 24
	}//End enum

	#endregion TradedHistoryColumn Enum

} // end namespace
