#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MigrateDataTCSC
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="MigrateDB")]
	public partial class MigrateDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertMainCustAccount(MainCustAccount instance);
    partial void UpdateMainCustAccount(MainCustAccount instance);
    partial void DeleteMainCustAccount(MainCustAccount instance);
    partial void InsertBrokerAccount(BrokerAccount instance);
    partial void UpdateBrokerAccount(BrokerAccount instance);
    partial void DeleteBrokerAccount(BrokerAccount instance);
    partial void InsertSubCustAccount(SubCustAccount instance);
    partial void UpdateSubCustAccount(SubCustAccount instance);
    partial void DeleteSubCustAccount(SubCustAccount instance);
    partial void InsertSubCustAccountPermission(SubCustAccountPermission instance);
    partial void UpdateSubCustAccountPermission(SubCustAccountPermission instance);
    partial void DeleteSubCustAccountPermission(SubCustAccountPermission instance);
    #endregion
		
		public MigrateDBDataContext() : 
				base(global::MigrateDataTCSC.Properties.Settings.Default.MigrateDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MigrateDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MigrateDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MigrateDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MigrateDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<MainCustAccount> MainCustAccounts
		{
			get
			{
				return this.GetTable<MainCustAccount>();
			}
		}
		
		public System.Data.Linq.Table<BrokerAccount> BrokerAccounts
		{
			get
			{
				return this.GetTable<BrokerAccount>();
			}
		}
		
		public System.Data.Linq.Table<SubCustAccount> SubCustAccounts
		{
			get
			{
				return this.GetTable<SubCustAccount>();
			}
		}
		
		public System.Data.Linq.Table<SubCustAccountPermission> SubCustAccountPermissions
		{
			get
			{
				return this.GetTable<SubCustAccountPermission>();
			}
		}
	}
	
	[Table(Name="dbo.MainCustAccount")]
	public partial class MainCustAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _MainCustAccountID;
		
		private string _FullName;
		
		private string _Email;
		
		private string _Phone;
		
		private bool _Actived;
		
		private string _Password;
		
		private string _PIN;
		
		private System.Nullable<int> _PassLockReason;
		
		private System.Nullable<int> _PINLockReason;
		
		private System.Nullable<int> _LockReason;
		
		private string _TokenID;
		
		private string _TokenName;
		
		private string _TokenActived;
		
		private string _BrokerID;
		
		private System.Nullable<bool> _PassIsNew;
		
		private System.Nullable<bool> _PINIsNew;
		
		private System.Nullable<System.DateTime> _PassExpDate;
		
		private System.Nullable<System.DateTime> _PINExpDate;
		
		private int _CustomerType;
		
		private short _AuthType;
		
		private short _PinType;
		
		private System.Nullable<int> _FailedLoginCount;
		
		private System.Nullable<System.DateTime> _FailedLoginTime;
		
		private System.DateTime _CreatedDate;
		
		private string _CreatedUser;
		
		private string _UpdatedUser;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private EntitySet<SubCustAccount> _SubCustAccounts;
		
		private EntityRef<BrokerAccount> _BrokerAccount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMainCustAccountIDChanging(string value);
    partial void OnMainCustAccountIDChanged();
    partial void OnFullNameChanging(string value);
    partial void OnFullNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnActivedChanging(bool value);
    partial void OnActivedChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnPINChanging(string value);
    partial void OnPINChanged();
    partial void OnPassLockReasonChanging(System.Nullable<int> value);
    partial void OnPassLockReasonChanged();
    partial void OnPINLockReasonChanging(System.Nullable<int> value);
    partial void OnPINLockReasonChanged();
    partial void OnLockReasonChanging(System.Nullable<int> value);
    partial void OnLockReasonChanged();
    partial void OnTokenIDChanging(string value);
    partial void OnTokenIDChanged();
    partial void OnTokenNameChanging(string value);
    partial void OnTokenNameChanged();
    partial void OnTokenActivedChanging(string value);
    partial void OnTokenActivedChanged();
    partial void OnBrokerIDChanging(string value);
    partial void OnBrokerIDChanged();
    partial void OnPassIsNewChanging(System.Nullable<bool> value);
    partial void OnPassIsNewChanged();
    partial void OnPINIsNewChanging(System.Nullable<bool> value);
    partial void OnPINIsNewChanged();
    partial void OnPassExpDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPassExpDateChanged();
    partial void OnPINExpDateChanging(System.Nullable<System.DateTime> value);
    partial void OnPINExpDateChanged();
    partial void OnCustomerTypeChanging(int value);
    partial void OnCustomerTypeChanged();
    partial void OnAuthTypeChanging(short value);
    partial void OnAuthTypeChanged();
    partial void OnPinTypeChanging(short value);
    partial void OnPinTypeChanged();
    partial void OnFailedLoginCountChanging(System.Nullable<int> value);
    partial void OnFailedLoginCountChanged();
    partial void OnFailedLoginTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnFailedLoginTimeChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedUserChanging(string value);
    partial void OnCreatedUserChanged();
    partial void OnUpdatedUserChanging(string value);
    partial void OnUpdatedUserChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    #endregion
		
		public MainCustAccount()
		{
			this._SubCustAccounts = new EntitySet<SubCustAccount>(new Action<SubCustAccount>(this.attach_SubCustAccounts), new Action<SubCustAccount>(this.detach_SubCustAccounts));
			this._BrokerAccount = default(EntityRef<BrokerAccount>);
			OnCreated();
		}
		
		[Column(Storage="_MainCustAccountID", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string MainCustAccountID
		{
			get
			{
				return this._MainCustAccountID;
			}
			set
			{
				if ((this._MainCustAccountID != value))
				{
					this.OnMainCustAccountIDChanging(value);
					this.SendPropertyChanging();
					this._MainCustAccountID = value;
					this.SendPropertyChanged("MainCustAccountID");
					this.OnMainCustAccountIDChanged();
				}
			}
		}
		
		[Column(Storage="_FullName", DbType="NVarChar(50)")]
		public string FullName
		{
			get
			{
				return this._FullName;
			}
			set
			{
				if ((this._FullName != value))
				{
					this.OnFullNameChanging(value);
					this.SendPropertyChanging();
					this._FullName = value;
					this.SendPropertyChanged("FullName");
					this.OnFullNameChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="VarChar(30)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Storage="_Phone", DbType="VarChar(20)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[Column(Storage="_Actived", DbType="Bit NOT NULL")]
		public bool Actived
		{
			get
			{
				return this._Actived;
			}
			set
			{
				if ((this._Actived != value))
				{
					this.OnActivedChanging(value);
					this.SendPropertyChanging();
					this._Actived = value;
					this.SendPropertyChanged("Actived");
					this.OnActivedChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_PIN", DbType="VarChar(50)")]
		public string PIN
		{
			get
			{
				return this._PIN;
			}
			set
			{
				if ((this._PIN != value))
				{
					this.OnPINChanging(value);
					this.SendPropertyChanging();
					this._PIN = value;
					this.SendPropertyChanged("PIN");
					this.OnPINChanged();
				}
			}
		}
		
		[Column(Storage="_PassLockReason", DbType="Int")]
		public System.Nullable<int> PassLockReason
		{
			get
			{
				return this._PassLockReason;
			}
			set
			{
				if ((this._PassLockReason != value))
				{
					this.OnPassLockReasonChanging(value);
					this.SendPropertyChanging();
					this._PassLockReason = value;
					this.SendPropertyChanged("PassLockReason");
					this.OnPassLockReasonChanged();
				}
			}
		}
		
		[Column(Storage="_PINLockReason", DbType="Int")]
		public System.Nullable<int> PINLockReason
		{
			get
			{
				return this._PINLockReason;
			}
			set
			{
				if ((this._PINLockReason != value))
				{
					this.OnPINLockReasonChanging(value);
					this.SendPropertyChanging();
					this._PINLockReason = value;
					this.SendPropertyChanged("PINLockReason");
					this.OnPINLockReasonChanged();
				}
			}
		}
		
		[Column(Storage="_LockReason", DbType="Int")]
		public System.Nullable<int> LockReason
		{
			get
			{
				return this._LockReason;
			}
			set
			{
				if ((this._LockReason != value))
				{
					this.OnLockReasonChanging(value);
					this.SendPropertyChanging();
					this._LockReason = value;
					this.SendPropertyChanged("LockReason");
					this.OnLockReasonChanged();
				}
			}
		}
		
		[Column(Storage="_TokenID", DbType="VarChar(20)")]
		public string TokenID
		{
			get
			{
				return this._TokenID;
			}
			set
			{
				if ((this._TokenID != value))
				{
					this.OnTokenIDChanging(value);
					this.SendPropertyChanging();
					this._TokenID = value;
					this.SendPropertyChanged("TokenID");
					this.OnTokenIDChanged();
				}
			}
		}
		
		[Column(Storage="_TokenName", DbType="VarChar(20)")]
		public string TokenName
		{
			get
			{
				return this._TokenName;
			}
			set
			{
				if ((this._TokenName != value))
				{
					this.OnTokenNameChanging(value);
					this.SendPropertyChanging();
					this._TokenName = value;
					this.SendPropertyChanged("TokenName");
					this.OnTokenNameChanged();
				}
			}
		}
		
		[Column(Storage="_TokenActived", DbType="VarChar(10)")]
		public string TokenActived
		{
			get
			{
				return this._TokenActived;
			}
			set
			{
				if ((this._TokenActived != value))
				{
					this.OnTokenActivedChanging(value);
					this.SendPropertyChanging();
					this._TokenActived = value;
					this.SendPropertyChanged("TokenActived");
					this.OnTokenActivedChanged();
				}
			}
		}
		
		[Column(Storage="_BrokerID", DbType="VarChar(20)")]
		public string BrokerID
		{
			get
			{
				return this._BrokerID;
			}
			set
			{
				if ((this._BrokerID != value))
				{
					if (this._BrokerAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBrokerIDChanging(value);
					this.SendPropertyChanging();
					this._BrokerID = value;
					this.SendPropertyChanged("BrokerID");
					this.OnBrokerIDChanged();
				}
			}
		}
		
		[Column(Storage="_PassIsNew", DbType="Bit")]
		public System.Nullable<bool> PassIsNew
		{
			get
			{
				return this._PassIsNew;
			}
			set
			{
				if ((this._PassIsNew != value))
				{
					this.OnPassIsNewChanging(value);
					this.SendPropertyChanging();
					this._PassIsNew = value;
					this.SendPropertyChanged("PassIsNew");
					this.OnPassIsNewChanged();
				}
			}
		}
		
		[Column(Storage="_PINIsNew", DbType="Bit")]
		public System.Nullable<bool> PINIsNew
		{
			get
			{
				return this._PINIsNew;
			}
			set
			{
				if ((this._PINIsNew != value))
				{
					this.OnPINIsNewChanging(value);
					this.SendPropertyChanging();
					this._PINIsNew = value;
					this.SendPropertyChanged("PINIsNew");
					this.OnPINIsNewChanged();
				}
			}
		}
		
		[Column(Storage="_PassExpDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PassExpDate
		{
			get
			{
				return this._PassExpDate;
			}
			set
			{
				if ((this._PassExpDate != value))
				{
					this.OnPassExpDateChanging(value);
					this.SendPropertyChanging();
					this._PassExpDate = value;
					this.SendPropertyChanged("PassExpDate");
					this.OnPassExpDateChanged();
				}
			}
		}
		
		[Column(Storage="_PINExpDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> PINExpDate
		{
			get
			{
				return this._PINExpDate;
			}
			set
			{
				if ((this._PINExpDate != value))
				{
					this.OnPINExpDateChanging(value);
					this.SendPropertyChanging();
					this._PINExpDate = value;
					this.SendPropertyChanged("PINExpDate");
					this.OnPINExpDateChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerType", DbType="Int NOT NULL")]
		public int CustomerType
		{
			get
			{
				return this._CustomerType;
			}
			set
			{
				if ((this._CustomerType != value))
				{
					this.OnCustomerTypeChanging(value);
					this.SendPropertyChanging();
					this._CustomerType = value;
					this.SendPropertyChanged("CustomerType");
					this.OnCustomerTypeChanged();
				}
			}
		}
		
		[Column(Storage="_AuthType", DbType="SmallInt NOT NULL")]
		public short AuthType
		{
			get
			{
				return this._AuthType;
			}
			set
			{
				if ((this._AuthType != value))
				{
					this.OnAuthTypeChanging(value);
					this.SendPropertyChanging();
					this._AuthType = value;
					this.SendPropertyChanged("AuthType");
					this.OnAuthTypeChanged();
				}
			}
		}
		
		[Column(Storage="_PinType", DbType="SmallInt NOT NULL")]
		public short PinType
		{
			get
			{
				return this._PinType;
			}
			set
			{
				if ((this._PinType != value))
				{
					this.OnPinTypeChanging(value);
					this.SendPropertyChanging();
					this._PinType = value;
					this.SendPropertyChanged("PinType");
					this.OnPinTypeChanged();
				}
			}
		}
		
		[Column(Storage="_FailedLoginCount", DbType="Int")]
		public System.Nullable<int> FailedLoginCount
		{
			get
			{
				return this._FailedLoginCount;
			}
			set
			{
				if ((this._FailedLoginCount != value))
				{
					this.OnFailedLoginCountChanging(value);
					this.SendPropertyChanging();
					this._FailedLoginCount = value;
					this.SendPropertyChanged("FailedLoginCount");
					this.OnFailedLoginCountChanged();
				}
			}
		}
		
		[Column(Storage="_FailedLoginTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> FailedLoginTime
		{
			get
			{
				return this._FailedLoginTime;
			}
			set
			{
				if ((this._FailedLoginTime != value))
				{
					this.OnFailedLoginTimeChanging(value);
					this.SendPropertyChanging();
					this._FailedLoginTime = value;
					this.SendPropertyChanged("FailedLoginTime");
					this.OnFailedLoginTimeChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedUser", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string CreatedUser
		{
			get
			{
				return this._CreatedUser;
			}
			set
			{
				if ((this._CreatedUser != value))
				{
					this.OnCreatedUserChanging(value);
					this.SendPropertyChanging();
					this._CreatedUser = value;
					this.SendPropertyChanged("CreatedUser");
					this.OnCreatedUserChanged();
				}
			}
		}
		
		[Column(Storage="_UpdatedUser", DbType="VarChar(20)")]
		public string UpdatedUser
		{
			get
			{
				return this._UpdatedUser;
			}
			set
			{
				if ((this._UpdatedUser != value))
				{
					this.OnUpdatedUserChanging(value);
					this.SendPropertyChanging();
					this._UpdatedUser = value;
					this.SendPropertyChanged("UpdatedUser");
					this.OnUpdatedUserChanged();
				}
			}
		}
		
		[Column(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[Association(Name="MainCustAccount_SubCustAccount", Storage="_SubCustAccounts", ThisKey="MainCustAccountID", OtherKey="MainCustAccountID")]
		public EntitySet<SubCustAccount> SubCustAccounts
		{
			get
			{
				return this._SubCustAccounts;
			}
			set
			{
				this._SubCustAccounts.Assign(value);
			}
		}
		
		[Association(Name="BrokerAccount_MainCustAccount", Storage="_BrokerAccount", ThisKey="BrokerID", OtherKey="BrokerID", IsForeignKey=true)]
		public BrokerAccount BrokerAccount
		{
			get
			{
				return this._BrokerAccount.Entity;
			}
			set
			{
				BrokerAccount previousValue = this._BrokerAccount.Entity;
				if (((previousValue != value) 
							|| (this._BrokerAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BrokerAccount.Entity = null;
						previousValue.MainCustAccounts.Remove(this);
					}
					this._BrokerAccount.Entity = value;
					if ((value != null))
					{
						value.MainCustAccounts.Add(this);
						this._BrokerID = value.BrokerID;
					}
					else
					{
						this._BrokerID = default(string);
					}
					this.SendPropertyChanged("BrokerAccount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SubCustAccounts(SubCustAccount entity)
		{
			this.SendPropertyChanging();
			entity.MainCustAccount = this;
		}
		
		private void detach_SubCustAccounts(SubCustAccount entity)
		{
			this.SendPropertyChanging();
			entity.MainCustAccount = null;
		}
	}
	
	[Table(Name="dbo.BrokerAccount")]
	public partial class BrokerAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _BrokerID;
		
		private string _Name;
		
		private string _Password;
		
		private short _AccountType;
		
		private bool _Actived;
		
		private string _MobilePhone;
		
		private string _EmailAddr;
		
		private System.DateTime _CreatedDate;
		
		private string _CreatedUser;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private string _UpdatedUser;
		
		private EntitySet<MainCustAccount> _MainCustAccounts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBrokerIDChanging(string value);
    partial void OnBrokerIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnAccountTypeChanging(short value);
    partial void OnAccountTypeChanged();
    partial void OnActivedChanging(bool value);
    partial void OnActivedChanged();
    partial void OnMobilePhoneChanging(string value);
    partial void OnMobilePhoneChanged();
    partial void OnEmailAddrChanging(string value);
    partial void OnEmailAddrChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedUserChanging(string value);
    partial void OnCreatedUserChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    partial void OnUpdatedUserChanging(string value);
    partial void OnUpdatedUserChanged();
    #endregion
		
		public BrokerAccount()
		{
			this._MainCustAccounts = new EntitySet<MainCustAccount>(new Action<MainCustAccount>(this.attach_MainCustAccounts), new Action<MainCustAccount>(this.detach_MainCustAccounts));
			OnCreated();
		}
		
		[Column(Storage="_BrokerID", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string BrokerID
		{
			get
			{
				return this._BrokerID;
			}
			set
			{
				if ((this._BrokerID != value))
				{
					this.OnBrokerIDChanging(value);
					this.SendPropertyChanging();
					this._BrokerID = value;
					this.SendPropertyChanged("BrokerID");
					this.OnBrokerIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_AccountType", DbType="SmallInt NOT NULL")]
		public short AccountType
		{
			get
			{
				return this._AccountType;
			}
			set
			{
				if ((this._AccountType != value))
				{
					this.OnAccountTypeChanging(value);
					this.SendPropertyChanging();
					this._AccountType = value;
					this.SendPropertyChanged("AccountType");
					this.OnAccountTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Actived", DbType="Bit NOT NULL")]
		public bool Actived
		{
			get
			{
				return this._Actived;
			}
			set
			{
				if ((this._Actived != value))
				{
					this.OnActivedChanging(value);
					this.SendPropertyChanging();
					this._Actived = value;
					this.SendPropertyChanged("Actived");
					this.OnActivedChanged();
				}
			}
		}
		
		[Column(Storage="_MobilePhone", DbType="VarChar(20)")]
		public string MobilePhone
		{
			get
			{
				return this._MobilePhone;
			}
			set
			{
				if ((this._MobilePhone != value))
				{
					this.OnMobilePhoneChanging(value);
					this.SendPropertyChanging();
					this._MobilePhone = value;
					this.SendPropertyChanged("MobilePhone");
					this.OnMobilePhoneChanged();
				}
			}
		}
		
		[Column(Storage="_EmailAddr", DbType="VarChar(30)")]
		public string EmailAddr
		{
			get
			{
				return this._EmailAddr;
			}
			set
			{
				if ((this._EmailAddr != value))
				{
					this.OnEmailAddrChanging(value);
					this.SendPropertyChanging();
					this._EmailAddr = value;
					this.SendPropertyChanged("EmailAddr");
					this.OnEmailAddrChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedUser", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string CreatedUser
		{
			get
			{
				return this._CreatedUser;
			}
			set
			{
				if ((this._CreatedUser != value))
				{
					this.OnCreatedUserChanging(value);
					this.SendPropertyChanging();
					this._CreatedUser = value;
					this.SendPropertyChanged("CreatedUser");
					this.OnCreatedUserChanged();
				}
			}
		}
		
		[Column(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_UpdatedUser", DbType="VarChar(20)")]
		public string UpdatedUser
		{
			get
			{
				return this._UpdatedUser;
			}
			set
			{
				if ((this._UpdatedUser != value))
				{
					this.OnUpdatedUserChanging(value);
					this.SendPropertyChanging();
					this._UpdatedUser = value;
					this.SendPropertyChanged("UpdatedUser");
					this.OnUpdatedUserChanged();
				}
			}
		}
		
		[Association(Name="BrokerAccount_MainCustAccount", Storage="_MainCustAccounts", ThisKey="BrokerID", OtherKey="BrokerID")]
		public EntitySet<MainCustAccount> MainCustAccounts
		{
			get
			{
				return this._MainCustAccounts;
			}
			set
			{
				this._MainCustAccounts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MainCustAccounts(MainCustAccount entity)
		{
			this.SendPropertyChanging();
			entity.BrokerAccount = this;
		}
		
		private void detach_MainCustAccounts(MainCustAccount entity)
		{
			this.SendPropertyChanging();
			entity.BrokerAccount = null;
		}
	}
	
	[Table(Name="dbo.SubCustAccount")]
	public partial class SubCustAccount : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SubCustAccountID;
		
		private string _Name;
		
		private System.Nullable<bool> _Actived;
		
		private System.Nullable<short> _LockAccountReason;
		
		private string _MainCustAccountID;
		
		private System.Nullable<System.DateTime> _CreatedDate;
		
		private string _CreatedUser;
		
		private System.Nullable<System.DateTime> _UpdatedDate;
		
		private string _UpdatedUser;
		
		private EntitySet<SubCustAccountPermission> _SubCustAccountPermissions;
		
		private EntityRef<MainCustAccount> _MainCustAccount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubCustAccountIDChanging(string value);
    partial void OnSubCustAccountIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnActivedChanging(System.Nullable<bool> value);
    partial void OnActivedChanged();
    partial void OnLockAccountReasonChanging(System.Nullable<short> value);
    partial void OnLockAccountReasonChanged();
    partial void OnMainCustAccountIDChanging(string value);
    partial void OnMainCustAccountIDChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedDateChanged();
    partial void OnCreatedUserChanging(string value);
    partial void OnCreatedUserChanged();
    partial void OnUpdatedDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUpdatedDateChanged();
    partial void OnUpdatedUserChanging(string value);
    partial void OnUpdatedUserChanged();
    #endregion
		
		public SubCustAccount()
		{
			this._SubCustAccountPermissions = new EntitySet<SubCustAccountPermission>(new Action<SubCustAccountPermission>(this.attach_SubCustAccountPermissions), new Action<SubCustAccountPermission>(this.detach_SubCustAccountPermissions));
			this._MainCustAccount = default(EntityRef<MainCustAccount>);
			OnCreated();
		}
		
		[Column(Storage="_SubCustAccountID", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SubCustAccountID
		{
			get
			{
				return this._SubCustAccountID;
			}
			set
			{
				if ((this._SubCustAccountID != value))
				{
					this.OnSubCustAccountIDChanging(value);
					this.SendPropertyChanging();
					this._SubCustAccountID = value;
					this.SendPropertyChanged("SubCustAccountID");
					this.OnSubCustAccountIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Actived", DbType="Bit")]
		public System.Nullable<bool> Actived
		{
			get
			{
				return this._Actived;
			}
			set
			{
				if ((this._Actived != value))
				{
					this.OnActivedChanging(value);
					this.SendPropertyChanging();
					this._Actived = value;
					this.SendPropertyChanged("Actived");
					this.OnActivedChanged();
				}
			}
		}
		
		[Column(Storage="_LockAccountReason", DbType="SmallInt")]
		public System.Nullable<short> LockAccountReason
		{
			get
			{
				return this._LockAccountReason;
			}
			set
			{
				if ((this._LockAccountReason != value))
				{
					this.OnLockAccountReasonChanging(value);
					this.SendPropertyChanging();
					this._LockAccountReason = value;
					this.SendPropertyChanged("LockAccountReason");
					this.OnLockAccountReasonChanged();
				}
			}
		}
		
		[Column(Storage="_MainCustAccountID", DbType="VarChar(20)")]
		public string MainCustAccountID
		{
			get
			{
				return this._MainCustAccountID;
			}
			set
			{
				if ((this._MainCustAccountID != value))
				{
					if (this._MainCustAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMainCustAccountIDChanging(value);
					this.SendPropertyChanging();
					this._MainCustAccountID = value;
					this.SendPropertyChanged("MainCustAccountID");
					this.OnMainCustAccountIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedUser", DbType="VarChar(20)")]
		public string CreatedUser
		{
			get
			{
				return this._CreatedUser;
			}
			set
			{
				if ((this._CreatedUser != value))
				{
					this.OnCreatedUserChanging(value);
					this.SendPropertyChanging();
					this._CreatedUser = value;
					this.SendPropertyChanged("CreatedUser");
					this.OnCreatedUserChanged();
				}
			}
		}
		
		[Column(Storage="_UpdatedDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UpdatedDate
		{
			get
			{
				return this._UpdatedDate;
			}
			set
			{
				if ((this._UpdatedDate != value))
				{
					this.OnUpdatedDateChanging(value);
					this.SendPropertyChanging();
					this._UpdatedDate = value;
					this.SendPropertyChanged("UpdatedDate");
					this.OnUpdatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_UpdatedUser", DbType="VarChar(20)")]
		public string UpdatedUser
		{
			get
			{
				return this._UpdatedUser;
			}
			set
			{
				if ((this._UpdatedUser != value))
				{
					this.OnUpdatedUserChanging(value);
					this.SendPropertyChanging();
					this._UpdatedUser = value;
					this.SendPropertyChanged("UpdatedUser");
					this.OnUpdatedUserChanged();
				}
			}
		}
		
		[Association(Name="SubCustAccount_SubCustAccountPermission", Storage="_SubCustAccountPermissions", ThisKey="SubCustAccountID", OtherKey="SubCustAccountID")]
		public EntitySet<SubCustAccountPermission> SubCustAccountPermissions
		{
			get
			{
				return this._SubCustAccountPermissions;
			}
			set
			{
				this._SubCustAccountPermissions.Assign(value);
			}
		}
		
		[Association(Name="MainCustAccount_SubCustAccount", Storage="_MainCustAccount", ThisKey="MainCustAccountID", OtherKey="MainCustAccountID", IsForeignKey=true)]
		public MainCustAccount MainCustAccount
		{
			get
			{
				return this._MainCustAccount.Entity;
			}
			set
			{
				MainCustAccount previousValue = this._MainCustAccount.Entity;
				if (((previousValue != value) 
							|| (this._MainCustAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._MainCustAccount.Entity = null;
						previousValue.SubCustAccounts.Remove(this);
					}
					this._MainCustAccount.Entity = value;
					if ((value != null))
					{
						value.SubCustAccounts.Add(this);
						this._MainCustAccountID = value.MainCustAccountID;
					}
					else
					{
						this._MainCustAccountID = default(string);
					}
					this.SendPropertyChanged("MainCustAccount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SubCustAccountPermissions(SubCustAccountPermission entity)
		{
			this.SendPropertyChanging();
			entity.SubCustAccount = this;
		}
		
		private void detach_SubCustAccountPermissions(SubCustAccountPermission entity)
		{
			this.SendPropertyChanging();
			entity.SubCustAccount = null;
		}
	}
	
	[Table(Name="dbo.SubCustAccountPermission")]
	public partial class SubCustAccountPermission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _SubCustAccountID;
		
		private int _CustServicesPermissionID;
		
		private EntityRef<SubCustAccount> _SubCustAccount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubCustAccountIDChanging(string value);
    partial void OnSubCustAccountIDChanged();
    partial void OnCustServicesPermissionIDChanging(int value);
    partial void OnCustServicesPermissionIDChanged();
    #endregion
		
		public SubCustAccountPermission()
		{
			this._SubCustAccount = default(EntityRef<SubCustAccount>);
			OnCreated();
		}
		
		[Column(Storage="_SubCustAccountID", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string SubCustAccountID
		{
			get
			{
				return this._SubCustAccountID;
			}
			set
			{
				if ((this._SubCustAccountID != value))
				{
					if (this._SubCustAccount.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubCustAccountIDChanging(value);
					this.SendPropertyChanging();
					this._SubCustAccountID = value;
					this.SendPropertyChanged("SubCustAccountID");
					this.OnSubCustAccountIDChanged();
				}
			}
		}
		
		[Column(Storage="_CustServicesPermissionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CustServicesPermissionID
		{
			get
			{
				return this._CustServicesPermissionID;
			}
			set
			{
				if ((this._CustServicesPermissionID != value))
				{
					this.OnCustServicesPermissionIDChanging(value);
					this.SendPropertyChanging();
					this._CustServicesPermissionID = value;
					this.SendPropertyChanged("CustServicesPermissionID");
					this.OnCustServicesPermissionIDChanged();
				}
			}
		}
		
		[Association(Name="SubCustAccount_SubCustAccountPermission", Storage="_SubCustAccount", ThisKey="SubCustAccountID", OtherKey="SubCustAccountID", IsForeignKey=true)]
		public SubCustAccount SubCustAccount
		{
			get
			{
				return this._SubCustAccount.Entity;
			}
			set
			{
				SubCustAccount previousValue = this._SubCustAccount.Entity;
				if (((previousValue != value) 
							|| (this._SubCustAccount.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SubCustAccount.Entity = null;
						previousValue.SubCustAccountPermissions.Remove(this);
					}
					this._SubCustAccount.Entity = value;
					if ((value != null))
					{
						value.SubCustAccountPermissions.Add(this);
						this._SubCustAccountID = value.SubCustAccountID;
					}
					else
					{
						this._SubCustAccountID = default(string);
					}
					this.SendPropertyChanged("SubCustAccount");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
