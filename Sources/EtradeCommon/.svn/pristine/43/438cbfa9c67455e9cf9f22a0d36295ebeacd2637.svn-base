<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ETradeFinance.Services</name>
    </assembly>
    <members>
        <member name="T:ETradeFinance.Services.IConnectionScope">
            <summary>
            Connection Scope Interface
            </summary>
        </member>
        <member name="P:ETradeFinance.Services.IConnectionScope.ConnectionStringKey">
            <summary>
            Gets or sets the connection string key.
            </summary>
            <value>The connection string key.</value>
        </member>
        <member name="P:ETradeFinance.Services.IConnectionScope.DataProvider">
            <summary>
            Gets or sets the data provider.
            </summary>
            <value>The data provider.</value>
        </member>
        <member name="P:ETradeFinance.Services.IConnectionScope.DynamicConnectionString">
            <summary>
            Gets or sets the dynamic connection string.
            </summary>
            <value>The dynamic connection string.</value>
        </member>
        <member name="P:ETradeFinance.Services.IConnectionScope.HasTransaction">
            <summary>
            Gets a value indicating whether this instance has transaction.
            </summary>
            <value>
            	<c>true</c> if this instance has transaction; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ETradeFinance.Services.IConnectionScope.TransactionManager">
            <summary>
            Gets or sets the transaction manager.
            </summary>
            <value>The transaction manager.</value>
        </member>
        <member name="T:ETradeFinance.Services.DomainUtil">
            <summary>
            DomainUtil class.
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.DomainUtil.GetErrorsFromList``1(ETradeFinance.Entities.TList{``0})">
            <summary>
            Aggregates all the errors in a collection
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.DomainUtil.HandleException(System.Exception,System.String)">
            <summary>
            Wraps call to tohe <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy"/> class which handles all exceptions based on the security policy.
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.DomainUtil.GetDefaultByType(System.Data.DbType)">
            <summary>
            Get a default value for a given data type
            </summary>
            <param name="dataType">Data type for which to get the default value</param>
            <returns>An object of the default value.</returns>
        </member>
        <member name="M:ETradeFinance.Services.DomainUtil.GetDataValue(System.Data.IDataParameter)">
            <summary>
            Get Value or Default Value from an IDataParamater
            Based on DbType
            </summary>
            <param name="p">The IDataParameter instance type is used to determine the default value.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.DomainUtil.DefaultToDBNull(System.Object,System.Data.DbType)">
            <summary>
            Checks to see if the Default Value has been set to the parameter.
            If it's the default value, then create.
            </summary>
            <param name="val">The value we want to check.</param>
            <param name="dbtype">The DbType from wich we take the default value.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.DomainUtil.GetParameterValue``1(System.Data.IDataParameter)">
            <summary>
            Generic method to return the value of a nullable parameter
            </summary>
            <typeparam name="T">Type of value to return</typeparam>
            <param name="parameter">Parameter from which to extract the value</param>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.DomainUtil.ConvertDataReaderToDataSet(System.Data.IDataReader)">
            <summary>
            Converts a IDataReader to a DataSet.  For use when a custom stored procedure returns an <see cref="T:System.Data.IDataReader"/>, it will
            convert all result sets returned as a DataSet.
            </summary>
            <param name="reader">The reader to convert</param>
            <returns>A dataset with one table per result in the reader</returns>
        </member>
        <member name="T:ETradeFinance.Services.CashAdvanceHistoryServiceBase">
            <summary>
             An object representation of the 'CashAdvanceHistory' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the CashAdvanceHistory.cs file instead.
             All custom implementations should be done in the <see cref="T:ETradeFinance.Entities.CashAdvanceHistory"/> class.
             </remarks>
        </member>
        <member name="T:ETradeFinance.Services.ServiceBase`2">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:ETradeFinance.Services.ServiceBaseCore`2">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:ETradeFinance.Services.IComponentService">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="P:ETradeFinance.Services.IComponentService.ProcessorList">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:ETradeFinance.Services.IComponentService.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:ETradeFinance.Services.IComponentService.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="E:ETradeFinance.Services.IComponentService.ProcessStarting">
            <summary>
            Event to indicate that a processor is about to begin.
            </summary>
        </member>
        <member name="E:ETradeFinance.Services.IComponentService.ProcessEnded">
            <summary>
            Event to indicate that a processor has just ended.
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.ServiceBaseCore`2.OnProcessStarting(ETradeFinance.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.ServiceBaseCore`2.OnProcessEnded(ETradeFinance.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.ServiceBaseCore`2.Execute">
             <summary>
            	Provides the beginning
             <remarks>
             If no AbortIfFailure parameter is passed then the process will not abort if there is a failure
             </remarks>
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:ETradeFinance.Services.ServiceBaseCore`2.Execute(System.Boolean)">
             <summary>
            	Executes the processors in the processor list
             <remarks>
             If abortIfFailure is set to true then the execution will halt on the first failure
            </remarks>
             </summary>
        </member>
        <member name="M:ETradeFinance.Services.ServiceBaseCore`2.Get(`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ETradeFinance.Services.ServiceBaseCore`2.GetAll">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.ServiceBaseCore`2.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.ServiceBaseCore`2.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.ServiceBaseCore`2.Insert(`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:ETradeFinance.Services.ServiceBaseCore`2.BulkInsert(ETradeFinance.Entities.TList{`0})">
            <summary>
            Efficiently inserts multiple rows into the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to insert.</param>
        </member>
        <member name="M:ETradeFinance.Services.ServiceBaseCore`2.Update(`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:ETradeFinance.Services.ServiceBaseCore`2.Delete(`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:ETradeFinance.Services.ServiceBaseCore`2.Save(`0)">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:ETradeFinance.Services.ServiceBaseCore`2.DeepLoad(`0,System.Boolean,ETradeFinance.DataAccess.DeepLoadType,System.Type[],ETradeFinance.DataAccess.Bases.DeepSession)">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
            <param name="innerList">A collection of child types for easy access.</param>
        </member>
        <member name="M:ETradeFinance.Services.ServiceBaseCore`2.DeepLoad(ETradeFinance.Entities.TList{`0},System.Boolean,ETradeFinance.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ETradeFinance.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:ETradeFinance.Services.ServiceBaseCore`2.DeepSave(`0)">
            <summary>
            Deep Save the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:ETradeFinance.Services.ServiceBaseCore`2.DeepSave(`0,ETradeFinance.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:ETradeFinance.Services.ServiceBaseCore`2.DeepSave(`0,ETradeFinance.DataAccess.DeepSaveType,System.Type[],System.Collections.Hashtable)">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep save functionality.
            </remarks>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="M:ETradeFinance.Services.ServiceBaseCore`2.DeepSave(ETradeFinance.Entities.TList{`0},ETradeFinance.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="P:ETradeFinance.Services.ServiceBaseCore`2.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:ETradeFinance.Services.ServiceBaseCore`2.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:ETradeFinance.Services.ServiceBaseCore`2.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:ETradeFinance.Services.ServiceBaseCore`2.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:ETradeFinance.Services.ServiceBaseCore`2.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:ETradeFinance.Services.ServiceBaseCore`2.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:ETradeFinance.Services.ServiceBaseCore`2.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:ETradeFinance.Services.ServiceBaseCore`2.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:ETradeFinance.Services.ServiceBaseCore`2.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ETradeFinance.Entities.CashAdvanceHistory"/> instance .
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.CreateCashAdvanceHistory(System.String,System.DateTime,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Int32,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Decimal})" -->
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.Get(ETradeFinance.Entities.CashAdvanceHistoryKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.GetById(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:ETradeFinance.Entities.TList`1"/> from the datasource based on the primary key PK_CashAdvanceHistory index.
            </summary>
            <param name="_id">CashAdvanceID identifies CashAdvance</param>
            <returns>Returns an instance of the <see cref="T:ETradeFinance.Entities.CashAdvanceHistory"/> class.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.GetById(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ETradeFinance.Entities.TList`1"/> from the datasource based on the primary key PK_CashAdvanceHistory index.
            </summary>
            <param name="_id">CashAdvanceID identifies CashAdvance</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ETradeFinance.Entities.CashAdvanceHistory"/> class.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ETradeFinance.Entities.CashAdvanceHistory"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ETradeFinance.Entities.CashAdvanceHistory"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ETradeFinance.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ETradeFinance.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CashAdvanceHistory</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ETradeFinance.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CashAdvanceHistory</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ETradeFinance.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CashAdvanceHistory</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{CashAdvanceHistory} of <c>CashAdvanceHistory</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>CashAdvanceHistory</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection,ETradeFinance.DataAccess.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:ETradeFinance.DataAccess.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>CashAdvanceHistory</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>CashAdvanceHistory</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection,ETradeFinance.DataAccess.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:ETradeFinance.DataAccess.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CashAdvanceHistory</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CashAdvanceHistory</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.Insert(ETradeFinance.Entities.CashAdvanceHistory)">
            <summary>
            public virtual method that Inserts a CashAdvanceHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">CashAdvanceHistory object to Insert.</param>
            <remarks>After Inserting into the datasource, the CashAdvanceHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            CashAdvanceHistory entity = new CashAdvanceHistory();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CashAdvanceHistoryService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.Insert(ETradeFinance.Entities.TList{ETradeFinance.Entities.CashAdvanceHistory})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:ETradeFinance.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CashAdvanceHistory</c> objects in a <see cref="T:ETradeFinance.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>CashAdvanceHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of CashAdvanceHistory.
             <code><![CDATA[
             TList<CashAdvanceHistory> list = new TList<CashAdvanceHistory>();
             CashAdvanceHistory entity = new CashAdvanceHistory();
             entity.StringProperty = "foo";
             CashAdvanceHistory entity2 = new CashAdvanceHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CashAdvanceHistoryService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.Update(ETradeFinance.Entities.CashAdvanceHistory)">
            <summary>
            public virtual method that Updates a CashAdvanceHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">CashAdvanceHistory object to Update.</param>
            <remarks>After Updateing into the datasource, the CashAdvanceHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            CashAdvanceHistory entity = CashAdvanceHistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CashAdvanceHistoryService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.Update(ETradeFinance.Entities.TList{ETradeFinance.Entities.CashAdvanceHistory})">
             <summary>
             public virtual method that Updates rows in <see cref="T:ETradeFinance.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CashAdvanceHistory</c> objects in a <see cref="T:ETradeFinance.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>CashAdvanceHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of CashAdvanceHistory.
             <code><![CDATA[
             TList<CashAdvanceHistory> list = new TList<CashAdvanceHistory>();
             CashAdvanceHistory entity = new CashAdvanceHistory();
             entity.StringProperty = "foo";
             CashAdvanceHistory entity2 = new CashAdvanceHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CashAdvanceHistoryService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.Save(ETradeFinance.Entities.CashAdvanceHistory)">
            <summary>
            public virtual method that Saves a CashAdvanceHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">CashAdvanceHistory object to Save.</param>
            <remarks>After Saveing into the datasource, the CashAdvanceHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            CashAdvanceHistory entity = CashAdvanceHistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CashAdvanceHistoryService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.Save(ETradeFinance.Entities.TList{ETradeFinance.Entities.CashAdvanceHistory})">
             <summary>
             public virtual method that Saves rows in <see cref="T:ETradeFinance.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CashAdvanceHistory</c> objects in a <see cref="T:ETradeFinance.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>CashAdvanceHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of CashAdvanceHistory.
             <code><![CDATA[
             TList<CashAdvanceHistory> list = new TList<CashAdvanceHistory>();
             CashAdvanceHistory entity = new CashAdvanceHistory();
             entity.StringProperty = "foo";
             CashAdvanceHistory entity2 = new CashAdvanceHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CashAdvanceHistoryService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.Delete(ETradeFinance.Entities.CashAdvanceHistory)">
            <summary>
            public virtual method that Deletes a CashAdvanceHistory object into the datasource using a transaction.
            </summary>
            <param name="entity">CashAdvanceHistory object to Delete.</param>
            <remarks>After Deleteing into the datasource, the CashAdvanceHistory object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            CashAdvanceHistory entity = CashAdvanceHistoryService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CashAdvanceHistoryService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.Delete(ETradeFinance.Entities.TList{ETradeFinance.Entities.CashAdvanceHistory})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:ETradeFinance.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CashAdvanceHistory</c> objects in a <see cref="T:ETradeFinance.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>CashAdvanceHistory</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of CashAdvanceHistory.
             <code><![CDATA[
             TList<CashAdvanceHistory> list = new TList<CashAdvanceHistory>();
             CashAdvanceHistory entity = new CashAdvanceHistory();
             entity.StringProperty = "foo";
             CashAdvanceHistory entity2 = new CashAdvanceHistory();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CashAdvanceHistoryService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.Delete(ETradeFinance.Entities.CashAdvanceHistoryKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 _id
            </summary>
            <param name="_id">CashAdvanceHistory pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.DeepLoadById(System.Int64,System.Boolean,ETradeFinance.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ETradeFinance.Entities.CashAdvanceHistory"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ETradeFinance.DataAccess.DeepLoadType"/>.
            </summary>
            <param name="_id">CashAdvanceID identifies CashAdvance</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CashAdvanceHistory Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ETradeFinance.Entities.CashAdvanceHistory"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.DeepLoad(ETradeFinance.Entities.CashAdvanceHistory)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">CashAdvanceHistory Object</param>
            <remarks>
            <seealso cref="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.DeepLoad(ETradeFinance.Entities.CashAdvanceHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.DeepLoad(ETradeFinance.Entities.CashAdvanceHistory,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.DeepLoad(ETradeFinance.Entities.CashAdvanceHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">CashAdvanceHistory Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.DeepLoad(ETradeFinance.Entities.CashAdvanceHistory,System.Boolean,ETradeFinance.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ETradeFinance.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ETradeFinance.DataAccess.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ETradeFinance.Entities.CashAdvanceHistory"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CashAdvanceHistory Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.DeepLoad(ETradeFinance.Entities.TList{ETradeFinance.Entities.CashAdvanceHistory})">
            <summary>
            Deep Loads the <see cref="T:ETradeFinance.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.DeepLoad(ETradeFinance.Entities.CashAdvanceHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ETradeFinance.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.DeepLoad(ETradeFinance.Entities.TList{ETradeFinance.Entities.CashAdvanceHistory},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ETradeFinance.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.DeepLoad(ETradeFinance.Entities.CashAdvanceHistory)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ETradeFinance.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.DeepLoad(ETradeFinance.Entities.TList{ETradeFinance.Entities.CashAdvanceHistory},System.Boolean,ETradeFinance.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ETradeFinance.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ETradeFinance.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ETradeFinance.DataAccess.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ETradeFinance.Entities.CashAdvanceHistory"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.DeepSave(ETradeFinance.Entities.CashAdvanceHistory)">
            <summary>
            public virtualDeep Saves the <see cref="T:ETradeFinance.Entities.CashAdvanceHistory"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">CashAdvanceHistory Object</param>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.DeepSave(ETradeFinance.Entities.CashAdvanceHistory,ETradeFinance.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the CashAdvanceHistory object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">CashAdvanceHistory Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>CashAdvanceHistory</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.DeepSave(ETradeFinance.Entities.TList{ETradeFinance.Entities.CashAdvanceHistory})">
            <summary>
            Deep Save the entire <see cref="T:ETradeFinance.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{CashAdvanceHistory} Object</param>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryServiceBase.DeepSave(ETradeFinance.Entities.TList{ETradeFinance.Entities.CashAdvanceHistory},ETradeFinance.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ETradeFinance.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ETradeFinance.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CashAdvanceHistory Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ETradeFinance.Services.CashAdvanceHistoryServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ETradeFinance.Services.ProcessStartingHandler">
            <summary>
            ProcessStartingHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:ETradeFinance.Services.ProcessEndedHandler">
            <summary>
            ProcessEndedHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:ETradeFinance.Services.ProcessorEventArgs">
            <summary>
            Processor Event Args
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.ProcessorEventArgs.#ctor(ETradeFinance.Services.ProcessorBase)">
            <summary>
            Initializes a new instance of the ProcessorEventArgs class.
            </summary>
            <param name="processor"></param>
        </member>
        <member name="P:ETradeFinance.Services.ProcessorEventArgs.Processor">
            <summary>
            Gets or sets the processor.
            </summary>
            <value>The processor.</value>
        </member>
        <member name="T:ETradeFinance.Services.ConnectionScope">
            <summary>
            Provides storage of global database connection information.
            </summary>
        </member>
        <member name="T:ETradeFinance.Services.ConnectionScopeBase">
            <summary>
            Provides storage of global database connection information.
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.ConnectionScopeBase.#ctor">
            <summary>
            Initializes a new instance of the ConnectionScope class.
            </summary>
        </member>
        <member name="F:ETradeFinance.Services.ConnectionScopeBase.connectionStringKey">
            <summary>
            The ConnectionStringKey member variable.
            </summary>
        </member>
        <member name="F:ETradeFinance.Services.ConnectionScopeBase.dynamicConnectionString">
            <summary>
            The DynamicConnectionString member variable.
            </summary>
        </member>
        <member name="F:ETradeFinance.Services.ConnectionScopeBase.transactionManager">
            <summary>
            The TransactionManager member variable.
            </summary>
        </member>
        <member name="F:ETradeFinance.Services.ConnectionScopeBase.dataProvider">
            <summary>
            The NetTiersProvider member variable.
            </summary>
        </member>
        <member name="P:ETradeFinance.Services.ConnectionScopeBase.ConnectionStringKey">
            <summary>
            Gets or sets the ConnectionStringKey property.
            </summary>
        </member>
        <member name="P:ETradeFinance.Services.ConnectionScopeBase.DynamicConnectionString">
            <summary>
            Gets or sets the DynamicConnectionString property.
            </summary>
        </member>
        <member name="P:ETradeFinance.Services.ConnectionScopeBase.TransactionManager">
            <summary>
            Gets or sets the TransactionManager property.
            </summary>
        </member>
        <member name="P:ETradeFinance.Services.ConnectionScopeBase.DataProvider">
             <summary>
             Gets or Sets the Current DataProvider property of the <c>ConnectionScope</c> Object.
             </summary>
             <remarks>
             To use a dynamic connection, you must set both the 
             DynamicConnectionString and a unique ConnectionStringKey properties;
            </remarks>
        </member>
        <member name="P:ETradeFinance.Services.ConnectionScopeBase.HasTransaction">
            <summary>
            Determines if Current Connections is in a Transaction.
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.ConnectionScope.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.ConnectionScope.NewThread(System.Threading.ThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:ETradeFinance.Services.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:ETradeFinance.Services.ConnectionScope.NewThread(System.Threading.ParameterizedThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:ETradeFinance.Services.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:ETradeFinance.Services.ConnectionScope.EnqueueOnThreadPool(System.Threading.ThreadStart)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:ETradeFinance.Services.ConnectionScope.EnqueueOnThreadPool(System.Threading.ParameterizedThreadStart,System.Object)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <param name="state">An object containing data to be used by the method.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:ETradeFinance.Services.ConnectionScope.Copy(ETradeFinance.Services.ConnectionScope)">
            <summary>
            Copies the values from the specified <paramref name="scope"/> object
            to the <see cref="T:ETradeFinance.Services.ConnectionScope"/> used by the current thread.
            </summary>
            <param name="scope">A <see cref="T:ETradeFinance.Services.ConnectionScope"/> object.</param>
        </member>
        <member name="M:ETradeFinance.Services.ConnectionScope.ValidateOrCreateTransaction">
            <summary>
            Validates an existing <c cref="T:ETradeFinance.DataAccess.TransactionManager"/> if one exists,
            otherwise creates a new <c cref="T:ETradeFinance.DataAccess.TransactionManager"/> to use.
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.ConnectionScope.ValidateOrCreateTransaction(System.Boolean)">
            <summary>
            Validates an existing <c cref="T:ETradeFinance.DataAccess.TransactionManager"/> if one exists,
            otherwise creates a new <c cref="T:ETradeFinance.DataAccess.TransactionManager"/> to use.
            </summary>
            <param name="createTransaction">determines whether to create a new transaction</param>
        </member>
        <member name="M:ETradeFinance.Services.ConnectionScope.CreateTransaction">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>.
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.ConnectionScope.CreateTransaction(System.Data.IsolationLevel)">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>
            with the specified <c cref="T:System.Data.IsolationLevel"/>.
            </summary>
            <param name="level">Determines which <c cref="T:System.Data.IsolationLevel"/> to use for the transaction.</param>
        </member>
        <member name="M:ETradeFinance.Services.ConnectionScope.Complete">
            <summary>
            Completes this transaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.ConnectionScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:ETradeFinance.Services.ConnectionScope.Current">
            <summary>
            Gets a reference to the ConnectionScope object for the current thread.
            </summary>
        </member>
        <member name="P:ETradeFinance.Services.ConnectionScope.HasTransaction">
            <summary>
            Determines if Current Connections is in a Transaction.
            </summary>
        </member>
        <member name="T:ETradeFinance.Services.GenericProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary> 
        </member>
        <member name="T:ETradeFinance.Services.IProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.IProcessorResult.AddBrokenRulesList(System.Type,ETradeFinance.Entities.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:ETradeFinance.Services.IProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:ETradeFinance.Services.IProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:ETradeFinance.Services.IProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation.
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.GenericProcessorResult.#ctor">
            <summary>
            Initializes a new instance of the GenericProcessorResult class.
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.GenericProcessorResult.AddBrokenRulesList(System.Type,ETradeFinance.Entities.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:ETradeFinance.Services.GenericProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:ETradeFinance.Services.GenericProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:ETradeFinance.Services.GenericProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation. 
            This is set by the processor.
            </summary>
        </member>
        <member name="T:ETradeFinance.Services.ProcessorBase">
            <summary>
            The interface that each complex business unit of work processor will use.
            </summary>
        </member>
        <member name="T:ETradeFinance.Services.IProcessor">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.IProcessor.Process">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:ETradeFinance.Services.IProcessor.ChangeProcessorState(ETradeFinance.Services.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="P:ETradeFinance.Services.IProcessor.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:ETradeFinance.Services.IProcessor.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.ProcessorBase.Process">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:ETradeFinance.Services.ProcessorBase.ChangeProcessorState(ETradeFinance.Services.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.ProcessorBase.OnNotifyProcessorStateChanging(ETradeFinance.Services.ProcessorState)">
            <summary>
            Raises the ProcessorStateChanging event.
            </summary>
            <param name="newProcessorState"></param>
        </member>
        <member name="P:ETradeFinance.Services.ProcessorBase.ProcessResult">
            <summary>
            Provides the current process result of it's operation.
            </summary>
        </member>
        <member name="P:ETradeFinance.Services.ProcessorBase.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>The name of the type of the processors to execute</value>
        </member>
        <member name="P:ETradeFinance.Services.ProcessorBase.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="E:ETradeFinance.Services.ProcessorBase.ProcessorStateChanging">
            <summary>
            The ProcessorStateChanging event.
            </summary>
        </member>
        <member name="T:ETradeFinance.Services.ProcessorBase.ProcessorStateChangingEventHandler">
            <summary>
            The ProcessorStateChangingEventHandler event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ETradeFinance.Services.ServiceViewBaseCore`1">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.ServiceViewBaseCore`1.Execute">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:ETradeFinance.Services.ServiceViewBaseCore`1.Execute(System.Boolean)">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:ETradeFinance.Services.ServiceViewBaseCore`1.OnProcessStarting(ETradeFinance.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.ServiceViewBaseCore`1.OnProcessEnded(ETradeFinance.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.ServiceViewBaseCore`1.Get">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.ServiceViewBaseCore`1.Get(System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.ServiceViewBaseCore`1.Get(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.ServiceViewBaseCore`1.Get(System.String,System.String)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.ServiceViewBaseCore`1.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.ServiceViewBaseCore`1.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.ServiceViewBaseCore`1.Find(ETradeFinance.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="P:ETradeFinance.Services.ServiceViewBaseCore`1.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:ETradeFinance.Services.ServiceViewBaseCore`1.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:ETradeFinance.Services.ServiceViewBaseCore`1.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:ETradeFinance.Services.ServiceViewBaseCore`1.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:ETradeFinance.Services.ServiceViewBaseCore`1.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:ETradeFinance.Services.ServiceViewBaseCore`1.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:ETradeFinance.Services.ServiceViewBaseCore`1.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:ETradeFinance.Services.ServiceViewBaseCore`1.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:ETradeFinance.Services.ServiceViewBaseCore`1.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="T:ETradeFinance.Services.CashTransferService">
            <summary>
            An component type implementation of the 'CashTransfer' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:ETradeFinance.Services.CashTransferServiceBase">
            <summary>
             An object representation of the 'CashTransfer' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the CashTransfer.cs file instead.
             All custom implementations should be done in the <see cref="T:ETradeFinance.Entities.CashTransfer"/> class.
             </remarks>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ETradeFinance.Entities.CashTransfer"/> instance .
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.CreateCashTransfer(System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Decimal,System.DateTime,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ETradeFinance.Entities.CashTransfer"/> instance.
            </summary>
            <param name="_withdrawableAmt">Tong so tien co the rut (lay tu core)</param>
            <param name="_transferedAmt">Tong so tien da yeu cau chuyen (dang cho xu ly, dang xu ly)</param>
            <param name="_advOrderAmt">Tong so tien da dat lenh mua truoc va chua duoc gui vao core (tinh tren so CP chua khop )</param>
            <param name="_avilableAmt">Tong so tien hien tai duoc phep chuyen/rut</param>
            <param name="_requestAmt">So tien yeu cau chuyen</param>
            <param name="_requestTime">Thoi gian(ngay gio) yeu cau chuyen tien</param>
            <param name="_fee">Phi chuyen tien</param>
            <param name="_vat"></param>
            <param name="_amtAfterFee">So tien nhan duoc sau khi tru phi chuyen tien: AmountRemittanceFee = Amount - AdvanceFee</param>
            <param name="_srcAccountId">Tai khoan nguon</param>
            <param name="_destAccountId">Tai khoan dich(tai khoan chung khoan hoac tai khoan ngan hang)</param>
            <param name="_transType">neu TK dich la tai khoan ngan hang=&gt; TransType la rut tien, neu TK dich la TK chung khoan , TransType la chuyen tien</param>
            <param name="_status">Trang thai cua yeu cau(dang cho, dang xu ly, da xu ly, ru choi boi broker, huy boi nha dau tu)</param>
            <param name="_execTime">Ngày gi? x? lý</param>
            <param name="_approvedAmt">So tien da duoc xu ly rut/chuyen (da nhap vao core)</param>
            <param name="_note">Ghi chú</param>
            <param name="_brokerId">ID c?a broker x? lý request</param>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.Get(ETradeFinance.Entities.CashTransferKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.GetById(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:ETradeFinance.Entities.TList`1"/> from the datasource based on the primary key PK_CashTransfer index.
            </summary>
            <param name="_id">CashTransferID identifies CashTransfer</param>
            <returns>Returns an instance of the <see cref="T:ETradeFinance.Entities.CashTransfer"/> class.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.GetById(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ETradeFinance.Entities.TList`1"/> from the datasource based on the primary key PK_CashTransfer index.
            </summary>
            <param name="_id">CashTransferID identifies CashTransfer</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ETradeFinance.Entities.CashTransfer"/> class.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ETradeFinance.Entities.CashTransfer"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ETradeFinance.Entities.CashTransfer"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ETradeFinance.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ETradeFinance.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CashTransfer</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ETradeFinance.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CashTransfer</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ETradeFinance.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CashTransfer</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{CashTransfer} of <c>CashTransfer</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>CashTransfer</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection,ETradeFinance.DataAccess.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:ETradeFinance.DataAccess.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>CashTransfer</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>CashTransfer</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection,ETradeFinance.DataAccess.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:ETradeFinance.DataAccess.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CashTransfer</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CashTransfer</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.Insert(ETradeFinance.Entities.CashTransfer)">
            <summary>
            public virtual method that Inserts a CashTransfer object into the datasource using a transaction.
            </summary>
            <param name="entity">CashTransfer object to Insert.</param>
            <remarks>After Inserting into the datasource, the CashTransfer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            CashTransfer entity = new CashTransfer();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CashTransferService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.Insert(ETradeFinance.Entities.TList{ETradeFinance.Entities.CashTransfer})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:ETradeFinance.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CashTransfer</c> objects in a <see cref="T:ETradeFinance.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>CashTransfer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of CashTransfer.
             <code><![CDATA[
             TList<CashTransfer> list = new TList<CashTransfer>();
             CashTransfer entity = new CashTransfer();
             entity.StringProperty = "foo";
             CashTransfer entity2 = new CashTransfer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CashTransferService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.Update(ETradeFinance.Entities.CashTransfer)">
            <summary>
            public virtual method that Updates a CashTransfer object into the datasource using a transaction.
            </summary>
            <param name="entity">CashTransfer object to Update.</param>
            <remarks>After Updateing into the datasource, the CashTransfer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            CashTransfer entity = CashTransferService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CashTransferService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.Update(ETradeFinance.Entities.TList{ETradeFinance.Entities.CashTransfer})">
             <summary>
             public virtual method that Updates rows in <see cref="T:ETradeFinance.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CashTransfer</c> objects in a <see cref="T:ETradeFinance.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>CashTransfer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of CashTransfer.
             <code><![CDATA[
             TList<CashTransfer> list = new TList<CashTransfer>();
             CashTransfer entity = new CashTransfer();
             entity.StringProperty = "foo";
             CashTransfer entity2 = new CashTransfer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CashTransferService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.Save(ETradeFinance.Entities.CashTransfer)">
            <summary>
            public virtual method that Saves a CashTransfer object into the datasource using a transaction.
            </summary>
            <param name="entity">CashTransfer object to Save.</param>
            <remarks>After Saveing into the datasource, the CashTransfer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            CashTransfer entity = CashTransferService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CashTransferService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.Save(ETradeFinance.Entities.TList{ETradeFinance.Entities.CashTransfer})">
             <summary>
             public virtual method that Saves rows in <see cref="T:ETradeFinance.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CashTransfer</c> objects in a <see cref="T:ETradeFinance.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>CashTransfer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of CashTransfer.
             <code><![CDATA[
             TList<CashTransfer> list = new TList<CashTransfer>();
             CashTransfer entity = new CashTransfer();
             entity.StringProperty = "foo";
             CashTransfer entity2 = new CashTransfer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CashTransferService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.Delete(ETradeFinance.Entities.CashTransfer)">
            <summary>
            public virtual method that Deletes a CashTransfer object into the datasource using a transaction.
            </summary>
            <param name="entity">CashTransfer object to Delete.</param>
            <remarks>After Deleteing into the datasource, the CashTransfer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            CashTransfer entity = CashTransferService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CashTransferService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.Delete(ETradeFinance.Entities.TList{ETradeFinance.Entities.CashTransfer})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:ETradeFinance.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CashTransfer</c> objects in a <see cref="T:ETradeFinance.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>CashTransfer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of CashTransfer.
             <code><![CDATA[
             TList<CashTransfer> list = new TList<CashTransfer>();
             CashTransfer entity = new CashTransfer();
             entity.StringProperty = "foo";
             CashTransfer entity2 = new CashTransfer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CashTransferService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.Delete(ETradeFinance.Entities.CashTransferKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 _id
            </summary>
            <param name="_id">CashTransfer pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.DeepLoadById(System.Int64,System.Boolean,ETradeFinance.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ETradeFinance.Entities.CashTransfer"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ETradeFinance.DataAccess.DeepLoadType"/>.
            </summary>
            <param name="_id">CashTransferID identifies CashTransfer</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CashTransfer Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ETradeFinance.Entities.CashTransfer"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.DeepLoad(ETradeFinance.Entities.CashTransfer)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">CashTransfer Object</param>
            <remarks>
            <seealso cref="M:ETradeFinance.Services.CashTransferServiceBase.DeepLoad(ETradeFinance.Entities.CashTransfer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.DeepLoad(ETradeFinance.Entities.CashTransfer,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ETradeFinance.Services.CashTransferServiceBase.DeepLoad(ETradeFinance.Entities.CashTransfer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">CashTransfer Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.DeepLoad(ETradeFinance.Entities.CashTransfer,System.Boolean,ETradeFinance.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ETradeFinance.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ETradeFinance.DataAccess.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ETradeFinance.Entities.CashTransfer"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CashTransfer Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.DeepLoad(ETradeFinance.Entities.TList{ETradeFinance.Entities.CashTransfer})">
            <summary>
            Deep Loads the <see cref="T:ETradeFinance.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ETradeFinance.Services.CashTransferServiceBase.DeepLoad(ETradeFinance.Entities.CashTransfer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ETradeFinance.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.DeepLoad(ETradeFinance.Entities.TList{ETradeFinance.Entities.CashTransfer},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ETradeFinance.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ETradeFinance.Services.CashTransferServiceBase.DeepLoad(ETradeFinance.Entities.CashTransfer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ETradeFinance.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.DeepLoad(ETradeFinance.Entities.TList{ETradeFinance.Entities.CashTransfer},System.Boolean,ETradeFinance.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ETradeFinance.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ETradeFinance.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ETradeFinance.DataAccess.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ETradeFinance.Entities.CashTransfer"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.DeepSave(ETradeFinance.Entities.CashTransfer)">
            <summary>
            public virtualDeep Saves the <see cref="T:ETradeFinance.Entities.CashTransfer"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">CashTransfer Object</param>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.DeepSave(ETradeFinance.Entities.CashTransfer,ETradeFinance.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the CashTransfer object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">CashTransfer Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>CashTransfer</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.DeepSave(ETradeFinance.Entities.TList{ETradeFinance.Entities.CashTransfer})">
            <summary>
            Deep Save the entire <see cref="T:ETradeFinance.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{CashTransfer} Object</param>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferServiceBase.DeepSave(ETradeFinance.Entities.TList{ETradeFinance.Entities.CashTransfer},ETradeFinance.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ETradeFinance.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ETradeFinance.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CashTransfer Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ETradeFinance.Services.CashTransferServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferService.#ctor">
            <summary>
            Initializes a new instance of the CashTransferService class.
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferService.PutCashTransOrder(ETradeFinance.Entities.CashTransfer)">
            <summary>
            Puts the cash trans order.
            </summary>
            <param name="cashTransfer">The cash transfer.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferService.UpdateCashTransOrder(System.Int64,System.Int32,System.Decimal,System.String,System.String,System.DateTime)">
            <summary>
            Updates the cash trans order.
            </summary>
            <param name="id">The id.</param>
            <param name="status">The status.</param>
            <param name="ApprovedAmt">The approved amt.</param>
            <param name="note">The note.</param>
            <param name="brokerId">The broker id.</param>
            <param name="execTime">The exec time.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferService.CancelCashTransfer(System.Int64,System.DateTime,System.String)">
            <summary>
            Cancels the cash transfer.
            </summary>
            <param name="id">The id.</param>
            <param name="execTime">The exec time.</param>
            <param name="note">The note.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferService.GetListUnfinishedCashTransfer(System.String)">
            <summary>
            Gets the all list cash transfer by status.
            </summary>
            <param name="subAccountId">The subAccount Id.</param>
            <param name="status">The status.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferService.GetTotalUnfinishedCashTransferAmount(System.String)">
            <summary>
            Gets the total unfinished transfer amount. (on status pending or processing)
            </summary>
            <param name="subAccountId">The sub account id.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferService.GetListCashTransOrder(System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the list cash trans order.
            </summary>
            <param name="sourceAccountID">The source account ID.</param>
            <param name="destAccountID">The dest account ID.</param>
            <param name="transType">Type of the trans.</param>
            <param name="note">The note.</param>
            <param name="brokerID">The broker ID.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.CashTransferService.GetListCashTransOrderHist(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Cashes the trans order hist.
            </summary>
            <param name="sourceAccountID">The source account ID.</param>
            <param name="destAccountID">The dest account ID.</param>
            <param name="fromDate">From date, pass empty to return today</param>
            <param name="toDate">To date, pass empty to return today</param>
            <param name="transType">Type of the trans.</param>
            <param name="status">The status.</param>
            <param name="note">The note.</param>
            <param name="brokerID">The broker ID.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns></returns>
        </member>
        <member name="T:ETradeFinance.Services.OddLotOrderService">
            <summary>
            An component type implementation of the 'OddLotOrder' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:ETradeFinance.Services.OddLotOrderServiceBase">
            <summary>
             An object representation of the 'OddLotOrder' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the OddLotOrder.cs file instead.
             All custom implementations should be done in the <see cref="T:ETradeFinance.Entities.OddLotOrder"/> class.
             </remarks>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ETradeFinance.Entities.OddLotOrder"/> instance .
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.CreateOddLotOrder(System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Int64},System.String,System.String,System.Nullable{System.Decimal},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int32},System.String,System.DateTime,System.Nullable{System.DateTime},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ETradeFinance.Entities.OddLotOrder"/> instance.
            </summary>
            <param name="_secSymbol">Ma chung khoan</param>
            <param name="_side">B = Mua, S = Ban</param>
            <param name="_price">Gia chung khoan</param>
            <param name="_volume">Khoi luong co phieu mua hay ban</param>
            <param name="_subCustAccountId">Tai khoan thuc hien giao dich</param>
            <param name="_market">Thi truong (O=HOSE, N=HNX, U=UPCOM)</param>
            <param name="_execPrice">Gia da thuc hien ban</param>
            <param name="_execVol">Kh?i lu?ng dã th?c hi?n</param>
            <param name="_canceledVol">Khoi luong thuc hien huy</param>
            <param name="_status">Trang thai cua request(dang cho, dang xu ly, da xu ly, huy boi nha dau tu, bi tu choi boi broker)</param>
            <param name="_brokerId">ID c?a broker thuc hien ban</param>
            <param name="_requestTime">Ngay gui yeu cau</param>
            <param name="_execTime">Ngay xu ly</param>
            <param name="_note">Ghi chú</param>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.Get(ETradeFinance.Entities.OddLotOrderKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.GetById(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:ETradeFinance.Entities.TList`1"/> from the datasource based on the primary key PK_OddLotOrder index.
            </summary>
            <param name="_id">OddLotOrderID identifies OddLotOrder</param>
            <returns>Returns an instance of the <see cref="T:ETradeFinance.Entities.OddLotOrder"/> class.</returns>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.GetById(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ETradeFinance.Entities.TList`1"/> from the datasource based on the primary key PK_OddLotOrder index.
            </summary>
            <param name="_id">OddLotOrderID identifies OddLotOrder</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ETradeFinance.Entities.OddLotOrder"/> class.</returns>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ETradeFinance.Entities.OddLotOrder"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ETradeFinance.Entities.OddLotOrder"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ETradeFinance.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ETradeFinance.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>OddLotOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ETradeFinance.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>OddLotOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ETradeFinance.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>OddLotOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{OddLotOrder} of <c>OddLotOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>OddLotOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection,ETradeFinance.DataAccess.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:ETradeFinance.DataAccess.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>OddLotOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>OddLotOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection,ETradeFinance.DataAccess.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:ETradeFinance.DataAccess.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>OddLotOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>OddLotOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.Insert(ETradeFinance.Entities.OddLotOrder)">
            <summary>
            public virtual method that Inserts a OddLotOrder object into the datasource using a transaction.
            </summary>
            <param name="entity">OddLotOrder object to Insert.</param>
            <remarks>After Inserting into the datasource, the OddLotOrder object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            OddLotOrder entity = new OddLotOrder();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	OddLotOrderService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.Insert(ETradeFinance.Entities.TList{ETradeFinance.Entities.OddLotOrder})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:ETradeFinance.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OddLotOrder</c> objects in a <see cref="T:ETradeFinance.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>OddLotOrder</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of OddLotOrder.
             <code><![CDATA[
             TList<OddLotOrder> list = new TList<OddLotOrder>();
             OddLotOrder entity = new OddLotOrder();
             entity.StringProperty = "foo";
             OddLotOrder entity2 = new OddLotOrder();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OddLotOrderService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.Update(ETradeFinance.Entities.OddLotOrder)">
            <summary>
            public virtual method that Updates a OddLotOrder object into the datasource using a transaction.
            </summary>
            <param name="entity">OddLotOrder object to Update.</param>
            <remarks>After Updateing into the datasource, the OddLotOrder object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            OddLotOrder entity = OddLotOrderService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	OddLotOrderService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.Update(ETradeFinance.Entities.TList{ETradeFinance.Entities.OddLotOrder})">
             <summary>
             public virtual method that Updates rows in <see cref="T:ETradeFinance.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OddLotOrder</c> objects in a <see cref="T:ETradeFinance.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>OddLotOrder</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of OddLotOrder.
             <code><![CDATA[
             TList<OddLotOrder> list = new TList<OddLotOrder>();
             OddLotOrder entity = new OddLotOrder();
             entity.StringProperty = "foo";
             OddLotOrder entity2 = new OddLotOrder();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OddLotOrderService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.Save(ETradeFinance.Entities.OddLotOrder)">
            <summary>
            public virtual method that Saves a OddLotOrder object into the datasource using a transaction.
            </summary>
            <param name="entity">OddLotOrder object to Save.</param>
            <remarks>After Saveing into the datasource, the OddLotOrder object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            OddLotOrder entity = OddLotOrderService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	OddLotOrderService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.Save(ETradeFinance.Entities.TList{ETradeFinance.Entities.OddLotOrder})">
             <summary>
             public virtual method that Saves rows in <see cref="T:ETradeFinance.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OddLotOrder</c> objects in a <see cref="T:ETradeFinance.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>OddLotOrder</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of OddLotOrder.
             <code><![CDATA[
             TList<OddLotOrder> list = new TList<OddLotOrder>();
             OddLotOrder entity = new OddLotOrder();
             entity.StringProperty = "foo";
             OddLotOrder entity2 = new OddLotOrder();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OddLotOrderService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.Delete(ETradeFinance.Entities.OddLotOrder)">
            <summary>
            public virtual method that Deletes a OddLotOrder object into the datasource using a transaction.
            </summary>
            <param name="entity">OddLotOrder object to Delete.</param>
            <remarks>After Deleteing into the datasource, the OddLotOrder object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            OddLotOrder entity = OddLotOrderService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	OddLotOrderService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.Delete(ETradeFinance.Entities.TList{ETradeFinance.Entities.OddLotOrder})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:ETradeFinance.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>OddLotOrder</c> objects in a <see cref="T:ETradeFinance.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>OddLotOrder</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of OddLotOrder.
             <code><![CDATA[
             TList<OddLotOrder> list = new TList<OddLotOrder>();
             OddLotOrder entity = new OddLotOrder();
             entity.StringProperty = "foo";
             OddLotOrder entity2 = new OddLotOrder();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	OddLotOrderService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.Delete(ETradeFinance.Entities.OddLotOrderKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 _id
            </summary>
            <param name="_id">OddLotOrder pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.DeepLoadById(System.Int64,System.Boolean,ETradeFinance.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ETradeFinance.Entities.OddLotOrder"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ETradeFinance.DataAccess.DeepLoadType"/>.
            </summary>
            <param name="_id">OddLotOrderID identifies OddLotOrder</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">OddLotOrder Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ETradeFinance.Entities.OddLotOrder"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.DeepLoad(ETradeFinance.Entities.OddLotOrder)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">OddLotOrder Object</param>
            <remarks>
            <seealso cref="M:ETradeFinance.Services.OddLotOrderServiceBase.DeepLoad(ETradeFinance.Entities.OddLotOrder)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.DeepLoad(ETradeFinance.Entities.OddLotOrder,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ETradeFinance.Services.OddLotOrderServiceBase.DeepLoad(ETradeFinance.Entities.OddLotOrder)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">OddLotOrder Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.DeepLoad(ETradeFinance.Entities.OddLotOrder,System.Boolean,ETradeFinance.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ETradeFinance.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ETradeFinance.DataAccess.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ETradeFinance.Entities.OddLotOrder"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">OddLotOrder Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.DeepLoad(ETradeFinance.Entities.TList{ETradeFinance.Entities.OddLotOrder})">
            <summary>
            Deep Loads the <see cref="T:ETradeFinance.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ETradeFinance.Services.OddLotOrderServiceBase.DeepLoad(ETradeFinance.Entities.OddLotOrder)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ETradeFinance.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.DeepLoad(ETradeFinance.Entities.TList{ETradeFinance.Entities.OddLotOrder},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ETradeFinance.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ETradeFinance.Services.OddLotOrderServiceBase.DeepLoad(ETradeFinance.Entities.OddLotOrder)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ETradeFinance.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.DeepLoad(ETradeFinance.Entities.TList{ETradeFinance.Entities.OddLotOrder},System.Boolean,ETradeFinance.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ETradeFinance.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ETradeFinance.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ETradeFinance.DataAccess.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ETradeFinance.Entities.OddLotOrder"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.DeepSave(ETradeFinance.Entities.OddLotOrder)">
            <summary>
            public virtualDeep Saves the <see cref="T:ETradeFinance.Entities.OddLotOrder"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">OddLotOrder Object</param>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.DeepSave(ETradeFinance.Entities.OddLotOrder,ETradeFinance.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the OddLotOrder object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">OddLotOrder Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>OddLotOrder</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.DeepSave(ETradeFinance.Entities.TList{ETradeFinance.Entities.OddLotOrder})">
            <summary>
            Deep Save the entire <see cref="T:ETradeFinance.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{OddLotOrder} Object</param>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderServiceBase.DeepSave(ETradeFinance.Entities.TList{ETradeFinance.Entities.OddLotOrder},ETradeFinance.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ETradeFinance.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ETradeFinance.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">OddLotOrder Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ETradeFinance.Services.OddLotOrderServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderService.#ctor">
            <summary>
            Initializes a new instance of the OddLotOrderService class.
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderService.PutOddLotOrder(ETradeFinance.Entities.OddLotOrder)">
            <summary>
            Puts the odd lot order.
            </summary>
            <param name="oddLotOrder">The odd lot order.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderService.UpdateOddLotOrder(System.Int64,System.Decimal,System.Int64,System.Int64,System.Int32,System.String,System.String)">
            <summary>
            Updates the odd lot order.
            </summary>
            <param name="id">The id.</param>
            <param name="execPrice">The exec price.</param>
            <param name="execVol">The exec vol.</param>
            <param name="canceledVol">The canceled vol.</param>
            <param name="status">The status.</param>
            <param name="brokerID">The broker ID.</param>
            <param name="execTime">The exec time.</param>
            <param name="note">The note.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderService.CancelOddLotOrder(System.Int64,System.DateTime,System.String)">
            <summary>
            Cancels the odd lot order.
            </summary>
            <param name="id">The id.</param>
            <param name="execTime">The exec time.</param>
            <param name="brokerId">The broker id.</param>
            <param name="note">The note.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderService.GetListOddLotOrder(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the list odd lot order.
            </summary>
            <param name="secSymbol">The sec symbol.</param>
            <param name="side">The side.</param>
            <param name="subCustAccountID">The sub cust account ID.</param>
            <param name="market">The market.</param>
            <param name="brokerID">The broker ID.</param>
            <param name="note">The note.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderService.GetListOddLotOrderHist(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the list odd lot order hist.
            </summary>
            <param name="secSymbol">The sec symbol.</param>
            <param name="side">The side.</param>
            <param name="fromDate">From date.</param>
            <param name="toDate">To date.</param>
            <param name="subCustAccountID">The sub cust account ID.</param>
            <param name="market">The market.</param>
            <param name="status">The status.</param>
            <param name="brokerID">The broker ID.</param>
            <param name="note">The note.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.OddLotOrderService.GetTotalUnfinishedOddLotOrderAmount(System.String,System.String)">
            <summary>
            Gets the total unfinished odd lot order amount.
            </summary>
            <param name="subAccountId">The sub account id.</param>
            <param name="secSymbol">The sec symbol.</param>
            <returns></returns>
        </member>
        <member name="T:ETradeFinance.Services.AdvanceTimeServiceBase">
            <summary>
             An object representation of the 'AdvanceTime' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the AdvanceTime.cs file instead.
             All custom implementations should be done in the <see cref="T:ETradeFinance.Entities.AdvanceTime"/> class.
             </remarks>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ETradeFinance.Entities.AdvanceTime"/> instance .
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.CreateAdvanceTime(System.DateTime,System.DateTime,System.Int32)">
            <summary>
             A simple factory method to create a new <see cref="T:ETradeFinance.Entities.AdvanceTime"/> instance.
            </summary>
            <param name="_startTime">Thoi gian bat dau</param>
            <param name="_endTime">Thoi gian ket thuc</param>
            <param name="_advanceType">Kieu ung truoc (Giao dich, rut tien)</param>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.Get(ETradeFinance.Entities.AdvanceTimeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.GetById(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ETradeFinance.Entities.TList`1"/> from the datasource based on the primary key PK_ADVANCETIME index.
            </summary>
            <param name="_id">Id tu tang </param>
            <returns>Returns an instance of the <see cref="T:ETradeFinance.Entities.AdvanceTime"/> class.</returns>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.GetById(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ETradeFinance.Entities.TList`1"/> from the datasource based on the primary key PK_ADVANCETIME index.
            </summary>
            <param name="_id">Id tu tang </param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ETradeFinance.Entities.AdvanceTime"/> class.</returns>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ETradeFinance.Entities.AdvanceTime"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ETradeFinance.Entities.AdvanceTime"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ETradeFinance.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ETradeFinance.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AdvanceTime</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ETradeFinance.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AdvanceTime</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ETradeFinance.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>AdvanceTime</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{AdvanceTime} of <c>AdvanceTime</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>AdvanceTime</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection,ETradeFinance.DataAccess.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:ETradeFinance.DataAccess.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>AdvanceTime</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>AdvanceTime</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection,ETradeFinance.DataAccess.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:ETradeFinance.DataAccess.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AdvanceTime</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>AdvanceTime</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.Insert(ETradeFinance.Entities.AdvanceTime)">
            <summary>
            public virtual method that Inserts a AdvanceTime object into the datasource using a transaction.
            </summary>
            <param name="entity">AdvanceTime object to Insert.</param>
            <remarks>After Inserting into the datasource, the AdvanceTime object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            AdvanceTime entity = new AdvanceTime();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	AdvanceTimeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.Insert(ETradeFinance.Entities.TList{ETradeFinance.Entities.AdvanceTime})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:ETradeFinance.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AdvanceTime</c> objects in a <see cref="T:ETradeFinance.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>AdvanceTime</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of AdvanceTime.
             <code><![CDATA[
             TList<AdvanceTime> list = new TList<AdvanceTime>();
             AdvanceTime entity = new AdvanceTime();
             entity.StringProperty = "foo";
             AdvanceTime entity2 = new AdvanceTime();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AdvanceTimeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.Update(ETradeFinance.Entities.AdvanceTime)">
            <summary>
            public virtual method that Updates a AdvanceTime object into the datasource using a transaction.
            </summary>
            <param name="entity">AdvanceTime object to Update.</param>
            <remarks>After Updateing into the datasource, the AdvanceTime object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            AdvanceTime entity = AdvanceTimeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	AdvanceTimeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.Update(ETradeFinance.Entities.TList{ETradeFinance.Entities.AdvanceTime})">
             <summary>
             public virtual method that Updates rows in <see cref="T:ETradeFinance.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AdvanceTime</c> objects in a <see cref="T:ETradeFinance.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>AdvanceTime</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of AdvanceTime.
             <code><![CDATA[
             TList<AdvanceTime> list = new TList<AdvanceTime>();
             AdvanceTime entity = new AdvanceTime();
             entity.StringProperty = "foo";
             AdvanceTime entity2 = new AdvanceTime();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AdvanceTimeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.Save(ETradeFinance.Entities.AdvanceTime)">
            <summary>
            public virtual method that Saves a AdvanceTime object into the datasource using a transaction.
            </summary>
            <param name="entity">AdvanceTime object to Save.</param>
            <remarks>After Saveing into the datasource, the AdvanceTime object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            AdvanceTime entity = AdvanceTimeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	AdvanceTimeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.Save(ETradeFinance.Entities.TList{ETradeFinance.Entities.AdvanceTime})">
             <summary>
             public virtual method that Saves rows in <see cref="T:ETradeFinance.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AdvanceTime</c> objects in a <see cref="T:ETradeFinance.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>AdvanceTime</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of AdvanceTime.
             <code><![CDATA[
             TList<AdvanceTime> list = new TList<AdvanceTime>();
             AdvanceTime entity = new AdvanceTime();
             entity.StringProperty = "foo";
             AdvanceTime entity2 = new AdvanceTime();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AdvanceTimeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.Delete(ETradeFinance.Entities.AdvanceTime)">
            <summary>
            public virtual method that Deletes a AdvanceTime object into the datasource using a transaction.
            </summary>
            <param name="entity">AdvanceTime object to Delete.</param>
            <remarks>After Deleteing into the datasource, the AdvanceTime object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            AdvanceTime entity = AdvanceTimeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	AdvanceTimeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.Delete(ETradeFinance.Entities.TList{ETradeFinance.Entities.AdvanceTime})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:ETradeFinance.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>AdvanceTime</c> objects in a <see cref="T:ETradeFinance.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>AdvanceTime</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of AdvanceTime.
             <code><![CDATA[
             TList<AdvanceTime> list = new TList<AdvanceTime>();
             AdvanceTime entity = new AdvanceTime();
             entity.StringProperty = "foo";
             AdvanceTime entity2 = new AdvanceTime();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	AdvanceTimeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.Delete(ETradeFinance.Entities.AdvanceTimeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int32 _id
            </summary>
            <param name="_id">AdvanceTime pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.DeepLoadById(System.Int32,System.Boolean,ETradeFinance.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ETradeFinance.Entities.AdvanceTime"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ETradeFinance.DataAccess.DeepLoadType"/>.
            </summary>
            <param name="_id">Id tu tang </param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AdvanceTime Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ETradeFinance.Entities.AdvanceTime"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.DeepLoad(ETradeFinance.Entities.AdvanceTime)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">AdvanceTime Object</param>
            <remarks>
            <seealso cref="M:ETradeFinance.Services.AdvanceTimeServiceBase.DeepLoad(ETradeFinance.Entities.AdvanceTime)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.DeepLoad(ETradeFinance.Entities.AdvanceTime,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ETradeFinance.Services.AdvanceTimeServiceBase.DeepLoad(ETradeFinance.Entities.AdvanceTime)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">AdvanceTime Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.DeepLoad(ETradeFinance.Entities.AdvanceTime,System.Boolean,ETradeFinance.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ETradeFinance.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ETradeFinance.DataAccess.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ETradeFinance.Entities.AdvanceTime"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">AdvanceTime Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.DeepLoad(ETradeFinance.Entities.TList{ETradeFinance.Entities.AdvanceTime})">
            <summary>
            Deep Loads the <see cref="T:ETradeFinance.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ETradeFinance.Services.AdvanceTimeServiceBase.DeepLoad(ETradeFinance.Entities.AdvanceTime)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ETradeFinance.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.DeepLoad(ETradeFinance.Entities.TList{ETradeFinance.Entities.AdvanceTime},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ETradeFinance.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ETradeFinance.Services.AdvanceTimeServiceBase.DeepLoad(ETradeFinance.Entities.AdvanceTime)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ETradeFinance.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.DeepLoad(ETradeFinance.Entities.TList{ETradeFinance.Entities.AdvanceTime},System.Boolean,ETradeFinance.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ETradeFinance.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ETradeFinance.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ETradeFinance.DataAccess.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ETradeFinance.Entities.AdvanceTime"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.DeepSave(ETradeFinance.Entities.AdvanceTime)">
            <summary>
            public virtualDeep Saves the <see cref="T:ETradeFinance.Entities.AdvanceTime"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">AdvanceTime Object</param>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.DeepSave(ETradeFinance.Entities.AdvanceTime,ETradeFinance.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the AdvanceTime object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">AdvanceTime Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>AdvanceTime</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.DeepSave(ETradeFinance.Entities.TList{ETradeFinance.Entities.AdvanceTime})">
            <summary>
            Deep Save the entire <see cref="T:ETradeFinance.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{AdvanceTime} Object</param>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeServiceBase.DeepSave(ETradeFinance.Entities.TList{ETradeFinance.Entities.AdvanceTime},ETradeFinance.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ETradeFinance.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ETradeFinance.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">AdvanceTime Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ETradeFinance.Services.AdvanceTimeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ETradeFinance.Services.SecurityContextBase`1">
            <summary>
            The class that is available in case role based security is required at runtime.  
            It will be made availabe through the entities themselves.
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.SecurityContextBase`1.#ctor">
            <summary>
            Initializes a new instance of the SecurityContext class.
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.SecurityContextBase`1.IsAuthorized(System.String)">
            <summary>
            Determine whether user is authorized for the rule based on the rule provider
            </summary>
        </member>
        <member name="P:ETradeFinance.Services.SecurityContextBase`1.Identity">
            <summary>
            The Current IIdentity.
            </summary>
        </member>
        <member name="P:ETradeFinance.Services.SecurityContextBase`1.Profile">
            <summary>
            The Current Profile .
            </summary>
        </member>
        <member name="P:ETradeFinance.Services.SecurityContextBase`1.Principal">
            <summary>
             The Current IPrincipal .
            </summary>
        </member>
        <member name="P:ETradeFinance.Services.SecurityContextBase`1.RuleProvider">
            <summary>
             The Current Authorization Rule Provider
            </summary>
        </member>
        <member name="T:ETradeFinance.Services.StockTransferServiceBase">
            <summary>
             An object representation of the 'StockTransfer' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the StockTransfer.cs file instead.
             All custom implementations should be done in the <see cref="T:ETradeFinance.Entities.StockTransfer"/> class.
             </remarks>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ETradeFinance.Entities.StockTransfer"/> instance .
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.CreateStockTransfer(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.DateTime,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.Int64},System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ETradeFinance.Entities.StockTransfer"/> instance.
            </summary>
            <param name="_secSymbol">Ma co phieu chuyen</param>
            <param name="_withdrawableAmt">Tong so luong CP co the rut/chuyen lay tu core</param>
            <param name="_transferedAmt">Tong so luong CP da yeu cau chuyen(dang cho xu ly hoac dang xu ly)</param>
            <param name="_advOrderAmt">Tong so luong CP da dat ban truoc chua khop (dang cho kich hoat, chua gui vao core)</param>
            <param name="_avilableAmt">Tong so luong CP hien tai duoc phep chuyen</param>
            <param name="_requestAmt">So luong CP khach hang yeu cau chuyen</param>
            <param name="_requestTime">Thoi gian(ngay, gio) yeu cau chuyen co phieu</param>
            <param name="_srcAccountId">Tai khoan nguon</param>
            <param name="_destAccountId">Tai khoan dich</param>
            <param name="_transType">Loai giao dich: chuyen, rut, khac</param>
            <param name="_status">Trang thai cua yeu cau</param>
            <param name="_execTime">Ngay gio xu ly</param>
            <param name="_approvedAmt">So luong CP da duoc chap nhan</param>
            <param name="_note">Ghi chu cua Broker</param>
            <param name="_brokerId">Id c?a broker xu ly request.</param>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.Get(ETradeFinance.Entities.StockTransferKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.GetById(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:ETradeFinance.Entities.TList`1"/> from the datasource based on the primary key PK_StockTransfer index.
            </summary>
            <param name="_id">StockTransferID identifies StockTransfer</param>
            <returns>Returns an instance of the <see cref="T:ETradeFinance.Entities.StockTransfer"/> class.</returns>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.GetById(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ETradeFinance.Entities.TList`1"/> from the datasource based on the primary key PK_StockTransfer index.
            </summary>
            <param name="_id">StockTransferID identifies StockTransfer</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ETradeFinance.Entities.StockTransfer"/> class.</returns>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ETradeFinance.Entities.StockTransfer"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ETradeFinance.Entities.StockTransfer"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ETradeFinance.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ETradeFinance.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>StockTransfer</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ETradeFinance.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>StockTransfer</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ETradeFinance.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>StockTransfer</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{StockTransfer} of <c>StockTransfer</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>StockTransfer</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection,ETradeFinance.DataAccess.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:ETradeFinance.DataAccess.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>StockTransfer</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>StockTransfer</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection,ETradeFinance.DataAccess.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:ETradeFinance.DataAccess.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>StockTransfer</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>StockTransfer</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.Insert(ETradeFinance.Entities.StockTransfer)">
            <summary>
            public virtual method that Inserts a StockTransfer object into the datasource using a transaction.
            </summary>
            <param name="entity">StockTransfer object to Insert.</param>
            <remarks>After Inserting into the datasource, the StockTransfer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            StockTransfer entity = new StockTransfer();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	StockTransferService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.Insert(ETradeFinance.Entities.TList{ETradeFinance.Entities.StockTransfer})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:ETradeFinance.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>StockTransfer</c> objects in a <see cref="T:ETradeFinance.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>StockTransfer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of StockTransfer.
             <code><![CDATA[
             TList<StockTransfer> list = new TList<StockTransfer>();
             StockTransfer entity = new StockTransfer();
             entity.StringProperty = "foo";
             StockTransfer entity2 = new StockTransfer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StockTransferService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.Update(ETradeFinance.Entities.StockTransfer)">
            <summary>
            public virtual method that Updates a StockTransfer object into the datasource using a transaction.
            </summary>
            <param name="entity">StockTransfer object to Update.</param>
            <remarks>After Updateing into the datasource, the StockTransfer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            StockTransfer entity = StockTransferService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	StockTransferService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.Update(ETradeFinance.Entities.TList{ETradeFinance.Entities.StockTransfer})">
             <summary>
             public virtual method that Updates rows in <see cref="T:ETradeFinance.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>StockTransfer</c> objects in a <see cref="T:ETradeFinance.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>StockTransfer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of StockTransfer.
             <code><![CDATA[
             TList<StockTransfer> list = new TList<StockTransfer>();
             StockTransfer entity = new StockTransfer();
             entity.StringProperty = "foo";
             StockTransfer entity2 = new StockTransfer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StockTransferService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.Save(ETradeFinance.Entities.StockTransfer)">
            <summary>
            public virtual method that Saves a StockTransfer object into the datasource using a transaction.
            </summary>
            <param name="entity">StockTransfer object to Save.</param>
            <remarks>After Saveing into the datasource, the StockTransfer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            StockTransfer entity = StockTransferService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	StockTransferService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.Save(ETradeFinance.Entities.TList{ETradeFinance.Entities.StockTransfer})">
             <summary>
             public virtual method that Saves rows in <see cref="T:ETradeFinance.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>StockTransfer</c> objects in a <see cref="T:ETradeFinance.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>StockTransfer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of StockTransfer.
             <code><![CDATA[
             TList<StockTransfer> list = new TList<StockTransfer>();
             StockTransfer entity = new StockTransfer();
             entity.StringProperty = "foo";
             StockTransfer entity2 = new StockTransfer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StockTransferService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.Delete(ETradeFinance.Entities.StockTransfer)">
            <summary>
            public virtual method that Deletes a StockTransfer object into the datasource using a transaction.
            </summary>
            <param name="entity">StockTransfer object to Delete.</param>
            <remarks>After Deleteing into the datasource, the StockTransfer object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            StockTransfer entity = StockTransferService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	StockTransferService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.Delete(ETradeFinance.Entities.TList{ETradeFinance.Entities.StockTransfer})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:ETradeFinance.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>StockTransfer</c> objects in a <see cref="T:ETradeFinance.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>StockTransfer</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of StockTransfer.
             <code><![CDATA[
             TList<StockTransfer> list = new TList<StockTransfer>();
             StockTransfer entity = new StockTransfer();
             entity.StringProperty = "foo";
             StockTransfer entity2 = new StockTransfer();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	StockTransferService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.Delete(ETradeFinance.Entities.StockTransferKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 _id
            </summary>
            <param name="_id">StockTransfer pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.DeepLoadById(System.Int64,System.Boolean,ETradeFinance.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ETradeFinance.Entities.StockTransfer"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ETradeFinance.DataAccess.DeepLoadType"/>.
            </summary>
            <param name="_id">StockTransferID identifies StockTransfer</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">StockTransfer Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ETradeFinance.Entities.StockTransfer"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.DeepLoad(ETradeFinance.Entities.StockTransfer)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">StockTransfer Object</param>
            <remarks>
            <seealso cref="M:ETradeFinance.Services.StockTransferServiceBase.DeepLoad(ETradeFinance.Entities.StockTransfer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.DeepLoad(ETradeFinance.Entities.StockTransfer,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ETradeFinance.Services.StockTransferServiceBase.DeepLoad(ETradeFinance.Entities.StockTransfer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">StockTransfer Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.DeepLoad(ETradeFinance.Entities.StockTransfer,System.Boolean,ETradeFinance.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ETradeFinance.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ETradeFinance.DataAccess.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ETradeFinance.Entities.StockTransfer"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">StockTransfer Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.DeepLoad(ETradeFinance.Entities.TList{ETradeFinance.Entities.StockTransfer})">
            <summary>
            Deep Loads the <see cref="T:ETradeFinance.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ETradeFinance.Services.StockTransferServiceBase.DeepLoad(ETradeFinance.Entities.StockTransfer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ETradeFinance.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.DeepLoad(ETradeFinance.Entities.TList{ETradeFinance.Entities.StockTransfer},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ETradeFinance.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ETradeFinance.Services.StockTransferServiceBase.DeepLoad(ETradeFinance.Entities.StockTransfer)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ETradeFinance.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.DeepLoad(ETradeFinance.Entities.TList{ETradeFinance.Entities.StockTransfer},System.Boolean,ETradeFinance.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ETradeFinance.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ETradeFinance.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ETradeFinance.DataAccess.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ETradeFinance.Entities.StockTransfer"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.DeepSave(ETradeFinance.Entities.StockTransfer)">
            <summary>
            public virtualDeep Saves the <see cref="T:ETradeFinance.Entities.StockTransfer"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">StockTransfer Object</param>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.DeepSave(ETradeFinance.Entities.StockTransfer,ETradeFinance.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the StockTransfer object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">StockTransfer Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>StockTransfer</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.DeepSave(ETradeFinance.Entities.TList{ETradeFinance.Entities.StockTransfer})">
            <summary>
            Deep Save the entire <see cref="T:ETradeFinance.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{StockTransfer} Object</param>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferServiceBase.DeepSave(ETradeFinance.Entities.TList{ETradeFinance.Entities.StockTransfer},ETradeFinance.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ETradeFinance.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ETradeFinance.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">StockTransfer Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ETradeFinance.Services.StockTransferServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ETradeFinance.Services.FeeServiceBase">
            <summary>
             An object representation of the 'Fee' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Fee.cs file instead.
             All custom implementations should be done in the <see cref="T:ETradeFinance.Entities.Fee"/> class.
             </remarks>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ETradeFinance.Entities.Fee"/> instance .
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.CreateFee(System.Decimal,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Decimal,System.Nullable{System.Int32},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:ETradeFinance.Entities.Fee"/> instance.
            </summary>
            <param name="_minValue"></param>
            <param name="_maxValue"></param>
            <param name="_minFee"></param>
            <param name="_feeRatio"></param>
            <param name="_feeType"></param>
            <param name="_vat"></param>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.Get(ETradeFinance.Entities.FeeKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.GetByFeeId(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:ETradeFinance.Entities.TList`1"/> from the datasource based on the primary key PK_FEE index.
            </summary>
            <param name="_feeId"></param>
            <returns>Returns an instance of the <see cref="T:ETradeFinance.Entities.Fee"/> class.</returns>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.GetByFeeId(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ETradeFinance.Entities.TList`1"/> from the datasource based on the primary key PK_FEE index.
            </summary>
            <param name="_feeId"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ETradeFinance.Entities.Fee"/> class.</returns>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ETradeFinance.Entities.Fee"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ETradeFinance.Entities.Fee"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ETradeFinance.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ETradeFinance.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Fee</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ETradeFinance.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Fee</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ETradeFinance.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Fee</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Fee} of <c>Fee</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Fee</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection,ETradeFinance.DataAccess.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:ETradeFinance.DataAccess.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>Fee</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Fee</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection,ETradeFinance.DataAccess.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:ETradeFinance.DataAccess.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Fee</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Fee</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.Insert(ETradeFinance.Entities.Fee)">
            <summary>
            public virtual method that Inserts a Fee object into the datasource using a transaction.
            </summary>
            <param name="entity">Fee object to Insert.</param>
            <remarks>After Inserting into the datasource, the Fee object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Fee entity = new Fee();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	FeeService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.Insert(ETradeFinance.Entities.TList{ETradeFinance.Entities.Fee})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:ETradeFinance.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Fee</c> objects in a <see cref="T:ETradeFinance.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Fee</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Fee.
             <code><![CDATA[
             TList<Fee> list = new TList<Fee>();
             Fee entity = new Fee();
             entity.StringProperty = "foo";
             Fee entity2 = new Fee();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	FeeService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.Update(ETradeFinance.Entities.Fee)">
            <summary>
            public virtual method that Updates a Fee object into the datasource using a transaction.
            </summary>
            <param name="entity">Fee object to Update.</param>
            <remarks>After Updateing into the datasource, the Fee object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Fee entity = FeeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	FeeService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.Update(ETradeFinance.Entities.TList{ETradeFinance.Entities.Fee})">
             <summary>
             public virtual method that Updates rows in <see cref="T:ETradeFinance.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Fee</c> objects in a <see cref="T:ETradeFinance.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Fee</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Fee.
             <code><![CDATA[
             TList<Fee> list = new TList<Fee>();
             Fee entity = new Fee();
             entity.StringProperty = "foo";
             Fee entity2 = new Fee();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	FeeService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.Save(ETradeFinance.Entities.Fee)">
            <summary>
            public virtual method that Saves a Fee object into the datasource using a transaction.
            </summary>
            <param name="entity">Fee object to Save.</param>
            <remarks>After Saveing into the datasource, the Fee object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Fee entity = FeeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	FeeService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.Save(ETradeFinance.Entities.TList{ETradeFinance.Entities.Fee})">
             <summary>
             public virtual method that Saves rows in <see cref="T:ETradeFinance.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Fee</c> objects in a <see cref="T:ETradeFinance.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Fee</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Fee.
             <code><![CDATA[
             TList<Fee> list = new TList<Fee>();
             Fee entity = new Fee();
             entity.StringProperty = "foo";
             Fee entity2 = new Fee();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	FeeService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.Delete(ETradeFinance.Entities.Fee)">
            <summary>
            public virtual method that Deletes a Fee object into the datasource using a transaction.
            </summary>
            <param name="entity">Fee object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Fee object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Fee entity = FeeService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	FeeService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.Delete(ETradeFinance.Entities.TList{ETradeFinance.Entities.Fee})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:ETradeFinance.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Fee</c> objects in a <see cref="T:ETradeFinance.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Fee</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Fee.
             <code><![CDATA[
             TList<Fee> list = new TList<Fee>();
             Fee entity = new Fee();
             entity.StringProperty = "foo";
             Fee entity2 = new Fee();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	FeeService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.Delete(ETradeFinance.Entities.FeeKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 _feeId
            </summary>
            <param name="_feeId">Fee pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.DeepLoadByFeeId(System.Int64,System.Boolean,ETradeFinance.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ETradeFinance.Entities.Fee"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ETradeFinance.DataAccess.DeepLoadType"/>.
            </summary>
            <param name="_feeId"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Fee Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ETradeFinance.Entities.Fee"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.DeepLoad(ETradeFinance.Entities.Fee)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Fee Object</param>
            <remarks>
            <seealso cref="M:ETradeFinance.Services.FeeServiceBase.DeepLoad(ETradeFinance.Entities.Fee)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.DeepLoad(ETradeFinance.Entities.Fee,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ETradeFinance.Services.FeeServiceBase.DeepLoad(ETradeFinance.Entities.Fee)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Fee Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.DeepLoad(ETradeFinance.Entities.Fee,System.Boolean,ETradeFinance.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ETradeFinance.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ETradeFinance.DataAccess.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ETradeFinance.Entities.Fee"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Fee Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.DeepLoad(ETradeFinance.Entities.TList{ETradeFinance.Entities.Fee})">
            <summary>
            Deep Loads the <see cref="T:ETradeFinance.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ETradeFinance.Services.FeeServiceBase.DeepLoad(ETradeFinance.Entities.Fee)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ETradeFinance.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.DeepLoad(ETradeFinance.Entities.TList{ETradeFinance.Entities.Fee},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ETradeFinance.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ETradeFinance.Services.FeeServiceBase.DeepLoad(ETradeFinance.Entities.Fee)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ETradeFinance.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.DeepLoad(ETradeFinance.Entities.TList{ETradeFinance.Entities.Fee},System.Boolean,ETradeFinance.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ETradeFinance.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ETradeFinance.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ETradeFinance.DataAccess.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ETradeFinance.Entities.Fee"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.DeepSave(ETradeFinance.Entities.Fee)">
            <summary>
            public virtualDeep Saves the <see cref="T:ETradeFinance.Entities.Fee"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Fee Object</param>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.DeepSave(ETradeFinance.Entities.Fee,ETradeFinance.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Fee object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Fee Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Fee</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.DeepSave(ETradeFinance.Entities.TList{ETradeFinance.Entities.Fee})">
            <summary>
            Deep Save the entire <see cref="T:ETradeFinance.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Fee} Object</param>
        </member>
        <member name="M:ETradeFinance.Services.FeeServiceBase.DeepSave(ETradeFinance.Entities.TList{ETradeFinance.Entities.Fee},ETradeFinance.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ETradeFinance.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ETradeFinance.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Fee Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ETradeFinance.Services.FeeServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ETradeFinance.Services.ContextView`2">
            <summary>
            Used to create a general view of the current context.  
            Useful for firing events and giving the UI a picture of 
            current State of Operation.
            </summary>
            <typeparam name="Entity">The Entity object</typeparam>
            <typeparam name="Domain">Type that holds </typeparam>
        </member>
        <member name="M:ETradeFinance.Services.ContextView`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ETradeFinance.Services.ContextView`2"/> class.
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.ContextView`2.#ctor(`0,ETradeFinance.Services.SecurityContext{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ETradeFinance.Services.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
        </member>
        <member name="M:ETradeFinance.Services.ContextView`2.#ctor(`0,ETradeFinance.Services.SecurityContext{`0},ETradeFinance.DataAccess.TransactionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:ETradeFinance.Services.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
            <param name="transactionManager">The transaction manager.</param>
        </member>
        <member name="P:ETradeFinance.Services.ContextView`2.PersistingObject">
            <summary>
            Gets or sets the persisting object.
            </summary>
            <value>The persisting object.</value>
        </member>
        <member name="P:ETradeFinance.Services.ContextView`2.SecurityContext">
            <summary>
            Gets or sets the security context.
            </summary>
            <value>The security context.</value>
        </member>
        <member name="P:ETradeFinance.Services.ContextView`2.TransactionManager">
            <summary>
            Gets or sets the transaction manager.
            </summary>
            <value>The transaction manager.</value>
        </member>
        <member name="T:ETradeFinance.Services.CashAdvanceService">
            <summary>
            An component type implementation of the 'CashAdvance' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:ETradeFinance.Services.CashAdvanceServiceBase">
            <summary>
             An object representation of the 'CashAdvance' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the CashAdvance.cs file instead.
             All custom implementations should be done in the <see cref="T:ETradeFinance.Entities.CashAdvance"/> class.
             </remarks>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ETradeFinance.Entities.CashAdvance"/> instance .
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.CreateCashAdvance(System.String,System.DateTime,System.String,System.Nullable{System.Int32},System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Int32,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.Decimal})">
            <summary>
             A simple factory method to create a new <see cref="T:ETradeFinance.Entities.CashAdvance"/> instance.
            </summary>
            <param name="_subAccountId">order id sinh ra tu FIS</param>
            <param name="_advanceDate">Thoi gian giao dich</param>
            <param name="_contractNo">So hop dong</param>
            <param name="_orderId"></param>
            <param name="_stockSymbol">Ma co phieu</param>
            <param name="_sellDueDate"></param>
            <param name="_cashDueDate"></param>
            <param name="_totalSellValue"></param>
            <param name="_cashAvailable"></param>
            <param name="_cashRequest"></param>
            <param name="_fee"></param>
            <param name="_cashReceived"></param>
            <param name="_status">Trang thai cua yeu cau</param>
            <param name="_tradeType"></param>
            <param name="_brokerId">Id c?a broker x? lý request.</param>
            <param name="_reason"></param>
            <param name="_execTime"></param>
            <param name="_vat"></param>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.Get(ETradeFinance.Entities.CashAdvanceKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.GetById(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:ETradeFinance.Entities.TList`1"/> from the datasource based on the primary key PK_CashAdvance index.
            </summary>
            <param name="_id">CashAdvanceID identifies CashAdvance</param>
            <returns>Returns an instance of the <see cref="T:ETradeFinance.Entities.CashAdvance"/> class.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.GetById(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ETradeFinance.Entities.TList`1"/> from the datasource based on the primary key PK_CashAdvance index.
            </summary>
            <param name="_id">CashAdvanceID identifies CashAdvance</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ETradeFinance.Entities.CashAdvance"/> class.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ETradeFinance.Entities.CashAdvance"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ETradeFinance.Entities.CashAdvance"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ETradeFinance.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ETradeFinance.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CashAdvance</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ETradeFinance.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CashAdvance</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ETradeFinance.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>CashAdvance</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{CashAdvance} of <c>CashAdvance</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>CashAdvance</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection,ETradeFinance.DataAccess.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:ETradeFinance.DataAccess.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>CashAdvance</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>CashAdvance</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection,ETradeFinance.DataAccess.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:ETradeFinance.DataAccess.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CashAdvance</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>CashAdvance</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.Insert(ETradeFinance.Entities.CashAdvance)">
            <summary>
            public virtual method that Inserts a CashAdvance object into the datasource using a transaction.
            </summary>
            <param name="entity">CashAdvance object to Insert.</param>
            <remarks>After Inserting into the datasource, the CashAdvance object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            CashAdvance entity = new CashAdvance();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	CashAdvanceService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.Insert(ETradeFinance.Entities.TList{ETradeFinance.Entities.CashAdvance})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:ETradeFinance.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CashAdvance</c> objects in a <see cref="T:ETradeFinance.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>CashAdvance</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of CashAdvance.
             <code><![CDATA[
             TList<CashAdvance> list = new TList<CashAdvance>();
             CashAdvance entity = new CashAdvance();
             entity.StringProperty = "foo";
             CashAdvance entity2 = new CashAdvance();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CashAdvanceService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.Update(ETradeFinance.Entities.CashAdvance)">
            <summary>
            public virtual method that Updates a CashAdvance object into the datasource using a transaction.
            </summary>
            <param name="entity">CashAdvance object to Update.</param>
            <remarks>After Updateing into the datasource, the CashAdvance object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            CashAdvance entity = CashAdvanceService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	CashAdvanceService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.Update(ETradeFinance.Entities.TList{ETradeFinance.Entities.CashAdvance})">
             <summary>
             public virtual method that Updates rows in <see cref="T:ETradeFinance.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CashAdvance</c> objects in a <see cref="T:ETradeFinance.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>CashAdvance</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of CashAdvance.
             <code><![CDATA[
             TList<CashAdvance> list = new TList<CashAdvance>();
             CashAdvance entity = new CashAdvance();
             entity.StringProperty = "foo";
             CashAdvance entity2 = new CashAdvance();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CashAdvanceService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.Save(ETradeFinance.Entities.CashAdvance)">
            <summary>
            public virtual method that Saves a CashAdvance object into the datasource using a transaction.
            </summary>
            <param name="entity">CashAdvance object to Save.</param>
            <remarks>After Saveing into the datasource, the CashAdvance object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            CashAdvance entity = CashAdvanceService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	CashAdvanceService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.Save(ETradeFinance.Entities.TList{ETradeFinance.Entities.CashAdvance})">
             <summary>
             public virtual method that Saves rows in <see cref="T:ETradeFinance.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CashAdvance</c> objects in a <see cref="T:ETradeFinance.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>CashAdvance</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of CashAdvance.
             <code><![CDATA[
             TList<CashAdvance> list = new TList<CashAdvance>();
             CashAdvance entity = new CashAdvance();
             entity.StringProperty = "foo";
             CashAdvance entity2 = new CashAdvance();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CashAdvanceService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.Delete(ETradeFinance.Entities.CashAdvance)">
            <summary>
            public virtual method that Deletes a CashAdvance object into the datasource using a transaction.
            </summary>
            <param name="entity">CashAdvance object to Delete.</param>
            <remarks>After Deleteing into the datasource, the CashAdvance object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            CashAdvance entity = CashAdvanceService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	CashAdvanceService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.Delete(ETradeFinance.Entities.TList{ETradeFinance.Entities.CashAdvance})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:ETradeFinance.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>CashAdvance</c> objects in a <see cref="T:ETradeFinance.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>CashAdvance</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of CashAdvance.
             <code><![CDATA[
             TList<CashAdvance> list = new TList<CashAdvance>();
             CashAdvance entity = new CashAdvance();
             entity.StringProperty = "foo";
             CashAdvance entity2 = new CashAdvance();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	CashAdvanceService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.Delete(ETradeFinance.Entities.CashAdvanceKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 _id
            </summary>
            <param name="_id">CashAdvance pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.DeleteOldData">
            <summary>
            This method wrap the '_CashAdvance_DeleteOldData' stored procedure. 
            </summary>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.DeleteOldData(System.Int32,System.Int32)">
            <summary>
            This method wrap the '_CashAdvance_DeleteOldData' stored procedure. 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.DeepLoadById(System.Int64,System.Boolean,ETradeFinance.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ETradeFinance.Entities.CashAdvance"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ETradeFinance.DataAccess.DeepLoadType"/>.
            </summary>
            <param name="_id">CashAdvanceID identifies CashAdvance</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CashAdvance Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ETradeFinance.Entities.CashAdvance"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.DeepLoad(ETradeFinance.Entities.CashAdvance)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">CashAdvance Object</param>
            <remarks>
            <seealso cref="M:ETradeFinance.Services.CashAdvanceServiceBase.DeepLoad(ETradeFinance.Entities.CashAdvance)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.DeepLoad(ETradeFinance.Entities.CashAdvance,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ETradeFinance.Services.CashAdvanceServiceBase.DeepLoad(ETradeFinance.Entities.CashAdvance)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">CashAdvance Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.DeepLoad(ETradeFinance.Entities.CashAdvance,System.Boolean,ETradeFinance.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ETradeFinance.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ETradeFinance.DataAccess.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ETradeFinance.Entities.CashAdvance"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">CashAdvance Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.DeepLoad(ETradeFinance.Entities.TList{ETradeFinance.Entities.CashAdvance})">
            <summary>
            Deep Loads the <see cref="T:ETradeFinance.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ETradeFinance.Services.CashAdvanceServiceBase.DeepLoad(ETradeFinance.Entities.CashAdvance)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ETradeFinance.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.DeepLoad(ETradeFinance.Entities.TList{ETradeFinance.Entities.CashAdvance},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ETradeFinance.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ETradeFinance.Services.CashAdvanceServiceBase.DeepLoad(ETradeFinance.Entities.CashAdvance)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ETradeFinance.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.DeepLoad(ETradeFinance.Entities.TList{ETradeFinance.Entities.CashAdvance},System.Boolean,ETradeFinance.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ETradeFinance.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ETradeFinance.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ETradeFinance.DataAccess.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ETradeFinance.Entities.CashAdvance"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.DeepSave(ETradeFinance.Entities.CashAdvance)">
            <summary>
            public virtualDeep Saves the <see cref="T:ETradeFinance.Entities.CashAdvance"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">CashAdvance Object</param>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.DeepSave(ETradeFinance.Entities.CashAdvance,ETradeFinance.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the CashAdvance object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">CashAdvance Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>CashAdvance</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.DeepSave(ETradeFinance.Entities.TList{ETradeFinance.Entities.CashAdvance})">
            <summary>
            Deep Save the entire <see cref="T:ETradeFinance.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{CashAdvance} Object</param>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceServiceBase.DeepSave(ETradeFinance.Entities.TList{ETradeFinance.Entities.CashAdvance},ETradeFinance.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ETradeFinance.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ETradeFinance.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">CashAdvance Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ETradeFinance.Services.CashAdvanceServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceService.#ctor">
            <summary>
            Initializes a new instance of the CashAdvanceService class.
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceService.UpdateCashAdvance(System.Int64,System.Decimal,System.Int32,System.String,System.String)">
            <summary>
             Update Cash advance and Cash advance history
            </summary>
            <param name="id">Cash advance id</param>
            <param name="cashReceived">Cash received</param>
            <param name="status">Status</param>
            <param name="reason">Reason</param>
             <returns>
             <para>Result of updating Cash advance</para>
             <para>RET_CODE=NO_EXISTED_DATA: Data is not existing.</para>
             <para>RET_CODE=FAIL: Fail to update data.</para>
             <para>RET_CODE=SUCCESS: Update data successfully.</para>
             </returns>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceService.GetListCashAdvance(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Get list of Cash advances
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="contractNo">Contract no</param>
            <param name="status">Status</param>
            <param name="tradeType">Trade type</param>
            <param name="pageIndex">Page index</param>
            <param name="pageSize">Page size</param>
            <param name="count">Total of records</param>
            <returns>
             <para>Return list of CashAdvance object that contains CashAdvance information.</para>
             </returns>
        </member>
        <member name="T:ETradeFinance.Services.XrOrdersServiceBase">
            <summary>
             An object representation of the 'XROrders' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the XrOrders.cs file instead.
             All custom implementations should be done in the <see cref="T:ETradeFinance.Entities.XrOrders"/> class.
             </remarks>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ETradeFinance.Entities.XrOrders"/> instance .
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.CreateXrOrders(System.String,System.Int64,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Decimal},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.Int64},System.Nullable{System.DateTime},System.Nullable{System.Int64},System.Int32,System.String,System.Nullable{System.DateTime},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ETradeFinance.Entities.XrOrders"/> instance.
            </summary>
            <param name="_subAccountId">Tai khoan con dang ky quyen mua</param>
            <param name="_buyRightId">Id of buy right table</param>
            <param name="_secSymbol">Ma CK duoc dang ky mua</param>
            <param name="_market">Thi truong cua ma CK nay(HOSE, HNX, Upcom)</param>
            <param name="_volume">Khoi luong CP duoc phep mua</param>
            <param name="_price">Gia mac dinh cho quyen mua CP nay</param>
            <param name="_registeredVol">KL co phieu khach da dang ky mua</param>
            <param name="_availableVol">KL CP con lai khach duoc phep mua</param>
            <param name="_requestVol">KL CP khach hang dang ky mua</param>
            <param name="_requestTime">Thoi gian (ngay gio) dang ky</param>
            <param name="_approvedVol">KL CP mua da chap thuan</param>
            <param name="_status">Trang thai cua request(dang cho, dang xu ly, da xu ly, da huy boi nha dau tu, tu choi boi broker)</param>
            <param name="_brokerId">Broker ID cua Broker xu ly request</param>
            <param name="_execTime">Thoi gian xu ly</param>
            <param name="_note">Ghi chu cua Broker</param>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.Get(ETradeFinance.Entities.XrOrdersKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.GetById(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:ETradeFinance.Entities.TList`1"/> from the datasource based on the primary key PK_XRORDERS index.
            </summary>
            <param name="_id"></param>
            <returns>Returns an instance of the <see cref="T:ETradeFinance.Entities.XrOrders"/> class.</returns>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.GetById(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ETradeFinance.Entities.TList`1"/> from the datasource based on the primary key PK_XRORDERS index.
            </summary>
            <param name="_id"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ETradeFinance.Entities.XrOrders"/> class.</returns>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ETradeFinance.Entities.XrOrders"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ETradeFinance.Entities.XrOrders"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ETradeFinance.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ETradeFinance.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>XrOrders</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ETradeFinance.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>XrOrders</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ETradeFinance.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>XrOrders</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{XrOrders} of <c>XrOrders</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>XrOrders</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection,ETradeFinance.DataAccess.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:ETradeFinance.DataAccess.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>XrOrders</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>XrOrders</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection,ETradeFinance.DataAccess.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:ETradeFinance.DataAccess.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>XrOrders</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.Find(ETradeFinance.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeFinance.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>XrOrders</c> objects.</returns>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.Insert(ETradeFinance.Entities.XrOrders)">
            <summary>
            public virtual method that Inserts a XrOrders object into the datasource using a transaction.
            </summary>
            <param name="entity">XrOrders object to Insert.</param>
            <remarks>After Inserting into the datasource, the XrOrders object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            XrOrders entity = new XrOrders();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	XrOrdersService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.Insert(ETradeFinance.Entities.TList{ETradeFinance.Entities.XrOrders})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:ETradeFinance.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>XrOrders</c> objects in a <see cref="T:ETradeFinance.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>XrOrders</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of XrOrders.
             <code><![CDATA[
             TList<XrOrders> list = new TList<XrOrders>();
             XrOrders entity = new XrOrders();
             entity.StringProperty = "foo";
             XrOrders entity2 = new XrOrders();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	XrOrdersService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.Update(ETradeFinance.Entities.XrOrders)">
            <summary>
            public virtual method that Updates a XrOrders object into the datasource using a transaction.
            </summary>
            <param name="entity">XrOrders object to Update.</param>
            <remarks>After Updateing into the datasource, the XrOrders object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            XrOrders entity = XrOrdersService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	XrOrdersService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.Update(ETradeFinance.Entities.TList{ETradeFinance.Entities.XrOrders})">
             <summary>
             public virtual method that Updates rows in <see cref="T:ETradeFinance.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>XrOrders</c> objects in a <see cref="T:ETradeFinance.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>XrOrders</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of XrOrders.
             <code><![CDATA[
             TList<XrOrders> list = new TList<XrOrders>();
             XrOrders entity = new XrOrders();
             entity.StringProperty = "foo";
             XrOrders entity2 = new XrOrders();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	XrOrdersService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.Save(ETradeFinance.Entities.XrOrders)">
            <summary>
            public virtual method that Saves a XrOrders object into the datasource using a transaction.
            </summary>
            <param name="entity">XrOrders object to Save.</param>
            <remarks>After Saveing into the datasource, the XrOrders object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            XrOrders entity = XrOrdersService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	XrOrdersService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.Save(ETradeFinance.Entities.TList{ETradeFinance.Entities.XrOrders})">
             <summary>
             public virtual method that Saves rows in <see cref="T:ETradeFinance.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>XrOrders</c> objects in a <see cref="T:ETradeFinance.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>XrOrders</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of XrOrders.
             <code><![CDATA[
             TList<XrOrders> list = new TList<XrOrders>();
             XrOrders entity = new XrOrders();
             entity.StringProperty = "foo";
             XrOrders entity2 = new XrOrders();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	XrOrdersService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.Delete(ETradeFinance.Entities.XrOrders)">
            <summary>
            public virtual method that Deletes a XrOrders object into the datasource using a transaction.
            </summary>
            <param name="entity">XrOrders object to Delete.</param>
            <remarks>After Deleteing into the datasource, the XrOrders object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            XrOrders entity = XrOrdersService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	XrOrdersService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.Delete(ETradeFinance.Entities.TList{ETradeFinance.Entities.XrOrders})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:ETradeFinance.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>XrOrders</c> objects in a <see cref="T:ETradeFinance.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>XrOrders</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of XrOrders.
             <code><![CDATA[
             TList<XrOrders> list = new TList<XrOrders>();
             XrOrders entity = new XrOrders();
             entity.StringProperty = "foo";
             XrOrders entity2 = new XrOrders();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	XrOrdersService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.Delete(ETradeFinance.Entities.XrOrdersKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Int64 _id
            </summary>
            <param name="_id">XrOrders pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.DeepLoadById(System.Int64,System.Boolean,ETradeFinance.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ETradeFinance.Entities.XrOrders"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ETradeFinance.DataAccess.DeepLoadType"/>.
            </summary>
            <param name="_id"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">XrOrders Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ETradeFinance.Entities.XrOrders"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.DeepLoad(ETradeFinance.Entities.XrOrders)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">XrOrders Object</param>
            <remarks>
            <seealso cref="M:ETradeFinance.Services.XrOrdersServiceBase.DeepLoad(ETradeFinance.Entities.XrOrders)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.DeepLoad(ETradeFinance.Entities.XrOrders,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ETradeFinance.Services.XrOrdersServiceBase.DeepLoad(ETradeFinance.Entities.XrOrders)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">XrOrders Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.DeepLoad(ETradeFinance.Entities.XrOrders,System.Boolean,ETradeFinance.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ETradeFinance.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ETradeFinance.DataAccess.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ETradeFinance.Entities.XrOrders"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">XrOrders Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.DeepLoad(ETradeFinance.Entities.TList{ETradeFinance.Entities.XrOrders})">
            <summary>
            Deep Loads the <see cref="T:ETradeFinance.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ETradeFinance.Services.XrOrdersServiceBase.DeepLoad(ETradeFinance.Entities.XrOrders)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ETradeFinance.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.DeepLoad(ETradeFinance.Entities.TList{ETradeFinance.Entities.XrOrders},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ETradeFinance.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ETradeFinance.Services.XrOrdersServiceBase.DeepLoad(ETradeFinance.Entities.XrOrders)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ETradeFinance.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.DeepLoad(ETradeFinance.Entities.TList{ETradeFinance.Entities.XrOrders},System.Boolean,ETradeFinance.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ETradeFinance.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ETradeFinance.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ETradeFinance.DataAccess.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ETradeFinance.Entities.XrOrders"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.DeepSave(ETradeFinance.Entities.XrOrders)">
            <summary>
            public virtualDeep Saves the <see cref="T:ETradeFinance.Entities.XrOrders"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">XrOrders Object</param>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.DeepSave(ETradeFinance.Entities.XrOrders,ETradeFinance.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the XrOrders object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">XrOrders Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>XrOrders</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.DeepSave(ETradeFinance.Entities.TList{ETradeFinance.Entities.XrOrders})">
            <summary>
            Deep Save the entire <see cref="T:ETradeFinance.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{XrOrders} Object</param>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersServiceBase.DeepSave(ETradeFinance.Entities.TList{ETradeFinance.Entities.XrOrders},ETradeFinance.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ETradeFinance.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ETradeFinance.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">XrOrders Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ETradeFinance.Services.XrOrdersServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:ETradeFinance.Services.ServiceViewBase`1">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:ETradeFinance.Services.FeeService">
            <summary>
            An component type implementation of the 'Fee' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="F:ETradeFinance.Services.FeeService.ListFees">
            <summary>
             List of fee
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.FeeService.#ctor">
            <summary>
            Initializes a new instance of the FeeService class.
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.FeeService.CreateFee(System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Int32,System.Decimal)">
            <summary>
             Create fee
            </summary>
            <param name="minValue">Min value of fee range</param>
            <param name="maxValue">Max value of fee range</param>
            <param name="minFee">Name of configuration</param>
             <param name="feeRatio">Fee ratio</param>
             <param name="feeType">Fee type</param>
             <param name="vat">Vat fee</param>
             <returns>
             <para>Result of creating fee</para>
             <para>RET_CODE=RANGE_OVERLAP: Data is overlap with data in database.</para>
             <para>RET_CODE=EXISTED_DATA: Data is existing.</para>
             <para>RET_CODE=FAIL: Fail to create data.</para>
             <para>RET_CODE=SUCCESS: Create data successfully.</para>
             </returns>
        </member>
        <member name="M:ETradeFinance.Services.FeeService.UpdateFee(System.Int64,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Int32,System.Decimal)">
            <summary>
             Update fee
            </summary>
            <param name="feeId">Fee id</param>
            <param name="minValue">Min value of fee range</param>
            <param name="maxValue">Max value of fee range</param>
            <param name="minFee">Name of configuration</param>
             <param name="feeRatio">Fee ratio</param>
             <param name="feeType">Fee type</param>
             <param name="vat">Vat fee</param>
             <returns>
             <para>Result of updating fee</para>
             <para>RET_CODE=RANGE_OVERLAP: Data is overlap with data in database.</para>
             <para>RET_CODE=NO_EXISTED_DATA: Data is not existing.</para>
             <para>RET_CODE=FAIL: Fail to create data.</para>
             <para>RET_CODE=SUCCESS: Create data successfully.</para>
             </returns>
        </member>
        <member name="M:ETradeFinance.Services.FeeService.GetListFee(System.Int32)">
            <summary>
            </summary>
            <param name="feeType"></param>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.FeeService.GetTradeFee(ETradeCommon.Enums.CommonEnums.FEE_TYPE,System.Decimal)">
            <summary>
            Gets the trade fee.
            </summary>
            <param name="feeType">Type of the fee.</param>
            <param name="sellAmt">The sell amt.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.FeeService.CalculateFee(System.Decimal,System.Int32)">
            <summary>
             Get fee.
            </summary>
            <param name="cashAmount">Cash amount</param>
            <param name="feeType">Fee type</param>
            <returns></returns>
        </member>
        <member name="T:ETradeFinance.Services.StockTransferService">
            <summary>
            An component type implementation of the 'StockTransfer' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferService.#ctor">
            <summary>
            Initializes a new instance of the StockTransferService class.
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferService.PutStockTransOrder(ETradeFinance.Entities.StockTransfer)">
            <summary>
            Puts the stock trans order.
            </summary>
            <param name="stockTransfer">The stock transfer.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferService.UpdateStockTransOrder(System.Int64,System.Int32,System.Int64,System.String,System.String,System.DateTime)">
            <summary>
            Updates the stock trans order.
            </summary>
            <param name="id">The id.</param>
            <param name="status">The status.</param>
            <param name="ApprovedAmt">The approved amt.</param>
            <param name="note">The note.</param>
            <param name="brokerId">The broker id.</param>
            <param name="execTime">The exec time.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferService.CancelStockTransfer(System.Int64,System.DateTime,System.String)">
            <summary>
            Cancels the stock transfer.
            </summary>
            <param name="id">The id.</param>
            <param name="execTime">The exec time.</param>
            <param name="note">The note.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferService.GetListUnfinishedStockTransfer(System.String,System.String)">
            <summary>
            Gets the list unfinished stock transfer.
            </summary>
            <param name="subAccountId">The sub account id.</param>
            <param name="secSymbol">The sec symbol.</param>
            <returns>the list stock transfers are unfinished </returns>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferService.GetTotalUnfinishedStockTransferAmount(System.String,System.String)">
            <summary>
            Gets the total unfinished stock transfer amount.
            </summary>
            <param name="subAccountId">The sub account id.</param>
            <param name="secSymbol">The sec symbol.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferService.GetListStockTransOrder(System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the list stock trans order.
            </summary>
            <param name="sourceAccountID">The source account ID.</param>
            <param name="destAccountID">The dest account ID.</param>
            <param name="secSymbol">The sec symbol.</param>
            <param name="transType">Type of the trans.</param>
            <param name="note">The note.</param>
            <param name="brokerID">The broker ID.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.StockTransferService.GetListStockTransOrderHist(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the list stock trans order hist.
            </summary>
            <param name="sourceAccountID">The source account ID.</param>
            <param name="destAccountID">The dest account ID.</param>
            <param name="secSymbol">The sec symbol.</param>
            <param name="fromDate">From date.</param>
            <param name="toDate">To date.</param>
            <param name="transType">Type of the trans.</param>
            <param name="status">The status.</param>
            <param name="note">The note.</param>
            <param name="brokerID">The broker ID.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns>the list stock transfers had ordered history</returns>
        </member>
        <member name="T:ETradeFinance.Services.CashAdvanceHistoryService">
            <summary>
            An component type implementation of the 'CashAdvanceHistory' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryService.#ctor">
            <summary>
            Initializes a new instance of the CashAdvanceHistoryService class.
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.CashAdvanceHistoryService.GetListCashAdvanceHistory(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Get list of Cash advance history
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="fromDate">Advance date from, format DD/MM/YYYY</param>
            <param name="toDate">Advance date to, format DD/MM/YYYY</param>
            <param name="contractNo">Contract no</param>
            <param name="sellDueDateTo">Sell Due date from, format DD/MM/YYYY</param>
            <param name="sellDueDateFrom">Sell Due date from, format DD/MM/YYYY</param>
            <param name="status">Status</param>
            <param name="tradeType">Trade type</param>
            <param name="pageIndex">Page index</param>
            <param name="pageSize">Page size</param>
            <param name="count">Total records</param>
            <returns>
             <para>Return list of CashAdvance object that contains CashAdvance information.</para>
             </returns>
        </member>
        <member name="T:ETradeFinance.Services.ServiceResult">
            <summary>
            The class provides a notification pattern for the processor execution.
            </summary>
        </member>
        <member name="P:ETradeFinance.Services.ServiceResult.HasErrors">
            <summary>
               Determines whethere the containing service, has errors.
            </summary>
        </member>
        <member name="P:ETradeFinance.Services.ServiceResult.Error">
            <summary>
               Provides a string of errors accumulated with a new line of delimeted errors.
            </summary>
        </member>
        <member name="P:ETradeFinance.Services.ServiceResult.ProcessBrokenRuleLists">
            <summary>
               Provides an aggregated group of BrokenRuleList for each of the executed processes.
            </summary>
        </member>
        <member name="P:ETradeFinance.Services.ServiceResult.ProcessorResultList">
            <summary>
               Determines whethere the containing processs results that were enlisted in the service.
            </summary>
        </member>
        <member name="P:ETradeFinance.Services.ServiceResult.ExceptionList">
             <summary>
            	Provides the List of UnHandled Exceptions that occured during processing.
             </summary>
            <value>A list of rules that were broken in the process</value>		
        </member>
        <member name="T:ETradeFinance.Services.XrOrdersService">
            <summary>
            An component type implementation of the 'XROrders' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersService.#ctor">
            <summary>
            Initializes a new instance of the XrOrdersService class.
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersService.PutXROrder(ETradeFinance.Entities.XrOrders)">
            <summary>
            Puts the XR order.
            </summary>
            <param name="xrOrders">The xr orders.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersService.UpdateXROrder(System.Int64,System.Int64,System.Int32,System.String,System.DateTime,System.String)">
            <summary>
            Updates the XR order.
            </summary>
            <param name="id">The id.</param>
            <param name="approvedVol">The approved vol.</param>
            <param name="status">The status.</param>
            <param name="brokerID">The broker ID.</param>
            <param name="ExecTime">The exec time.</param>
            <param name="note">The note.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersService.CancelXROrder(System.Int64,System.String)">
            <summary>
            Cancels the XR order.
            </summary>
            <param name="id">The id.</param>
            <param name="note">The note.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersService.GetListUnfinishedXROrder(System.Int64,System.String,System.String,System.String)">
            <summary>
            Gets the list unfinished XR order.
            </summary>
            <param name="subAccountId">The sub account id.</param>
            <param name="secSymbol">The sec symbol.</param>
            <param name="market">The market.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersService.GetListFinishedXROrder(System.Int64,System.String,System.String,System.String)">
            <summary>
            Gets the list finished XR order.
            </summary>
            <param name="buyRightId">The buy right id.</param>
            <param name="subAccountId">The sub account id.</param>
            <param name="secSymbol">The sec symbol.</param>
            <param name="market">The market.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersService.GetTotalUnfinishedXROrderRegisterAmount(System.Int64,System.String,System.String,System.String)">
            <summary>
            Gets the total unfinished XR order register amount.
            </summary>
            <param name="subAccountId">The sub account id.</param>
            <param name="secSymbol">The sec symbol.</param>
            <param name="market">The market.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersService.GetTotalRegistedXROrderAmount(System.Int64,System.String,System.String,System.String)">
            <summary>
            Gets the total registed XR order amount.
            </summary>
            <param name="buyRightId">The buy right id.</param>
            <param name="subAccountId">The sub account id.</param>
            <param name="secSymbol">The sec symbol.</param>
            <param name="market">The market.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersService.GetTotalFinishedXROrderRegisterAmount(System.Int64,System.String,System.String,System.String)">
            <summary>
            Gets the total finished XR order register amount.
            </summary>
            <param name="buyRightId">The buy right id.</param>
            <param name="subAccountId">The sub account id.</param>
            <param name="secSymbol">The sec symbol.</param>
            <param name="market">The market.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeFinance.Services.XrOrdersService.GetListXROrderHist(System.Int64,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the XR order hist.
            </summary>
            <param name="subAccountId">The sub account id.</param>
            <param name="secSymbol">The sec symbol.</param>
            <param name="market">The market.</param>
            <param name="fromDate">From date.</param>
            <param name="toDate">To date.</param>
            <param name="status">The status.</param>
            <param name="brokerID">The broker ID.</param>
            <param name="note">The note.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns></returns>
        </member>
        <member name="T:ETradeFinance.Services.SecurityContext`1">
            <summary>
            The class that is available in case role based security is required at runtime.  
            It will be made availabe through the entities themselves.
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.SecurityContext`1.#ctor">
            <summary>
             Creates a new <see cref="T:System.Security.SecurityContext"/> instance.
            </summary>
        </member>
        <member name="T:ETradeFinance.Services.ProcessorState">
            <summary>
            ProcessorState enumeration.
            </summary>
        </member>
        <member name="F:ETradeFinance.Services.ProcessorState.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:ETradeFinance.Services.ProcessorState.Running">
            <summary>
            Running
            </summary>
        </member>
        <member name="F:ETradeFinance.Services.ProcessorState.Stopped">
            <summary>
            Stopped
            </summary>
        </member>
        <member name="F:ETradeFinance.Services.ProcessorState.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="T:ETradeFinance.Services.AdvanceTimeService">
            <summary>
            An component type implementation of the 'AdvanceTime' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeService.#ctor">
            <summary>
            Initializes a new instance of the AdvanceTimeService class.
            </summary>
        </member>
        <member name="M:ETradeFinance.Services.AdvanceTimeService.UpdateAdvanceTime(System.Collections.Generic.List{System.String[]})">
            <summary>
             Update list of AdvanceTime objects.
            </summary>
            <param name="advanceTimeList">List of AdvanceTime objects.</param>
             <returns>
             <para>Result of updating Advance Time</para>
             <para>RET_CODE=INCORRECT_FORMAT: The time is incorrect.</para>
             <para>RET_CODE=NO_EXISTED_DATA: Data is not existing.</para>
             <para>RET_CODE=FAIL: Fail to update data.</para>
             <para>RET_CODE=SUCCESS: Update data successfully.</para>
             </returns>
        </member>
    </members>
</doc>
