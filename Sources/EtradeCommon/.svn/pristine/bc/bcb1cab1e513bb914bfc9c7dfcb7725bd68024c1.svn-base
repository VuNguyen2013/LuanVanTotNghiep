
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Wednesday, November 10, 2010
	Important: Do not modify this file. Edit the file SubCustAccount.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Web.Script.Serialization;

using AccountManager.Entities.Validation;
#endregion

namespace AccountManager.Entities
{
	///<summary>
	/// An object representation of the 'SubCustAccount' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class SubCustAccountBase : EntityBase, ISubCustAccount, IEntityId<SubCustAccountKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private SubCustAccountEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private SubCustAccountEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private SubCustAccountEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<SubCustAccount> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SubCustAccountEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event SubCustAccountEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="SubCustAccountBase"/> instance.
		///</summary>
		public SubCustAccountBase()
		{
			this.entityData = new SubCustAccountEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="SubCustAccountBase"/> instance.
		///</summary>
		///<param name="_subCustAccountId"></param>
		///<param name="_name"></param>
		///<param name="_actived"></param>
		///<param name="_lockAccountReason"></param>
		///<param name="_mainCustAccountId"></param>
		///<param name="_createdDate"></param>
		///<param name="_createdUser"></param>
		///<param name="_updatedDate"></param>
		///<param name="_updatedUser"></param>
		public SubCustAccountBase(System.String _subCustAccountId, System.String _name, 
			System.Boolean? _actived, System.Int16? _lockAccountReason, System.String _mainCustAccountId, 
			System.DateTime? _createdDate, System.String _createdUser, System.DateTime? _updatedDate, 
			System.String _updatedUser)
		{
			this.entityData = new SubCustAccountEntityData();
			this.backupData = null;

			this.SubCustAccountId = _subCustAccountId;
			this.Name = _name;
			this.Actived = _actived;
			this.LockAccountReason = _lockAccountReason;
			this.MainCustAccountId = _mainCustAccountId;
			this.CreatedDate = _createdDate;
			this.CreatedUser = _createdUser;
			this.UpdatedDate = _updatedDate;
			this.UpdatedUser = _updatedUser;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="SubCustAccount"/> instance.
		///</summary>
		///<param name="_subCustAccountId"></param>
		///<param name="_name"></param>
		///<param name="_actived"></param>
		///<param name="_lockAccountReason"></param>
		///<param name="_mainCustAccountId"></param>
		///<param name="_createdDate"></param>
		///<param name="_createdUser"></param>
		///<param name="_updatedDate"></param>
		///<param name="_updatedUser"></param>
		public static SubCustAccount CreateSubCustAccount(System.String _subCustAccountId, System.String _name, 
			System.Boolean? _actived, System.Int16? _lockAccountReason, System.String _mainCustAccountId, 
			System.DateTime? _createdDate, System.String _createdUser, System.DateTime? _updatedDate, 
			System.String _updatedUser)
		{
			SubCustAccount newSubCustAccount = new SubCustAccount();
			newSubCustAccount.SubCustAccountId = _subCustAccountId;
			newSubCustAccount.Name = _name;
			newSubCustAccount.Actived = _actived;
			newSubCustAccount.LockAccountReason = _lockAccountReason;
			newSubCustAccount.MainCustAccountId = _mainCustAccountId;
			newSubCustAccount.CreatedDate = _createdDate;
			newSubCustAccount.CreatedUser = _createdUser;
			newSubCustAccount.UpdatedDate = _updatedDate;
			newSubCustAccount.UpdatedUser = _updatedUser;
			return newSubCustAccount;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the SubCustAccountId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 20)]
		public virtual System.String SubCustAccountId
		{
			get
			{
				return this.entityData.SubCustAccountId; 
			}
			
			set
			{
				if (this.entityData.SubCustAccountId == value)
					return;
					
				OnColumnChanging(SubCustAccountColumn.SubCustAccountId, this.entityData.SubCustAccountId);
				this.entityData.SubCustAccountId = value;
				this.EntityId.SubCustAccountId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SubCustAccountColumn.SubCustAccountId, this.entityData.SubCustAccountId);
				OnPropertyChanged("SubCustAccountId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the SubCustAccountID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the SubCustAccountID property.</remarks>
		/// <value>This type is varchar</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalSubCustAccountId
		{
			get { return this.entityData.OriginalSubCustAccountId; }
			set { this.entityData.OriginalSubCustAccountId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Name
		{
			get
			{
				return this.entityData.Name; 
			}
			
			set
			{
				if (this.entityData.Name == value)
					return;
					
				OnColumnChanging(SubCustAccountColumn.Name, this.entityData.Name);
				this.entityData.Name = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SubCustAccountColumn.Name, this.entityData.Name);
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Actived property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsActivedNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? Actived
		{
			get
			{
				return this.entityData.Actived; 
			}
			
			set
			{
				if (this.entityData.Actived == value)
					return;
					
				OnColumnChanging(SubCustAccountColumn.Actived, this.entityData.Actived);
				this.entityData.Actived = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SubCustAccountColumn.Actived, this.entityData.Actived);
				OnPropertyChanged("Actived");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LockAccountReason property. 
		///		
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsLockAccountReasonNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? LockAccountReason
		{
			get
			{
				return this.entityData.LockAccountReason; 
			}
			
			set
			{
				if (this.entityData.LockAccountReason == value)
					return;
					
				OnColumnChanging(SubCustAccountColumn.LockAccountReason, this.entityData.LockAccountReason);
				this.entityData.LockAccountReason = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SubCustAccountColumn.LockAccountReason, this.entityData.LockAccountReason);
				OnPropertyChanged("LockAccountReason");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MainCustAccountId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MainCustAccountId
		{
			get
			{
				return this.entityData.MainCustAccountId; 
			}
			
			set
			{
				if (this.entityData.MainCustAccountId == value)
					return;
					
				OnColumnChanging(SubCustAccountColumn.MainCustAccountId, this.entityData.MainCustAccountId);
				this.entityData.MainCustAccountId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SubCustAccountColumn.MainCustAccountId, this.entityData.MainCustAccountId);
				OnPropertyChanged("MainCustAccountId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCreatedDateNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreatedDate
		{
			get
			{
				return this.entityData.CreatedDate; 
			}
			
			set
			{
				if (this.entityData.CreatedDate == value)
					return;
					
				OnColumnChanging(SubCustAccountColumn.CreatedDate, this.entityData.CreatedDate);
				this.entityData.CreatedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SubCustAccountColumn.CreatedDate, this.entityData.CreatedDate);
				OnPropertyChanged("CreatedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedUser property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String CreatedUser
		{
			get
			{
				return this.entityData.CreatedUser; 
			}
			
			set
			{
				if (this.entityData.CreatedUser == value)
					return;
					
				OnColumnChanging(SubCustAccountColumn.CreatedUser, this.entityData.CreatedUser);
				this.entityData.CreatedUser = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SubCustAccountColumn.CreatedUser, this.entityData.CreatedUser);
				OnPropertyChanged("CreatedUser");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdatedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsUpdatedDateNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? UpdatedDate
		{
			get
			{
				return this.entityData.UpdatedDate; 
			}
			
			set
			{
				if (this.entityData.UpdatedDate == value)
					return;
					
				OnColumnChanging(SubCustAccountColumn.UpdatedDate, this.entityData.UpdatedDate);
				this.entityData.UpdatedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SubCustAccountColumn.UpdatedDate, this.entityData.UpdatedDate);
				OnPropertyChanged("UpdatedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdatedUser property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String UpdatedUser
		{
			get
			{
				return this.entityData.UpdatedUser; 
			}
			
			set
			{
				if (this.entityData.UpdatedUser == value)
					return;
					
				OnColumnChanging(SubCustAccountColumn.UpdatedUser, this.entityData.UpdatedUser);
				this.entityData.UpdatedUser = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(SubCustAccountColumn.UpdatedUser, this.entityData.UpdatedUser);
				OnPropertyChanged("UpdatedUser");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="MainCustAccount"/>.
		/// </summary>
		/// <value>The source MainCustAccount for MainCustAccountId.</value>
        [XmlIgnore()]
        [ScriptIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual MainCustAccount MainCustAccountIdSource
      	{
            get { return entityData.MainCustAccountIdSource; }
            set { entityData.MainCustAccountIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of CustomerActionHistory objects
		///	which are related to this object through the relation FK_CustomerActionHistory_SubCustAccount
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CustomerActionHistory> CustomerActionHistoryCollection
		{
			get { return entityData.CustomerActionHistoryCollection; }
			set { entityData.CustomerActionHistoryCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of SubCustAccountPermission objects
		///	which are related to this object through the relation FK_SubCustAccountPermission_SubCustAccount
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SubCustAccountPermission> SubCustAccountPermissionCollection
		{
			get { return entityData.SubCustAccountPermissionCollection; }
			set { entityData.SubCustAccountPermissionCollection = value; }	
		}

		/// <summary>
		///	Holds a collection of CustServicesPermissionFromSubCustAccountPermission objects
		///	which are related to this object through the junction table SubCustAccountPermission
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CustServicesPermission> CustServicesPermissionIdCustServicesPermissionCollection_From_SubCustAccountPermission
		{
			get { return entityData.CustServicesPermissionIdCustServicesPermissionCollection_From_SubCustAccountPermission; }
			set { entityData.CustServicesPermissionIdCustServicesPermissionCollection_From_SubCustAccountPermission = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("SubCustAccountId", "Sub Cust Account Id"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SubCustAccountId", "Sub Cust Account Id", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Name", "Name", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MainCustAccountId", "Main Cust Account Id", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CreatedUser", "Created User", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UpdatedUser", "Updated User", 20));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public override string TableName
		{
			get { return "SubCustAccount"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"SubCustAccountID", "Name", "Actived", "LockAccountReason", "MainCustAccountID", "CreatedDate", "CreatedUser", "UpdatedDate", "UpdatedUser"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as SubCustAccountEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (SubCustAccount) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
        [ScriptIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<SubCustAccount>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as SubCustAccount);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed SubCustAccount Entity 
		///</summary>
		protected virtual SubCustAccount Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			SubCustAccount copy = new SubCustAccount();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.SubCustAccountId = this.SubCustAccountId;
					copy.OriginalSubCustAccountId = this.OriginalSubCustAccountId;
				copy.Name = this.Name;
				copy.Actived = this.Actived;
				copy.LockAccountReason = this.LockAccountReason;
				copy.MainCustAccountId = this.MainCustAccountId;
				copy.CreatedDate = this.CreatedDate;
				copy.CreatedUser = this.CreatedUser;
				copy.UpdatedDate = this.UpdatedDate;
				copy.UpdatedUser = this.UpdatedUser;
			
			if (this.MainCustAccountIdSource != null && existingCopies.Contains(this.MainCustAccountIdSource))
				copy.MainCustAccountIdSource = existingCopies[this.MainCustAccountIdSource] as MainCustAccount;
			else
				copy.MainCustAccountIdSource = MakeCopyOf(this.MainCustAccountIdSource, existingCopies) as MainCustAccount;
		
			//deep copy nested objects
			copy.CustomerActionHistoryCollection = (TList<CustomerActionHistory>) MakeCopyOf(this.CustomerActionHistoryCollection, existingCopies); 
			copy.SubCustAccountPermissionCollection = (TList<SubCustAccountPermission>) MakeCopyOf(this.SubCustAccountPermissionCollection, existingCopies); 
			copy.CustServicesPermissionIdCustServicesPermissionCollection_From_SubCustAccountPermission = (TList<CustServicesPermission>) MakeCopyOf(this.CustServicesPermissionIdCustServicesPermissionCollection_From_SubCustAccountPermission, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed SubCustAccount Entity 
		///</summary>
		public virtual SubCustAccount Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed SubCustAccount Entity which is a deep copy of the current entity.
		///</summary>
		public virtual SubCustAccount DeepCopy()
		{
			return EntityHelper.Clone<SubCustAccount>(this as SubCustAccount);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as SubCustAccountEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new SubCustAccountEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as SubCustAccountEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(SubCustAccountColumn column)
		{
			switch(column)
			{
					case SubCustAccountColumn.SubCustAccountId:
					return entityData.SubCustAccountId != _originalData.SubCustAccountId;
					case SubCustAccountColumn.Name:
					return entityData.Name != _originalData.Name;
					case SubCustAccountColumn.Actived:
					return entityData.Actived != _originalData.Actived;
					case SubCustAccountColumn.LockAccountReason:
					return entityData.LockAccountReason != _originalData.LockAccountReason;
					case SubCustAccountColumn.MainCustAccountId:
					return entityData.MainCustAccountId != _originalData.MainCustAccountId;
					case SubCustAccountColumn.CreatedDate:
					return entityData.CreatedDate != _originalData.CreatedDate;
					case SubCustAccountColumn.CreatedUser:
					return entityData.CreatedUser != _originalData.CreatedUser;
					case SubCustAccountColumn.UpdatedDate:
					return entityData.UpdatedDate != _originalData.UpdatedDate;
					case SubCustAccountColumn.UpdatedUser:
					return entityData.UpdatedUser != _originalData.UpdatedUser;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< SubCustAccountColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.SubCustAccountId != _originalData.SubCustAccountId;
			result = result || entityData.Name != _originalData.Name;
			result = result || entityData.Actived != _originalData.Actived;
			result = result || entityData.LockAccountReason != _originalData.LockAccountReason;
			result = result || entityData.MainCustAccountId != _originalData.MainCustAccountId;
			result = result || entityData.CreatedDate != _originalData.CreatedDate;
			result = result || entityData.CreatedUser != _originalData.CreatedUser;
			result = result || entityData.UpdatedDate != _originalData.UpdatedDate;
			result = result || entityData.UpdatedUser != _originalData.UpdatedUser;
			return result;
		}	
		
		///<summary>
		///  Returns a SubCustAccount Entity with the original data.
		///</summary>
		public SubCustAccount GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateSubCustAccount(
				_originalData.SubCustAccountId,
				_originalData.Name,
				_originalData.Actived,
				_originalData.LockAccountReason,
				_originalData.MainCustAccountId,
				_originalData.CreatedDate,
				_originalData.CreatedUser,
				_originalData.UpdatedDate,
				_originalData.UpdatedUser
				);
				
			return (SubCustAccount)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="SubCustAccountBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is SubCustAccountBase)
				return ValueEquals(this, (SubCustAccountBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="SubCustAccountBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.SubCustAccountId.GetHashCode() ^ 
					((this.Name == null) ? string.Empty : this.Name.ToString()).GetHashCode() ^ 
					((this.Actived == null) ? string.Empty : this.Actived.ToString()).GetHashCode() ^ 
					((this.LockAccountReason == null) ? string.Empty : this.LockAccountReason.ToString()).GetHashCode() ^ 
					((this.MainCustAccountId == null) ? string.Empty : this.MainCustAccountId.ToString()).GetHashCode() ^ 
					((this.CreatedDate == null) ? string.Empty : this.CreatedDate.ToString()).GetHashCode() ^ 
					((this.CreatedUser == null) ? string.Empty : this.CreatedUser.ToString()).GetHashCode() ^ 
					((this.UpdatedDate == null) ? string.Empty : this.UpdatedDate.ToString()).GetHashCode() ^ 
					((this.UpdatedUser == null) ? string.Empty : this.UpdatedUser.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="SubCustAccountBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(SubCustAccountBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="SubCustAccountBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="SubCustAccountBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="SubCustAccountBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(SubCustAccountBase Object1, SubCustAccountBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.SubCustAccountId != Object2.SubCustAccountId)
				equal = false;
			if ( Object1.Name != null && Object2.Name != null )
			{
				if (Object1.Name != Object2.Name)
					equal = false;
			}
			else if (Object1.Name == null ^ Object2.Name == null )
			{
				equal = false;
			}
			if ( Object1.Actived != null && Object2.Actived != null )
			{
				if (Object1.Actived != Object2.Actived)
					equal = false;
			}
			else if (Object1.Actived == null ^ Object2.Actived == null )
			{
				equal = false;
			}
			if ( Object1.LockAccountReason != null && Object2.LockAccountReason != null )
			{
				if (Object1.LockAccountReason != Object2.LockAccountReason)
					equal = false;
			}
			else if (Object1.LockAccountReason == null ^ Object2.LockAccountReason == null )
			{
				equal = false;
			}
			if ( Object1.MainCustAccountId != null && Object2.MainCustAccountId != null )
			{
				if (Object1.MainCustAccountId != Object2.MainCustAccountId)
					equal = false;
			}
			else if (Object1.MainCustAccountId == null ^ Object2.MainCustAccountId == null )
			{
				equal = false;
			}
			if ( Object1.CreatedDate != null && Object2.CreatedDate != null )
			{
				if (Object1.CreatedDate != Object2.CreatedDate)
					equal = false;
			}
			else if (Object1.CreatedDate == null ^ Object2.CreatedDate == null )
			{
				equal = false;
			}
			if ( Object1.CreatedUser != null && Object2.CreatedUser != null )
			{
				if (Object1.CreatedUser != Object2.CreatedUser)
					equal = false;
			}
			else if (Object1.CreatedUser == null ^ Object2.CreatedUser == null )
			{
				equal = false;
			}
			if ( Object1.UpdatedDate != null && Object2.UpdatedDate != null )
			{
				if (Object1.UpdatedDate != Object2.UpdatedDate)
					equal = false;
			}
			else if (Object1.UpdatedDate == null ^ Object2.UpdatedDate == null )
			{
				equal = false;
			}
			if ( Object1.UpdatedUser != null && Object2.UpdatedUser != null )
			{
				if (Object1.UpdatedUser != Object2.UpdatedUser)
					equal = false;
			}
			else if (Object1.UpdatedUser == null ^ Object2.UpdatedUser == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((SubCustAccountBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static SubCustAccountComparer GetComparer()
        {
            return new SubCustAccountComparer();
        }
        */

        // Comparer delegates back to SubCustAccount
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(SubCustAccount rhs, SubCustAccountColumn which)
        {
            switch (which)
            {
            	
            	
            	case SubCustAccountColumn.SubCustAccountId:
            		return this.SubCustAccountId.CompareTo(rhs.SubCustAccountId);
            		
            		                 
            	
            	
            	case SubCustAccountColumn.Name:
            		return this.Name.CompareTo(rhs.Name);
            		
            		                 
            	
            	
            	case SubCustAccountColumn.Actived:
            		return this.Actived.Value.CompareTo(rhs.Actived.Value);
            		
            		                 
            	
            	
            	case SubCustAccountColumn.LockAccountReason:
            		return this.LockAccountReason.Value.CompareTo(rhs.LockAccountReason.Value);
            		
            		                 
            	
            	
            	case SubCustAccountColumn.MainCustAccountId:
            		return this.MainCustAccountId.CompareTo(rhs.MainCustAccountId);
            		
            		                 
            	
            	
            	case SubCustAccountColumn.CreatedDate:
            		return this.CreatedDate.Value.CompareTo(rhs.CreatedDate.Value);
            		
            		                 
            	
            	
            	case SubCustAccountColumn.CreatedUser:
            		return this.CreatedUser.CompareTo(rhs.CreatedUser);
            		
            		                 
            	
            	
            	case SubCustAccountColumn.UpdatedDate:
            		return this.UpdatedDate.Value.CompareTo(rhs.UpdatedDate.Value);
            		
            		                 
            	
            	
            	case SubCustAccountColumn.UpdatedUser:
            		return this.UpdatedUser.CompareTo(rhs.UpdatedUser);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
        [ScriptIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<SubCustAccountKey> Members
		
		// member variable for the EntityId property
		private SubCustAccountKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
        [ScriptIgnore]
		public virtual SubCustAccountKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new SubCustAccountKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute(), ScriptIgnore()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
        [ScriptIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("SubCustAccount")
					.Append("|").Append( this.SubCustAccountId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{10}{9}- SubCustAccountId: {0}{9}- Name: {1}{9}- Actived: {2}{9}- LockAccountReason: {3}{9}- MainCustAccountId: {4}{9}- CreatedDate: {5}{9}- CreatedUser: {6}{9}- UpdatedDate: {7}{9}- UpdatedUser: {8}{9}{11}", 
				this.SubCustAccountId,
				(this.Name == null) ? string.Empty : this.Name.ToString(),
				(this.Actived == null) ? string.Empty : this.Actived.ToString(),
				(this.LockAccountReason == null) ? string.Empty : this.LockAccountReason.ToString(),
				(this.MainCustAccountId == null) ? string.Empty : this.MainCustAccountId.ToString(),
				(this.CreatedDate == null) ? string.Empty : this.CreatedDate.ToString(),
				(this.CreatedUser == null) ? string.Empty : this.CreatedUser.ToString(),
				(this.UpdatedDate == null) ? string.Empty : this.UpdatedDate.ToString(),
				(this.UpdatedUser == null) ? string.Empty : this.UpdatedUser.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'SubCustAccount' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class SubCustAccountEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// SubCustAccountID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "SubCustAccount"</remarks>
		public System.String SubCustAccountId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.String OriginalSubCustAccountId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// Name : 
		/// </summary>
		public System.String		  Name = null;
		
		/// <summary>
		/// Actived : 
		/// </summary>
		public System.Boolean?		  Actived = null;
		
		/// <summary>
		/// LockAccountReason : 
		/// </summary>
		public System.Int16?		  LockAccountReason = null;
		
		/// <summary>
		/// MainCustAccountID : 
		/// </summary>
		public System.String		  MainCustAccountId = null;
		
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		public System.DateTime?		  CreatedDate = null;
		
		/// <summary>
		/// CreatedUser : 
		/// </summary>
		public System.String		  CreatedUser = null;
		
		/// <summary>
		/// UpdatedDate : 
		/// </summary>
		public System.DateTime?		  UpdatedDate = null;
		
		/// <summary>
		/// UpdatedUser : 
		/// </summary>
		public System.String		  UpdatedUser = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private MainCustAccount _mainCustAccountIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="MainCustAccount"/>.
		/// </summary>
		/// <value>The source MainCustAccount for MainCustAccountId.</value>
		[XmlIgnore()]
        [ScriptIgnore()]
		[Browsable(false)]
		public virtual MainCustAccount MainCustAccountIdSource
      	{
            get { return this._mainCustAccountIdSource; }
            set { this._mainCustAccountIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region CustomerActionHistoryCollection
		
		private TList<CustomerActionHistory> _customerActionHistorySubCustAccountId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _customerActionHistorySubCustAccountId
		/// </summary>
		
		public TList<CustomerActionHistory> CustomerActionHistoryCollection
		{
			get
			{
				if (_customerActionHistorySubCustAccountId == null)
				{
				_customerActionHistorySubCustAccountId = new TList<CustomerActionHistory>();
				}
	
				return _customerActionHistorySubCustAccountId;
			}
			set { _customerActionHistorySubCustAccountId = value; }
		}
		
		#endregion

		#region SubCustAccountPermissionCollection
		
		private TList<SubCustAccountPermission> _subCustAccountPermissionSubCustAccountId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _subCustAccountPermissionSubCustAccountId
		/// </summary>
		
		public TList<SubCustAccountPermission> SubCustAccountPermissionCollection
		{
			get
			{
				if (_subCustAccountPermissionSubCustAccountId == null)
				{
				_subCustAccountPermissionSubCustAccountId = new TList<SubCustAccountPermission>();
				}
	
				return _subCustAccountPermissionSubCustAccountId;
			}
			set { _subCustAccountPermissionSubCustAccountId = value; }
		}
		
		#endregion

		#region CustServicesPermissionIdCustServicesPermissionCollection_From_SubCustAccountPermission
		
		private TList<CustServicesPermission> custServicesPermissionIdCustServicesPermissionCollectionFromSubCustAccountPermission;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table custServicesPermissionIdCustServicesPermissionCollectionFromSubCustAccountPermission
		/// </summary>
		
		public TList<CustServicesPermission> CustServicesPermissionIdCustServicesPermissionCollection_From_SubCustAccountPermission
		{
			get
			{
				if (custServicesPermissionIdCustServicesPermissionCollectionFromSubCustAccountPermission == null)
				{
				custServicesPermissionIdCustServicesPermissionCollectionFromSubCustAccountPermission = new TList<CustServicesPermission>();
				}
	
				return custServicesPermissionIdCustServicesPermissionCollectionFromSubCustAccountPermission;
			}
			set { custServicesPermissionIdCustServicesPermissionCollectionFromSubCustAccountPermission = value; }
		}
		
		#endregion 

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			SubCustAccountEntityData _tmp = new SubCustAccountEntityData();
						
			_tmp.SubCustAccountId = this.SubCustAccountId;
			_tmp.OriginalSubCustAccountId = this.OriginalSubCustAccountId;
			
			_tmp.Name = this.Name;
			_tmp.Actived = this.Actived;
			_tmp.LockAccountReason = this.LockAccountReason;
			_tmp.MainCustAccountId = this.MainCustAccountId;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.CreatedUser = this.CreatedUser;
			_tmp.UpdatedDate = this.UpdatedDate;
			_tmp.UpdatedUser = this.UpdatedUser;
			
			#region Source Parent Composite Entities
			if (this.MainCustAccountIdSource != null)
				_tmp.MainCustAccountIdSource = MakeCopyOf(this.MainCustAccountIdSource) as MainCustAccount;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._customerActionHistorySubCustAccountId != null)
				_tmp.CustomerActionHistoryCollection = (TList<CustomerActionHistory>) MakeCopyOf(this.CustomerActionHistoryCollection); 
			if (this._subCustAccountPermissionSubCustAccountId != null)
				_tmp.SubCustAccountPermissionCollection = (TList<SubCustAccountPermission>) MakeCopyOf(this.SubCustAccountPermissionCollection); 
			if (this.custServicesPermissionIdCustServicesPermissionCollectionFromSubCustAccountPermission != null)
				_tmp.CustServicesPermissionIdCustServicesPermissionCollection_From_SubCustAccountPermission = (TList<CustServicesPermission>) MakeCopyOf(this.CustServicesPermissionIdCustServicesPermissionCollection_From_SubCustAccountPermission); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			SubCustAccountEntityData _tmp = new SubCustAccountEntityData();
						
			_tmp.SubCustAccountId = this.SubCustAccountId;
			_tmp.OriginalSubCustAccountId = this.OriginalSubCustAccountId;
			
			_tmp.Name = this.Name;
			_tmp.Actived = this.Actived;
			_tmp.LockAccountReason = this.LockAccountReason;
			_tmp.MainCustAccountId = this.MainCustAccountId;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.CreatedUser = this.CreatedUser;
			_tmp.UpdatedDate = this.UpdatedDate;
			_tmp.UpdatedUser = this.UpdatedUser;
			
			#region Source Parent Composite Entities
			if (this.MainCustAccountIdSource != null && existingCopies.Contains(this.MainCustAccountIdSource))
				_tmp.MainCustAccountIdSource = existingCopies[this.MainCustAccountIdSource] as MainCustAccount;
			else
				_tmp.MainCustAccountIdSource = MakeCopyOf(this.MainCustAccountIdSource, existingCopies) as MainCustAccount;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.CustomerActionHistoryCollection = (TList<CustomerActionHistory>) MakeCopyOf(this.CustomerActionHistoryCollection, existingCopies); 
			_tmp.SubCustAccountPermissionCollection = (TList<SubCustAccountPermission>) MakeCopyOf(this.SubCustAccountPermissionCollection, existingCopies); 
			_tmp.CustServicesPermissionIdCustServicesPermissionCollection_From_SubCustAccountPermission = (TList<CustServicesPermission>) MakeCopyOf(this.CustServicesPermissionIdCustServicesPermissionCollection_From_SubCustAccountPermission, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SubCustAccountColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(SubCustAccountColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SubCustAccountColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(SubCustAccountColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SubCustAccountColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(SubCustAccountColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				SubCustAccountEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new SubCustAccountEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="SubCustAccountColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(SubCustAccountColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				SubCustAccountEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new SubCustAccountEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region SubCustAccountEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="SubCustAccount"/> object.
	/// </remarks>
	public class SubCustAccountEventArgs : System.EventArgs
	{
		private SubCustAccountColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the SubCustAccountEventArgs class.
		///</summary>
		public SubCustAccountEventArgs(SubCustAccountColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the SubCustAccountEventArgs class.
		///</summary>
		public SubCustAccountEventArgs(SubCustAccountColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The SubCustAccountColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="SubCustAccountColumn" />
		public SubCustAccountColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all SubCustAccount related events.
	///</summary>
	public delegate void SubCustAccountEventHandler(object sender, SubCustAccountEventArgs e);
	
	#region SubCustAccountComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class SubCustAccountComparer : System.Collections.Generic.IComparer<SubCustAccount>
	{
		SubCustAccountColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:SubCustAccountComparer"/> class.
        /// </summary>
		public SubCustAccountComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:SubCustAccountComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public SubCustAccountComparer(SubCustAccountColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="SubCustAccount"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="SubCustAccount"/> to compare.</param>
        /// <param name="b">The second <c>SubCustAccount</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(SubCustAccount a, SubCustAccount b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(SubCustAccount entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(SubCustAccount a, SubCustAccount b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public SubCustAccountColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region SubCustAccountKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="SubCustAccount"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class SubCustAccountKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the SubCustAccountKey class.
		/// </summary>
		public SubCustAccountKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the SubCustAccountKey class.
		/// </summary>
		public SubCustAccountKey(SubCustAccountBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.SubCustAccountId = entity.SubCustAccountId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the SubCustAccountKey class.
		/// </summary>
		public SubCustAccountKey(System.String _subCustAccountId)
		{
			#region Init Properties

			this.SubCustAccountId = _subCustAccountId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private SubCustAccountBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public SubCustAccountBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the SubCustAccountId property
		private System.String _subCustAccountId;
		
		/// <summary>
		/// Gets or sets the SubCustAccountId property.
		/// </summary>
		public System.String SubCustAccountId
		{
			get { return _subCustAccountId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.SubCustAccountId = value;
				
				_subCustAccountId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				SubCustAccountId = ( values["SubCustAccountId"] != null ) ? (System.String) EntityUtil.ChangeType(values["SubCustAccountId"], typeof(System.String)) : string.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("SubCustAccountId", SubCustAccountId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("SubCustAccountId: {0}{1}",
								SubCustAccountId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region SubCustAccountColumn Enum
	
	/// <summary>
	/// Enumerate the SubCustAccount columns.
	/// </summary>
	[Serializable]
	public enum SubCustAccountColumn : int
	{
		/// <summary>
		/// SubCustAccountId : 
		/// </summary>
		[EnumTextValue("SubCustAccountID")]
		[ColumnEnum("SubCustAccountID", typeof(System.String), System.Data.DbType.AnsiString, true, false, false, 20)]
		SubCustAccountId = 1,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Name = 2,
		/// <summary>
		/// Actived : 
		/// </summary>
		[EnumTextValue("Actived")]
		[ColumnEnum("Actived", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Actived = 3,
		/// <summary>
		/// LockAccountReason : 
		/// </summary>
		[EnumTextValue("LockAccountReason")]
		[ColumnEnum("LockAccountReason", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		LockAccountReason = 4,
		/// <summary>
		/// MainCustAccountId : 
		/// </summary>
		[EnumTextValue("MainCustAccountID")]
		[ColumnEnum("MainCustAccountID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MainCustAccountId = 5,
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		[EnumTextValue("CreatedDate")]
		[ColumnEnum("CreatedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreatedDate = 6,
		/// <summary>
		/// CreatedUser : 
		/// </summary>
		[EnumTextValue("CreatedUser")]
		[ColumnEnum("CreatedUser", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		CreatedUser = 7,
		/// <summary>
		/// UpdatedDate : 
		/// </summary>
		[EnumTextValue("UpdatedDate")]
		[ColumnEnum("UpdatedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		UpdatedDate = 8,
		/// <summary>
		/// UpdatedUser : 
		/// </summary>
		[EnumTextValue("UpdatedUser")]
		[ColumnEnum("UpdatedUser", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		UpdatedUser = 9
	}//End enum

	#endregion SubCustAccountColumn Enum

} // end namespace
