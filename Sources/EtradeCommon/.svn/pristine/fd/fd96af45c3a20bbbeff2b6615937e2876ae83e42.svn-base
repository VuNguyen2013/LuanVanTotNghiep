
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Monday, November 14, 2011
	Important: Do not modify this file. Edit the file MainCustAccount.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Web.Script.Serialization;

using AccountManager.Entities.Validation;
#endregion

namespace AccountManager.Entities
{
	///<summary>
	/// An object representation of the 'MainCustAccount' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class MainCustAccountBase : EntityBase, IMainCustAccount, IEntityId<MainCustAccountKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private MainCustAccountEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private MainCustAccountEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private MainCustAccountEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<MainCustAccount> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MainCustAccountEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event MainCustAccountEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="MainCustAccountBase"/> instance.
		///</summary>
		public MainCustAccountBase()
		{
			this.entityData = new MainCustAccountEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="MainCustAccountBase"/> instance.
		///</summary>
		///<param name="_mainCustAccountId">Main customer account id</param>
		///<param name="_fullName">Full customer name</param>
		///<param name="_email">Customer email</param>
		///<param name="_phone">Phone</param>
		///<param name="_actived">Is actived or not</param>
		///<param name="_password">Password</param>
		///<param name="_pin">Pin</param>
		///<param name="_passLockReason">Password lock reason</param>
		///<param name="_pinLockReason">Pin lock reason</param>
		///<param name="_lockReason">Account lock reason</param>
		///<param name="_tokenId">Token id</param>
		///<param name="_tokenName">Token name</param>
		///<param name="_tokenActived">Token is active or not</param>
		///<param name="_brokerId">Broker id</param>
		///<param name="_passIsNew">Password is new or not</param>
		///<param name="_pinIsNew">Pin is new or not</param>
		///<param name="_passExpDate">Password expired date</param>
		///<param name="_pinExpDate">Pin expired date</param>
		///<param name="_customerType">Customer type</param>
		///<param name="_authType">Authentication type</param>
		///<param name="_pinType">Pin type</param>
		///<param name="_languageId">Language id</param>
		///<param name="_failedLoginCount">Failed login count</param>
		///<param name="_failedLoginTime">Failed login times</param>
		///<param name="_createdDate">Customer created date</param>
		///<param name="_createdUser">Created User</param>
		///<param name="_updatedUser">Updated user</param>
		///<param name="_updatedDate">Updated date</param>
		public MainCustAccountBase(string _mainCustAccountId, string _fullName, string _email, 
			string _phone, bool _actived, string _password, string _pin, System.Int32? _passLockReason, 
			System.Int32? _pinLockReason, System.Int32? _lockReason, string _tokenId, string _tokenName, 
			string _tokenActived, string _brokerId, System.Boolean? _passIsNew, System.Boolean? _pinIsNew, 
			System.DateTime? _passExpDate, System.DateTime? _pinExpDate, int _customerType, 
			short _authType, short _pinType, System.String _languageId, System.Int32? _failedLoginCount, 
			System.DateTime? _failedLoginTime, System.DateTime _createdDate, string _createdUser, 
			string _updatedUser, System.DateTime? _updatedDate)
		{
			this.entityData = new MainCustAccountEntityData();
			this.backupData = null;

			this.MainCustAccountId = _mainCustAccountId;
			this.FullName = _fullName;
			this.Email = _email;
			this.Phone = _phone;
			this.Actived = _actived;
			this.Password = _password;
			this.Pin = _pin;
			this.PassLockReason = _passLockReason;
			this.PinLockReason = _pinLockReason;
			this.LockReason = _lockReason;
			this.TokenId = _tokenId;
			this.TokenName = _tokenName;
			this.TokenActived = _tokenActived;
			this.BrokerId = _brokerId;
			this.PassIsNew = _passIsNew;
			this.PinIsNew = _pinIsNew;
			this.PassExpDate = _passExpDate;
			this.PinExpDate = _pinExpDate;
			this.CustomerType = _customerType;
			this.AuthType = _authType;
			this.PinType = _pinType;
			this.LanguageId = _languageId;
			this.FailedLoginCount = _failedLoginCount;
			this.FailedLoginTime = _failedLoginTime;
			this.CreatedDate = _createdDate;
			this.CreatedUser = _createdUser;
			this.UpdatedUser = _updatedUser;
			this.UpdatedDate = _updatedDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="MainCustAccount"/> instance.
		///</summary>
		///<param name="_mainCustAccountId">Main customer account id</param>
		///<param name="_fullName">Full customer name</param>
		///<param name="_email">Customer email</param>
		///<param name="_phone">Phone</param>
		///<param name="_actived">Is actived or not</param>
		///<param name="_password">Password</param>
		///<param name="_pin">Pin</param>
		///<param name="_passLockReason">Password lock reason</param>
		///<param name="_pinLockReason">Pin lock reason</param>
		///<param name="_lockReason">Account lock reason</param>
		///<param name="_tokenId">Token id</param>
		///<param name="_tokenName">Token name</param>
		///<param name="_tokenActived">Token is active or not</param>
		///<param name="_brokerId">Broker id</param>
		///<param name="_passIsNew">Password is new or not</param>
		///<param name="_pinIsNew">Pin is new or not</param>
		///<param name="_passExpDate">Password expired date</param>
		///<param name="_pinExpDate">Pin expired date</param>
		///<param name="_customerType">Customer type</param>
		///<param name="_authType">Authentication type</param>
		///<param name="_pinType">Pin type</param>
		///<param name="_languageId">Language id</param>
		///<param name="_failedLoginCount">Failed login count</param>
		///<param name="_failedLoginTime">Failed login times</param>
		///<param name="_createdDate">Customer created date</param>
		///<param name="_createdUser">Created User</param>
		///<param name="_updatedUser">Updated user</param>
		///<param name="_updatedDate">Updated date</param>
		public static MainCustAccount CreateMainCustAccount(string _mainCustAccountId, string _fullName, string _email, 
			string _phone, bool _actived, string _password, string _pin, System.Int32? _passLockReason, 
			System.Int32? _pinLockReason, System.Int32? _lockReason, string _tokenId, string _tokenName, 
			string _tokenActived, string _brokerId, System.Boolean? _passIsNew, System.Boolean? _pinIsNew, 
			System.DateTime? _passExpDate, System.DateTime? _pinExpDate, int _customerType, 
			short _authType, short _pinType, System.String _languageId, System.Int32? _failedLoginCount, 
			System.DateTime? _failedLoginTime, System.DateTime _createdDate, string _createdUser, 
			string _updatedUser, System.DateTime? _updatedDate)
		{
			MainCustAccount newMainCustAccount = new MainCustAccount();
			newMainCustAccount.MainCustAccountId = _mainCustAccountId;
			newMainCustAccount.FullName = _fullName;
			newMainCustAccount.Email = _email;
			newMainCustAccount.Phone = _phone;
			newMainCustAccount.Actived = _actived;
			newMainCustAccount.Password = _password;
			newMainCustAccount.Pin = _pin;
			newMainCustAccount.PassLockReason = _passLockReason;
			newMainCustAccount.PinLockReason = _pinLockReason;
			newMainCustAccount.LockReason = _lockReason;
			newMainCustAccount.TokenId = _tokenId;
			newMainCustAccount.TokenName = _tokenName;
			newMainCustAccount.TokenActived = _tokenActived;
			newMainCustAccount.BrokerId = _brokerId;
			newMainCustAccount.PassIsNew = _passIsNew;
			newMainCustAccount.PinIsNew = _pinIsNew;
			newMainCustAccount.PassExpDate = _passExpDate;
			newMainCustAccount.PinExpDate = _pinExpDate;
			newMainCustAccount.CustomerType = _customerType;
			newMainCustAccount.AuthType = _authType;
			newMainCustAccount.PinType = _pinType;
			newMainCustAccount.LanguageId = _languageId;
			newMainCustAccount.FailedLoginCount = _failedLoginCount;
			newMainCustAccount.FailedLoginTime = _failedLoginTime;
			newMainCustAccount.CreatedDate = _createdDate;
			newMainCustAccount.CreatedUser = _createdUser;
			newMainCustAccount.UpdatedUser = _updatedUser;
			newMainCustAccount.UpdatedDate = _updatedDate;
			return newMainCustAccount;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the MainCustAccountId property. 
		///		Main customer account id
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Main customer account id"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 20)]
		public virtual string MainCustAccountId
		{
			get
			{
				return this.entityData.MainCustAccountId; 
			}
			
			set
			{
				if (this.entityData.MainCustAccountId == value)
					return;
					
				OnColumnChanging(MainCustAccountColumn.MainCustAccountId, this.entityData.MainCustAccountId);
				this.entityData.MainCustAccountId = value;
				this.EntityId.MainCustAccountId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MainCustAccountColumn.MainCustAccountId, this.entityData.MainCustAccountId);
				OnPropertyChanged("MainCustAccountId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the MainCustAccountID property.
		///		Main customer account id
		/// </summary>
		/// <remarks>This is the original value of the MainCustAccountID property.</remarks>
		/// <value>This type is varchar</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual string OriginalMainCustAccountId
		{
			get { return this.entityData.OriginalMainCustAccountId; }
			set { this.entityData.OriginalMainCustAccountId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the FullName property. 
		///		Full customer name
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Full customer name"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual string FullName
		{
			get
			{
				return this.entityData.FullName; 
			}
			
			set
			{
				if (this.entityData.FullName == value)
					return;
					
				OnColumnChanging(MainCustAccountColumn.FullName, this.entityData.FullName);
				this.entityData.FullName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MainCustAccountColumn.FullName, this.entityData.FullName);
				OnPropertyChanged("FullName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Email property. 
		///		Customer email
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Customer email"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual string Email
		{
			get
			{
				return this.entityData.Email; 
			}
			
			set
			{
				if (this.entityData.Email == value)
					return;
					
				OnColumnChanging(MainCustAccountColumn.Email, this.entityData.Email);
				this.entityData.Email = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MainCustAccountColumn.Email, this.entityData.Email);
				OnPropertyChanged("Email");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Phone property. 
		///		Phone
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Phone"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual string Phone
		{
			get
			{
				return this.entityData.Phone; 
			}
			
			set
			{
				if (this.entityData.Phone == value)
					return;
					
				OnColumnChanging(MainCustAccountColumn.Phone, this.entityData.Phone);
				this.entityData.Phone = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MainCustAccountColumn.Phone, this.entityData.Phone);
				OnPropertyChanged("Phone");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Actived property. 
		///		Is actived or not
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Is actived or not"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual bool Actived
		{
			get
			{
				return this.entityData.Actived; 
			}
			
			set
			{
				if (this.entityData.Actived == value)
					return;
					
				OnColumnChanging(MainCustAccountColumn.Actived, this.entityData.Actived);
				this.entityData.Actived = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MainCustAccountColumn.Actived, this.entityData.Actived);
				OnPropertyChanged("Actived");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Password property. 
		///		Password
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Password"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual string Password
		{
			get
			{
				return this.entityData.Password; 
			}
			
			set
			{
				if (this.entityData.Password == value)
					return;
					
				OnColumnChanging(MainCustAccountColumn.Password, this.entityData.Password);
				this.entityData.Password = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MainCustAccountColumn.Password, this.entityData.Password);
				OnPropertyChanged("Password");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Pin property. 
		///		Pin
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Pin"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual string Pin
		{
			get
			{
				return this.entityData.Pin; 
			}
			
			set
			{
				if (this.entityData.Pin == value)
					return;
					
				OnColumnChanging(MainCustAccountColumn.Pin, this.entityData.Pin);
				this.entityData.Pin = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MainCustAccountColumn.Pin, this.entityData.Pin);
				OnPropertyChanged("Pin");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PassLockReason property. 
		///		Password lock reason
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsPassLockReasonNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Password lock reason"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? PassLockReason
		{
			get
			{
				return this.entityData.PassLockReason; 
			}
			
			set
			{
				if (this.entityData.PassLockReason == value)
					return;
					
				OnColumnChanging(MainCustAccountColumn.PassLockReason, this.entityData.PassLockReason);
				this.entityData.PassLockReason = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MainCustAccountColumn.PassLockReason, this.entityData.PassLockReason);
				OnPropertyChanged("PassLockReason");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PinLockReason property. 
		///		Pin lock reason
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsPinLockReasonNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Pin lock reason"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? PinLockReason
		{
			get
			{
				return this.entityData.PinLockReason; 
			}
			
			set
			{
				if (this.entityData.PinLockReason == value)
					return;
					
				OnColumnChanging(MainCustAccountColumn.PinLockReason, this.entityData.PinLockReason);
				this.entityData.PinLockReason = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MainCustAccountColumn.PinLockReason, this.entityData.PinLockReason);
				OnPropertyChanged("PinLockReason");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LockReason property. 
		///		Account lock reason
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLockReasonNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Account lock reason"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LockReason
		{
			get
			{
				return this.entityData.LockReason; 
			}
			
			set
			{
				if (this.entityData.LockReason == value)
					return;
					
				OnColumnChanging(MainCustAccountColumn.LockReason, this.entityData.LockReason);
				this.entityData.LockReason = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MainCustAccountColumn.LockReason, this.entityData.LockReason);
				OnPropertyChanged("LockReason");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TokenId property. 
		///		Token id
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Token id"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual string TokenId
		{
			get
			{
				return this.entityData.TokenId; 
			}
			
			set
			{
				if (this.entityData.TokenId == value)
					return;
					
				OnColumnChanging(MainCustAccountColumn.TokenId, this.entityData.TokenId);
				this.entityData.TokenId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MainCustAccountColumn.TokenId, this.entityData.TokenId);
				OnPropertyChanged("TokenId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TokenName property. 
		///		Token name
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Token name"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual string TokenName
		{
			get
			{
				return this.entityData.TokenName; 
			}
			
			set
			{
				if (this.entityData.TokenName == value)
					return;
					
				OnColumnChanging(MainCustAccountColumn.TokenName, this.entityData.TokenName);
				this.entityData.TokenName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MainCustAccountColumn.TokenName, this.entityData.TokenName);
				OnPropertyChanged("TokenName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TokenActived property. 
		///		Token is active or not
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Token is active or not"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual string TokenActived
		{
			get
			{
				return this.entityData.TokenActived; 
			}
			
			set
			{
				if (this.entityData.TokenActived == value)
					return;
					
				OnColumnChanging(MainCustAccountColumn.TokenActived, this.entityData.TokenActived);
				this.entityData.TokenActived = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MainCustAccountColumn.TokenActived, this.entityData.TokenActived);
				OnPropertyChanged("TokenActived");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BrokerId property. 
		///		Broker id
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Broker id"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual string BrokerId
		{
			get
			{
				return this.entityData.BrokerId; 
			}
			
			set
			{
				if (this.entityData.BrokerId == value)
					return;
					
				OnColumnChanging(MainCustAccountColumn.BrokerId, this.entityData.BrokerId);
				this.entityData.BrokerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MainCustAccountColumn.BrokerId, this.entityData.BrokerId);
				OnPropertyChanged("BrokerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PassIsNew property. 
		///		Password is new or not
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsPassIsNewNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Password is new or not"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? PassIsNew
		{
			get
			{
				return this.entityData.PassIsNew; 
			}
			
			set
			{
				if (this.entityData.PassIsNew == value)
					return;
					
				OnColumnChanging(MainCustAccountColumn.PassIsNew, this.entityData.PassIsNew);
				this.entityData.PassIsNew = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MainCustAccountColumn.PassIsNew, this.entityData.PassIsNew);
				OnPropertyChanged("PassIsNew");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PinIsNew property. 
		///		Pin is new or not
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsPinIsNewNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Pin is new or not"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? PinIsNew
		{
			get
			{
				return this.entityData.PinIsNew; 
			}
			
			set
			{
				if (this.entityData.PinIsNew == value)
					return;
					
				OnColumnChanging(MainCustAccountColumn.PinIsNew, this.entityData.PinIsNew);
				this.entityData.PinIsNew = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MainCustAccountColumn.PinIsNew, this.entityData.PinIsNew);
				OnPropertyChanged("PinIsNew");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PassExpDate property. 
		///		Password expired date
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsPassExpDateNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Password expired date"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? PassExpDate
		{
			get
			{
				return this.entityData.PassExpDate; 
			}
			
			set
			{
				if (this.entityData.PassExpDate == value)
					return;
					
				OnColumnChanging(MainCustAccountColumn.PassExpDate, this.entityData.PassExpDate);
				this.entityData.PassExpDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MainCustAccountColumn.PassExpDate, this.entityData.PassExpDate);
				OnPropertyChanged("PassExpDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PinExpDate property. 
		///		Pin expired date
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsPinExpDateNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Pin expired date"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? PinExpDate
		{
			get
			{
				return this.entityData.PinExpDate; 
			}
			
			set
			{
				if (this.entityData.PinExpDate == value)
					return;
					
				OnColumnChanging(MainCustAccountColumn.PinExpDate, this.entityData.PinExpDate);
				this.entityData.PinExpDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MainCustAccountColumn.PinExpDate, this.entityData.PinExpDate);
				OnPropertyChanged("PinExpDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CustomerType property. 
		///		Customer type
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Customer type"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual int CustomerType
		{
			get
			{
				return this.entityData.CustomerType; 
			}
			
			set
			{
				if (this.entityData.CustomerType == value)
					return;
					
				OnColumnChanging(MainCustAccountColumn.CustomerType, this.entityData.CustomerType);
				this.entityData.CustomerType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MainCustAccountColumn.CustomerType, this.entityData.CustomerType);
				OnPropertyChanged("CustomerType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AuthType property. 
		///		Authentication type
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Authentication type"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual short AuthType
		{
			get
			{
				return this.entityData.AuthType; 
			}
			
			set
			{
				if (this.entityData.AuthType == value)
					return;
					
				OnColumnChanging(MainCustAccountColumn.AuthType, this.entityData.AuthType);
				this.entityData.AuthType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MainCustAccountColumn.AuthType, this.entityData.AuthType);
				OnPropertyChanged("AuthType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PinType property. 
		///		Pin type
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Pin type"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual short PinType
		{
			get
			{
				return this.entityData.PinType; 
			}
			
			set
			{
				if (this.entityData.PinType == value)
					return;
					
				OnColumnChanging(MainCustAccountColumn.PinType, this.entityData.PinType);
				this.entityData.PinType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MainCustAccountColumn.PinType, this.entityData.PinType);
				OnPropertyChanged("PinType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LanguageId property. 
		///		Language id
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Language id"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String LanguageId
		{
			get
			{
				return this.entityData.LanguageId; 
			}
			
			set
			{
				if (this.entityData.LanguageId == value)
					return;
					
				OnColumnChanging(MainCustAccountColumn.LanguageId, this.entityData.LanguageId);
				this.entityData.LanguageId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MainCustAccountColumn.LanguageId, this.entityData.LanguageId);
				OnPropertyChanged("LanguageId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FailedLoginCount property. 
		///		Failed login count
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsFailedLoginCountNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Failed login count"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? FailedLoginCount
		{
			get
			{
				return this.entityData.FailedLoginCount; 
			}
			
			set
			{
				if (this.entityData.FailedLoginCount == value)
					return;
					
				OnColumnChanging(MainCustAccountColumn.FailedLoginCount, this.entityData.FailedLoginCount);
				this.entityData.FailedLoginCount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MainCustAccountColumn.FailedLoginCount, this.entityData.FailedLoginCount);
				OnPropertyChanged("FailedLoginCount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FailedLoginTime property. 
		///		Failed login times
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsFailedLoginTimeNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Failed login times"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? FailedLoginTime
		{
			get
			{
				return this.entityData.FailedLoginTime; 
			}
			
			set
			{
				if (this.entityData.FailedLoginTime == value)
					return;
					
				OnColumnChanging(MainCustAccountColumn.FailedLoginTime, this.entityData.FailedLoginTime);
				this.entityData.FailedLoginTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MainCustAccountColumn.FailedLoginTime, this.entityData.FailedLoginTime);
				OnPropertyChanged("FailedLoginTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedDate property. 
		///		Customer created date
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Customer created date"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime CreatedDate
		{
			get
			{
				return this.entityData.CreatedDate; 
			}
			
			set
			{
				if (this.entityData.CreatedDate == value)
					return;
					
				OnColumnChanging(MainCustAccountColumn.CreatedDate, this.entityData.CreatedDate);
				this.entityData.CreatedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MainCustAccountColumn.CreatedDate, this.entityData.CreatedDate);
				OnPropertyChanged("CreatedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedUser property. 
		///		Created User
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Created User"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual string CreatedUser
		{
			get
			{
				return this.entityData.CreatedUser; 
			}
			
			set
			{
				if (this.entityData.CreatedUser == value)
					return;
					
				OnColumnChanging(MainCustAccountColumn.CreatedUser, this.entityData.CreatedUser);
				this.entityData.CreatedUser = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MainCustAccountColumn.CreatedUser, this.entityData.CreatedUser);
				OnPropertyChanged("CreatedUser");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdatedUser property. 
		///		Updated user
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Updated user"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual string UpdatedUser
		{
			get
			{
				return this.entityData.UpdatedUser; 
			}
			
			set
			{
				if (this.entityData.UpdatedUser == value)
					return;
					
				OnColumnChanging(MainCustAccountColumn.UpdatedUser, this.entityData.UpdatedUser);
				this.entityData.UpdatedUser = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MainCustAccountColumn.UpdatedUser, this.entityData.UpdatedUser);
				OnPropertyChanged("UpdatedUser");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdatedDate property. 
		///		Updated date
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsUpdatedDateNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Updated date"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? UpdatedDate
		{
			get
			{
				return this.entityData.UpdatedDate; 
			}
			
			set
			{
				if (this.entityData.UpdatedDate == value)
					return;
					
				OnColumnChanging(MainCustAccountColumn.UpdatedDate, this.entityData.UpdatedDate);
				this.entityData.UpdatedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(MainCustAccountColumn.UpdatedDate, this.entityData.UpdatedDate);
				OnPropertyChanged("UpdatedDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="BrokerAccount"/>.
		/// </summary>
		/// <value>The source BrokerAccount for BrokerId.</value>
        [XmlIgnore()]
        [ScriptIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual BrokerAccount BrokerIdSource
      	{
            get { return entityData.BrokerIdSource; }
            set { entityData.BrokerIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of SubCustAccount objects
		///	which are related to this object through the relation FK_SubCustAccount_MainCustAccount
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<SubCustAccount> SubCustAccountCollection
		{
			get { return entityData.SubCustAccountCollection; }
			set { entityData.SubCustAccountCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CustomerActionHistory objects
		///	which are related to this object through the relation FK_CustomerActionHistory_MainCustAccount
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CustomerActionHistory> CustomerActionHistoryCollection
		{
			get { return entityData.CustomerActionHistoryCollection; }
			set { entityData.CustomerActionHistoryCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("MainCustAccountId", "Main Cust Account Id"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MainCustAccountId", "Main Cust Account Id", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("FullName", "Full Name", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Email", "Email", 30));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Phone", "Phone", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Password", "Password", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Pin", "Pin", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TokenId", "Token Id", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TokenName", "Token Name", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("TokenActived", "Token Actived", 10));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("BrokerId", "Broker Id", 20));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("LanguageId", "Language Id"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("LanguageId", "Language Id", 10));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("CreatedUser", "Created User"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CreatedUser", "Created User", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UpdatedUser", "Updated User", 20));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public override string TableName
		{
			get { return "MainCustAccount"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"MainCustAccountID", "FullName", "Email", "Phone", "Actived", "Password", "PIN", "PassLockReason", "PINLockReason", "LockReason", "TokenID", "TokenName", "TokenActived", "BrokerID", "PassIsNew", "PINIsNew", "PassExpDate", "PINExpDate", "CustomerType", "AuthType", "PinType", "LanguageId", "FailedLoginCount", "FailedLoginTime", "CreatedDate", "CreatedUser", "UpdatedUser", "UpdatedDate"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as MainCustAccountEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (MainCustAccount) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
        [ScriptIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<MainCustAccount>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as MainCustAccount);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed MainCustAccount Entity 
		///</summary>
		protected virtual MainCustAccount Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			MainCustAccount copy = new MainCustAccount();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.MainCustAccountId = this.MainCustAccountId;
					copy.OriginalMainCustAccountId = this.OriginalMainCustAccountId;
				copy.FullName = this.FullName;
				copy.Email = this.Email;
				copy.Phone = this.Phone;
				copy.Actived = this.Actived;
				copy.Password = this.Password;
				copy.Pin = this.Pin;
				copy.PassLockReason = this.PassLockReason;
				copy.PinLockReason = this.PinLockReason;
				copy.LockReason = this.LockReason;
				copy.TokenId = this.TokenId;
				copy.TokenName = this.TokenName;
				copy.TokenActived = this.TokenActived;
				copy.BrokerId = this.BrokerId;
				copy.PassIsNew = this.PassIsNew;
				copy.PinIsNew = this.PinIsNew;
				copy.PassExpDate = this.PassExpDate;
				copy.PinExpDate = this.PinExpDate;
				copy.CustomerType = this.CustomerType;
				copy.AuthType = this.AuthType;
				copy.PinType = this.PinType;
				copy.LanguageId = this.LanguageId;
				copy.FailedLoginCount = this.FailedLoginCount;
				copy.FailedLoginTime = this.FailedLoginTime;
				copy.CreatedDate = this.CreatedDate;
				copy.CreatedUser = this.CreatedUser;
				copy.UpdatedUser = this.UpdatedUser;
				copy.UpdatedDate = this.UpdatedDate;
			
			if (this.BrokerIdSource != null && existingCopies.Contains(this.BrokerIdSource))
				copy.BrokerIdSource = existingCopies[this.BrokerIdSource] as BrokerAccount;
			else
				copy.BrokerIdSource = MakeCopyOf(this.BrokerIdSource, existingCopies) as BrokerAccount;
		
			//deep copy nested objects
			copy.SubCustAccountCollection = (TList<SubCustAccount>) MakeCopyOf(this.SubCustAccountCollection, existingCopies); 
			copy.CustomerActionHistoryCollection = (TList<CustomerActionHistory>) MakeCopyOf(this.CustomerActionHistoryCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed MainCustAccount Entity 
		///</summary>
		public virtual MainCustAccount Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed MainCustAccount Entity which is a deep copy of the current entity.
		///</summary>
		public virtual MainCustAccount DeepCopy()
		{
			return EntityHelper.Clone<MainCustAccount>(this as MainCustAccount);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as MainCustAccountEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new MainCustAccountEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as MainCustAccountEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(MainCustAccountColumn column)
		{
			switch(column)
			{
					case MainCustAccountColumn.MainCustAccountId:
					return entityData.MainCustAccountId != _originalData.MainCustAccountId;
					case MainCustAccountColumn.FullName:
					return entityData.FullName != _originalData.FullName;
					case MainCustAccountColumn.Email:
					return entityData.Email != _originalData.Email;
					case MainCustAccountColumn.Phone:
					return entityData.Phone != _originalData.Phone;
					case MainCustAccountColumn.Actived:
					return entityData.Actived != _originalData.Actived;
					case MainCustAccountColumn.Password:
					return entityData.Password != _originalData.Password;
					case MainCustAccountColumn.Pin:
					return entityData.Pin != _originalData.Pin;
					case MainCustAccountColumn.PassLockReason:
					return entityData.PassLockReason != _originalData.PassLockReason;
					case MainCustAccountColumn.PinLockReason:
					return entityData.PinLockReason != _originalData.PinLockReason;
					case MainCustAccountColumn.LockReason:
					return entityData.LockReason != _originalData.LockReason;
					case MainCustAccountColumn.TokenId:
					return entityData.TokenId != _originalData.TokenId;
					case MainCustAccountColumn.TokenName:
					return entityData.TokenName != _originalData.TokenName;
					case MainCustAccountColumn.TokenActived:
					return entityData.TokenActived != _originalData.TokenActived;
					case MainCustAccountColumn.BrokerId:
					return entityData.BrokerId != _originalData.BrokerId;
					case MainCustAccountColumn.PassIsNew:
					return entityData.PassIsNew != _originalData.PassIsNew;
					case MainCustAccountColumn.PinIsNew:
					return entityData.PinIsNew != _originalData.PinIsNew;
					case MainCustAccountColumn.PassExpDate:
					return entityData.PassExpDate != _originalData.PassExpDate;
					case MainCustAccountColumn.PinExpDate:
					return entityData.PinExpDate != _originalData.PinExpDate;
					case MainCustAccountColumn.CustomerType:
					return entityData.CustomerType != _originalData.CustomerType;
					case MainCustAccountColumn.AuthType:
					return entityData.AuthType != _originalData.AuthType;
					case MainCustAccountColumn.PinType:
					return entityData.PinType != _originalData.PinType;
					case MainCustAccountColumn.LanguageId:
					return entityData.LanguageId != _originalData.LanguageId;
					case MainCustAccountColumn.FailedLoginCount:
					return entityData.FailedLoginCount != _originalData.FailedLoginCount;
					case MainCustAccountColumn.FailedLoginTime:
					return entityData.FailedLoginTime != _originalData.FailedLoginTime;
					case MainCustAccountColumn.CreatedDate:
					return entityData.CreatedDate != _originalData.CreatedDate;
					case MainCustAccountColumn.CreatedUser:
					return entityData.CreatedUser != _originalData.CreatedUser;
					case MainCustAccountColumn.UpdatedUser:
					return entityData.UpdatedUser != _originalData.UpdatedUser;
					case MainCustAccountColumn.UpdatedDate:
					return entityData.UpdatedDate != _originalData.UpdatedDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< MainCustAccountColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.MainCustAccountId != _originalData.MainCustAccountId;
			result = result || entityData.FullName != _originalData.FullName;
			result = result || entityData.Email != _originalData.Email;
			result = result || entityData.Phone != _originalData.Phone;
			result = result || entityData.Actived != _originalData.Actived;
			result = result || entityData.Password != _originalData.Password;
			result = result || entityData.Pin != _originalData.Pin;
			result = result || entityData.PassLockReason != _originalData.PassLockReason;
			result = result || entityData.PinLockReason != _originalData.PinLockReason;
			result = result || entityData.LockReason != _originalData.LockReason;
			result = result || entityData.TokenId != _originalData.TokenId;
			result = result || entityData.TokenName != _originalData.TokenName;
			result = result || entityData.TokenActived != _originalData.TokenActived;
			result = result || entityData.BrokerId != _originalData.BrokerId;
			result = result || entityData.PassIsNew != _originalData.PassIsNew;
			result = result || entityData.PinIsNew != _originalData.PinIsNew;
			result = result || entityData.PassExpDate != _originalData.PassExpDate;
			result = result || entityData.PinExpDate != _originalData.PinExpDate;
			result = result || entityData.CustomerType != _originalData.CustomerType;
			result = result || entityData.AuthType != _originalData.AuthType;
			result = result || entityData.PinType != _originalData.PinType;
			result = result || entityData.LanguageId != _originalData.LanguageId;
			result = result || entityData.FailedLoginCount != _originalData.FailedLoginCount;
			result = result || entityData.FailedLoginTime != _originalData.FailedLoginTime;
			result = result || entityData.CreatedDate != _originalData.CreatedDate;
			result = result || entityData.CreatedUser != _originalData.CreatedUser;
			result = result || entityData.UpdatedUser != _originalData.UpdatedUser;
			result = result || entityData.UpdatedDate != _originalData.UpdatedDate;
			return result;
		}	
		
		///<summary>
		///  Returns a MainCustAccount Entity with the original data.
		///</summary>
		public MainCustAccount GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateMainCustAccount(
				_originalData.MainCustAccountId,
				_originalData.FullName,
				_originalData.Email,
				_originalData.Phone,
				_originalData.Actived,
				_originalData.Password,
				_originalData.Pin,
				_originalData.PassLockReason,
				_originalData.PinLockReason,
				_originalData.LockReason,
				_originalData.TokenId,
				_originalData.TokenName,
				_originalData.TokenActived,
				_originalData.BrokerId,
				_originalData.PassIsNew,
				_originalData.PinIsNew,
				_originalData.PassExpDate,
				_originalData.PinExpDate,
				_originalData.CustomerType,
				_originalData.AuthType,
				_originalData.PinType,
				_originalData.LanguageId,
				_originalData.FailedLoginCount,
				_originalData.FailedLoginTime,
				_originalData.CreatedDate,
				_originalData.CreatedUser,
				_originalData.UpdatedUser,
				_originalData.UpdatedDate
				);
				
			return (MainCustAccount)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="MainCustAccountBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is MainCustAccountBase)
				return ValueEquals(this, (MainCustAccountBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="MainCustAccountBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.MainCustAccountId.GetHashCode() ^ 
					((this.FullName == null) ? string.Empty : this.FullName.ToString()).GetHashCode() ^ 
					((this.Email == null) ? string.Empty : this.Email.ToString()).GetHashCode() ^ 
					((this.Phone == null) ? string.Empty : this.Phone.ToString()).GetHashCode() ^ 
					this.Actived.GetHashCode() ^ 
					((this.Password == null) ? string.Empty : this.Password.ToString()).GetHashCode() ^ 
					((this.Pin == null) ? string.Empty : this.Pin.ToString()).GetHashCode() ^ 
					((this.PassLockReason == null) ? string.Empty : this.PassLockReason.ToString()).GetHashCode() ^ 
					((this.PinLockReason == null) ? string.Empty : this.PinLockReason.ToString()).GetHashCode() ^ 
					((this.LockReason == null) ? string.Empty : this.LockReason.ToString()).GetHashCode() ^ 
					((this.TokenId == null) ? string.Empty : this.TokenId.ToString()).GetHashCode() ^ 
					((this.TokenName == null) ? string.Empty : this.TokenName.ToString()).GetHashCode() ^ 
					((this.TokenActived == null) ? string.Empty : this.TokenActived.ToString()).GetHashCode() ^ 
					((this.BrokerId == null) ? string.Empty : this.BrokerId.ToString()).GetHashCode() ^ 
					((this.PassIsNew == null) ? string.Empty : this.PassIsNew.ToString()).GetHashCode() ^ 
					((this.PinIsNew == null) ? string.Empty : this.PinIsNew.ToString()).GetHashCode() ^ 
					((this.PassExpDate == null) ? string.Empty : this.PassExpDate.ToString()).GetHashCode() ^ 
					((this.PinExpDate == null) ? string.Empty : this.PinExpDate.ToString()).GetHashCode() ^ 
					this.CustomerType.GetHashCode() ^ 
					this.AuthType.GetHashCode() ^ 
					this.PinType.GetHashCode() ^ 
					this.LanguageId.GetHashCode() ^ 
					((this.FailedLoginCount == null) ? string.Empty : this.FailedLoginCount.ToString()).GetHashCode() ^ 
					((this.FailedLoginTime == null) ? string.Empty : this.FailedLoginTime.ToString()).GetHashCode() ^ 
					this.CreatedDate.GetHashCode() ^ 
					this.CreatedUser.GetHashCode() ^ 
					((this.UpdatedUser == null) ? string.Empty : this.UpdatedUser.ToString()).GetHashCode() ^ 
					((this.UpdatedDate == null) ? string.Empty : this.UpdatedDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="MainCustAccountBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(MainCustAccountBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="MainCustAccountBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="MainCustAccountBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="MainCustAccountBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(MainCustAccountBase Object1, MainCustAccountBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.MainCustAccountId != Object2.MainCustAccountId)
				equal = false;
			if ( Object1.FullName != null && Object2.FullName != null )
			{
				if (Object1.FullName != Object2.FullName)
					equal = false;
			}
			else if (Object1.FullName == null ^ Object2.FullName == null )
			{
				equal = false;
			}
			if ( Object1.Email != null && Object2.Email != null )
			{
				if (Object1.Email != Object2.Email)
					equal = false;
			}
			else if (Object1.Email == null ^ Object2.Email == null )
			{
				equal = false;
			}
			if ( Object1.Phone != null && Object2.Phone != null )
			{
				if (Object1.Phone != Object2.Phone)
					equal = false;
			}
			else if (Object1.Phone == null ^ Object2.Phone == null )
			{
				equal = false;
			}
			if (Object1.Actived != Object2.Actived)
				equal = false;
			if ( Object1.Password != null && Object2.Password != null )
			{
				if (Object1.Password != Object2.Password)
					equal = false;
			}
			else if (Object1.Password == null ^ Object2.Password == null )
			{
				equal = false;
			}
			if ( Object1.Pin != null && Object2.Pin != null )
			{
				if (Object1.Pin != Object2.Pin)
					equal = false;
			}
			else if (Object1.Pin == null ^ Object2.Pin == null )
			{
				equal = false;
			}
			if ( Object1.PassLockReason != null && Object2.PassLockReason != null )
			{
				if (Object1.PassLockReason != Object2.PassLockReason)
					equal = false;
			}
			else if (Object1.PassLockReason == null ^ Object2.PassLockReason == null )
			{
				equal = false;
			}
			if ( Object1.PinLockReason != null && Object2.PinLockReason != null )
			{
				if (Object1.PinLockReason != Object2.PinLockReason)
					equal = false;
			}
			else if (Object1.PinLockReason == null ^ Object2.PinLockReason == null )
			{
				equal = false;
			}
			if ( Object1.LockReason != null && Object2.LockReason != null )
			{
				if (Object1.LockReason != Object2.LockReason)
					equal = false;
			}
			else if (Object1.LockReason == null ^ Object2.LockReason == null )
			{
				equal = false;
			}
			if ( Object1.TokenId != null && Object2.TokenId != null )
			{
				if (Object1.TokenId != Object2.TokenId)
					equal = false;
			}
			else if (Object1.TokenId == null ^ Object2.TokenId == null )
			{
				equal = false;
			}
			if ( Object1.TokenName != null && Object2.TokenName != null )
			{
				if (Object1.TokenName != Object2.TokenName)
					equal = false;
			}
			else if (Object1.TokenName == null ^ Object2.TokenName == null )
			{
				equal = false;
			}
			if ( Object1.TokenActived != null && Object2.TokenActived != null )
			{
				if (Object1.TokenActived != Object2.TokenActived)
					equal = false;
			}
			else if (Object1.TokenActived == null ^ Object2.TokenActived == null )
			{
				equal = false;
			}
			if ( Object1.BrokerId != null && Object2.BrokerId != null )
			{
				if (Object1.BrokerId != Object2.BrokerId)
					equal = false;
			}
			else if (Object1.BrokerId == null ^ Object2.BrokerId == null )
			{
				equal = false;
			}
			if ( Object1.PassIsNew != null && Object2.PassIsNew != null )
			{
				if (Object1.PassIsNew != Object2.PassIsNew)
					equal = false;
			}
			else if (Object1.PassIsNew == null ^ Object2.PassIsNew == null )
			{
				equal = false;
			}
			if ( Object1.PinIsNew != null && Object2.PinIsNew != null )
			{
				if (Object1.PinIsNew != Object2.PinIsNew)
					equal = false;
			}
			else if (Object1.PinIsNew == null ^ Object2.PinIsNew == null )
			{
				equal = false;
			}
			if ( Object1.PassExpDate != null && Object2.PassExpDate != null )
			{
				if (Object1.PassExpDate != Object2.PassExpDate)
					equal = false;
			}
			else if (Object1.PassExpDate == null ^ Object2.PassExpDate == null )
			{
				equal = false;
			}
			if ( Object1.PinExpDate != null && Object2.PinExpDate != null )
			{
				if (Object1.PinExpDate != Object2.PinExpDate)
					equal = false;
			}
			else if (Object1.PinExpDate == null ^ Object2.PinExpDate == null )
			{
				equal = false;
			}
			if (Object1.CustomerType != Object2.CustomerType)
				equal = false;
			if (Object1.AuthType != Object2.AuthType)
				equal = false;
			if (Object1.PinType != Object2.PinType)
				equal = false;
			if (Object1.LanguageId != Object2.LanguageId)
				equal = false;
			if ( Object1.FailedLoginCount != null && Object2.FailedLoginCount != null )
			{
				if (Object1.FailedLoginCount != Object2.FailedLoginCount)
					equal = false;
			}
			else if (Object1.FailedLoginCount == null ^ Object2.FailedLoginCount == null )
			{
				equal = false;
			}
			if ( Object1.FailedLoginTime != null && Object2.FailedLoginTime != null )
			{
				if (Object1.FailedLoginTime != Object2.FailedLoginTime)
					equal = false;
			}
			else if (Object1.FailedLoginTime == null ^ Object2.FailedLoginTime == null )
			{
				equal = false;
			}
			if (Object1.CreatedDate != Object2.CreatedDate)
				equal = false;
			if (Object1.CreatedUser != Object2.CreatedUser)
				equal = false;
			if ( Object1.UpdatedUser != null && Object2.UpdatedUser != null )
			{
				if (Object1.UpdatedUser != Object2.UpdatedUser)
					equal = false;
			}
			else if (Object1.UpdatedUser == null ^ Object2.UpdatedUser == null )
			{
				equal = false;
			}
			if ( Object1.UpdatedDate != null && Object2.UpdatedDate != null )
			{
				if (Object1.UpdatedDate != Object2.UpdatedDate)
					equal = false;
			}
			else if (Object1.UpdatedDate == null ^ Object2.UpdatedDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((MainCustAccountBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static MainCustAccountComparer GetComparer()
        {
            return new MainCustAccountComparer();
        }
        */

        // Comparer delegates back to MainCustAccount
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(MainCustAccount rhs, MainCustAccountColumn which)
        {
            switch (which)
            {
            	
            	
            	case MainCustAccountColumn.MainCustAccountId:
            		return this.MainCustAccountId.CompareTo(rhs.MainCustAccountId);
            		
            		                 
            	
            	
            	case MainCustAccountColumn.FullName:
            		return this.FullName.CompareTo(rhs.FullName);
            		
            		                 
            	
            	
            	case MainCustAccountColumn.Email:
            		return this.Email.CompareTo(rhs.Email);
            		
            		                 
            	
            	
            	case MainCustAccountColumn.Phone:
            		return this.Phone.CompareTo(rhs.Phone);
            		
            		                 
            	
            	
            	case MainCustAccountColumn.Actived:
            		return this.Actived.CompareTo(rhs.Actived);
            		
            		                 
            	
            	
            	case MainCustAccountColumn.Password:
            		return this.Password.CompareTo(rhs.Password);
            		
            		                 
            	
            	
            	case MainCustAccountColumn.Pin:
            		return this.Pin.CompareTo(rhs.Pin);
            		
            		                 
            	
            	
            	case MainCustAccountColumn.PassLockReason:
            		return this.PassLockReason.Value.CompareTo(rhs.PassLockReason.Value);
            		
            		                 
            	
            	
            	case MainCustAccountColumn.PinLockReason:
            		return this.PinLockReason.Value.CompareTo(rhs.PinLockReason.Value);
            		
            		                 
            	
            	
            	case MainCustAccountColumn.LockReason:
            		return this.LockReason.Value.CompareTo(rhs.LockReason.Value);
            		
            		                 
            	
            	
            	case MainCustAccountColumn.TokenId:
            		return this.TokenId.CompareTo(rhs.TokenId);
            		
            		                 
            	
            	
            	case MainCustAccountColumn.TokenName:
            		return this.TokenName.CompareTo(rhs.TokenName);
            		
            		                 
            	
            	
            	case MainCustAccountColumn.TokenActived:
            		return this.TokenActived.CompareTo(rhs.TokenActived);
            		
            		                 
            	
            	
            	case MainCustAccountColumn.BrokerId:
            		return this.BrokerId.CompareTo(rhs.BrokerId);
            		
            		                 
            	
            	
            	case MainCustAccountColumn.PassIsNew:
            		return this.PassIsNew.Value.CompareTo(rhs.PassIsNew.Value);
            		
            		                 
            	
            	
            	case MainCustAccountColumn.PinIsNew:
            		return this.PinIsNew.Value.CompareTo(rhs.PinIsNew.Value);
            		
            		                 
            	
            	
            	case MainCustAccountColumn.PassExpDate:
            		return this.PassExpDate.Value.CompareTo(rhs.PassExpDate.Value);
            		
            		                 
            	
            	
            	case MainCustAccountColumn.PinExpDate:
            		return this.PinExpDate.Value.CompareTo(rhs.PinExpDate.Value);
            		
            		                 
            	
            	
            	case MainCustAccountColumn.CustomerType:
            		return this.CustomerType.CompareTo(rhs.CustomerType);
            		
            		                 
            	
            	
            	case MainCustAccountColumn.AuthType:
            		return this.AuthType.CompareTo(rhs.AuthType);
            		
            		                 
            	
            	
            	case MainCustAccountColumn.PinType:
            		return this.PinType.CompareTo(rhs.PinType);
            		
            		                 
            	
            	
            	case MainCustAccountColumn.LanguageId:
            		return this.LanguageId.CompareTo(rhs.LanguageId);
            		
            		                 
            	
            	
            	case MainCustAccountColumn.FailedLoginCount:
            		return this.FailedLoginCount.Value.CompareTo(rhs.FailedLoginCount.Value);
            		
            		                 
            	
            	
            	case MainCustAccountColumn.FailedLoginTime:
            		return this.FailedLoginTime.Value.CompareTo(rhs.FailedLoginTime.Value);
            		
            		                 
            	
            	
            	case MainCustAccountColumn.CreatedDate:
            		return this.CreatedDate.CompareTo(rhs.CreatedDate);
            		
            		                 
            	
            	
            	case MainCustAccountColumn.CreatedUser:
            		return this.CreatedUser.CompareTo(rhs.CreatedUser);
            		
            		                 
            	
            	
            	case MainCustAccountColumn.UpdatedUser:
            		return this.UpdatedUser.CompareTo(rhs.UpdatedUser);
            		
            		                 
            	
            	
            	case MainCustAccountColumn.UpdatedDate:
            		return this.UpdatedDate.Value.CompareTo(rhs.UpdatedDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
        [ScriptIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<MainCustAccountKey> Members
		
		// member variable for the EntityId property
		private MainCustAccountKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
        [ScriptIgnore]
		public virtual MainCustAccountKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new MainCustAccountKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute(), ScriptIgnore()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
        [ScriptIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("MainCustAccount")
					.Append("|").Append( this.MainCustAccountId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{29}{28}- MainCustAccountId: {0}{28}- FullName: {1}{28}- Email: {2}{28}- Phone: {3}{28}- Actived: {4}{28}- Password: {5}{28}- Pin: {6}{28}- PassLockReason: {7}{28}- PinLockReason: {8}{28}- LockReason: {9}{28}- TokenId: {10}{28}- TokenName: {11}{28}- TokenActived: {12}{28}- BrokerId: {13}{28}- PassIsNew: {14}{28}- PinIsNew: {15}{28}- PassExpDate: {16}{28}- PinExpDate: {17}{28}- CustomerType: {18}{28}- AuthType: {19}{28}- PinType: {20}{28}- LanguageId: {21}{28}- FailedLoginCount: {22}{28}- FailedLoginTime: {23}{28}- CreatedDate: {24}{28}- CreatedUser: {25}{28}- UpdatedUser: {26}{28}- UpdatedDate: {27}{28}{30}", 
				this.MainCustAccountId,
				(this.FullName == null) ? string.Empty : this.FullName.ToString(),
				(this.Email == null) ? string.Empty : this.Email.ToString(),
				(this.Phone == null) ? string.Empty : this.Phone.ToString(),
				this.Actived,
				(this.Password == null) ? string.Empty : this.Password.ToString(),
				(this.Pin == null) ? string.Empty : this.Pin.ToString(),
				(this.PassLockReason == null) ? string.Empty : this.PassLockReason.ToString(),
				(this.PinLockReason == null) ? string.Empty : this.PinLockReason.ToString(),
				(this.LockReason == null) ? string.Empty : this.LockReason.ToString(),
				(this.TokenId == null) ? string.Empty : this.TokenId.ToString(),
				(this.TokenName == null) ? string.Empty : this.TokenName.ToString(),
				(this.TokenActived == null) ? string.Empty : this.TokenActived.ToString(),
				(this.BrokerId == null) ? string.Empty : this.BrokerId.ToString(),
				(this.PassIsNew == null) ? string.Empty : this.PassIsNew.ToString(),
				(this.PinIsNew == null) ? string.Empty : this.PinIsNew.ToString(),
				(this.PassExpDate == null) ? string.Empty : this.PassExpDate.ToString(),
				(this.PinExpDate == null) ? string.Empty : this.PinExpDate.ToString(),
				this.CustomerType,
				this.AuthType,
				this.PinType,
				this.LanguageId,
				(this.FailedLoginCount == null) ? string.Empty : this.FailedLoginCount.ToString(),
				(this.FailedLoginTime == null) ? string.Empty : this.FailedLoginTime.ToString(),
				this.CreatedDate,
				this.CreatedUser,
				(this.UpdatedUser == null) ? string.Empty : this.UpdatedUser.ToString(),
				(this.UpdatedDate == null) ? string.Empty : this.UpdatedDate.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'MainCustAccount' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class MainCustAccountEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// MainCustAccountID : Main customer account id
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "MainCustAccount"</remarks>
		public string MainCustAccountId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public string OriginalMainCustAccountId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// FullName : Full customer name
		/// </summary>
		public string		  FullName = null;
		
		/// <summary>
		/// Email : Customer email
		/// </summary>
		public string		  Email = null;
		
		/// <summary>
		/// Phone : Phone
		/// </summary>
		public string		  Phone = null;
		
		/// <summary>
		/// Actived : Is actived or not
		/// </summary>
		public bool		  Actived = false;
		
		/// <summary>
		/// Password : Password
		/// </summary>
		public string		  Password = null;
		
		/// <summary>
		/// PIN : Pin
		/// </summary>
		public string		  Pin = null;
		
		/// <summary>
		/// PassLockReason : Password lock reason
		/// </summary>
		public System.Int32?		  PassLockReason = null;
		
		/// <summary>
		/// PINLockReason : Pin lock reason
		/// </summary>
		public System.Int32?		  PinLockReason = null;
		
		/// <summary>
		/// LockReason : Account lock reason
		/// </summary>
		public System.Int32?		  LockReason = null;
		
		/// <summary>
		/// TokenID : Token id
		/// </summary>
		public string		  TokenId = null;
		
		/// <summary>
		/// TokenName : Token name
		/// </summary>
		public string		  TokenName = null;
		
		/// <summary>
		/// TokenActived : Token is active or not
		/// </summary>
		public string		  TokenActived = null;
		
		/// <summary>
		/// BrokerID : Broker id
		/// </summary>
		public string		  BrokerId = null;
		
		/// <summary>
		/// PassIsNew : Password is new or not
		/// </summary>
		public System.Boolean?		  PassIsNew = null;
		
		/// <summary>
		/// PINIsNew : Pin is new or not
		/// </summary>
		public System.Boolean?		  PinIsNew = null;
		
		/// <summary>
		/// PassExpDate : Password expired date
		/// </summary>
		public System.DateTime?		  PassExpDate = null;
		
		/// <summary>
		/// PINExpDate : Pin expired date
		/// </summary>
		public System.DateTime?		  PinExpDate = null;
		
		/// <summary>
		/// CustomerType : Customer type
		/// </summary>
		public int		  CustomerType = (int)0;
		
		/// <summary>
		/// AuthType : Authentication type
		/// </summary>
		public short		  AuthType = (short)0;
		
		/// <summary>
		/// PinType : Pin type
		/// </summary>
		public short		  PinType = (short)0;
		
		/// <summary>
		/// LanguageId : Language id
		/// </summary>
		public System.String		  LanguageId = string.Empty;
		
		/// <summary>
		/// FailedLoginCount : Failed login count
		/// </summary>
		public System.Int32?		  FailedLoginCount = null;
		
		/// <summary>
		/// FailedLoginTime : Failed login times
		/// </summary>
		public System.DateTime?		  FailedLoginTime = null;
		
		/// <summary>
		/// CreatedDate : Customer created date
		/// </summary>
		public System.DateTime		  CreatedDate = DateTime.MinValue;
		
		/// <summary>
		/// CreatedUser : Created User
		/// </summary>
		public string		  CreatedUser = string.Empty;
		
		/// <summary>
		/// UpdatedUser : Updated user
		/// </summary>
		public string		  UpdatedUser = null;
		
		/// <summary>
		/// UpdatedDate : Updated date
		/// </summary>
		public System.DateTime?		  UpdatedDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private BrokerAccount _brokerIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="BrokerAccount"/>.
		/// </summary>
		/// <value>The source BrokerAccount for BrokerId.</value>
		[XmlIgnore()]
        [ScriptIgnore()]
		[Browsable(false)]
		public virtual BrokerAccount BrokerIdSource
      	{
            get { return this._brokerIdSource; }
            set { this._brokerIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region SubCustAccountCollection
		
		private TList<SubCustAccount> _subCustAccountMainCustAccountId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _subCustAccountMainCustAccountId
		/// </summary>
		
		public TList<SubCustAccount> SubCustAccountCollection
		{
			get
			{
				if (_subCustAccountMainCustAccountId == null)
				{
				_subCustAccountMainCustAccountId = new TList<SubCustAccount>();
				}
	
				return _subCustAccountMainCustAccountId;
			}
			set { _subCustAccountMainCustAccountId = value; }
		}
		
		#endregion

		#region CustomerActionHistoryCollection
		
		private TList<CustomerActionHistory> _customerActionHistoryMainCustAccountId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _customerActionHistoryMainCustAccountId
		/// </summary>
		
		public TList<CustomerActionHistory> CustomerActionHistoryCollection
		{
			get
			{
				if (_customerActionHistoryMainCustAccountId == null)
				{
				_customerActionHistoryMainCustAccountId = new TList<CustomerActionHistory>();
				}
	
				return _customerActionHistoryMainCustAccountId;
			}
			set { _customerActionHistoryMainCustAccountId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			MainCustAccountEntityData _tmp = new MainCustAccountEntityData();
						
			_tmp.MainCustAccountId = this.MainCustAccountId;
			_tmp.OriginalMainCustAccountId = this.OriginalMainCustAccountId;
			
			_tmp.FullName = this.FullName;
			_tmp.Email = this.Email;
			_tmp.Phone = this.Phone;
			_tmp.Actived = this.Actived;
			_tmp.Password = this.Password;
			_tmp.Pin = this.Pin;
			_tmp.PassLockReason = this.PassLockReason;
			_tmp.PinLockReason = this.PinLockReason;
			_tmp.LockReason = this.LockReason;
			_tmp.TokenId = this.TokenId;
			_tmp.TokenName = this.TokenName;
			_tmp.TokenActived = this.TokenActived;
			_tmp.BrokerId = this.BrokerId;
			_tmp.PassIsNew = this.PassIsNew;
			_tmp.PinIsNew = this.PinIsNew;
			_tmp.PassExpDate = this.PassExpDate;
			_tmp.PinExpDate = this.PinExpDate;
			_tmp.CustomerType = this.CustomerType;
			_tmp.AuthType = this.AuthType;
			_tmp.PinType = this.PinType;
			_tmp.LanguageId = this.LanguageId;
			_tmp.FailedLoginCount = this.FailedLoginCount;
			_tmp.FailedLoginTime = this.FailedLoginTime;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.CreatedUser = this.CreatedUser;
			_tmp.UpdatedUser = this.UpdatedUser;
			_tmp.UpdatedDate = this.UpdatedDate;
			
			#region Source Parent Composite Entities
			if (this.BrokerIdSource != null)
				_tmp.BrokerIdSource = MakeCopyOf(this.BrokerIdSource) as BrokerAccount;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._subCustAccountMainCustAccountId != null)
				_tmp.SubCustAccountCollection = (TList<SubCustAccount>) MakeCopyOf(this.SubCustAccountCollection); 
			if (this._customerActionHistoryMainCustAccountId != null)
				_tmp.CustomerActionHistoryCollection = (TList<CustomerActionHistory>) MakeCopyOf(this.CustomerActionHistoryCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			MainCustAccountEntityData _tmp = new MainCustAccountEntityData();
						
			_tmp.MainCustAccountId = this.MainCustAccountId;
			_tmp.OriginalMainCustAccountId = this.OriginalMainCustAccountId;
			
			_tmp.FullName = this.FullName;
			_tmp.Email = this.Email;
			_tmp.Phone = this.Phone;
			_tmp.Actived = this.Actived;
			_tmp.Password = this.Password;
			_tmp.Pin = this.Pin;
			_tmp.PassLockReason = this.PassLockReason;
			_tmp.PinLockReason = this.PinLockReason;
			_tmp.LockReason = this.LockReason;
			_tmp.TokenId = this.TokenId;
			_tmp.TokenName = this.TokenName;
			_tmp.TokenActived = this.TokenActived;
			_tmp.BrokerId = this.BrokerId;
			_tmp.PassIsNew = this.PassIsNew;
			_tmp.PinIsNew = this.PinIsNew;
			_tmp.PassExpDate = this.PassExpDate;
			_tmp.PinExpDate = this.PinExpDate;
			_tmp.CustomerType = this.CustomerType;
			_tmp.AuthType = this.AuthType;
			_tmp.PinType = this.PinType;
			_tmp.LanguageId = this.LanguageId;
			_tmp.FailedLoginCount = this.FailedLoginCount;
			_tmp.FailedLoginTime = this.FailedLoginTime;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.CreatedUser = this.CreatedUser;
			_tmp.UpdatedUser = this.UpdatedUser;
			_tmp.UpdatedDate = this.UpdatedDate;
			
			#region Source Parent Composite Entities
			if (this.BrokerIdSource != null && existingCopies.Contains(this.BrokerIdSource))
				_tmp.BrokerIdSource = existingCopies[this.BrokerIdSource] as BrokerAccount;
			else
				_tmp.BrokerIdSource = MakeCopyOf(this.BrokerIdSource, existingCopies) as BrokerAccount;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.SubCustAccountCollection = (TList<SubCustAccount>) MakeCopyOf(this.SubCustAccountCollection, existingCopies); 
			_tmp.CustomerActionHistoryCollection = (TList<CustomerActionHistory>) MakeCopyOf(this.CustomerActionHistoryCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MainCustAccountColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(MainCustAccountColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MainCustAccountColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(MainCustAccountColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MainCustAccountColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(MainCustAccountColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				MainCustAccountEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new MainCustAccountEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="MainCustAccountColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(MainCustAccountColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				MainCustAccountEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new MainCustAccountEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region MainCustAccountEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="MainCustAccount"/> object.
	/// </remarks>
	public class MainCustAccountEventArgs : System.EventArgs
	{
		private MainCustAccountColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the MainCustAccountEventArgs class.
		///</summary>
		public MainCustAccountEventArgs(MainCustAccountColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the MainCustAccountEventArgs class.
		///</summary>
		public MainCustAccountEventArgs(MainCustAccountColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The MainCustAccountColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="MainCustAccountColumn" />
		public MainCustAccountColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all MainCustAccount related events.
	///</summary>
	public delegate void MainCustAccountEventHandler(object sender, MainCustAccountEventArgs e);
	
	#region MainCustAccountComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class MainCustAccountComparer : System.Collections.Generic.IComparer<MainCustAccount>
	{
		MainCustAccountColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:MainCustAccountComparer"/> class.
        /// </summary>
		public MainCustAccountComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:MainCustAccountComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public MainCustAccountComparer(MainCustAccountColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="MainCustAccount"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="MainCustAccount"/> to compare.</param>
        /// <param name="b">The second <c>MainCustAccount</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(MainCustAccount a, MainCustAccount b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(MainCustAccount entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(MainCustAccount a, MainCustAccount b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public MainCustAccountColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region MainCustAccountKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="MainCustAccount"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class MainCustAccountKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the MainCustAccountKey class.
		/// </summary>
		public MainCustAccountKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the MainCustAccountKey class.
		/// </summary>
		public MainCustAccountKey(MainCustAccountBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.MainCustAccountId = entity.MainCustAccountId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the MainCustAccountKey class.
		/// </summary>
		public MainCustAccountKey(string _mainCustAccountId)
		{
			#region Init Properties

			this.MainCustAccountId = _mainCustAccountId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private MainCustAccountBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public MainCustAccountBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the MainCustAccountId property
		private string _mainCustAccountId;
		
		/// <summary>
		/// Gets or sets the MainCustAccountId property.
		/// </summary>
		public string MainCustAccountId
		{
			get { return _mainCustAccountId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MainCustAccountId = value;
				
				_mainCustAccountId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				MainCustAccountId = ( values["MainCustAccountId"] != null ) ? (string) EntityUtil.ChangeType(values["MainCustAccountId"], typeof(string)) : string.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("MainCustAccountId", MainCustAccountId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("MainCustAccountId: {0}{1}",
								MainCustAccountId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region MainCustAccountColumn Enum
	
	/// <summary>
	/// Enumerate the MainCustAccount columns.
	/// </summary>
	[Serializable]
	public enum MainCustAccountColumn : int
	{
		/// <summary>
		/// MainCustAccountId : Main customer account id
		/// </summary>
		[EnumTextValue("MainCustAccountID")]
		[ColumnEnum("MainCustAccountID", typeof(string), System.Data.DbType.AnsiString, true, false, false, 20)]
		MainCustAccountId = 1,
		/// <summary>
		/// FullName : Full customer name
		/// </summary>
		[EnumTextValue("FullName")]
		[ColumnEnum("FullName", typeof(string), System.Data.DbType.String, false, false, true, 50)]
		FullName = 2,
		/// <summary>
		/// Email : Customer email
		/// </summary>
		[EnumTextValue("Email")]
		[ColumnEnum("Email", typeof(string), System.Data.DbType.AnsiString, false, false, true, 30)]
		Email = 3,
		/// <summary>
		/// Phone : Phone
		/// </summary>
		[EnumTextValue("Phone")]
		[ColumnEnum("Phone", typeof(string), System.Data.DbType.AnsiString, false, false, true, 20)]
		Phone = 4,
		/// <summary>
		/// Actived : Is actived or not
		/// </summary>
		[EnumTextValue("Actived")]
		[ColumnEnum("Actived", typeof(bool), System.Data.DbType.Boolean, false, false, false)]
		Actived = 5,
		/// <summary>
		/// Password : Password
		/// </summary>
		[EnumTextValue("Password")]
		[ColumnEnum("Password", typeof(string), System.Data.DbType.AnsiString, false, false, true, 50)]
		Password = 6,
		/// <summary>
		/// Pin : Pin
		/// </summary>
		[EnumTextValue("PIN")]
		[ColumnEnum("PIN", typeof(string), System.Data.DbType.AnsiString, false, false, true, 50)]
		Pin = 7,
		/// <summary>
		/// PassLockReason : Password lock reason
		/// </summary>
		[EnumTextValue("PassLockReason")]
		[ColumnEnum("PassLockReason", typeof(System.Int32?), System.Data.DbType.Int32, false, false, true)]
		PassLockReason = 8,
		/// <summary>
		/// PinLockReason : Pin lock reason
		/// </summary>
		[EnumTextValue("PINLockReason")]
		[ColumnEnum("PINLockReason", typeof(System.Int32?), System.Data.DbType.Int32, false, false, true)]
		PinLockReason = 9,
		/// <summary>
		/// LockReason : Account lock reason
		/// </summary>
		[EnumTextValue("LockReason")]
		[ColumnEnum("LockReason", typeof(System.Int32?), System.Data.DbType.Int32, false, false, true)]
		LockReason = 10,
		/// <summary>
		/// TokenId : Token id
		/// </summary>
		[EnumTextValue("TokenID")]
		[ColumnEnum("TokenID", typeof(string), System.Data.DbType.AnsiString, false, false, true, 20)]
		TokenId = 11,
		/// <summary>
		/// TokenName : Token name
		/// </summary>
		[EnumTextValue("TokenName")]
		[ColumnEnum("TokenName", typeof(string), System.Data.DbType.AnsiString, false, false, true, 20)]
		TokenName = 12,
		/// <summary>
		/// TokenActived : Token is active or not
		/// </summary>
		[EnumTextValue("TokenActived")]
		[ColumnEnum("TokenActived", typeof(string), System.Data.DbType.AnsiString, false, false, true, 10)]
		TokenActived = 13,
		/// <summary>
		/// BrokerId : Broker id
		/// </summary>
		[EnumTextValue("BrokerID")]
		[ColumnEnum("BrokerID", typeof(string), System.Data.DbType.AnsiString, false, false, true, 20)]
		BrokerId = 14,
		/// <summary>
		/// PassIsNew : Password is new or not
		/// </summary>
		[EnumTextValue("PassIsNew")]
		[ColumnEnum("PassIsNew", typeof(System.Boolean?), System.Data.DbType.Boolean, false, false, true)]
		PassIsNew = 15,
		/// <summary>
		/// PinIsNew : Pin is new or not
		/// </summary>
		[EnumTextValue("PINIsNew")]
		[ColumnEnum("PINIsNew", typeof(System.Boolean?), System.Data.DbType.Boolean, false, false, true)]
		PinIsNew = 16,
		/// <summary>
		/// PassExpDate : Password expired date
		/// </summary>
		[EnumTextValue("PassExpDate")]
		[ColumnEnum("PassExpDate", typeof(System.DateTime?), System.Data.DbType.DateTime, false, false, true)]
		PassExpDate = 17,
		/// <summary>
		/// PinExpDate : Pin expired date
		/// </summary>
		[EnumTextValue("PINExpDate")]
		[ColumnEnum("PINExpDate", typeof(System.DateTime?), System.Data.DbType.DateTime, false, false, true)]
		PinExpDate = 18,
		/// <summary>
		/// CustomerType : Customer type
		/// </summary>
		[EnumTextValue("CustomerType")]
		[ColumnEnum("CustomerType", typeof(int), System.Data.DbType.Int32, false, false, false)]
		CustomerType = 19,
		/// <summary>
		/// AuthType : Authentication type
		/// </summary>
		[EnumTextValue("AuthType")]
		[ColumnEnum("AuthType", typeof(short), System.Data.DbType.Int16, false, false, false)]
		AuthType = 20,
		/// <summary>
		/// PinType : Pin type
		/// </summary>
		[EnumTextValue("PinType")]
		[ColumnEnum("PinType", typeof(short), System.Data.DbType.Int16, false, false, false)]
		PinType = 21,
		/// <summary>
		/// LanguageId : Language id
		/// </summary>
		[EnumTextValue("LanguageId")]
		[ColumnEnum("LanguageId", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 10)]
		LanguageId = 22,
		/// <summary>
		/// FailedLoginCount : Failed login count
		/// </summary>
		[EnumTextValue("FailedLoginCount")]
		[ColumnEnum("FailedLoginCount", typeof(System.Int32?), System.Data.DbType.Int32, false, false, true)]
		FailedLoginCount = 23,
		/// <summary>
		/// FailedLoginTime : Failed login times
		/// </summary>
		[EnumTextValue("FailedLoginTime")]
		[ColumnEnum("FailedLoginTime", typeof(System.DateTime?), System.Data.DbType.DateTime, false, false, true)]
		FailedLoginTime = 24,
		/// <summary>
		/// CreatedDate : Customer created date
		/// </summary>
		[EnumTextValue("CreatedDate")]
		[ColumnEnum("CreatedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		CreatedDate = 25,
		/// <summary>
		/// CreatedUser : Created User
		/// </summary>
		[EnumTextValue("CreatedUser")]
		[ColumnEnum("CreatedUser", typeof(string), System.Data.DbType.AnsiString, false, false, false, 20)]
		CreatedUser = 26,
		/// <summary>
		/// UpdatedUser : Updated user
		/// </summary>
		[EnumTextValue("UpdatedUser")]
		[ColumnEnum("UpdatedUser", typeof(string), System.Data.DbType.AnsiString, false, false, true, 20)]
		UpdatedUser = 27,
		/// <summary>
		/// UpdatedDate : Updated date
		/// </summary>
		[EnumTextValue("UpdatedDate")]
		[ColumnEnum("UpdatedDate", typeof(System.DateTime?), System.Data.DbType.DateTime, false, false, true)]
		UpdatedDate = 28
	}//End enum

	#endregion MainCustAccountColumn Enum

} // end namespace
