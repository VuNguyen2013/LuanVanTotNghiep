#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MigrateDataTCSC
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="InnoAMDB")]
	public partial class InnoDBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccountInfoFromInno(AccountInfoFromInno instance);
    partial void UpdateAccountInfoFromInno(AccountInfoFromInno instance);
    partial void DeleteAccountInfoFromInno(AccountInfoFromInno instance);
    #endregion
		
		public InnoDBDataContext() : 
				base(global::MigrateDataTCSC.Properties.Settings.Default.InnoAMDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public InnoDBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InnoDBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InnoDBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public InnoDBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AccountInfoFromInno> AccountInfoFromInnos
		{
			get
			{
				return this.GetTable<AccountInfoFromInno>();
			}
		}
	}
	
	[Table(Name="dbo.AccountInfo")]
	public partial class AccountInfoFromInno : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AccountID;
		
		private string _Name;
		
		private string _Password;
		
		private string _OrderPin;
		
		private string _OneTimePassword;
		
		private System.Nullable<bool> _ReceiveNotificationByEmail;
		
		private System.Nullable<int> _SecretQuestionID;
		
		private string _SecretAnswer;
		
		private System.Nullable<bool> _Actived;
		
		private System.Nullable<bool> _TradeActived;
		
		private string _CustomerType;
		
		private System.Nullable<short> _LockAccountReason;
		
		private System.Nullable<short> _LockTradeReason;
		
		private string _AccountType;
		
		private System.Nullable<short> _AuthType;
		
		private System.DateTime _ActivedDate;
		
		private string _BrokerID;
		
		private string _EP_Password;
		
		private System.Nullable<bool> _EP_Enable;
		
		private System.Nullable<bool> _EP_FirstLogon;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountIDChanging(string value);
    partial void OnAccountIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnOrderPinChanging(string value);
    partial void OnOrderPinChanged();
    partial void OnOneTimePasswordChanging(string value);
    partial void OnOneTimePasswordChanged();
    partial void OnReceiveNotificationByEmailChanging(System.Nullable<bool> value);
    partial void OnReceiveNotificationByEmailChanged();
    partial void OnSecretQuestionIDChanging(System.Nullable<int> value);
    partial void OnSecretQuestionIDChanged();
    partial void OnSecretAnswerChanging(string value);
    partial void OnSecretAnswerChanged();
    partial void OnActivedChanging(System.Nullable<bool> value);
    partial void OnActivedChanged();
    partial void OnTradeActivedChanging(System.Nullable<bool> value);
    partial void OnTradeActivedChanged();
    partial void OnCustomerTypeChanging(string value);
    partial void OnCustomerTypeChanged();
    partial void OnLockAccountReasonChanging(System.Nullable<short> value);
    partial void OnLockAccountReasonChanged();
    partial void OnLockTradeReasonChanging(System.Nullable<short> value);
    partial void OnLockTradeReasonChanged();
    partial void OnAccountTypeChanging(string value);
    partial void OnAccountTypeChanged();
    partial void OnAuthTypeChanging(System.Nullable<short> value);
    partial void OnAuthTypeChanged();
    partial void OnActivedDateChanging(System.DateTime value);
    partial void OnActivedDateChanged();
    partial void OnBrokerIDChanging(string value);
    partial void OnBrokerIDChanged();
    partial void OnEP_PasswordChanging(string value);
    partial void OnEP_PasswordChanged();
    partial void OnEP_EnableChanging(System.Nullable<bool> value);
    partial void OnEP_EnableChanged();
    partial void OnEP_FirstLogonChanging(System.Nullable<bool> value);
    partial void OnEP_FirstLogonChanged();
    #endregion
		
		public AccountInfoFromInno()
		{
			OnCreated();
		}
		
		[Column(Storage="_AccountID", DbType="VarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Password", DbType="VarChar(50)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[Column(Storage="_OrderPin", DbType="VarChar(50)")]
		public string OrderPin
		{
			get
			{
				return this._OrderPin;
			}
			set
			{
				if ((this._OrderPin != value))
				{
					this.OnOrderPinChanging(value);
					this.SendPropertyChanging();
					this._OrderPin = value;
					this.SendPropertyChanged("OrderPin");
					this.OnOrderPinChanged();
				}
			}
		}
		
		[Column(Storage="_OneTimePassword", DbType="VarChar(50)")]
		public string OneTimePassword
		{
			get
			{
				return this._OneTimePassword;
			}
			set
			{
				if ((this._OneTimePassword != value))
				{
					this.OnOneTimePasswordChanging(value);
					this.SendPropertyChanging();
					this._OneTimePassword = value;
					this.SendPropertyChanged("OneTimePassword");
					this.OnOneTimePasswordChanged();
				}
			}
		}
		
		[Column(Storage="_ReceiveNotificationByEmail", DbType="Bit")]
		public System.Nullable<bool> ReceiveNotificationByEmail
		{
			get
			{
				return this._ReceiveNotificationByEmail;
			}
			set
			{
				if ((this._ReceiveNotificationByEmail != value))
				{
					this.OnReceiveNotificationByEmailChanging(value);
					this.SendPropertyChanging();
					this._ReceiveNotificationByEmail = value;
					this.SendPropertyChanged("ReceiveNotificationByEmail");
					this.OnReceiveNotificationByEmailChanged();
				}
			}
		}
		
		[Column(Storage="_SecretQuestionID", DbType="Int")]
		public System.Nullable<int> SecretQuestionID
		{
			get
			{
				return this._SecretQuestionID;
			}
			set
			{
				if ((this._SecretQuestionID != value))
				{
					this.OnSecretQuestionIDChanging(value);
					this.SendPropertyChanging();
					this._SecretQuestionID = value;
					this.SendPropertyChanged("SecretQuestionID");
					this.OnSecretQuestionIDChanged();
				}
			}
		}
		
		[Column(Storage="_SecretAnswer", DbType="VarChar(50)")]
		public string SecretAnswer
		{
			get
			{
				return this._SecretAnswer;
			}
			set
			{
				if ((this._SecretAnswer != value))
				{
					this.OnSecretAnswerChanging(value);
					this.SendPropertyChanging();
					this._SecretAnswer = value;
					this.SendPropertyChanged("SecretAnswer");
					this.OnSecretAnswerChanged();
				}
			}
		}
		
		[Column(Storage="_Actived", DbType="Bit")]
		public System.Nullable<bool> Actived
		{
			get
			{
				return this._Actived;
			}
			set
			{
				if ((this._Actived != value))
				{
					this.OnActivedChanging(value);
					this.SendPropertyChanging();
					this._Actived = value;
					this.SendPropertyChanged("Actived");
					this.OnActivedChanged();
				}
			}
		}
		
		[Column(Storage="_TradeActived", DbType="Bit")]
		public System.Nullable<bool> TradeActived
		{
			get
			{
				return this._TradeActived;
			}
			set
			{
				if ((this._TradeActived != value))
				{
					this.OnTradeActivedChanging(value);
					this.SendPropertyChanging();
					this._TradeActived = value;
					this.SendPropertyChanged("TradeActived");
					this.OnTradeActivedChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerType", DbType="VarChar(1)")]
		public string CustomerType
		{
			get
			{
				return this._CustomerType;
			}
			set
			{
				if ((this._CustomerType != value))
				{
					this.OnCustomerTypeChanging(value);
					this.SendPropertyChanging();
					this._CustomerType = value;
					this.SendPropertyChanged("CustomerType");
					this.OnCustomerTypeChanged();
				}
			}
		}
		
		[Column(Storage="_LockAccountReason", DbType="SmallInt")]
		public System.Nullable<short> LockAccountReason
		{
			get
			{
				return this._LockAccountReason;
			}
			set
			{
				if ((this._LockAccountReason != value))
				{
					this.OnLockAccountReasonChanging(value);
					this.SendPropertyChanging();
					this._LockAccountReason = value;
					this.SendPropertyChanged("LockAccountReason");
					this.OnLockAccountReasonChanged();
				}
			}
		}
		
		[Column(Storage="_LockTradeReason", DbType="SmallInt")]
		public System.Nullable<short> LockTradeReason
		{
			get
			{
				return this._LockTradeReason;
			}
			set
			{
				if ((this._LockTradeReason != value))
				{
					this.OnLockTradeReasonChanging(value);
					this.SendPropertyChanging();
					this._LockTradeReason = value;
					this.SendPropertyChanged("LockTradeReason");
					this.OnLockTradeReasonChanged();
				}
			}
		}
		
		[Column(Storage="_AccountType", DbType="NVarChar(1)")]
		public string AccountType
		{
			get
			{
				return this._AccountType;
			}
			set
			{
				if ((this._AccountType != value))
				{
					this.OnAccountTypeChanging(value);
					this.SendPropertyChanging();
					this._AccountType = value;
					this.SendPropertyChanged("AccountType");
					this.OnAccountTypeChanged();
				}
			}
		}
		
		[Column(Storage="_AuthType", DbType="SmallInt")]
		public System.Nullable<short> AuthType
		{
			get
			{
				return this._AuthType;
			}
			set
			{
				if ((this._AuthType != value))
				{
					this.OnAuthTypeChanging(value);
					this.SendPropertyChanging();
					this._AuthType = value;
					this.SendPropertyChanged("AuthType");
					this.OnAuthTypeChanged();
				}
			}
		}
		
		[Column(Storage="_ActivedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ActivedDate
		{
			get
			{
				return this._ActivedDate;
			}
			set
			{
				if ((this._ActivedDate != value))
				{
					this.OnActivedDateChanging(value);
					this.SendPropertyChanging();
					this._ActivedDate = value;
					this.SendPropertyChanged("ActivedDate");
					this.OnActivedDateChanged();
				}
			}
		}
		
		[Column(Storage="_BrokerID", DbType="NVarChar(50)")]
		public string BrokerID
		{
			get
			{
				return this._BrokerID;
			}
			set
			{
				if ((this._BrokerID != value))
				{
					this.OnBrokerIDChanging(value);
					this.SendPropertyChanging();
					this._BrokerID = value;
					this.SendPropertyChanged("BrokerID");
					this.OnBrokerIDChanged();
				}
			}
		}
		
		[Column(Storage="_EP_Password", DbType="NVarChar(50)")]
		public string EP_Password
		{
			get
			{
				return this._EP_Password;
			}
			set
			{
				if ((this._EP_Password != value))
				{
					this.OnEP_PasswordChanging(value);
					this.SendPropertyChanging();
					this._EP_Password = value;
					this.SendPropertyChanged("EP_Password");
					this.OnEP_PasswordChanged();
				}
			}
		}
		
		[Column(Storage="_EP_Enable", DbType="Bit")]
		public System.Nullable<bool> EP_Enable
		{
			get
			{
				return this._EP_Enable;
			}
			set
			{
				if ((this._EP_Enable != value))
				{
					this.OnEP_EnableChanging(value);
					this.SendPropertyChanging();
					this._EP_Enable = value;
					this.SendPropertyChanged("EP_Enable");
					this.OnEP_EnableChanged();
				}
			}
		}
		
		[Column(Storage="_EP_FirstLogon", DbType="Bit")]
		public System.Nullable<bool> EP_FirstLogon
		{
			get
			{
				return this._EP_FirstLogon;
			}
			set
			{
				if ((this._EP_FirstLogon != value))
				{
					this.OnEP_FirstLogonChanging(value);
					this.SendPropertyChanging();
					this._EP_FirstLogon = value;
					this.SendPropertyChanged("EP_FirstLogon");
					this.OnEP_FirstLogonChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
