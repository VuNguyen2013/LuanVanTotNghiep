//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5448
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.5448.
// 
#pragma warning disable 1591

namespace ETradeAutomation.ETradeWebService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ETradeServicesWebServicesSoap", Namespace="http://tempuri.org/")]
    public partial class ETradeServicesWebServices : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback UpdateConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailableCashOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailableCashForMarginAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPortfolioOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListPortfolioOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAvailableStockOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCashBalanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPortfolioDirectOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExchangeRateUSDOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListOnlineCustomersOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccountInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback ForgetPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback ForgetPinOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangePasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangePinOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConnectOperationCompleted;
        
        private System.Threading.SendOrPostCallback DisconnectOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsConnectedOperationCompleted;
        
        private System.Threading.SendOrPostCallback PutOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback NewestOrdStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback NewestOrdCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOrderHistoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOrderHistoryCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDealHistoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDealIntraDayOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPreTradeInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback PutAdvanceOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelAdvanceOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback PutConditionOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListConditionOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListConditionOrderDetailOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResetConditionOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsValidLimitQuantityAdvanceOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTradingStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllTradingStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllOrderSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAdvanceHistoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAdvanceInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback NewCashAdvanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelCashAdvanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCashAdvanceStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetActualTradeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetXDInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetXRInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListPnLHistoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBankAccountInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMarginRatioOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMarginPortfolioOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsCallMarginOperationCompleted;
        
        private System.Threading.SendOrPostCallback IsCallForceSellOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelCashTransferOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListCashTransOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListCashTransOrderHistOperationCompleted;
        
        private System.Threading.SendOrPostCallback PutCashTransOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCashTransferInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelStockTransferOperationCompleted;
        
        private System.Threading.SendOrPostCallback PutStockTransOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetStockTransferInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListStockTransferInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListStockTransOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListStockTransOrderHistOperationCompleted;
        
        private System.Threading.SendOrPostCallback RecoveryPackagesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateOpenCustAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOddLotOrderInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListOddLotOrderHistOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListOddLotOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelOddLotOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback PutOddLotOrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListBuyRightOperationCompleted;
        
        private System.Threading.SendOrPostCallback PutXROrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelXROrderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListXROrderHistOperationCompleted;
        
        private System.Threading.SendOrPostCallback StartFISUpdaterOperationCompleted;
        
        private System.Threading.SendOrPostCallback StopFISUpdaterOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckOrderSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckConditionOrderThreadRunOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckUpdateSessionMakertThreadRunOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckFISUpdaterThreadRunOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllConditionOrderResultOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ETradeServicesWebServices() {
            this.Url = global::ETradeAutomation.Properties.Settings.Default.ETradeAutomation_ETradeWebService_ETradeServicesWebServices;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event UpdateConfigurationCompletedEventHandler UpdateConfigurationCompleted;
        
        /// <remarks/>
        public event GetAvailableCashCompletedEventHandler GetAvailableCashCompleted;
        
        /// <remarks/>
        public event GetAvailableCashForMarginAccountCompletedEventHandler GetAvailableCashForMarginAccountCompleted;
        
        /// <remarks/>
        public event GetPortfolioCompletedEventHandler GetPortfolioCompleted;
        
        /// <remarks/>
        public event GetListPortfolioCompletedEventHandler GetListPortfolioCompleted;
        
        /// <remarks/>
        public event GetAvailableStockCompletedEventHandler GetAvailableStockCompleted;
        
        /// <remarks/>
        public event GetCashBalanceCompletedEventHandler GetCashBalanceCompleted;
        
        /// <remarks/>
        public event GetPortfolioDirectCompletedEventHandler GetPortfolioDirectCompleted;
        
        /// <remarks/>
        public event GetExchangeRateUSDCompletedEventHandler GetExchangeRateUSDCompleted;
        
        /// <remarks/>
        public event LoginCompletedEventHandler LoginCompleted;
        
        /// <remarks/>
        public event GetListOnlineCustomersCompletedEventHandler GetListOnlineCustomersCompleted;
        
        /// <remarks/>
        public event LogoutCompletedEventHandler LogoutCompleted;
        
        /// <remarks/>
        public event GetAccountInfoCompletedEventHandler GetAccountInfoCompleted;
        
        /// <remarks/>
        public event ForgetPasswordCompletedEventHandler ForgetPasswordCompleted;
        
        /// <remarks/>
        public event ForgetPinCompletedEventHandler ForgetPinCompleted;
        
        /// <remarks/>
        public event ChangePasswordCompletedEventHandler ChangePasswordCompleted;
        
        /// <remarks/>
        public event ChangePinCompletedEventHandler ChangePinCompleted;
        
        /// <remarks/>
        public event SendMessageCompletedEventHandler SendMessageCompleted;
        
        /// <remarks/>
        public event ConnectCompletedEventHandler ConnectCompleted;
        
        /// <remarks/>
        public event DisconnectCompletedEventHandler DisconnectCompleted;
        
        /// <remarks/>
        public event IsConnectedCompletedEventHandler IsConnectedCompleted;
        
        /// <remarks/>
        public event PutOrderCompletedEventHandler PutOrderCompleted;
        
        /// <remarks/>
        public event CancelOrderCompletedEventHandler CancelOrderCompleted;
        
        /// <remarks/>
        public event NewestOrdStatusCompletedEventHandler NewestOrdStatusCompleted;
        
        /// <remarks/>
        public event NewestOrdCountCompletedEventHandler NewestOrdCountCompleted;
        
        /// <remarks/>
        public event GetOrderHistoryCompletedEventHandler GetOrderHistoryCompleted;
        
        /// <remarks/>
        public event GetOrderHistoryCountCompletedEventHandler GetOrderHistoryCountCompleted;
        
        /// <remarks/>
        public event GetDealHistoryCompletedEventHandler GetDealHistoryCompleted;
        
        /// <remarks/>
        public event GetDealIntraDayCompletedEventHandler GetDealIntraDayCompleted;
        
        /// <remarks/>
        public event GetPreTradeInfoCompletedEventHandler GetPreTradeInfoCompleted;
        
        /// <remarks/>
        public event PutAdvanceOrderCompletedEventHandler PutAdvanceOrderCompleted;
        
        /// <remarks/>
        public event CancelAdvanceOrderCompletedEventHandler CancelAdvanceOrderCompleted;
        
        /// <remarks/>
        public event PutConditionOrderCompletedEventHandler PutConditionOrderCompleted;
        
        /// <remarks/>
        public event GetListConditionOrderCompletedEventHandler GetListConditionOrderCompleted;
        
        /// <remarks/>
        public event GetListConditionOrderDetailCompletedEventHandler GetListConditionOrderDetailCompleted;
        
        /// <remarks/>
        public event ResetConditionOrderCompletedEventHandler ResetConditionOrderCompleted;
        
        /// <remarks/>
        public event IsValidLimitQuantityAdvanceOrderCompletedEventHandler IsValidLimitQuantityAdvanceOrderCompleted;
        
        /// <remarks/>
        public event GetTradingStateCompletedEventHandler GetTradingStateCompleted;
        
        /// <remarks/>
        public event GetAllTradingStateCompletedEventHandler GetAllTradingStateCompleted;
        
        /// <remarks/>
        public event GetAllOrderSessionCompletedEventHandler GetAllOrderSessionCompleted;
        
        /// <remarks/>
        public event GetAdvanceHistoryCompletedEventHandler GetAdvanceHistoryCompleted;
        
        /// <remarks/>
        public event GetAdvanceInfoCompletedEventHandler GetAdvanceInfoCompleted;
        
        /// <remarks/>
        public event NewCashAdvanceCompletedEventHandler NewCashAdvanceCompleted;
        
        /// <remarks/>
        public event CancelCashAdvanceCompletedEventHandler CancelCashAdvanceCompleted;
        
        /// <remarks/>
        public event GetCashAdvanceStatusCompletedEventHandler GetCashAdvanceStatusCompleted;
        
        /// <remarks/>
        public event GetActualTradeCompletedEventHandler GetActualTradeCompleted;
        
        /// <remarks/>
        public event GetXDInfoCompletedEventHandler GetXDInfoCompleted;
        
        /// <remarks/>
        public event GetXRInfoCompletedEventHandler GetXRInfoCompleted;
        
        /// <remarks/>
        public event GetListPnLHistoryCompletedEventHandler GetListPnLHistoryCompleted;
        
        /// <remarks/>
        public event GetBankAccountInfoCompletedEventHandler GetBankAccountInfoCompleted;
        
        /// <remarks/>
        public event GetMarginRatioCompletedEventHandler GetMarginRatioCompleted;
        
        /// <remarks/>
        public event GetMarginPortfolioCompletedEventHandler GetMarginPortfolioCompleted;
        
        /// <remarks/>
        public event IsCallMarginCompletedEventHandler IsCallMarginCompleted;
        
        /// <remarks/>
        public event IsCallForceSellCompletedEventHandler IsCallForceSellCompleted;
        
        /// <remarks/>
        public event CancelCashTransferCompletedEventHandler CancelCashTransferCompleted;
        
        /// <remarks/>
        public event GetListCashTransOrderCompletedEventHandler GetListCashTransOrderCompleted;
        
        /// <remarks/>
        public event GetListCashTransOrderHistCompletedEventHandler GetListCashTransOrderHistCompleted;
        
        /// <remarks/>
        public event PutCashTransOrderCompletedEventHandler PutCashTransOrderCompleted;
        
        /// <remarks/>
        public event GetCashTransferInfoCompletedEventHandler GetCashTransferInfoCompleted;
        
        /// <remarks/>
        public event CancelStockTransferCompletedEventHandler CancelStockTransferCompleted;
        
        /// <remarks/>
        public event PutStockTransOrderCompletedEventHandler PutStockTransOrderCompleted;
        
        /// <remarks/>
        public event GetStockTransferInfoCompletedEventHandler GetStockTransferInfoCompleted;
        
        /// <remarks/>
        public event GetListStockTransferInfoCompletedEventHandler GetListStockTransferInfoCompleted;
        
        /// <remarks/>
        public event GetListStockTransOrderCompletedEventHandler GetListStockTransOrderCompleted;
        
        /// <remarks/>
        public event GetListStockTransOrderHistCompletedEventHandler GetListStockTransOrderHistCompleted;
        
        /// <remarks/>
        public event RecoveryPackagesCompletedEventHandler RecoveryPackagesCompleted;
        
        /// <remarks/>
        public event CreateOpenCustAccountCompletedEventHandler CreateOpenCustAccountCompleted;
        
        /// <remarks/>
        public event GetOddLotOrderInfoCompletedEventHandler GetOddLotOrderInfoCompleted;
        
        /// <remarks/>
        public event GetListOddLotOrderHistCompletedEventHandler GetListOddLotOrderHistCompleted;
        
        /// <remarks/>
        public event GetListOddLotOrderCompletedEventHandler GetListOddLotOrderCompleted;
        
        /// <remarks/>
        public event CancelOddLotOrderCompletedEventHandler CancelOddLotOrderCompleted;
        
        /// <remarks/>
        public event PutOddLotOrderCompletedEventHandler PutOddLotOrderCompleted;
        
        /// <remarks/>
        public event GetListBuyRightCompletedEventHandler GetListBuyRightCompleted;
        
        /// <remarks/>
        public event PutXROrderCompletedEventHandler PutXROrderCompleted;
        
        /// <remarks/>
        public event CancelXROrderCompletedEventHandler CancelXROrderCompleted;
        
        /// <remarks/>
        public event GetListXROrderHistCompletedEventHandler GetListXROrderHistCompleted;
        
        /// <remarks/>
        public event StartFISUpdaterCompletedEventHandler StartFISUpdaterCompleted;
        
        /// <remarks/>
        public event StopFISUpdaterCompletedEventHandler StopFISUpdaterCompleted;
        
        /// <remarks/>
        public event CheckOrderSessionCompletedEventHandler CheckOrderSessionCompleted;
        
        /// <remarks/>
        public event CheckConditionOrderThreadRunCompletedEventHandler CheckConditionOrderThreadRunCompleted;
        
        /// <remarks/>
        public event CheckUpdateSessionMakertThreadRunCompletedEventHandler CheckUpdateSessionMakertThreadRunCompleted;
        
        /// <remarks/>
        public event CheckFISUpdaterThreadRunCompletedEventHandler CheckFISUpdaterThreadRunCompleted;
        
        /// <remarks/>
        public event GetAllConditionOrderResultCompletedEventHandler GetAllConditionOrderResultCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateConfiguration", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateConfiguration() {
            object[] results = this.Invoke("UpdateConfiguration", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateConfigurationAsync() {
            this.UpdateConfigurationAsync(null);
        }
        
        /// <remarks/>
        public void UpdateConfigurationAsync(object userState) {
            if ((this.UpdateConfigurationOperationCompleted == null)) {
                this.UpdateConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateConfigurationOperationCompleted);
            }
            this.InvokeAsync("UpdateConfiguration", new object[0], this.UpdateConfigurationOperationCompleted, userState);
        }
        
        private void OnUpdateConfigurationOperationCompleted(object arg) {
            if ((this.UpdateConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateConfigurationCompleted(this, new UpdateConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvailableCash", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAvailableCash(string subAccountNo, int accountType, bool isConditionOrder) {
            object[] results = this.Invoke("GetAvailableCash", new object[] {
                        subAccountNo,
                        accountType,
                        isConditionOrder});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableCashAsync(string subAccountNo, int accountType, bool isConditionOrder) {
            this.GetAvailableCashAsync(subAccountNo, accountType, isConditionOrder, null);
        }
        
        /// <remarks/>
        public void GetAvailableCashAsync(string subAccountNo, int accountType, bool isConditionOrder, object userState) {
            if ((this.GetAvailableCashOperationCompleted == null)) {
                this.GetAvailableCashOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableCashOperationCompleted);
            }
            this.InvokeAsync("GetAvailableCash", new object[] {
                        subAccountNo,
                        accountType,
                        isConditionOrder}, this.GetAvailableCashOperationCompleted, userState);
        }
        
        private void OnGetAvailableCashOperationCompleted(object arg) {
            if ((this.GetAvailableCashCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableCashCompleted(this, new GetAvailableCashCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvailableCashForMarginAccount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAvailableCashForMarginAccount(string subAccountNo, int accountType, string tradeDate, string symbol, bool isConditionOrder) {
            object[] results = this.Invoke("GetAvailableCashForMarginAccount", new object[] {
                        subAccountNo,
                        accountType,
                        tradeDate,
                        symbol,
                        isConditionOrder});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableCashForMarginAccountAsync(string subAccountNo, int accountType, string tradeDate, string symbol, bool isConditionOrder) {
            this.GetAvailableCashForMarginAccountAsync(subAccountNo, accountType, tradeDate, symbol, isConditionOrder, null);
        }
        
        /// <remarks/>
        public void GetAvailableCashForMarginAccountAsync(string subAccountNo, int accountType, string tradeDate, string symbol, bool isConditionOrder, object userState) {
            if ((this.GetAvailableCashForMarginAccountOperationCompleted == null)) {
                this.GetAvailableCashForMarginAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableCashForMarginAccountOperationCompleted);
            }
            this.InvokeAsync("GetAvailableCashForMarginAccount", new object[] {
                        subAccountNo,
                        accountType,
                        tradeDate,
                        symbol,
                        isConditionOrder}, this.GetAvailableCashForMarginAccountOperationCompleted, userState);
        }
        
        private void OnGetAvailableCashForMarginAccountOperationCompleted(object arg) {
            if ((this.GetAvailableCashForMarginAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableCashForMarginAccountCompleted(this, new GetAvailableCashForMarginAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPortfolio", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPortfolio(string accountNo, int pageNumber, int pageSize, int accountType) {
            object[] results = this.Invoke("GetPortfolio", new object[] {
                        accountNo,
                        pageNumber,
                        pageSize,
                        accountType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPortfolioAsync(string accountNo, int pageNumber, int pageSize, int accountType) {
            this.GetPortfolioAsync(accountNo, pageNumber, pageSize, accountType, null);
        }
        
        /// <remarks/>
        public void GetPortfolioAsync(string accountNo, int pageNumber, int pageSize, int accountType, object userState) {
            if ((this.GetPortfolioOperationCompleted == null)) {
                this.GetPortfolioOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPortfolioOperationCompleted);
            }
            this.InvokeAsync("GetPortfolio", new object[] {
                        accountNo,
                        pageNumber,
                        pageSize,
                        accountType}, this.GetPortfolioOperationCompleted, userState);
        }
        
        private void OnGetPortfolioOperationCompleted(object arg) {
            if ((this.GetPortfolioCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPortfolioCompleted(this, new GetPortfolioCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListPortfolio", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetListPortfolio(string accountNo, int accountType) {
            object[] results = this.Invoke("GetListPortfolio", new object[] {
                        accountNo,
                        accountType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetListPortfolioAsync(string accountNo, int accountType) {
            this.GetListPortfolioAsync(accountNo, accountType, null);
        }
        
        /// <remarks/>
        public void GetListPortfolioAsync(string accountNo, int accountType, object userState) {
            if ((this.GetListPortfolioOperationCompleted == null)) {
                this.GetListPortfolioOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListPortfolioOperationCompleted);
            }
            this.InvokeAsync("GetListPortfolio", new object[] {
                        accountNo,
                        accountType}, this.GetListPortfolioOperationCompleted, userState);
        }
        
        private void OnGetListPortfolioOperationCompleted(object arg) {
            if ((this.GetListPortfolioCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListPortfolioCompleted(this, new GetListPortfolioCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAvailableStock", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAvailableStock(string subAccountNo, string symbol, int accountType, bool isConditionOrder) {
            object[] results = this.Invoke("GetAvailableStock", new object[] {
                        subAccountNo,
                        symbol,
                        accountType,
                        isConditionOrder});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAvailableStockAsync(string subAccountNo, string symbol, int accountType, bool isConditionOrder) {
            this.GetAvailableStockAsync(subAccountNo, symbol, accountType, isConditionOrder, null);
        }
        
        /// <remarks/>
        public void GetAvailableStockAsync(string subAccountNo, string symbol, int accountType, bool isConditionOrder, object userState) {
            if ((this.GetAvailableStockOperationCompleted == null)) {
                this.GetAvailableStockOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailableStockOperationCompleted);
            }
            this.InvokeAsync("GetAvailableStock", new object[] {
                        subAccountNo,
                        symbol,
                        accountType,
                        isConditionOrder}, this.GetAvailableStockOperationCompleted, userState);
        }
        
        private void OnGetAvailableStockOperationCompleted(object arg) {
            if ((this.GetAvailableStockCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailableStockCompleted(this, new GetAvailableStockCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCashBalance", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCashBalance(string subAccountNo, int accountType) {
            object[] results = this.Invoke("GetCashBalance", new object[] {
                        subAccountNo,
                        accountType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCashBalanceAsync(string subAccountNo, int accountType) {
            this.GetCashBalanceAsync(subAccountNo, accountType, null);
        }
        
        /// <remarks/>
        public void GetCashBalanceAsync(string subAccountNo, int accountType, object userState) {
            if ((this.GetCashBalanceOperationCompleted == null)) {
                this.GetCashBalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCashBalanceOperationCompleted);
            }
            this.InvokeAsync("GetCashBalance", new object[] {
                        subAccountNo,
                        accountType}, this.GetCashBalanceOperationCompleted, userState);
        }
        
        private void OnGetCashBalanceOperationCompleted(object arg) {
            if ((this.GetCashBalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCashBalanceCompleted(this, new GetCashBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPortfolioDirect", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPortfolioDirect(string accountNo, int accountType) {
            object[] results = this.Invoke("GetPortfolioDirect", new object[] {
                        accountNo,
                        accountType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPortfolioDirectAsync(string accountNo, int accountType) {
            this.GetPortfolioDirectAsync(accountNo, accountType, null);
        }
        
        /// <remarks/>
        public void GetPortfolioDirectAsync(string accountNo, int accountType, object userState) {
            if ((this.GetPortfolioDirectOperationCompleted == null)) {
                this.GetPortfolioDirectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPortfolioDirectOperationCompleted);
            }
            this.InvokeAsync("GetPortfolioDirect", new object[] {
                        accountNo,
                        accountType}, this.GetPortfolioDirectOperationCompleted, userState);
        }
        
        private void OnGetPortfolioDirectOperationCompleted(object arg) {
            if ((this.GetPortfolioDirectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPortfolioDirectCompleted(this, new GetPortfolioDirectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetExchangeRateUSD", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public decimal GetExchangeRateUSD() {
            object[] results = this.Invoke("GetExchangeRateUSD", new object[0]);
            return ((decimal)(results[0]));
        }
        
        /// <remarks/>
        public void GetExchangeRateUSDAsync() {
            this.GetExchangeRateUSDAsync(null);
        }
        
        /// <remarks/>
        public void GetExchangeRateUSDAsync(object userState) {
            if ((this.GetExchangeRateUSDOperationCompleted == null)) {
                this.GetExchangeRateUSDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExchangeRateUSDOperationCompleted);
            }
            this.InvokeAsync("GetExchangeRateUSD", new object[0], this.GetExchangeRateUSDOperationCompleted, userState);
        }
        
        private void OnGetExchangeRateUSDOperationCompleted(object arg) {
            if ((this.GetExchangeRateUSDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExchangeRateUSDCompleted(this, new GetExchangeRateUSDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Login", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Login(string username, string password) {
            object[] results = this.Invoke("Login", new object[] {
                        username,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoginAsync(string username, string password) {
            this.LoginAsync(username, password, null);
        }
        
        /// <remarks/>
        public void LoginAsync(string username, string password, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        username,
                        password}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginOperationCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListOnlineCustomers", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetListOnlineCustomers() {
            object[] results = this.Invoke("GetListOnlineCustomers", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetListOnlineCustomersAsync() {
            this.GetListOnlineCustomersAsync(null);
        }
        
        /// <remarks/>
        public void GetListOnlineCustomersAsync(object userState) {
            if ((this.GetListOnlineCustomersOperationCompleted == null)) {
                this.GetListOnlineCustomersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListOnlineCustomersOperationCompleted);
            }
            this.InvokeAsync("GetListOnlineCustomers", new object[0], this.GetListOnlineCustomersOperationCompleted, userState);
        }
        
        private void OnGetListOnlineCustomersOperationCompleted(object arg) {
            if ((this.GetListOnlineCustomersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListOnlineCustomersCompleted(this, new GetListOnlineCustomersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Logout", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Logout() {
            object[] results = this.Invoke("Logout", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LogoutAsync() {
            this.LogoutAsync(null);
        }
        
        /// <remarks/>
        public void LogoutAsync(object userState) {
            if ((this.LogoutOperationCompleted == null)) {
                this.LogoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogoutOperationCompleted);
            }
            this.InvokeAsync("Logout", new object[0], this.LogoutOperationCompleted, userState);
        }
        
        private void OnLogoutOperationCompleted(object arg) {
            if ((this.LogoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogoutCompleted(this, new LogoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAccountInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAccountInfo(string accountId) {
            object[] results = this.Invoke("GetAccountInfo", new object[] {
                        accountId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAccountInfoAsync(string accountId) {
            this.GetAccountInfoAsync(accountId, null);
        }
        
        /// <remarks/>
        public void GetAccountInfoAsync(string accountId, object userState) {
            if ((this.GetAccountInfoOperationCompleted == null)) {
                this.GetAccountInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountInfoOperationCompleted);
            }
            this.InvokeAsync("GetAccountInfo", new object[] {
                        accountId}, this.GetAccountInfoOperationCompleted, userState);
        }
        
        private void OnGetAccountInfoOperationCompleted(object arg) {
            if ((this.GetAccountInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountInfoCompleted(this, new GetAccountInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ForgetPassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ForgetPassword(string mainCustAccountId, string identifyNumber, string messagePhone) {
            object[] results = this.Invoke("ForgetPassword", new object[] {
                        mainCustAccountId,
                        identifyNumber,
                        messagePhone});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ForgetPasswordAsync(string mainCustAccountId, string identifyNumber, string messagePhone) {
            this.ForgetPasswordAsync(mainCustAccountId, identifyNumber, messagePhone, null);
        }
        
        /// <remarks/>
        public void ForgetPasswordAsync(string mainCustAccountId, string identifyNumber, string messagePhone, object userState) {
            if ((this.ForgetPasswordOperationCompleted == null)) {
                this.ForgetPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnForgetPasswordOperationCompleted);
            }
            this.InvokeAsync("ForgetPassword", new object[] {
                        mainCustAccountId,
                        identifyNumber,
                        messagePhone}, this.ForgetPasswordOperationCompleted, userState);
        }
        
        private void OnForgetPasswordOperationCompleted(object arg) {
            if ((this.ForgetPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ForgetPasswordCompleted(this, new ForgetPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ForgetPin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ForgetPin(string mainCustAccountId) {
            object[] results = this.Invoke("ForgetPin", new object[] {
                        mainCustAccountId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ForgetPinAsync(string mainCustAccountId) {
            this.ForgetPinAsync(mainCustAccountId, null);
        }
        
        /// <remarks/>
        public void ForgetPinAsync(string mainCustAccountId, object userState) {
            if ((this.ForgetPinOperationCompleted == null)) {
                this.ForgetPinOperationCompleted = new System.Threading.SendOrPostCallback(this.OnForgetPinOperationCompleted);
            }
            this.InvokeAsync("ForgetPin", new object[] {
                        mainCustAccountId}, this.ForgetPinOperationCompleted, userState);
        }
        
        private void OnForgetPinOperationCompleted(object arg) {
            if ((this.ForgetPinCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ForgetPinCompleted(this, new ForgetPinCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangePassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ChangePassword(string mainCustAccId, string oldPass, string newPass) {
            object[] results = this.Invoke("ChangePassword", new object[] {
                        mainCustAccId,
                        oldPass,
                        newPass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string mainCustAccId, string oldPass, string newPass) {
            this.ChangePasswordAsync(mainCustAccId, oldPass, newPass, null);
        }
        
        /// <remarks/>
        public void ChangePasswordAsync(string mainCustAccId, string oldPass, string newPass, object userState) {
            if ((this.ChangePasswordOperationCompleted == null)) {
                this.ChangePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePasswordOperationCompleted);
            }
            this.InvokeAsync("ChangePassword", new object[] {
                        mainCustAccId,
                        oldPass,
                        newPass}, this.ChangePasswordOperationCompleted, userState);
        }
        
        private void OnChangePasswordOperationCompleted(object arg) {
            if ((this.ChangePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePasswordCompleted(this, new ChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangePin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ChangePin(string accountId, string oldPin, string newPin) {
            object[] results = this.Invoke("ChangePin", new object[] {
                        accountId,
                        oldPin,
                        newPin});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ChangePinAsync(string accountId, string oldPin, string newPin) {
            this.ChangePinAsync(accountId, oldPin, newPin, null);
        }
        
        /// <remarks/>
        public void ChangePinAsync(string accountId, string oldPin, string newPin, object userState) {
            if ((this.ChangePinOperationCompleted == null)) {
                this.ChangePinOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangePinOperationCompleted);
            }
            this.InvokeAsync("ChangePin", new object[] {
                        accountId,
                        oldPin,
                        newPin}, this.ChangePinOperationCompleted, userState);
        }
        
        private void OnChangePinOperationCompleted(object arg) {
            if ((this.ChangePinCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangePinCompleted(this, new ChangePinCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMessage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string SendMessage(string username, string message) {
            object[] results = this.Invoke("SendMessage", new object[] {
                        username,
                        message});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageAsync(string username, string message) {
            this.SendMessageAsync(username, message, null);
        }
        
        /// <remarks/>
        public void SendMessageAsync(string username, string message, object userState) {
            if ((this.SendMessageOperationCompleted == null)) {
                this.SendMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageOperationCompleted);
            }
            this.InvokeAsync("SendMessage", new object[] {
                        username,
                        message}, this.SendMessageOperationCompleted, userState);
        }
        
        private void OnSendMessageOperationCompleted(object arg) {
            if ((this.SendMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageCompleted(this, new SendMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Connect", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Connect() {
            object[] results = this.Invoke("Connect", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ConnectAsync() {
            this.ConnectAsync(null);
        }
        
        /// <remarks/>
        public void ConnectAsync(object userState) {
            if ((this.ConnectOperationCompleted == null)) {
                this.ConnectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConnectOperationCompleted);
            }
            this.InvokeAsync("Connect", new object[0], this.ConnectOperationCompleted, userState);
        }
        
        private void OnConnectOperationCompleted(object arg) {
            if ((this.ConnectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConnectCompleted(this, new ConnectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Disconnect", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Disconnect() {
            object[] results = this.Invoke("Disconnect", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DisconnectAsync() {
            this.DisconnectAsync(null);
        }
        
        /// <remarks/>
        public void DisconnectAsync(object userState) {
            if ((this.DisconnectOperationCompleted == null)) {
                this.DisconnectOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisconnectOperationCompleted);
            }
            this.InvokeAsync("Disconnect", new object[0], this.DisconnectOperationCompleted, userState);
        }
        
        private void OnDisconnectOperationCompleted(object arg) {
            if ((this.DisconnectCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DisconnectCompleted(this, new DisconnectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsConnected", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string IsConnected() {
            object[] results = this.Invoke("IsConnected", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IsConnectedAsync() {
            this.IsConnectedAsync(null);
        }
        
        /// <remarks/>
        public void IsConnectedAsync(object userState) {
            if ((this.IsConnectedOperationCompleted == null)) {
                this.IsConnectedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsConnectedOperationCompleted);
            }
            this.InvokeAsync("IsConnected", new object[0], this.IsConnectedOperationCompleted, userState);
        }
        
        private void OnIsConnectedOperationCompleted(object arg) {
            if ((this.IsConnectedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsConnectedCompleted(this, new IsConnectedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PutOrder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PutOrder(int market, string accountNo, string pin, string secSymbol, char side, int volume, decimal price, char conPrice, int accountType, char orderSource) {
            object[] results = this.Invoke("PutOrder", new object[] {
                        market,
                        accountNo,
                        pin,
                        secSymbol,
                        side,
                        volume,
                        price,
                        conPrice,
                        accountType,
                        orderSource});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PutOrderAsync(int market, string accountNo, string pin, string secSymbol, char side, int volume, decimal price, char conPrice, int accountType, char orderSource) {
            this.PutOrderAsync(market, accountNo, pin, secSymbol, side, volume, price, conPrice, accountType, orderSource, null);
        }
        
        /// <remarks/>
        public void PutOrderAsync(int market, string accountNo, string pin, string secSymbol, char side, int volume, decimal price, char conPrice, int accountType, char orderSource, object userState) {
            if ((this.PutOrderOperationCompleted == null)) {
                this.PutOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPutOrderOperationCompleted);
            }
            this.InvokeAsync("PutOrder", new object[] {
                        market,
                        accountNo,
                        pin,
                        secSymbol,
                        side,
                        volume,
                        price,
                        conPrice,
                        accountType,
                        orderSource}, this.PutOrderOperationCompleted, userState);
        }
        
        private void OnPutOrderOperationCompleted(object arg) {
            if ((this.PutOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PutOrderCompleted(this, new PutOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelOrder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CancelOrder(int orderId, string accountNo, string pin) {
            object[] results = this.Invoke("CancelOrder", new object[] {
                        orderId,
                        accountNo,
                        pin});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CancelOrderAsync(int orderId, string accountNo, string pin) {
            this.CancelOrderAsync(orderId, accountNo, pin, null);
        }
        
        /// <remarks/>
        public void CancelOrderAsync(int orderId, string accountNo, string pin, object userState) {
            if ((this.CancelOrderOperationCompleted == null)) {
                this.CancelOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelOrderOperationCompleted);
            }
            this.InvokeAsync("CancelOrder", new object[] {
                        orderId,
                        accountNo,
                        pin}, this.CancelOrderOperationCompleted, userState);
        }
        
        private void OnCancelOrderOperationCompleted(object arg) {
            if ((this.CancelOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelOrderCompleted(this, new CancelOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/NewestOrdStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string NewestOrdStatus(int pageSize, int pageIndex, string accountNo, bool isPending, bool isMatched, bool isSemiMatched, bool isCanceling, bool isCancelled, bool isRejected) {
            object[] results = this.Invoke("NewestOrdStatus", new object[] {
                        pageSize,
                        pageIndex,
                        accountNo,
                        isPending,
                        isMatched,
                        isSemiMatched,
                        isCanceling,
                        isCancelled,
                        isRejected});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void NewestOrdStatusAsync(int pageSize, int pageIndex, string accountNo, bool isPending, bool isMatched, bool isSemiMatched, bool isCanceling, bool isCancelled, bool isRejected) {
            this.NewestOrdStatusAsync(pageSize, pageIndex, accountNo, isPending, isMatched, isSemiMatched, isCanceling, isCancelled, isRejected, null);
        }
        
        /// <remarks/>
        public void NewestOrdStatusAsync(int pageSize, int pageIndex, string accountNo, bool isPending, bool isMatched, bool isSemiMatched, bool isCanceling, bool isCancelled, bool isRejected, object userState) {
            if ((this.NewestOrdStatusOperationCompleted == null)) {
                this.NewestOrdStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNewestOrdStatusOperationCompleted);
            }
            this.InvokeAsync("NewestOrdStatus", new object[] {
                        pageSize,
                        pageIndex,
                        accountNo,
                        isPending,
                        isMatched,
                        isSemiMatched,
                        isCanceling,
                        isCancelled,
                        isRejected}, this.NewestOrdStatusOperationCompleted, userState);
        }
        
        private void OnNewestOrdStatusOperationCompleted(object arg) {
            if ((this.NewestOrdStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NewestOrdStatusCompleted(this, new NewestOrdStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/NewestOrdCount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string NewestOrdCount(string accountId, bool isPending, bool isMatched, bool isSemiMatched, bool isCanceling, bool isCancelled, bool isRejected) {
            object[] results = this.Invoke("NewestOrdCount", new object[] {
                        accountId,
                        isPending,
                        isMatched,
                        isSemiMatched,
                        isCanceling,
                        isCancelled,
                        isRejected});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void NewestOrdCountAsync(string accountId, bool isPending, bool isMatched, bool isSemiMatched, bool isCanceling, bool isCancelled, bool isRejected) {
            this.NewestOrdCountAsync(accountId, isPending, isMatched, isSemiMatched, isCanceling, isCancelled, isRejected, null);
        }
        
        /// <remarks/>
        public void NewestOrdCountAsync(string accountId, bool isPending, bool isMatched, bool isSemiMatched, bool isCanceling, bool isCancelled, bool isRejected, object userState) {
            if ((this.NewestOrdCountOperationCompleted == null)) {
                this.NewestOrdCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNewestOrdCountOperationCompleted);
            }
            this.InvokeAsync("NewestOrdCount", new object[] {
                        accountId,
                        isPending,
                        isMatched,
                        isSemiMatched,
                        isCanceling,
                        isCancelled,
                        isRejected}, this.NewestOrdCountOperationCompleted, userState);
        }
        
        private void OnNewestOrdCountOperationCompleted(object arg) {
            if ((this.NewestOrdCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NewestOrdCountCompleted(this, new NewestOrdCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOrderHistory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetOrderHistory(string accountNo, string fromDate, string toDate, string symbol, int orderStatus, int pageIndex, int pageSize) {
            object[] results = this.Invoke("GetOrderHistory", new object[] {
                        accountNo,
                        fromDate,
                        toDate,
                        symbol,
                        orderStatus,
                        pageIndex,
                        pageSize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetOrderHistoryAsync(string accountNo, string fromDate, string toDate, string symbol, int orderStatus, int pageIndex, int pageSize) {
            this.GetOrderHistoryAsync(accountNo, fromDate, toDate, symbol, orderStatus, pageIndex, pageSize, null);
        }
        
        /// <remarks/>
        public void GetOrderHistoryAsync(string accountNo, string fromDate, string toDate, string symbol, int orderStatus, int pageIndex, int pageSize, object userState) {
            if ((this.GetOrderHistoryOperationCompleted == null)) {
                this.GetOrderHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrderHistoryOperationCompleted);
            }
            this.InvokeAsync("GetOrderHistory", new object[] {
                        accountNo,
                        fromDate,
                        toDate,
                        symbol,
                        orderStatus,
                        pageIndex,
                        pageSize}, this.GetOrderHistoryOperationCompleted, userState);
        }
        
        private void OnGetOrderHistoryOperationCompleted(object arg) {
            if ((this.GetOrderHistoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrderHistoryCompleted(this, new GetOrderHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOrderHistoryCount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetOrderHistoryCount(string accountNo, string fromDate, string toDate, string symbol, int orderStatus) {
            object[] results = this.Invoke("GetOrderHistoryCount", new object[] {
                        accountNo,
                        fromDate,
                        toDate,
                        symbol,
                        orderStatus});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetOrderHistoryCountAsync(string accountNo, string fromDate, string toDate, string symbol, int orderStatus) {
            this.GetOrderHistoryCountAsync(accountNo, fromDate, toDate, symbol, orderStatus, null);
        }
        
        /// <remarks/>
        public void GetOrderHistoryCountAsync(string accountNo, string fromDate, string toDate, string symbol, int orderStatus, object userState) {
            if ((this.GetOrderHistoryCountOperationCompleted == null)) {
                this.GetOrderHistoryCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrderHistoryCountOperationCompleted);
            }
            this.InvokeAsync("GetOrderHistoryCount", new object[] {
                        accountNo,
                        fromDate,
                        toDate,
                        symbol,
                        orderStatus}, this.GetOrderHistoryCountOperationCompleted, userState);
        }
        
        private void OnGetOrderHistoryCountOperationCompleted(object arg) {
            if ((this.GetOrderHistoryCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrderHistoryCountCompleted(this, new GetOrderHistoryCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDealHistory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDealHistory(decimal orderNo, string dealDate, int page) {
            object[] results = this.Invoke("GetDealHistory", new object[] {
                        orderNo,
                        dealDate,
                        page});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDealHistoryAsync(decimal orderNo, string dealDate, int page) {
            this.GetDealHistoryAsync(orderNo, dealDate, page, null);
        }
        
        /// <remarks/>
        public void GetDealHistoryAsync(decimal orderNo, string dealDate, int page, object userState) {
            if ((this.GetDealHistoryOperationCompleted == null)) {
                this.GetDealHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDealHistoryOperationCompleted);
            }
            this.InvokeAsync("GetDealHistory", new object[] {
                        orderNo,
                        dealDate,
                        page}, this.GetDealHistoryOperationCompleted, userState);
        }
        
        private void OnGetDealHistoryOperationCompleted(object arg) {
            if ((this.GetDealHistoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDealHistoryCompleted(this, new GetDealHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDealIntraDay", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDealIntraDay(decimal orderNo, int page) {
            object[] results = this.Invoke("GetDealIntraDay", new object[] {
                        orderNo,
                        page});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDealIntraDayAsync(decimal orderNo, int page) {
            this.GetDealIntraDayAsync(orderNo, page, null);
        }
        
        /// <remarks/>
        public void GetDealIntraDayAsync(decimal orderNo, int page, object userState) {
            if ((this.GetDealIntraDayOperationCompleted == null)) {
                this.GetDealIntraDayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDealIntraDayOperationCompleted);
            }
            this.InvokeAsync("GetDealIntraDay", new object[] {
                        orderNo,
                        page}, this.GetDealIntraDayOperationCompleted, userState);
        }
        
        private void OnGetDealIntraDayOperationCompleted(object arg) {
            if ((this.GetDealIntraDayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDealIntraDayCompleted(this, new GetDealIntraDayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPreTradeInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPreTradeInfo(string accountNo, string symbol, int accountType, char side, bool isConditionOrder) {
            object[] results = this.Invoke("GetPreTradeInfo", new object[] {
                        accountNo,
                        symbol,
                        accountType,
                        side,
                        isConditionOrder});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPreTradeInfoAsync(string accountNo, string symbol, int accountType, char side, bool isConditionOrder) {
            this.GetPreTradeInfoAsync(accountNo, symbol, accountType, side, isConditionOrder, null);
        }
        
        /// <remarks/>
        public void GetPreTradeInfoAsync(string accountNo, string symbol, int accountType, char side, bool isConditionOrder, object userState) {
            if ((this.GetPreTradeInfoOperationCompleted == null)) {
                this.GetPreTradeInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPreTradeInfoOperationCompleted);
            }
            this.InvokeAsync("GetPreTradeInfo", new object[] {
                        accountNo,
                        symbol,
                        accountType,
                        side,
                        isConditionOrder}, this.GetPreTradeInfoOperationCompleted, userState);
        }
        
        private void OnGetPreTradeInfoOperationCompleted(object arg) {
            if ((this.GetPreTradeInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPreTradeInfoCompleted(this, new GetPreTradeInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PutAdvanceOrder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string PutAdvanceOrder(int market, string accountNo, string pin, string secSymbol, char side, int volume, decimal price, string strEffDate, string strExpDate, short type, decimal minValue, decimal maxValue) {
            object[] results = this.Invoke("PutAdvanceOrder", new object[] {
                        market,
                        accountNo,
                        pin,
                        secSymbol,
                        side,
                        volume,
                        price,
                        strEffDate,
                        strExpDate,
                        type,
                        minValue,
                        maxValue});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PutAdvanceOrderAsync(int market, string accountNo, string pin, string secSymbol, char side, int volume, decimal price, string strEffDate, string strExpDate, short type, decimal minValue, decimal maxValue) {
            this.PutAdvanceOrderAsync(market, accountNo, pin, secSymbol, side, volume, price, strEffDate, strExpDate, type, minValue, maxValue, null);
        }
        
        /// <remarks/>
        public void PutAdvanceOrderAsync(int market, string accountNo, string pin, string secSymbol, char side, int volume, decimal price, string strEffDate, string strExpDate, short type, decimal minValue, decimal maxValue, object userState) {
            if ((this.PutAdvanceOrderOperationCompleted == null)) {
                this.PutAdvanceOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPutAdvanceOrderOperationCompleted);
            }
            this.InvokeAsync("PutAdvanceOrder", new object[] {
                        market,
                        accountNo,
                        pin,
                        secSymbol,
                        side,
                        volume,
                        price,
                        strEffDate,
                        strExpDate,
                        type,
                        minValue,
                        maxValue}, this.PutAdvanceOrderOperationCompleted, userState);
        }
        
        private void OnPutAdvanceOrderOperationCompleted(object arg) {
            if ((this.PutAdvanceOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PutAdvanceOrderCompleted(this, new PutAdvanceOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelAdvanceOrder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CancelAdvanceOrder(long conditionOrderId, string subCustAccountId, string pin) {
            object[] results = this.Invoke("CancelAdvanceOrder", new object[] {
                        conditionOrderId,
                        subCustAccountId,
                        pin});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CancelAdvanceOrderAsync(long conditionOrderId, string subCustAccountId, string pin) {
            this.CancelAdvanceOrderAsync(conditionOrderId, subCustAccountId, pin, null);
        }
        
        /// <remarks/>
        public void CancelAdvanceOrderAsync(long conditionOrderId, string subCustAccountId, string pin, object userState) {
            if ((this.CancelAdvanceOrderOperationCompleted == null)) {
                this.CancelAdvanceOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelAdvanceOrderOperationCompleted);
            }
            this.InvokeAsync("CancelAdvanceOrder", new object[] {
                        conditionOrderId,
                        subCustAccountId,
                        pin}, this.CancelAdvanceOrderOperationCompleted, userState);
        }
        
        private void OnCancelAdvanceOrderOperationCompleted(object arg) {
            if ((this.CancelAdvanceOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelAdvanceOrderCompleted(this, new CancelAdvanceOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PutConditionOrder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int PutConditionOrder() {
            object[] results = this.Invoke("PutConditionOrder", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void PutConditionOrderAsync() {
            this.PutConditionOrderAsync(null);
        }
        
        /// <remarks/>
        public void PutConditionOrderAsync(object userState) {
            if ((this.PutConditionOrderOperationCompleted == null)) {
                this.PutConditionOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPutConditionOrderOperationCompleted);
            }
            this.InvokeAsync("PutConditionOrder", new object[0], this.PutConditionOrderOperationCompleted, userState);
        }
        
        private void OnPutConditionOrderOperationCompleted(object arg) {
            if ((this.PutConditionOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PutConditionOrderCompleted(this, new PutConditionOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListConditionOrder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetListConditionOrder(string subAccountId, string side, string symbol, int[] status, string fromDate, string toDate, int pageIndex, int pageSize, int fromTool) {
            object[] results = this.Invoke("GetListConditionOrder", new object[] {
                        subAccountId,
                        side,
                        symbol,
                        status,
                        fromDate,
                        toDate,
                        pageIndex,
                        pageSize,
                        fromTool});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetListConditionOrderAsync(string subAccountId, string side, string symbol, int[] status, string fromDate, string toDate, int pageIndex, int pageSize, int fromTool) {
            this.GetListConditionOrderAsync(subAccountId, side, symbol, status, fromDate, toDate, pageIndex, pageSize, fromTool, null);
        }
        
        /// <remarks/>
        public void GetListConditionOrderAsync(string subAccountId, string side, string symbol, int[] status, string fromDate, string toDate, int pageIndex, int pageSize, int fromTool, object userState) {
            if ((this.GetListConditionOrderOperationCompleted == null)) {
                this.GetListConditionOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListConditionOrderOperationCompleted);
            }
            this.InvokeAsync("GetListConditionOrder", new object[] {
                        subAccountId,
                        side,
                        symbol,
                        status,
                        fromDate,
                        toDate,
                        pageIndex,
                        pageSize,
                        fromTool}, this.GetListConditionOrderOperationCompleted, userState);
        }
        
        private void OnGetListConditionOrderOperationCompleted(object arg) {
            if ((this.GetListConditionOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListConditionOrderCompleted(this, new GetListConditionOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListConditionOrderDetail", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetListConditionOrderDetail(long conditionOrderId) {
            object[] results = this.Invoke("GetListConditionOrderDetail", new object[] {
                        conditionOrderId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetListConditionOrderDetailAsync(long conditionOrderId) {
            this.GetListConditionOrderDetailAsync(conditionOrderId, null);
        }
        
        /// <remarks/>
        public void GetListConditionOrderDetailAsync(long conditionOrderId, object userState) {
            if ((this.GetListConditionOrderDetailOperationCompleted == null)) {
                this.GetListConditionOrderDetailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListConditionOrderDetailOperationCompleted);
            }
            this.InvokeAsync("GetListConditionOrderDetail", new object[] {
                        conditionOrderId}, this.GetListConditionOrderDetailOperationCompleted, userState);
        }
        
        private void OnGetListConditionOrderDetailOperationCompleted(object arg) {
            if ((this.GetListConditionOrderDetailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListConditionOrderDetailCompleted(this, new GetListConditionOrderDetailCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ResetConditionOrder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ResetConditionOrder() {
            object[] results = this.Invoke("ResetConditionOrder", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ResetConditionOrderAsync() {
            this.ResetConditionOrderAsync(null);
        }
        
        /// <remarks/>
        public void ResetConditionOrderAsync(object userState) {
            if ((this.ResetConditionOrderOperationCompleted == null)) {
                this.ResetConditionOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResetConditionOrderOperationCompleted);
            }
            this.InvokeAsync("ResetConditionOrder", new object[0], this.ResetConditionOrderOperationCompleted, userState);
        }
        
        private void OnResetConditionOrderOperationCompleted(object arg) {
            if ((this.ResetConditionOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResetConditionOrderCompleted(this, new ResetConditionOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsValidLimitQuantityAdvanceOrder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string IsValidLimitQuantityAdvanceOrder(char side, string subCustAccountId, string symbol) {
            object[] results = this.Invoke("IsValidLimitQuantityAdvanceOrder", new object[] {
                        side,
                        subCustAccountId,
                        symbol});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IsValidLimitQuantityAdvanceOrderAsync(char side, string subCustAccountId, string symbol) {
            this.IsValidLimitQuantityAdvanceOrderAsync(side, subCustAccountId, symbol, null);
        }
        
        /// <remarks/>
        public void IsValidLimitQuantityAdvanceOrderAsync(char side, string subCustAccountId, string symbol, object userState) {
            if ((this.IsValidLimitQuantityAdvanceOrderOperationCompleted == null)) {
                this.IsValidLimitQuantityAdvanceOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsValidLimitQuantityAdvanceOrderOperationCompleted);
            }
            this.InvokeAsync("IsValidLimitQuantityAdvanceOrder", new object[] {
                        side,
                        subCustAccountId,
                        symbol}, this.IsValidLimitQuantityAdvanceOrderOperationCompleted, userState);
        }
        
        private void OnIsValidLimitQuantityAdvanceOrderOperationCompleted(object arg) {
            if ((this.IsValidLimitQuantityAdvanceOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsValidLimitQuantityAdvanceOrderCompleted(this, new IsValidLimitQuantityAdvanceOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetTradingState", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTradingState(int marketId) {
            object[] results = this.Invoke("GetTradingState", new object[] {
                        marketId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTradingStateAsync(int marketId) {
            this.GetTradingStateAsync(marketId, null);
        }
        
        /// <remarks/>
        public void GetTradingStateAsync(int marketId, object userState) {
            if ((this.GetTradingStateOperationCompleted == null)) {
                this.GetTradingStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTradingStateOperationCompleted);
            }
            this.InvokeAsync("GetTradingState", new object[] {
                        marketId}, this.GetTradingStateOperationCompleted, userState);
        }
        
        private void OnGetTradingStateOperationCompleted(object arg) {
            if ((this.GetTradingStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTradingStateCompleted(this, new GetTradingStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllTradingState", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAllTradingState() {
            object[] results = this.Invoke("GetAllTradingState", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllTradingStateAsync() {
            this.GetAllTradingStateAsync(null);
        }
        
        /// <remarks/>
        public void GetAllTradingStateAsync(object userState) {
            if ((this.GetAllTradingStateOperationCompleted == null)) {
                this.GetAllTradingStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllTradingStateOperationCompleted);
            }
            this.InvokeAsync("GetAllTradingState", new object[0], this.GetAllTradingStateOperationCompleted, userState);
        }
        
        private void OnGetAllTradingStateOperationCompleted(object arg) {
            if ((this.GetAllTradingStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllTradingStateCompleted(this, new GetAllTradingStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllOrderSession", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAllOrderSession() {
            object[] results = this.Invoke("GetAllOrderSession", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllOrderSessionAsync() {
            this.GetAllOrderSessionAsync(null);
        }
        
        /// <remarks/>
        public void GetAllOrderSessionAsync(object userState) {
            if ((this.GetAllOrderSessionOperationCompleted == null)) {
                this.GetAllOrderSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllOrderSessionOperationCompleted);
            }
            this.InvokeAsync("GetAllOrderSession", new object[0], this.GetAllOrderSessionOperationCompleted, userState);
        }
        
        private void OnGetAllOrderSessionOperationCompleted(object arg) {
            if ((this.GetAllOrderSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllOrderSessionCompleted(this, new GetAllOrderSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAdvanceHistory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAdvanceHistory(string subAccountNo, string fromAdvanceDate, string toAdvanceDate, string fromSellDate, string toSellDate, int advanceStatus, string contractNo, int pageIndex, int pageSize) {
            object[] results = this.Invoke("GetAdvanceHistory", new object[] {
                        subAccountNo,
                        fromAdvanceDate,
                        toAdvanceDate,
                        fromSellDate,
                        toSellDate,
                        advanceStatus,
                        contractNo,
                        pageIndex,
                        pageSize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAdvanceHistoryAsync(string subAccountNo, string fromAdvanceDate, string toAdvanceDate, string fromSellDate, string toSellDate, int advanceStatus, string contractNo, int pageIndex, int pageSize) {
            this.GetAdvanceHistoryAsync(subAccountNo, fromAdvanceDate, toAdvanceDate, fromSellDate, toSellDate, advanceStatus, contractNo, pageIndex, pageSize, null);
        }
        
        /// <remarks/>
        public void GetAdvanceHistoryAsync(string subAccountNo, string fromAdvanceDate, string toAdvanceDate, string fromSellDate, string toSellDate, int advanceStatus, string contractNo, int pageIndex, int pageSize, object userState) {
            if ((this.GetAdvanceHistoryOperationCompleted == null)) {
                this.GetAdvanceHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAdvanceHistoryOperationCompleted);
            }
            this.InvokeAsync("GetAdvanceHistory", new object[] {
                        subAccountNo,
                        fromAdvanceDate,
                        toAdvanceDate,
                        fromSellDate,
                        toSellDate,
                        advanceStatus,
                        contractNo,
                        pageIndex,
                        pageSize}, this.GetAdvanceHistoryOperationCompleted, userState);
        }
        
        private void OnGetAdvanceHistoryOperationCompleted(object arg) {
            if ((this.GetAdvanceHistoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAdvanceHistoryCompleted(this, new GetAdvanceHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAdvanceInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAdvanceInfo(string accountNo) {
            object[] results = this.Invoke("GetAdvanceInfo", new object[] {
                        accountNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAdvanceInfoAsync(string accountNo) {
            this.GetAdvanceInfoAsync(accountNo, null);
        }
        
        /// <remarks/>
        public void GetAdvanceInfoAsync(string accountNo, object userState) {
            if ((this.GetAdvanceInfoOperationCompleted == null)) {
                this.GetAdvanceInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAdvanceInfoOperationCompleted);
            }
            this.InvokeAsync("GetAdvanceInfo", new object[] {
                        accountNo}, this.GetAdvanceInfoOperationCompleted, userState);
        }
        
        private void OnGetAdvanceInfoOperationCompleted(object arg) {
            if ((this.GetAdvanceInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAdvanceInfoCompleted(this, new GetAdvanceInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/NewCashAdvance", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string NewCashAdvance(string accountNo, string pin, decimal sellAmt, decimal cashAdvance, decimal maxCanAdvance, string tradeDate) {
            object[] results = this.Invoke("NewCashAdvance", new object[] {
                        accountNo,
                        pin,
                        sellAmt,
                        cashAdvance,
                        maxCanAdvance,
                        tradeDate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void NewCashAdvanceAsync(string accountNo, string pin, decimal sellAmt, decimal cashAdvance, decimal maxCanAdvance, string tradeDate) {
            this.NewCashAdvanceAsync(accountNo, pin, sellAmt, cashAdvance, maxCanAdvance, tradeDate, null);
        }
        
        /// <remarks/>
        public void NewCashAdvanceAsync(string accountNo, string pin, decimal sellAmt, decimal cashAdvance, decimal maxCanAdvance, string tradeDate, object userState) {
            if ((this.NewCashAdvanceOperationCompleted == null)) {
                this.NewCashAdvanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnNewCashAdvanceOperationCompleted);
            }
            this.InvokeAsync("NewCashAdvance", new object[] {
                        accountNo,
                        pin,
                        sellAmt,
                        cashAdvance,
                        maxCanAdvance,
                        tradeDate}, this.NewCashAdvanceOperationCompleted, userState);
        }
        
        private void OnNewCashAdvanceOperationCompleted(object arg) {
            if ((this.NewCashAdvanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.NewCashAdvanceCompleted(this, new NewCashAdvanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelCashAdvance", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CancelCashAdvance(string subCustAccountId, string pin, string contractNo) {
            object[] results = this.Invoke("CancelCashAdvance", new object[] {
                        subCustAccountId,
                        pin,
                        contractNo});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CancelCashAdvanceAsync(string subCustAccountId, string pin, string contractNo) {
            this.CancelCashAdvanceAsync(subCustAccountId, pin, contractNo, null);
        }
        
        /// <remarks/>
        public void CancelCashAdvanceAsync(string subCustAccountId, string pin, string contractNo, object userState) {
            if ((this.CancelCashAdvanceOperationCompleted == null)) {
                this.CancelCashAdvanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelCashAdvanceOperationCompleted);
            }
            this.InvokeAsync("CancelCashAdvance", new object[] {
                        subCustAccountId,
                        pin,
                        contractNo}, this.CancelCashAdvanceOperationCompleted, userState);
        }
        
        private void OnCancelCashAdvanceOperationCompleted(object arg) {
            if ((this.CancelCashAdvanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelCashAdvanceCompleted(this, new CancelCashAdvanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCashAdvanceStatus", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCashAdvanceStatus(string accountNo, string fromDate, string toDate, int status, int pageIndex, int pageSize) {
            object[] results = this.Invoke("GetCashAdvanceStatus", new object[] {
                        accountNo,
                        fromDate,
                        toDate,
                        status,
                        pageIndex,
                        pageSize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCashAdvanceStatusAsync(string accountNo, string fromDate, string toDate, int status, int pageIndex, int pageSize) {
            this.GetCashAdvanceStatusAsync(accountNo, fromDate, toDate, status, pageIndex, pageSize, null);
        }
        
        /// <remarks/>
        public void GetCashAdvanceStatusAsync(string accountNo, string fromDate, string toDate, int status, int pageIndex, int pageSize, object userState) {
            if ((this.GetCashAdvanceStatusOperationCompleted == null)) {
                this.GetCashAdvanceStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCashAdvanceStatusOperationCompleted);
            }
            this.InvokeAsync("GetCashAdvanceStatus", new object[] {
                        accountNo,
                        fromDate,
                        toDate,
                        status,
                        pageIndex,
                        pageSize}, this.GetCashAdvanceStatusOperationCompleted, userState);
        }
        
        private void OnGetCashAdvanceStatusOperationCompleted(object arg) {
            if ((this.GetCashAdvanceStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCashAdvanceStatusCompleted(this, new GetCashAdvanceStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetActualTrade", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetActualTrade(string subAccountNo, string fromDate, string toDate, string symbol, int pageNumber, int pageSize) {
            object[] results = this.Invoke("GetActualTrade", new object[] {
                        subAccountNo,
                        fromDate,
                        toDate,
                        symbol,
                        pageNumber,
                        pageSize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetActualTradeAsync(string subAccountNo, string fromDate, string toDate, string symbol, int pageNumber, int pageSize) {
            this.GetActualTradeAsync(subAccountNo, fromDate, toDate, symbol, pageNumber, pageSize, null);
        }
        
        /// <remarks/>
        public void GetActualTradeAsync(string subAccountNo, string fromDate, string toDate, string symbol, int pageNumber, int pageSize, object userState) {
            if ((this.GetActualTradeOperationCompleted == null)) {
                this.GetActualTradeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetActualTradeOperationCompleted);
            }
            this.InvokeAsync("GetActualTrade", new object[] {
                        subAccountNo,
                        fromDate,
                        toDate,
                        symbol,
                        pageNumber,
                        pageSize}, this.GetActualTradeOperationCompleted, userState);
        }
        
        private void OnGetActualTradeOperationCompleted(object arg) {
            if ((this.GetActualTradeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetActualTradeCompleted(this, new GetActualTradeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetXDInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetXDInfo(string accountNo, string symbol, string fromDate, string toDate, int pageIndex, int pageSize) {
            object[] results = this.Invoke("GetXDInfo", new object[] {
                        accountNo,
                        symbol,
                        fromDate,
                        toDate,
                        pageIndex,
                        pageSize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetXDInfoAsync(string accountNo, string symbol, string fromDate, string toDate, int pageIndex, int pageSize) {
            this.GetXDInfoAsync(accountNo, symbol, fromDate, toDate, pageIndex, pageSize, null);
        }
        
        /// <remarks/>
        public void GetXDInfoAsync(string accountNo, string symbol, string fromDate, string toDate, int pageIndex, int pageSize, object userState) {
            if ((this.GetXDInfoOperationCompleted == null)) {
                this.GetXDInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetXDInfoOperationCompleted);
            }
            this.InvokeAsync("GetXDInfo", new object[] {
                        accountNo,
                        symbol,
                        fromDate,
                        toDate,
                        pageIndex,
                        pageSize}, this.GetXDInfoOperationCompleted, userState);
        }
        
        private void OnGetXDInfoOperationCompleted(object arg) {
            if ((this.GetXDInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetXDInfoCompleted(this, new GetXDInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetXRInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetXRInfo(string accountNo, string symbol, string fromDate, string toDate, int xType, int pageIndex, int pageSize) {
            object[] results = this.Invoke("GetXRInfo", new object[] {
                        accountNo,
                        symbol,
                        fromDate,
                        toDate,
                        xType,
                        pageIndex,
                        pageSize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetXRInfoAsync(string accountNo, string symbol, string fromDate, string toDate, int xType, int pageIndex, int pageSize) {
            this.GetXRInfoAsync(accountNo, symbol, fromDate, toDate, xType, pageIndex, pageSize, null);
        }
        
        /// <remarks/>
        public void GetXRInfoAsync(string accountNo, string symbol, string fromDate, string toDate, int xType, int pageIndex, int pageSize, object userState) {
            if ((this.GetXRInfoOperationCompleted == null)) {
                this.GetXRInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetXRInfoOperationCompleted);
            }
            this.InvokeAsync("GetXRInfo", new object[] {
                        accountNo,
                        symbol,
                        fromDate,
                        toDate,
                        xType,
                        pageIndex,
                        pageSize}, this.GetXRInfoOperationCompleted, userState);
        }
        
        private void OnGetXRInfoOperationCompleted(object arg) {
            if ((this.GetXRInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetXRInfoCompleted(this, new GetXRInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListPnLHistory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetListPnLHistory(string accountNo, string fromDate, string toDate, string symbol, int pageIndex, int pageSize) {
            object[] results = this.Invoke("GetListPnLHistory", new object[] {
                        accountNo,
                        fromDate,
                        toDate,
                        symbol,
                        pageIndex,
                        pageSize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetListPnLHistoryAsync(string accountNo, string fromDate, string toDate, string symbol, int pageIndex, int pageSize) {
            this.GetListPnLHistoryAsync(accountNo, fromDate, toDate, symbol, pageIndex, pageSize, null);
        }
        
        /// <remarks/>
        public void GetListPnLHistoryAsync(string accountNo, string fromDate, string toDate, string symbol, int pageIndex, int pageSize, object userState) {
            if ((this.GetListPnLHistoryOperationCompleted == null)) {
                this.GetListPnLHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListPnLHistoryOperationCompleted);
            }
            this.InvokeAsync("GetListPnLHistory", new object[] {
                        accountNo,
                        fromDate,
                        toDate,
                        symbol,
                        pageIndex,
                        pageSize}, this.GetListPnLHistoryOperationCompleted, userState);
        }
        
        private void OnGetListPnLHistoryOperationCompleted(object arg) {
            if ((this.GetListPnLHistoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListPnLHistoryCompleted(this, new GetListPnLHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBankAccountInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBankAccountInfo(string subAccountNo) {
            object[] results = this.Invoke("GetBankAccountInfo", new object[] {
                        subAccountNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBankAccountInfoAsync(string subAccountNo) {
            this.GetBankAccountInfoAsync(subAccountNo, null);
        }
        
        /// <remarks/>
        public void GetBankAccountInfoAsync(string subAccountNo, object userState) {
            if ((this.GetBankAccountInfoOperationCompleted == null)) {
                this.GetBankAccountInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBankAccountInfoOperationCompleted);
            }
            this.InvokeAsync("GetBankAccountInfo", new object[] {
                        subAccountNo}, this.GetBankAccountInfoOperationCompleted, userState);
        }
        
        private void OnGetBankAccountInfoOperationCompleted(object arg) {
            if ((this.GetBankAccountInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBankAccountInfoCompleted(this, new GetBankAccountInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMarginRatio", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMarginRatio(string accountNo) {
            object[] results = this.Invoke("GetMarginRatio", new object[] {
                        accountNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMarginRatioAsync(string accountNo) {
            this.GetMarginRatioAsync(accountNo, null);
        }
        
        /// <remarks/>
        public void GetMarginRatioAsync(string accountNo, object userState) {
            if ((this.GetMarginRatioOperationCompleted == null)) {
                this.GetMarginRatioOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMarginRatioOperationCompleted);
            }
            this.InvokeAsync("GetMarginRatio", new object[] {
                        accountNo}, this.GetMarginRatioOperationCompleted, userState);
        }
        
        private void OnGetMarginRatioOperationCompleted(object arg) {
            if ((this.GetMarginRatioCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMarginRatioCompleted(this, new GetMarginRatioCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMarginPortfolio", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMarginPortfolio(string accountNo) {
            object[] results = this.Invoke("GetMarginPortfolio", new object[] {
                        accountNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMarginPortfolioAsync(string accountNo) {
            this.GetMarginPortfolioAsync(accountNo, null);
        }
        
        /// <remarks/>
        public void GetMarginPortfolioAsync(string accountNo, object userState) {
            if ((this.GetMarginPortfolioOperationCompleted == null)) {
                this.GetMarginPortfolioOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMarginPortfolioOperationCompleted);
            }
            this.InvokeAsync("GetMarginPortfolio", new object[] {
                        accountNo}, this.GetMarginPortfolioOperationCompleted, userState);
        }
        
        private void OnGetMarginPortfolioOperationCompleted(object arg) {
            if ((this.GetMarginPortfolioCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMarginPortfolioCompleted(this, new GetMarginPortfolioCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsCallMargin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string IsCallMargin(string accountNo) {
            object[] results = this.Invoke("IsCallMargin", new object[] {
                        accountNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IsCallMarginAsync(string accountNo) {
            this.IsCallMarginAsync(accountNo, null);
        }
        
        /// <remarks/>
        public void IsCallMarginAsync(string accountNo, object userState) {
            if ((this.IsCallMarginOperationCompleted == null)) {
                this.IsCallMarginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsCallMarginOperationCompleted);
            }
            this.InvokeAsync("IsCallMargin", new object[] {
                        accountNo}, this.IsCallMarginOperationCompleted, userState);
        }
        
        private void OnIsCallMarginOperationCompleted(object arg) {
            if ((this.IsCallMarginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsCallMarginCompleted(this, new IsCallMarginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/IsCallForceSell", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string IsCallForceSell(string accountNo) {
            object[] results = this.Invoke("IsCallForceSell", new object[] {
                        accountNo});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void IsCallForceSellAsync(string accountNo) {
            this.IsCallForceSellAsync(accountNo, null);
        }
        
        /// <remarks/>
        public void IsCallForceSellAsync(string accountNo, object userState) {
            if ((this.IsCallForceSellOperationCompleted == null)) {
                this.IsCallForceSellOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsCallForceSellOperationCompleted);
            }
            this.InvokeAsync("IsCallForceSell", new object[] {
                        accountNo}, this.IsCallForceSellOperationCompleted, userState);
        }
        
        private void OnIsCallForceSellOperationCompleted(object arg) {
            if ((this.IsCallForceSellCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsCallForceSellCompleted(this, new IsCallForceSellCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelCashTransfer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CancelCashTransfer(long id, string pin, string note) {
            object[] results = this.Invoke("CancelCashTransfer", new object[] {
                        id,
                        pin,
                        note});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CancelCashTransferAsync(long id, string pin, string note) {
            this.CancelCashTransferAsync(id, pin, note, null);
        }
        
        /// <remarks/>
        public void CancelCashTransferAsync(long id, string pin, string note, object userState) {
            if ((this.CancelCashTransferOperationCompleted == null)) {
                this.CancelCashTransferOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelCashTransferOperationCompleted);
            }
            this.InvokeAsync("CancelCashTransfer", new object[] {
                        id,
                        pin,
                        note}, this.CancelCashTransferOperationCompleted, userState);
        }
        
        private void OnCancelCashTransferOperationCompleted(object arg) {
            if ((this.CancelCashTransferCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelCashTransferCompleted(this, new CancelCashTransferCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListCashTransOrder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetListCashTransOrder(string sourceAccountID, string destAccountID, int transType, int status, string note, string brokerID, int pageIndex, int pageSize) {
            object[] results = this.Invoke("GetListCashTransOrder", new object[] {
                        sourceAccountID,
                        destAccountID,
                        transType,
                        status,
                        note,
                        brokerID,
                        pageIndex,
                        pageSize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetListCashTransOrderAsync(string sourceAccountID, string destAccountID, int transType, int status, string note, string brokerID, int pageIndex, int pageSize) {
            this.GetListCashTransOrderAsync(sourceAccountID, destAccountID, transType, status, note, brokerID, pageIndex, pageSize, null);
        }
        
        /// <remarks/>
        public void GetListCashTransOrderAsync(string sourceAccountID, string destAccountID, int transType, int status, string note, string brokerID, int pageIndex, int pageSize, object userState) {
            if ((this.GetListCashTransOrderOperationCompleted == null)) {
                this.GetListCashTransOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListCashTransOrderOperationCompleted);
            }
            this.InvokeAsync("GetListCashTransOrder", new object[] {
                        sourceAccountID,
                        destAccountID,
                        transType,
                        status,
                        note,
                        brokerID,
                        pageIndex,
                        pageSize}, this.GetListCashTransOrderOperationCompleted, userState);
        }
        
        private void OnGetListCashTransOrderOperationCompleted(object arg) {
            if ((this.GetListCashTransOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListCashTransOrderCompleted(this, new GetListCashTransOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListCashTransOrderHist", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetListCashTransOrderHist(string sourceAccountID, string destAccountID, string fromDate, string toDate, int transType, int status, string note, string brokerID, int pageIndex, int pageSize) {
            object[] results = this.Invoke("GetListCashTransOrderHist", new object[] {
                        sourceAccountID,
                        destAccountID,
                        fromDate,
                        toDate,
                        transType,
                        status,
                        note,
                        brokerID,
                        pageIndex,
                        pageSize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetListCashTransOrderHistAsync(string sourceAccountID, string destAccountID, string fromDate, string toDate, int transType, int status, string note, string brokerID, int pageIndex, int pageSize) {
            this.GetListCashTransOrderHistAsync(sourceAccountID, destAccountID, fromDate, toDate, transType, status, note, brokerID, pageIndex, pageSize, null);
        }
        
        /// <remarks/>
        public void GetListCashTransOrderHistAsync(string sourceAccountID, string destAccountID, string fromDate, string toDate, int transType, int status, string note, string brokerID, int pageIndex, int pageSize, object userState) {
            if ((this.GetListCashTransOrderHistOperationCompleted == null)) {
                this.GetListCashTransOrderHistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListCashTransOrderHistOperationCompleted);
            }
            this.InvokeAsync("GetListCashTransOrderHist", new object[] {
                        sourceAccountID,
                        destAccountID,
                        fromDate,
                        toDate,
                        transType,
                        status,
                        note,
                        brokerID,
                        pageIndex,
                        pageSize}, this.GetListCashTransOrderHistOperationCompleted, userState);
        }
        
        private void OnGetListCashTransOrderHistOperationCompleted(object arg) {
            if ((this.GetListCashTransOrderHistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListCashTransOrderHistCompleted(this, new GetListCashTransOrderHistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PutCashTransOrder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int PutCashTransOrder(string sourceAccountID, string destAccountID, string bankName, string branchName, string Pin, decimal requestAmt, int transType, string note) {
            object[] results = this.Invoke("PutCashTransOrder", new object[] {
                        sourceAccountID,
                        destAccountID,
                        bankName,
                        branchName,
                        Pin,
                        requestAmt,
                        transType,
                        note});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void PutCashTransOrderAsync(string sourceAccountID, string destAccountID, string bankName, string branchName, string Pin, decimal requestAmt, int transType, string note) {
            this.PutCashTransOrderAsync(sourceAccountID, destAccountID, bankName, branchName, Pin, requestAmt, transType, note, null);
        }
        
        /// <remarks/>
        public void PutCashTransOrderAsync(string sourceAccountID, string destAccountID, string bankName, string branchName, string Pin, decimal requestAmt, int transType, string note, object userState) {
            if ((this.PutCashTransOrderOperationCompleted == null)) {
                this.PutCashTransOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPutCashTransOrderOperationCompleted);
            }
            this.InvokeAsync("PutCashTransOrder", new object[] {
                        sourceAccountID,
                        destAccountID,
                        bankName,
                        branchName,
                        Pin,
                        requestAmt,
                        transType,
                        note}, this.PutCashTransOrderOperationCompleted, userState);
        }
        
        private void OnPutCashTransOrderOperationCompleted(object arg) {
            if ((this.PutCashTransOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PutCashTransOrderCompleted(this, new PutCashTransOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCashTransferInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCashTransferInfo(string subAccountId, int accountType) {
            object[] results = this.Invoke("GetCashTransferInfo", new object[] {
                        subAccountId,
                        accountType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCashTransferInfoAsync(string subAccountId, int accountType) {
            this.GetCashTransferInfoAsync(subAccountId, accountType, null);
        }
        
        /// <remarks/>
        public void GetCashTransferInfoAsync(string subAccountId, int accountType, object userState) {
            if ((this.GetCashTransferInfoOperationCompleted == null)) {
                this.GetCashTransferInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCashTransferInfoOperationCompleted);
            }
            this.InvokeAsync("GetCashTransferInfo", new object[] {
                        subAccountId,
                        accountType}, this.GetCashTransferInfoOperationCompleted, userState);
        }
        
        private void OnGetCashTransferInfoOperationCompleted(object arg) {
            if ((this.GetCashTransferInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCashTransferInfoCompleted(this, new GetCashTransferInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelStockTransfer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CancelStockTransfer(long id, string pin, string note) {
            object[] results = this.Invoke("CancelStockTransfer", new object[] {
                        id,
                        pin,
                        note});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CancelStockTransferAsync(long id, string pin, string note) {
            this.CancelStockTransferAsync(id, pin, note, null);
        }
        
        /// <remarks/>
        public void CancelStockTransferAsync(long id, string pin, string note, object userState) {
            if ((this.CancelStockTransferOperationCompleted == null)) {
                this.CancelStockTransferOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelStockTransferOperationCompleted);
            }
            this.InvokeAsync("CancelStockTransfer", new object[] {
                        id,
                        pin,
                        note}, this.CancelStockTransferOperationCompleted, userState);
        }
        
        private void OnCancelStockTransferOperationCompleted(object arg) {
            if ((this.CancelStockTransferCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelStockTransferCompleted(this, new CancelStockTransferCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PutStockTransOrder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int PutStockTransOrder(string sourceAccountID, string destAccountID, string pin, string secSymbol, long requestAmt, int transType, string note) {
            object[] results = this.Invoke("PutStockTransOrder", new object[] {
                        sourceAccountID,
                        destAccountID,
                        pin,
                        secSymbol,
                        requestAmt,
                        transType,
                        note});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void PutStockTransOrderAsync(string sourceAccountID, string destAccountID, string pin, string secSymbol, long requestAmt, int transType, string note) {
            this.PutStockTransOrderAsync(sourceAccountID, destAccountID, pin, secSymbol, requestAmt, transType, note, null);
        }
        
        /// <remarks/>
        public void PutStockTransOrderAsync(string sourceAccountID, string destAccountID, string pin, string secSymbol, long requestAmt, int transType, string note, object userState) {
            if ((this.PutStockTransOrderOperationCompleted == null)) {
                this.PutStockTransOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPutStockTransOrderOperationCompleted);
            }
            this.InvokeAsync("PutStockTransOrder", new object[] {
                        sourceAccountID,
                        destAccountID,
                        pin,
                        secSymbol,
                        requestAmt,
                        transType,
                        note}, this.PutStockTransOrderOperationCompleted, userState);
        }
        
        private void OnPutStockTransOrderOperationCompleted(object arg) {
            if ((this.PutStockTransOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PutStockTransOrderCompleted(this, new PutStockTransOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetStockTransferInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetStockTransferInfo(string subAccountId, string secSymbol, int accountType) {
            object[] results = this.Invoke("GetStockTransferInfo", new object[] {
                        subAccountId,
                        secSymbol,
                        accountType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetStockTransferInfoAsync(string subAccountId, string secSymbol, int accountType) {
            this.GetStockTransferInfoAsync(subAccountId, secSymbol, accountType, null);
        }
        
        /// <remarks/>
        public void GetStockTransferInfoAsync(string subAccountId, string secSymbol, int accountType, object userState) {
            if ((this.GetStockTransferInfoOperationCompleted == null)) {
                this.GetStockTransferInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetStockTransferInfoOperationCompleted);
            }
            this.InvokeAsync("GetStockTransferInfo", new object[] {
                        subAccountId,
                        secSymbol,
                        accountType}, this.GetStockTransferInfoOperationCompleted, userState);
        }
        
        private void OnGetStockTransferInfoOperationCompleted(object arg) {
            if ((this.GetStockTransferInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetStockTransferInfoCompleted(this, new GetStockTransferInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListStockTransferInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetListStockTransferInfo(string subAccountId, int accountType, int pageIndex, int pageSize) {
            object[] results = this.Invoke("GetListStockTransferInfo", new object[] {
                        subAccountId,
                        accountType,
                        pageIndex,
                        pageSize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetListStockTransferInfoAsync(string subAccountId, int accountType, int pageIndex, int pageSize) {
            this.GetListStockTransferInfoAsync(subAccountId, accountType, pageIndex, pageSize, null);
        }
        
        /// <remarks/>
        public void GetListStockTransferInfoAsync(string subAccountId, int accountType, int pageIndex, int pageSize, object userState) {
            if ((this.GetListStockTransferInfoOperationCompleted == null)) {
                this.GetListStockTransferInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListStockTransferInfoOperationCompleted);
            }
            this.InvokeAsync("GetListStockTransferInfo", new object[] {
                        subAccountId,
                        accountType,
                        pageIndex,
                        pageSize}, this.GetListStockTransferInfoOperationCompleted, userState);
        }
        
        private void OnGetListStockTransferInfoOperationCompleted(object arg) {
            if ((this.GetListStockTransferInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListStockTransferInfoCompleted(this, new GetListStockTransferInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListStockTransOrder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetListStockTransOrder(string sourceAccountID, string destAccountID, string secSymbol, int transType, int status, string note, string brokerID, int pageIndex, int pageSize) {
            object[] results = this.Invoke("GetListStockTransOrder", new object[] {
                        sourceAccountID,
                        destAccountID,
                        secSymbol,
                        transType,
                        status,
                        note,
                        brokerID,
                        pageIndex,
                        pageSize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetListStockTransOrderAsync(string sourceAccountID, string destAccountID, string secSymbol, int transType, int status, string note, string brokerID, int pageIndex, int pageSize) {
            this.GetListStockTransOrderAsync(sourceAccountID, destAccountID, secSymbol, transType, status, note, brokerID, pageIndex, pageSize, null);
        }
        
        /// <remarks/>
        public void GetListStockTransOrderAsync(string sourceAccountID, string destAccountID, string secSymbol, int transType, int status, string note, string brokerID, int pageIndex, int pageSize, object userState) {
            if ((this.GetListStockTransOrderOperationCompleted == null)) {
                this.GetListStockTransOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListStockTransOrderOperationCompleted);
            }
            this.InvokeAsync("GetListStockTransOrder", new object[] {
                        sourceAccountID,
                        destAccountID,
                        secSymbol,
                        transType,
                        status,
                        note,
                        brokerID,
                        pageIndex,
                        pageSize}, this.GetListStockTransOrderOperationCompleted, userState);
        }
        
        private void OnGetListStockTransOrderOperationCompleted(object arg) {
            if ((this.GetListStockTransOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListStockTransOrderCompleted(this, new GetListStockTransOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListStockTransOrderHist", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetListStockTransOrderHist(string sourceAccountID, string destAccountID, string secSymbol, string fromDate, string toDate, int transType, int status, string note, string brokerID, int pageIndex, int pageSize) {
            object[] results = this.Invoke("GetListStockTransOrderHist", new object[] {
                        sourceAccountID,
                        destAccountID,
                        secSymbol,
                        fromDate,
                        toDate,
                        transType,
                        status,
                        note,
                        brokerID,
                        pageIndex,
                        pageSize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetListStockTransOrderHistAsync(string sourceAccountID, string destAccountID, string secSymbol, string fromDate, string toDate, int transType, int status, string note, string brokerID, int pageIndex, int pageSize) {
            this.GetListStockTransOrderHistAsync(sourceAccountID, destAccountID, secSymbol, fromDate, toDate, transType, status, note, brokerID, pageIndex, pageSize, null);
        }
        
        /// <remarks/>
        public void GetListStockTransOrderHistAsync(string sourceAccountID, string destAccountID, string secSymbol, string fromDate, string toDate, int transType, int status, string note, string brokerID, int pageIndex, int pageSize, object userState) {
            if ((this.GetListStockTransOrderHistOperationCompleted == null)) {
                this.GetListStockTransOrderHistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListStockTransOrderHistOperationCompleted);
            }
            this.InvokeAsync("GetListStockTransOrderHist", new object[] {
                        sourceAccountID,
                        destAccountID,
                        secSymbol,
                        fromDate,
                        toDate,
                        transType,
                        status,
                        note,
                        brokerID,
                        pageIndex,
                        pageSize}, this.GetListStockTransOrderHistOperationCompleted, userState);
        }
        
        private void OnGetListStockTransOrderHistOperationCompleted(object arg) {
            if ((this.GetListStockTransOrderHistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListStockTransOrderHistCompleted(this, new GetListStockTransOrderHistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RecoveryPackages", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObjectOfBoolean RecoveryPackages(int fromSeq, int toSeq) {
            object[] results = this.Invoke("RecoveryPackages", new object[] {
                        fromSeq,
                        toSeq});
            return ((ResultObjectOfBoolean)(results[0]));
        }
        
        /// <remarks/>
        public void RecoveryPackagesAsync(int fromSeq, int toSeq) {
            this.RecoveryPackagesAsync(fromSeq, toSeq, null);
        }
        
        /// <remarks/>
        public void RecoveryPackagesAsync(int fromSeq, int toSeq, object userState) {
            if ((this.RecoveryPackagesOperationCompleted == null)) {
                this.RecoveryPackagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecoveryPackagesOperationCompleted);
            }
            this.InvokeAsync("RecoveryPackages", new object[] {
                        fromSeq,
                        toSeq}, this.RecoveryPackagesOperationCompleted, userState);
        }
        
        private void OnRecoveryPackagesOperationCompleted(object arg) {
            if ((this.RecoveryPackagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RecoveryPackagesCompleted(this, new RecoveryPackagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateOpenCustAccount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateOpenCustAccount(
                    string cardId, 
                    System.DateTime cardIssue, 
                    string placeIssue, 
                    string name, 
                    System.DateTime birthday, 
                    bool sex, 
                    string occupation, 
                    string nationality, 
                    string address1, 
                    string telephone1, 
                    string fax1, 
                    string address2, 
                    string telephone2, 
                    string fax2, 
                    string address3, 
                    string telephone3, 
                    string fax3, 
                    string email, 
                    string branchCode, 
                    string branchName, 
                    bool custodian, 
                    string customerType, 
                    bool tradeAtCompany, 
                    bool tradeByTelephone, 
                    bool tradeOnline, 
                    bool existedAccount) {
            object[] results = this.Invoke("CreateOpenCustAccount", new object[] {
                        cardId,
                        cardIssue,
                        placeIssue,
                        name,
                        birthday,
                        sex,
                        occupation,
                        nationality,
                        address1,
                        telephone1,
                        fax1,
                        address2,
                        telephone2,
                        fax2,
                        address3,
                        telephone3,
                        fax3,
                        email,
                        branchCode,
                        branchName,
                        custodian,
                        customerType,
                        tradeAtCompany,
                        tradeByTelephone,
                        tradeOnline,
                        existedAccount});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateOpenCustAccountAsync(
                    string cardId, 
                    System.DateTime cardIssue, 
                    string placeIssue, 
                    string name, 
                    System.DateTime birthday, 
                    bool sex, 
                    string occupation, 
                    string nationality, 
                    string address1, 
                    string telephone1, 
                    string fax1, 
                    string address2, 
                    string telephone2, 
                    string fax2, 
                    string address3, 
                    string telephone3, 
                    string fax3, 
                    string email, 
                    string branchCode, 
                    string branchName, 
                    bool custodian, 
                    string customerType, 
                    bool tradeAtCompany, 
                    bool tradeByTelephone, 
                    bool tradeOnline, 
                    bool existedAccount) {
            this.CreateOpenCustAccountAsync(cardId, cardIssue, placeIssue, name, birthday, sex, occupation, nationality, address1, telephone1, fax1, address2, telephone2, fax2, address3, telephone3, fax3, email, branchCode, branchName, custodian, customerType, tradeAtCompany, tradeByTelephone, tradeOnline, existedAccount, null);
        }
        
        /// <remarks/>
        public void CreateOpenCustAccountAsync(
                    string cardId, 
                    System.DateTime cardIssue, 
                    string placeIssue, 
                    string name, 
                    System.DateTime birthday, 
                    bool sex, 
                    string occupation, 
                    string nationality, 
                    string address1, 
                    string telephone1, 
                    string fax1, 
                    string address2, 
                    string telephone2, 
                    string fax2, 
                    string address3, 
                    string telephone3, 
                    string fax3, 
                    string email, 
                    string branchCode, 
                    string branchName, 
                    bool custodian, 
                    string customerType, 
                    bool tradeAtCompany, 
                    bool tradeByTelephone, 
                    bool tradeOnline, 
                    bool existedAccount, 
                    object userState) {
            if ((this.CreateOpenCustAccountOperationCompleted == null)) {
                this.CreateOpenCustAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateOpenCustAccountOperationCompleted);
            }
            this.InvokeAsync("CreateOpenCustAccount", new object[] {
                        cardId,
                        cardIssue,
                        placeIssue,
                        name,
                        birthday,
                        sex,
                        occupation,
                        nationality,
                        address1,
                        telephone1,
                        fax1,
                        address2,
                        telephone2,
                        fax2,
                        address3,
                        telephone3,
                        fax3,
                        email,
                        branchCode,
                        branchName,
                        custodian,
                        customerType,
                        tradeAtCompany,
                        tradeByTelephone,
                        tradeOnline,
                        existedAccount}, this.CreateOpenCustAccountOperationCompleted, userState);
        }
        
        private void OnCreateOpenCustAccountOperationCompleted(object arg) {
            if ((this.CreateOpenCustAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateOpenCustAccountCompleted(this, new CreateOpenCustAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOddLotOrderInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetOddLotOrderInfo(string accountNo, int accountType) {
            object[] results = this.Invoke("GetOddLotOrderInfo", new object[] {
                        accountNo,
                        accountType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetOddLotOrderInfoAsync(string accountNo, int accountType) {
            this.GetOddLotOrderInfoAsync(accountNo, accountType, null);
        }
        
        /// <remarks/>
        public void GetOddLotOrderInfoAsync(string accountNo, int accountType, object userState) {
            if ((this.GetOddLotOrderInfoOperationCompleted == null)) {
                this.GetOddLotOrderInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOddLotOrderInfoOperationCompleted);
            }
            this.InvokeAsync("GetOddLotOrderInfo", new object[] {
                        accountNo,
                        accountType}, this.GetOddLotOrderInfoOperationCompleted, userState);
        }
        
        private void OnGetOddLotOrderInfoOperationCompleted(object arg) {
            if ((this.GetOddLotOrderInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOddLotOrderInfoCompleted(this, new GetOddLotOrderInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListOddLotOrderHist", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetListOddLotOrderHist(string secSymbol, string side, string fromDate, string toDate, string subCustAccountID, string market, int status, string brokerID, string note, int pageIndex, int pageSize) {
            object[] results = this.Invoke("GetListOddLotOrderHist", new object[] {
                        secSymbol,
                        side,
                        fromDate,
                        toDate,
                        subCustAccountID,
                        market,
                        status,
                        brokerID,
                        note,
                        pageIndex,
                        pageSize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetListOddLotOrderHistAsync(string secSymbol, string side, string fromDate, string toDate, string subCustAccountID, string market, int status, string brokerID, string note, int pageIndex, int pageSize) {
            this.GetListOddLotOrderHistAsync(secSymbol, side, fromDate, toDate, subCustAccountID, market, status, brokerID, note, pageIndex, pageSize, null);
        }
        
        /// <remarks/>
        public void GetListOddLotOrderHistAsync(string secSymbol, string side, string fromDate, string toDate, string subCustAccountID, string market, int status, string brokerID, string note, int pageIndex, int pageSize, object userState) {
            if ((this.GetListOddLotOrderHistOperationCompleted == null)) {
                this.GetListOddLotOrderHistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListOddLotOrderHistOperationCompleted);
            }
            this.InvokeAsync("GetListOddLotOrderHist", new object[] {
                        secSymbol,
                        side,
                        fromDate,
                        toDate,
                        subCustAccountID,
                        market,
                        status,
                        brokerID,
                        note,
                        pageIndex,
                        pageSize}, this.GetListOddLotOrderHistOperationCompleted, userState);
        }
        
        private void OnGetListOddLotOrderHistOperationCompleted(object arg) {
            if ((this.GetListOddLotOrderHistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListOddLotOrderHistCompleted(this, new GetListOddLotOrderHistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListOddLotOrder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetListOddLotOrder(string secSymbol, string side, string subCustAccountID, string market, int status, string brokerID, string note, int pageIndex, int pageSize) {
            object[] results = this.Invoke("GetListOddLotOrder", new object[] {
                        secSymbol,
                        side,
                        subCustAccountID,
                        market,
                        status,
                        brokerID,
                        note,
                        pageIndex,
                        pageSize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetListOddLotOrderAsync(string secSymbol, string side, string subCustAccountID, string market, int status, string brokerID, string note, int pageIndex, int pageSize) {
            this.GetListOddLotOrderAsync(secSymbol, side, subCustAccountID, market, status, brokerID, note, pageIndex, pageSize, null);
        }
        
        /// <remarks/>
        public void GetListOddLotOrderAsync(string secSymbol, string side, string subCustAccountID, string market, int status, string brokerID, string note, int pageIndex, int pageSize, object userState) {
            if ((this.GetListOddLotOrderOperationCompleted == null)) {
                this.GetListOddLotOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListOddLotOrderOperationCompleted);
            }
            this.InvokeAsync("GetListOddLotOrder", new object[] {
                        secSymbol,
                        side,
                        subCustAccountID,
                        market,
                        status,
                        brokerID,
                        note,
                        pageIndex,
                        pageSize}, this.GetListOddLotOrderOperationCompleted, userState);
        }
        
        private void OnGetListOddLotOrderOperationCompleted(object arg) {
            if ((this.GetListOddLotOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListOddLotOrderCompleted(this, new GetListOddLotOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelOddLotOrder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CancelOddLotOrder(long id, string pin, string note) {
            object[] results = this.Invoke("CancelOddLotOrder", new object[] {
                        id,
                        pin,
                        note});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CancelOddLotOrderAsync(long id, string pin, string note) {
            this.CancelOddLotOrderAsync(id, pin, note, null);
        }
        
        /// <remarks/>
        public void CancelOddLotOrderAsync(long id, string pin, string note, object userState) {
            if ((this.CancelOddLotOrderOperationCompleted == null)) {
                this.CancelOddLotOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelOddLotOrderOperationCompleted);
            }
            this.InvokeAsync("CancelOddLotOrder", new object[] {
                        id,
                        pin,
                        note}, this.CancelOddLotOrderOperationCompleted, userState);
        }
        
        private void OnCancelOddLotOrderOperationCompleted(object arg) {
            if ((this.CancelOddLotOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelOddLotOrderCompleted(this, new CancelOddLotOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PutOddLotOrder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int PutOddLotOrder(string secSymbol, string side, decimal price, long volume, string subCustAccountID, string market, string note, string pin) {
            object[] results = this.Invoke("PutOddLotOrder", new object[] {
                        secSymbol,
                        side,
                        price,
                        volume,
                        subCustAccountID,
                        market,
                        note,
                        pin});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void PutOddLotOrderAsync(string secSymbol, string side, decimal price, long volume, string subCustAccountID, string market, string note, string pin) {
            this.PutOddLotOrderAsync(secSymbol, side, price, volume, subCustAccountID, market, note, pin, null);
        }
        
        /// <remarks/>
        public void PutOddLotOrderAsync(string secSymbol, string side, decimal price, long volume, string subCustAccountID, string market, string note, string pin, object userState) {
            if ((this.PutOddLotOrderOperationCompleted == null)) {
                this.PutOddLotOrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPutOddLotOrderOperationCompleted);
            }
            this.InvokeAsync("PutOddLotOrder", new object[] {
                        secSymbol,
                        side,
                        price,
                        volume,
                        subCustAccountID,
                        market,
                        note,
                        pin}, this.PutOddLotOrderOperationCompleted, userState);
        }
        
        private void OnPutOddLotOrderOperationCompleted(object arg) {
            if ((this.PutOddLotOrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PutOddLotOrderCompleted(this, new PutOddLotOrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListBuyRight", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetListBuyRight(string subAccountId, int pageIndex, int pageSize) {
            object[] results = this.Invoke("GetListBuyRight", new object[] {
                        subAccountId,
                        pageIndex,
                        pageSize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetListBuyRightAsync(string subAccountId, int pageIndex, int pageSize) {
            this.GetListBuyRightAsync(subAccountId, pageIndex, pageSize, null);
        }
        
        /// <remarks/>
        public void GetListBuyRightAsync(string subAccountId, int pageIndex, int pageSize, object userState) {
            if ((this.GetListBuyRightOperationCompleted == null)) {
                this.GetListBuyRightOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListBuyRightOperationCompleted);
            }
            this.InvokeAsync("GetListBuyRight", new object[] {
                        subAccountId,
                        pageIndex,
                        pageSize}, this.GetListBuyRightOperationCompleted, userState);
        }
        
        private void OnGetListBuyRightOperationCompleted(object arg) {
            if ((this.GetListBuyRightCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListBuyRightCompleted(this, new GetListBuyRightCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/PutXROrder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int PutXROrder(string subAccountId, string pin, string secSymbol, char market, long requestVol, string note) {
            object[] results = this.Invoke("PutXROrder", new object[] {
                        subAccountId,
                        pin,
                        secSymbol,
                        market,
                        requestVol,
                        note});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void PutXROrderAsync(string subAccountId, string pin, string secSymbol, char market, long requestVol, string note) {
            this.PutXROrderAsync(subAccountId, pin, secSymbol, market, requestVol, note, null);
        }
        
        /// <remarks/>
        public void PutXROrderAsync(string subAccountId, string pin, string secSymbol, char market, long requestVol, string note, object userState) {
            if ((this.PutXROrderOperationCompleted == null)) {
                this.PutXROrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPutXROrderOperationCompleted);
            }
            this.InvokeAsync("PutXROrder", new object[] {
                        subAccountId,
                        pin,
                        secSymbol,
                        market,
                        requestVol,
                        note}, this.PutXROrderOperationCompleted, userState);
        }
        
        private void OnPutXROrderOperationCompleted(object arg) {
            if ((this.PutXROrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PutXROrderCompleted(this, new PutXROrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CancelXROrder", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CancelXROrder(long id, string pin, string note) {
            object[] results = this.Invoke("CancelXROrder", new object[] {
                        id,
                        pin,
                        note});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CancelXROrderAsync(long id, string pin, string note) {
            this.CancelXROrderAsync(id, pin, note, null);
        }
        
        /// <remarks/>
        public void CancelXROrderAsync(long id, string pin, string note, object userState) {
            if ((this.CancelXROrderOperationCompleted == null)) {
                this.CancelXROrderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelXROrderOperationCompleted);
            }
            this.InvokeAsync("CancelXROrder", new object[] {
                        id,
                        pin,
                        note}, this.CancelXROrderOperationCompleted, userState);
        }
        
        private void OnCancelXROrderOperationCompleted(object arg) {
            if ((this.CancelXROrderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelXROrderCompleted(this, new CancelXROrderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListXROrderHist", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetListXROrderHist(long id, string subAccountId, string secSymbol, string market, string fromDate, string toDate, int status, string brokerID, string note, int pageIndex, int pageSize) {
            object[] results = this.Invoke("GetListXROrderHist", new object[] {
                        id,
                        subAccountId,
                        secSymbol,
                        market,
                        fromDate,
                        toDate,
                        status,
                        brokerID,
                        note,
                        pageIndex,
                        pageSize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetListXROrderHistAsync(long id, string subAccountId, string secSymbol, string market, string fromDate, string toDate, int status, string brokerID, string note, int pageIndex, int pageSize) {
            this.GetListXROrderHistAsync(id, subAccountId, secSymbol, market, fromDate, toDate, status, brokerID, note, pageIndex, pageSize, null);
        }
        
        /// <remarks/>
        public void GetListXROrderHistAsync(long id, string subAccountId, string secSymbol, string market, string fromDate, string toDate, int status, string brokerID, string note, int pageIndex, int pageSize, object userState) {
            if ((this.GetListXROrderHistOperationCompleted == null)) {
                this.GetListXROrderHistOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListXROrderHistOperationCompleted);
            }
            this.InvokeAsync("GetListXROrderHist", new object[] {
                        id,
                        subAccountId,
                        secSymbol,
                        market,
                        fromDate,
                        toDate,
                        status,
                        brokerID,
                        note,
                        pageIndex,
                        pageSize}, this.GetListXROrderHistOperationCompleted, userState);
        }
        
        private void OnGetListXROrderHistOperationCompleted(object arg) {
            if ((this.GetListXROrderHistCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListXROrderHistCompleted(this, new GetListXROrderHistCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/StartFISUpdater", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int StartFISUpdater() {
            object[] results = this.Invoke("StartFISUpdater", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void StartFISUpdaterAsync() {
            this.StartFISUpdaterAsync(null);
        }
        
        /// <remarks/>
        public void StartFISUpdaterAsync(object userState) {
            if ((this.StartFISUpdaterOperationCompleted == null)) {
                this.StartFISUpdaterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStartFISUpdaterOperationCompleted);
            }
            this.InvokeAsync("StartFISUpdater", new object[0], this.StartFISUpdaterOperationCompleted, userState);
        }
        
        private void OnStartFISUpdaterOperationCompleted(object arg) {
            if ((this.StartFISUpdaterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StartFISUpdaterCompleted(this, new StartFISUpdaterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/StopFISUpdater", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int StopFISUpdater() {
            object[] results = this.Invoke("StopFISUpdater", new object[0]);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void StopFISUpdaterAsync() {
            this.StopFISUpdaterAsync(null);
        }
        
        /// <remarks/>
        public void StopFISUpdaterAsync(object userState) {
            if ((this.StopFISUpdaterOperationCompleted == null)) {
                this.StopFISUpdaterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnStopFISUpdaterOperationCompleted);
            }
            this.InvokeAsync("StopFISUpdater", new object[0], this.StopFISUpdaterOperationCompleted, userState);
        }
        
        private void OnStopFISUpdaterOperationCompleted(object arg) {
            if ((this.StopFISUpdaterCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.StopFISUpdaterCompleted(this, new StopFISUpdaterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckOrderSession", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] CheckOrderSession() {
            object[] results = this.Invoke("CheckOrderSession", new object[0]);
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void CheckOrderSessionAsync() {
            this.CheckOrderSessionAsync(null);
        }
        
        /// <remarks/>
        public void CheckOrderSessionAsync(object userState) {
            if ((this.CheckOrderSessionOperationCompleted == null)) {
                this.CheckOrderSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckOrderSessionOperationCompleted);
            }
            this.InvokeAsync("CheckOrderSession", new object[0], this.CheckOrderSessionOperationCompleted, userState);
        }
        
        private void OnCheckOrderSessionOperationCompleted(object arg) {
            if ((this.CheckOrderSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckOrderSessionCompleted(this, new CheckOrderSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckConditionOrderThreadRun", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckConditionOrderThreadRun(int marketId) {
            object[] results = this.Invoke("CheckConditionOrderThreadRun", new object[] {
                        marketId});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckConditionOrderThreadRunAsync(int marketId) {
            this.CheckConditionOrderThreadRunAsync(marketId, null);
        }
        
        /// <remarks/>
        public void CheckConditionOrderThreadRunAsync(int marketId, object userState) {
            if ((this.CheckConditionOrderThreadRunOperationCompleted == null)) {
                this.CheckConditionOrderThreadRunOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckConditionOrderThreadRunOperationCompleted);
            }
            this.InvokeAsync("CheckConditionOrderThreadRun", new object[] {
                        marketId}, this.CheckConditionOrderThreadRunOperationCompleted, userState);
        }
        
        private void OnCheckConditionOrderThreadRunOperationCompleted(object arg) {
            if ((this.CheckConditionOrderThreadRunCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckConditionOrderThreadRunCompleted(this, new CheckConditionOrderThreadRunCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckUpdateSessionMakertThreadRun", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckUpdateSessionMakertThreadRun() {
            object[] results = this.Invoke("CheckUpdateSessionMakertThreadRun", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckUpdateSessionMakertThreadRunAsync() {
            this.CheckUpdateSessionMakertThreadRunAsync(null);
        }
        
        /// <remarks/>
        public void CheckUpdateSessionMakertThreadRunAsync(object userState) {
            if ((this.CheckUpdateSessionMakertThreadRunOperationCompleted == null)) {
                this.CheckUpdateSessionMakertThreadRunOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckUpdateSessionMakertThreadRunOperationCompleted);
            }
            this.InvokeAsync("CheckUpdateSessionMakertThreadRun", new object[0], this.CheckUpdateSessionMakertThreadRunOperationCompleted, userState);
        }
        
        private void OnCheckUpdateSessionMakertThreadRunOperationCompleted(object arg) {
            if ((this.CheckUpdateSessionMakertThreadRunCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckUpdateSessionMakertThreadRunCompleted(this, new CheckUpdateSessionMakertThreadRunCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckFISUpdaterThreadRun", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckFISUpdaterThreadRun() {
            object[] results = this.Invoke("CheckFISUpdaterThreadRun", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckFISUpdaterThreadRunAsync() {
            this.CheckFISUpdaterThreadRunAsync(null);
        }
        
        /// <remarks/>
        public void CheckFISUpdaterThreadRunAsync(object userState) {
            if ((this.CheckFISUpdaterThreadRunOperationCompleted == null)) {
                this.CheckFISUpdaterThreadRunOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckFISUpdaterThreadRunOperationCompleted);
            }
            this.InvokeAsync("CheckFISUpdaterThreadRun", new object[0], this.CheckFISUpdaterThreadRunOperationCompleted, userState);
        }
        
        private void OnCheckFISUpdaterThreadRunOperationCompleted(object arg) {
            if ((this.CheckFISUpdaterThreadRunCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckFISUpdaterThreadRunCompleted(this, new CheckFISUpdaterThreadRunCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllConditionOrderResult", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int[] GetAllConditionOrderResult() {
            object[] results = this.Invoke("GetAllConditionOrderResult", new object[0]);
            return ((int[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAllConditionOrderResultAsync() {
            this.GetAllConditionOrderResultAsync(null);
        }
        
        /// <remarks/>
        public void GetAllConditionOrderResultAsync(object userState) {
            if ((this.GetAllConditionOrderResultOperationCompleted == null)) {
                this.GetAllConditionOrderResultOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllConditionOrderResultOperationCompleted);
            }
            this.InvokeAsync("GetAllConditionOrderResult", new object[0], this.GetAllConditionOrderResultOperationCompleted, userState);
        }
        
        private void OnGetAllConditionOrderResultOperationCompleted(object arg) {
            if ((this.GetAllConditionOrderResultCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllConditionOrderResultCompleted(this, new GetAllConditionOrderResultCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public partial class ResultObjectOfBoolean {
        
        private RET_CODE retCodeField;
        
        private bool resultField;
        
        private string errorMessageField;
        
        /// <remarks/>
        public RET_CODE RetCode {
            get {
                return this.retCodeField;
            }
            set {
                this.retCodeField = value;
            }
        }
        
        /// <remarks/>
        public bool Result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        /// <remarks/>
        public string ErrorMessage {
            get {
                return this.errorMessageField;
            }
            set {
                this.errorMessageField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum RET_CODE {
        
        /// <remarks/>
        SUCCESS,
        
        /// <remarks/>
        FAIL,
        
        /// <remarks/>
        SYSTEM_ERROR,
        
        /// <remarks/>
        NO_EXISTED_DATA,
        
        /// <remarks/>
        EXISTED_DATA,
        
        /// <remarks/>
        ERROR_ACCOUNT,
        
        /// <remarks/>
        INCORRECT_USER_PASSWORD,
        
        /// <remarks/>
        INCORRECT_PASSWORD,
        
        /// <remarks/>
        PASSWORD_NOT_MATCH,
        
        /// <remarks/>
        PASSWORD_EMPTY,
        
        /// <remarks/>
        NOT_LOGIN,
        
        /// <remarks/>
        PASSWORD_INACTIVED,
        
        /// <remarks/>
        ACCOUNT_INACTIVE,
        
        /// <remarks/>
        SEND_WARNING_SMS,
        
        /// <remarks/>
        SHOW_CAPTCHA,
        
        /// <remarks/>
        ACCOUNT_LOCKED,
        
        /// <remarks/>
        ERROR_NOT_STOCK_AVAILABLE,
        
        /// <remarks/>
        ERROR_NOT_CASH_AVAILABLE,
        
        /// <remarks/>
        IS_VALID,
        
        /// <remarks/>
        NOT_ALLOW,
        
        /// <remarks/>
        INCORRECT_PIN,
        
        /// <remarks/>
        ERROR_GW_NOT_CONNECTED,
        
        /// <remarks/>
        ERROR_GW_NOT_SEND,
        
        /// <remarks/>
        INCORRECT_FORMAT,
        
        /// <remarks/>
        ERROR_INVALID_CASH_ADVANCE,
        
        /// <remarks/>
        ERROR_NOT_ENOUGH_CASH_TO_ADVANCE,
        
        /// <remarks/>
        ERROR_CANNOT_ADVANCE_IN_DUE_DATE,
        
        /// <remarks/>
        ERROR_CANNOT_ADVANCE_OUTOF_TIME,
        
        /// <remarks/>
        ERROR_CANNOT_ADVANCE_FOR_TRADING_AT_AFTERNOON,
        
        /// <remarks/>
        ERROR_CANNOT_CANCEL_IN_PROCESSING,
        
        /// <remarks/>
        ERROR_CANNOT_CANCEL_ADVANCE_FINISHED,
        
        /// <remarks/>
        ERROR_CANNOT_CANCEL_ADVANCE_REFJECTED,
        
        /// <remarks/>
        ERROR_CANNOT_CANCEL_ADVANCE_CANCELED,
        
        /// <remarks/>
        RANGE_OVERLAP,
        
        /// <remarks/>
        OUT_OF_NEXT_DAY_ORDER_TIME,
        
        /// <remarks/>
        ADVANCE_ORDER_STATUS_INCORRECT_STATE,
        
        /// <remarks/>
        ERROR_NOT_SAME_ACCOUNT,
        
        /// <remarks/>
        ERROR_REQUEST_AMOUNT,
        
        /// <remarks/>
        ERROR_INVALID_WITHDRAWAL,
        
        /// <remarks/>
        ERROR_CANNOT_CANCEL_CASH_TRANSFER,
        
        /// <remarks/>
        ERROR_CANNOT_CANCEL_STOCK_TRANSFER,
        
        /// <remarks/>
        ERROR_CANNOT_CANCEL_BUY_RIGHT,
        
        /// <remarks/>
        ERROR_CANNOT_CANCEL_ODD_LOT_ORDER,
        
        /// <remarks/>
        ERROR_CANNOT_DELETE,
        
        /// <remarks/>
        ERROR_OVER_REQUEST_CAN_BUY_RIGHT,
        
        /// <remarks/>
        ERROR_NOT_EXIST_BUY_RIGHT,
        
        /// <remarks/>
        ERROR_REQUEST_VOLUME_BUY_RIGHT,
        
        /// <remarks/>
        ERROR_CANNOT_CANCEL_XRORDER,
        
        /// <remarks/>
        ERROR_NOT_EXIST_SUB_ACCOUNT,
        
        /// <remarks/>
        ERROR_EMPTY,
        
        /// <remarks/>
        ERROR_MIN_LENGTH,
        
        /// <remarks/>
        ERROR_MAX_LENGTH,
        
        /// <remarks/>
        ERROR_INVALID_DATETIME,
        
        /// <remarks/>
        ERROR_DEBT_ACCOUNT,
        
        /// <remarks/>
        INVALID_EE_RATIO,
        
        /// <remarks/>
        INCORECT_STATE,
        
        /// <remarks/>
        INCORECT_INFORMATION,
        
        /// <remarks/>
        ERROR_SENT_MESSAGE,
        
        /// <remarks/>
        CAN_NOT_CHANGE_PASS_RSA,
        
        /// <remarks/>
        ERROR_NOT_ENOUGH_CASH,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void UpdateConfigurationCompletedEventHandler(object sender, UpdateConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetAvailableCashCompletedEventHandler(object sender, GetAvailableCashCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableCashCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableCashCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetAvailableCashForMarginAccountCompletedEventHandler(object sender, GetAvailableCashForMarginAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableCashForMarginAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableCashForMarginAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetPortfolioCompletedEventHandler(object sender, GetPortfolioCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPortfolioCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPortfolioCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetListPortfolioCompletedEventHandler(object sender, GetListPortfolioCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListPortfolioCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListPortfolioCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetAvailableStockCompletedEventHandler(object sender, GetAvailableStockCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailableStockCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAvailableStockCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetCashBalanceCompletedEventHandler(object sender, GetCashBalanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCashBalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCashBalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetPortfolioDirectCompletedEventHandler(object sender, GetPortfolioDirectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPortfolioDirectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPortfolioDirectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetExchangeRateUSDCompletedEventHandler(object sender, GetExchangeRateUSDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExchangeRateUSDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExchangeRateUSDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public decimal Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((decimal)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetListOnlineCustomersCompletedEventHandler(object sender, GetListOnlineCustomersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListOnlineCustomersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListOnlineCustomersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void LogoutCompletedEventHandler(object sender, LogoutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetAccountInfoCompletedEventHandler(object sender, GetAccountInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccountInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void ForgetPasswordCompletedEventHandler(object sender, ForgetPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ForgetPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ForgetPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void ForgetPinCompletedEventHandler(object sender, ForgetPinCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ForgetPinCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ForgetPinCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void ChangePasswordCompletedEventHandler(object sender, ChangePasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void ChangePinCompletedEventHandler(object sender, ChangePinCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangePinCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangePinCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void SendMessageCompletedEventHandler(object sender, SendMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void ConnectCompletedEventHandler(object sender, ConnectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConnectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConnectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void DisconnectCompletedEventHandler(object sender, DisconnectCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DisconnectCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DisconnectCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void IsConnectedCompletedEventHandler(object sender, IsConnectedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsConnectedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsConnectedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void PutOrderCompletedEventHandler(object sender, PutOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PutOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PutOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void CancelOrderCompletedEventHandler(object sender, CancelOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void NewestOrdStatusCompletedEventHandler(object sender, NewestOrdStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NewestOrdStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NewestOrdStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void NewestOrdCountCompletedEventHandler(object sender, NewestOrdCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NewestOrdCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NewestOrdCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetOrderHistoryCompletedEventHandler(object sender, GetOrderHistoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrderHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOrderHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetOrderHistoryCountCompletedEventHandler(object sender, GetOrderHistoryCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrderHistoryCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOrderHistoryCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetDealHistoryCompletedEventHandler(object sender, GetDealHistoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDealHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDealHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetDealIntraDayCompletedEventHandler(object sender, GetDealIntraDayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDealIntraDayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDealIntraDayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetPreTradeInfoCompletedEventHandler(object sender, GetPreTradeInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPreTradeInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPreTradeInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void PutAdvanceOrderCompletedEventHandler(object sender, PutAdvanceOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PutAdvanceOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PutAdvanceOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void CancelAdvanceOrderCompletedEventHandler(object sender, CancelAdvanceOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelAdvanceOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelAdvanceOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void PutConditionOrderCompletedEventHandler(object sender, PutConditionOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PutConditionOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PutConditionOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetListConditionOrderCompletedEventHandler(object sender, GetListConditionOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListConditionOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListConditionOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetListConditionOrderDetailCompletedEventHandler(object sender, GetListConditionOrderDetailCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListConditionOrderDetailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListConditionOrderDetailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void ResetConditionOrderCompletedEventHandler(object sender, ResetConditionOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ResetConditionOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ResetConditionOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void IsValidLimitQuantityAdvanceOrderCompletedEventHandler(object sender, IsValidLimitQuantityAdvanceOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsValidLimitQuantityAdvanceOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsValidLimitQuantityAdvanceOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetTradingStateCompletedEventHandler(object sender, GetTradingStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTradingStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTradingStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetAllTradingStateCompletedEventHandler(object sender, GetAllTradingStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllTradingStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllTradingStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetAllOrderSessionCompletedEventHandler(object sender, GetAllOrderSessionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllOrderSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllOrderSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetAdvanceHistoryCompletedEventHandler(object sender, GetAdvanceHistoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAdvanceHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAdvanceHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetAdvanceInfoCompletedEventHandler(object sender, GetAdvanceInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAdvanceInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAdvanceInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void NewCashAdvanceCompletedEventHandler(object sender, NewCashAdvanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class NewCashAdvanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal NewCashAdvanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void CancelCashAdvanceCompletedEventHandler(object sender, CancelCashAdvanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelCashAdvanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelCashAdvanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetCashAdvanceStatusCompletedEventHandler(object sender, GetCashAdvanceStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCashAdvanceStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCashAdvanceStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetActualTradeCompletedEventHandler(object sender, GetActualTradeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetActualTradeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetActualTradeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetXDInfoCompletedEventHandler(object sender, GetXDInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetXDInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetXDInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetXRInfoCompletedEventHandler(object sender, GetXRInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetXRInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetXRInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetListPnLHistoryCompletedEventHandler(object sender, GetListPnLHistoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListPnLHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListPnLHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetBankAccountInfoCompletedEventHandler(object sender, GetBankAccountInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBankAccountInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBankAccountInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetMarginRatioCompletedEventHandler(object sender, GetMarginRatioCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMarginRatioCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMarginRatioCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetMarginPortfolioCompletedEventHandler(object sender, GetMarginPortfolioCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMarginPortfolioCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMarginPortfolioCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void IsCallMarginCompletedEventHandler(object sender, IsCallMarginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsCallMarginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsCallMarginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void IsCallForceSellCompletedEventHandler(object sender, IsCallForceSellCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsCallForceSellCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsCallForceSellCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void CancelCashTransferCompletedEventHandler(object sender, CancelCashTransferCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelCashTransferCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelCashTransferCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetListCashTransOrderCompletedEventHandler(object sender, GetListCashTransOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListCashTransOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListCashTransOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetListCashTransOrderHistCompletedEventHandler(object sender, GetListCashTransOrderHistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListCashTransOrderHistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListCashTransOrderHistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void PutCashTransOrderCompletedEventHandler(object sender, PutCashTransOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PutCashTransOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PutCashTransOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetCashTransferInfoCompletedEventHandler(object sender, GetCashTransferInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCashTransferInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCashTransferInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void CancelStockTransferCompletedEventHandler(object sender, CancelStockTransferCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelStockTransferCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelStockTransferCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void PutStockTransOrderCompletedEventHandler(object sender, PutStockTransOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PutStockTransOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PutStockTransOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetStockTransferInfoCompletedEventHandler(object sender, GetStockTransferInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetStockTransferInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetStockTransferInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetListStockTransferInfoCompletedEventHandler(object sender, GetListStockTransferInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListStockTransferInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListStockTransferInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetListStockTransOrderCompletedEventHandler(object sender, GetListStockTransOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListStockTransOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListStockTransOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetListStockTransOrderHistCompletedEventHandler(object sender, GetListStockTransOrderHistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListStockTransOrderHistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListStockTransOrderHistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void RecoveryPackagesCompletedEventHandler(object sender, RecoveryPackagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RecoveryPackagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RecoveryPackagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObjectOfBoolean Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObjectOfBoolean)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void CreateOpenCustAccountCompletedEventHandler(object sender, CreateOpenCustAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateOpenCustAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateOpenCustAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetOddLotOrderInfoCompletedEventHandler(object sender, GetOddLotOrderInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOddLotOrderInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOddLotOrderInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetListOddLotOrderHistCompletedEventHandler(object sender, GetListOddLotOrderHistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListOddLotOrderHistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListOddLotOrderHistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetListOddLotOrderCompletedEventHandler(object sender, GetListOddLotOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListOddLotOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListOddLotOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void CancelOddLotOrderCompletedEventHandler(object sender, CancelOddLotOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelOddLotOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelOddLotOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void PutOddLotOrderCompletedEventHandler(object sender, PutOddLotOrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PutOddLotOrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PutOddLotOrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetListBuyRightCompletedEventHandler(object sender, GetListBuyRightCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListBuyRightCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListBuyRightCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void PutXROrderCompletedEventHandler(object sender, PutXROrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PutXROrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PutXROrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void CancelXROrderCompletedEventHandler(object sender, CancelXROrderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CancelXROrderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CancelXROrderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetListXROrderHistCompletedEventHandler(object sender, GetListXROrderHistCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListXROrderHistCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListXROrderHistCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void StartFISUpdaterCompletedEventHandler(object sender, StartFISUpdaterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StartFISUpdaterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StartFISUpdaterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void StopFISUpdaterCompletedEventHandler(object sender, StopFISUpdaterCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class StopFISUpdaterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal StopFISUpdaterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void CheckOrderSessionCompletedEventHandler(object sender, CheckOrderSessionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckOrderSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckOrderSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void CheckConditionOrderThreadRunCompletedEventHandler(object sender, CheckConditionOrderThreadRunCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckConditionOrderThreadRunCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckConditionOrderThreadRunCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void CheckUpdateSessionMakertThreadRunCompletedEventHandler(object sender, CheckUpdateSessionMakertThreadRunCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckUpdateSessionMakertThreadRunCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckUpdateSessionMakertThreadRunCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void CheckFISUpdaterThreadRunCompletedEventHandler(object sender, CheckFISUpdaterThreadRunCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckFISUpdaterThreadRunCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckFISUpdaterThreadRunCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void GetAllConditionOrderResultCompletedEventHandler(object sender, GetAllConditionOrderResultCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllConditionOrderResultCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllConditionOrderResultCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591