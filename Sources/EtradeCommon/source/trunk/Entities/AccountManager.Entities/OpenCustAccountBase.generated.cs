
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Wednesday, October 27, 2010
	Important: Do not modify this file. Edit the file OpenCustAccount.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Web.Script.Serialization;

using AccountManager.Entities.Validation;
#endregion

namespace AccountManager.Entities
{
	///<summary>
	/// An object representation of the 'OpenCustAccount' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class OpenCustAccountBase : EntityBase, IOpenCustAccount, IEntityId<OpenCustAccountKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private OpenCustAccountEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private OpenCustAccountEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private OpenCustAccountEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<OpenCustAccount> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event OpenCustAccountEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event OpenCustAccountEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="OpenCustAccountBase"/> instance.
		///</summary>
		public OpenCustAccountBase()
		{
			this.entityData = new OpenCustAccountEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="OpenCustAccountBase"/> instance.
		///</summary>
		///<param name="_openId"></param>
		///<param name="_registerDate"></param>
		///<param name="_cardId"></param>
		///<param name="_cardIssue"></param>
		///<param name="_placeIssue"></param>
		///<param name="_name"></param>
		///<param name="_birthday"></param>
		///<param name="_sex"></param>
		///<param name="_occupation"></param>
		///<param name="_nationality"></param>
		///<param name="_address1"></param>
		///<param name="_telephone1"></param>
		///<param name="_fax1"></param>
		///<param name="_address2"></param>
		///<param name="_telephone2"></param>
		///<param name="_fax2"></param>
		///<param name="_address3"></param>
		///<param name="_telephone3"></param>
		///<param name="_fax3"></param>
		///<param name="_email"></param>
		///<param name="_branchCode"></param>
		///<param name="_branchName"></param>
		///<param name="_custodian"></param>
		///<param name="_customerType"></param>
		///<param name="_tradeAtCompany"></param>
		///<param name="_tradeByTelephone"></param>
		///<param name="_tradeOnline"></param>
		///<param name="_existedAccount"></param>
		public OpenCustAccountBase(System.String _openId, System.DateTime? _registerDate, 
			System.String _cardId, System.DateTime? _cardIssue, System.String _placeIssue, 
			System.String _name, System.DateTime? _birthday, System.Boolean? _sex, System.String _occupation, 
			System.String _nationality, System.String _address1, System.String _telephone1, 
			System.String _fax1, System.String _address2, System.String _telephone2, System.String _fax2, 
			System.String _address3, System.String _telephone3, System.String _fax3, System.String _email, 
			System.String _branchCode, System.String _branchName, System.Boolean? _custodian, 
			System.String _customerType, System.Boolean? _tradeAtCompany, System.Boolean? _tradeByTelephone, 
			System.Boolean? _tradeOnline, System.Boolean? _existedAccount)
		{
			this.entityData = new OpenCustAccountEntityData();
			this.backupData = null;

			this.OpenId = _openId;
			this.RegisterDate = _registerDate;
			this.CardId = _cardId;
			this.CardIssue = _cardIssue;
			this.PlaceIssue = _placeIssue;
			this.Name = _name;
			this.Birthday = _birthday;
			this.Sex = _sex;
			this.Occupation = _occupation;
			this.Nationality = _nationality;
			this.Address1 = _address1;
			this.Telephone1 = _telephone1;
			this.Fax1 = _fax1;
			this.Address2 = _address2;
			this.Telephone2 = _telephone2;
			this.Fax2 = _fax2;
			this.Address3 = _address3;
			this.Telephone3 = _telephone3;
			this.Fax3 = _fax3;
			this.Email = _email;
			this.BranchCode = _branchCode;
			this.BranchName = _branchName;
			this.Custodian = _custodian;
			this.CustomerType = _customerType;
			this.TradeAtCompany = _tradeAtCompany;
			this.TradeByTelephone = _tradeByTelephone;
			this.TradeOnline = _tradeOnline;
			this.ExistedAccount = _existedAccount;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="OpenCustAccount"/> instance.
		///</summary>
		///<param name="_openId"></param>
		///<param name="_registerDate"></param>
		///<param name="_cardId"></param>
		///<param name="_cardIssue"></param>
		///<param name="_placeIssue"></param>
		///<param name="_name"></param>
		///<param name="_birthday"></param>
		///<param name="_sex"></param>
		///<param name="_occupation"></param>
		///<param name="_nationality"></param>
		///<param name="_address1"></param>
		///<param name="_telephone1"></param>
		///<param name="_fax1"></param>
		///<param name="_address2"></param>
		///<param name="_telephone2"></param>
		///<param name="_fax2"></param>
		///<param name="_address3"></param>
		///<param name="_telephone3"></param>
		///<param name="_fax3"></param>
		///<param name="_email"></param>
		///<param name="_branchCode"></param>
		///<param name="_branchName"></param>
		///<param name="_custodian"></param>
		///<param name="_customerType"></param>
		///<param name="_tradeAtCompany"></param>
		///<param name="_tradeByTelephone"></param>
		///<param name="_tradeOnline"></param>
		///<param name="_existedAccount"></param>
		public static OpenCustAccount CreateOpenCustAccount(System.String _openId, System.DateTime? _registerDate, 
			System.String _cardId, System.DateTime? _cardIssue, System.String _placeIssue, 
			System.String _name, System.DateTime? _birthday, System.Boolean? _sex, System.String _occupation, 
			System.String _nationality, System.String _address1, System.String _telephone1, 
			System.String _fax1, System.String _address2, System.String _telephone2, System.String _fax2, 
			System.String _address3, System.String _telephone3, System.String _fax3, System.String _email, 
			System.String _branchCode, System.String _branchName, System.Boolean? _custodian, 
			System.String _customerType, System.Boolean? _tradeAtCompany, System.Boolean? _tradeByTelephone, 
			System.Boolean? _tradeOnline, System.Boolean? _existedAccount)
		{
			OpenCustAccount newOpenCustAccount = new OpenCustAccount();
			newOpenCustAccount.OpenId = _openId;
			newOpenCustAccount.RegisterDate = _registerDate;
			newOpenCustAccount.CardId = _cardId;
			newOpenCustAccount.CardIssue = _cardIssue;
			newOpenCustAccount.PlaceIssue = _placeIssue;
			newOpenCustAccount.Name = _name;
			newOpenCustAccount.Birthday = _birthday;
			newOpenCustAccount.Sex = _sex;
			newOpenCustAccount.Occupation = _occupation;
			newOpenCustAccount.Nationality = _nationality;
			newOpenCustAccount.Address1 = _address1;
			newOpenCustAccount.Telephone1 = _telephone1;
			newOpenCustAccount.Fax1 = _fax1;
			newOpenCustAccount.Address2 = _address2;
			newOpenCustAccount.Telephone2 = _telephone2;
			newOpenCustAccount.Fax2 = _fax2;
			newOpenCustAccount.Address3 = _address3;
			newOpenCustAccount.Telephone3 = _telephone3;
			newOpenCustAccount.Fax3 = _fax3;
			newOpenCustAccount.Email = _email;
			newOpenCustAccount.BranchCode = _branchCode;
			newOpenCustAccount.BranchName = _branchName;
			newOpenCustAccount.Custodian = _custodian;
			newOpenCustAccount.CustomerType = _customerType;
			newOpenCustAccount.TradeAtCompany = _tradeAtCompany;
			newOpenCustAccount.TradeByTelephone = _tradeByTelephone;
			newOpenCustAccount.TradeOnline = _tradeOnline;
			newOpenCustAccount.ExistedAccount = _existedAccount;
			return newOpenCustAccount;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the OpenId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 20)]
		public virtual System.String OpenId
		{
			get
			{
				return this.entityData.OpenId; 
			}
			
			set
			{
				if (this.entityData.OpenId == value)
					return;
					
				OnColumnChanging(OpenCustAccountColumn.OpenId, this.entityData.OpenId);
				this.entityData.OpenId = value;
				this.EntityId.OpenId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OpenCustAccountColumn.OpenId, this.entityData.OpenId);
				OnPropertyChanged("OpenId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the OpenID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the OpenID property.</remarks>
		/// <value>This type is varchar</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalOpenId
		{
			get { return this.entityData.OriginalOpenId; }
			set { this.entityData.OriginalOpenId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the RegisterDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsRegisterDateNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? RegisterDate
		{
			get
			{
				return this.entityData.RegisterDate; 
			}
			
			set
			{
				if (this.entityData.RegisterDate == value)
					return;
					
				OnColumnChanging(OpenCustAccountColumn.RegisterDate, this.entityData.RegisterDate);
				this.entityData.RegisterDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OpenCustAccountColumn.RegisterDate, this.entityData.RegisterDate);
				OnPropertyChanged("RegisterDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CardId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String CardId
		{
			get
			{
				return this.entityData.CardId; 
			}
			
			set
			{
				if (this.entityData.CardId == value)
					return;
					
				OnColumnChanging(OpenCustAccountColumn.CardId, this.entityData.CardId);
				this.entityData.CardId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OpenCustAccountColumn.CardId, this.entityData.CardId);
				OnPropertyChanged("CardId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CardIssue property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCardIssueNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CardIssue
		{
			get
			{
				return this.entityData.CardIssue; 
			}
			
			set
			{
				if (this.entityData.CardIssue == value)
					return;
					
				OnColumnChanging(OpenCustAccountColumn.CardIssue, this.entityData.CardIssue);
				this.entityData.CardIssue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OpenCustAccountColumn.CardIssue, this.entityData.CardIssue);
				OnPropertyChanged("CardIssue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PlaceIssue property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String PlaceIssue
		{
			get
			{
				return this.entityData.PlaceIssue; 
			}
			
			set
			{
				if (this.entityData.PlaceIssue == value)
					return;
					
				OnColumnChanging(OpenCustAccountColumn.PlaceIssue, this.entityData.PlaceIssue);
				this.entityData.PlaceIssue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OpenCustAccountColumn.PlaceIssue, this.entityData.PlaceIssue);
				OnPropertyChanged("PlaceIssue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Name
		{
			get
			{
				return this.entityData.Name; 
			}
			
			set
			{
				if (this.entityData.Name == value)
					return;
					
				OnColumnChanging(OpenCustAccountColumn.Name, this.entityData.Name);
				this.entityData.Name = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OpenCustAccountColumn.Name, this.entityData.Name);
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Birthday property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsBirthdayNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? Birthday
		{
			get
			{
				return this.entityData.Birthday; 
			}
			
			set
			{
				if (this.entityData.Birthday == value)
					return;
					
				OnColumnChanging(OpenCustAccountColumn.Birthday, this.entityData.Birthday);
				this.entityData.Birthday = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OpenCustAccountColumn.Birthday, this.entityData.Birthday);
				OnPropertyChanged("Birthday");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Sex property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsSexNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? Sex
		{
			get
			{
				return this.entityData.Sex; 
			}
			
			set
			{
				if (this.entityData.Sex == value)
					return;
					
				OnColumnChanging(OpenCustAccountColumn.Sex, this.entityData.Sex);
				this.entityData.Sex = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OpenCustAccountColumn.Sex, this.entityData.Sex);
				OnPropertyChanged("Sex");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Occupation property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Occupation
		{
			get
			{
				return this.entityData.Occupation; 
			}
			
			set
			{
				if (this.entityData.Occupation == value)
					return;
					
				OnColumnChanging(OpenCustAccountColumn.Occupation, this.entityData.Occupation);
				this.entityData.Occupation = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OpenCustAccountColumn.Occupation, this.entityData.Occupation);
				OnPropertyChanged("Occupation");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Nationality property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Nationality
		{
			get
			{
				return this.entityData.Nationality; 
			}
			
			set
			{
				if (this.entityData.Nationality == value)
					return;
					
				OnColumnChanging(OpenCustAccountColumn.Nationality, this.entityData.Nationality);
				this.entityData.Nationality = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OpenCustAccountColumn.Nationality, this.entityData.Nationality);
				OnPropertyChanged("Nationality");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Address1 property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Address1
		{
			get
			{
				return this.entityData.Address1; 
			}
			
			set
			{
				if (this.entityData.Address1 == value)
					return;
					
				OnColumnChanging(OpenCustAccountColumn.Address1, this.entityData.Address1);
				this.entityData.Address1 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OpenCustAccountColumn.Address1, this.entityData.Address1);
				OnPropertyChanged("Address1");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Telephone1 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String Telephone1
		{
			get
			{
				return this.entityData.Telephone1; 
			}
			
			set
			{
				if (this.entityData.Telephone1 == value)
					return;
					
				OnColumnChanging(OpenCustAccountColumn.Telephone1, this.entityData.Telephone1);
				this.entityData.Telephone1 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OpenCustAccountColumn.Telephone1, this.entityData.Telephone1);
				OnPropertyChanged("Telephone1");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Fax1 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String Fax1
		{
			get
			{
				return this.entityData.Fax1; 
			}
			
			set
			{
				if (this.entityData.Fax1 == value)
					return;
					
				OnColumnChanging(OpenCustAccountColumn.Fax1, this.entityData.Fax1);
				this.entityData.Fax1 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OpenCustAccountColumn.Fax1, this.entityData.Fax1);
				OnPropertyChanged("Fax1");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Address2 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Address2
		{
			get
			{
				return this.entityData.Address2; 
			}
			
			set
			{
				if (this.entityData.Address2 == value)
					return;
					
				OnColumnChanging(OpenCustAccountColumn.Address2, this.entityData.Address2);
				this.entityData.Address2 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OpenCustAccountColumn.Address2, this.entityData.Address2);
				OnPropertyChanged("Address2");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Telephone2 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String Telephone2
		{
			get
			{
				return this.entityData.Telephone2; 
			}
			
			set
			{
				if (this.entityData.Telephone2 == value)
					return;
					
				OnColumnChanging(OpenCustAccountColumn.Telephone2, this.entityData.Telephone2);
				this.entityData.Telephone2 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OpenCustAccountColumn.Telephone2, this.entityData.Telephone2);
				OnPropertyChanged("Telephone2");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Fax2 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String Fax2
		{
			get
			{
				return this.entityData.Fax2; 
			}
			
			set
			{
				if (this.entityData.Fax2 == value)
					return;
					
				OnColumnChanging(OpenCustAccountColumn.Fax2, this.entityData.Fax2);
				this.entityData.Fax2 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OpenCustAccountColumn.Fax2, this.entityData.Fax2);
				OnPropertyChanged("Fax2");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Address3 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Address3
		{
			get
			{
				return this.entityData.Address3; 
			}
			
			set
			{
				if (this.entityData.Address3 == value)
					return;
					
				OnColumnChanging(OpenCustAccountColumn.Address3, this.entityData.Address3);
				this.entityData.Address3 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OpenCustAccountColumn.Address3, this.entityData.Address3);
				OnPropertyChanged("Address3");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Telephone3 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String Telephone3
		{
			get
			{
				return this.entityData.Telephone3; 
			}
			
			set
			{
				if (this.entityData.Telephone3 == value)
					return;
					
				OnColumnChanging(OpenCustAccountColumn.Telephone3, this.entityData.Telephone3);
				this.entityData.Telephone3 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OpenCustAccountColumn.Telephone3, this.entityData.Telephone3);
				OnPropertyChanged("Telephone3");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Fax3 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String Fax3
		{
			get
			{
				return this.entityData.Fax3; 
			}
			
			set
			{
				if (this.entityData.Fax3 == value)
					return;
					
				OnColumnChanging(OpenCustAccountColumn.Fax3, this.entityData.Fax3);
				this.entityData.Fax3 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OpenCustAccountColumn.Fax3, this.entityData.Fax3);
				OnPropertyChanged("Fax3");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Email property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String Email
		{
			get
			{
				return this.entityData.Email; 
			}
			
			set
			{
				if (this.entityData.Email == value)
					return;
					
				OnColumnChanging(OpenCustAccountColumn.Email, this.entityData.Email);
				this.entityData.Email = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OpenCustAccountColumn.Email, this.entityData.Email);
				OnPropertyChanged("Email");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BranchCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String BranchCode
		{
			get
			{
				return this.entityData.BranchCode; 
			}
			
			set
			{
				if (this.entityData.BranchCode == value)
					return;
					
				OnColumnChanging(OpenCustAccountColumn.BranchCode, this.entityData.BranchCode);
				this.entityData.BranchCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OpenCustAccountColumn.BranchCode, this.entityData.BranchCode);
				OnPropertyChanged("BranchCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BranchName property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String BranchName
		{
			get
			{
				return this.entityData.BranchName; 
			}
			
			set
			{
				if (this.entityData.BranchName == value)
					return;
					
				OnColumnChanging(OpenCustAccountColumn.BranchName, this.entityData.BranchName);
				this.entityData.BranchName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OpenCustAccountColumn.BranchName, this.entityData.BranchName);
				OnPropertyChanged("BranchName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Custodian property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsCustodianNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? Custodian
		{
			get
			{
				return this.entityData.Custodian; 
			}
			
			set
			{
				if (this.entityData.Custodian == value)
					return;
					
				OnColumnChanging(OpenCustAccountColumn.Custodian, this.entityData.Custodian);
				this.entityData.Custodian = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OpenCustAccountColumn.Custodian, this.entityData.Custodian);
				OnPropertyChanged("Custodian");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CustomerType property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String CustomerType
		{
			get
			{
				return this.entityData.CustomerType; 
			}
			
			set
			{
				if (this.entityData.CustomerType == value)
					return;
					
				OnColumnChanging(OpenCustAccountColumn.CustomerType, this.entityData.CustomerType);
				this.entityData.CustomerType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OpenCustAccountColumn.CustomerType, this.entityData.CustomerType);
				OnPropertyChanged("CustomerType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TradeAtCompany property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsTradeAtCompanyNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? TradeAtCompany
		{
			get
			{
				return this.entityData.TradeAtCompany; 
			}
			
			set
			{
				if (this.entityData.TradeAtCompany == value)
					return;
					
				OnColumnChanging(OpenCustAccountColumn.TradeAtCompany, this.entityData.TradeAtCompany);
				this.entityData.TradeAtCompany = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OpenCustAccountColumn.TradeAtCompany, this.entityData.TradeAtCompany);
				OnPropertyChanged("TradeAtCompany");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TradeByTelephone property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsTradeByTelephoneNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? TradeByTelephone
		{
			get
			{
				return this.entityData.TradeByTelephone; 
			}
			
			set
			{
				if (this.entityData.TradeByTelephone == value)
					return;
					
				OnColumnChanging(OpenCustAccountColumn.TradeByTelephone, this.entityData.TradeByTelephone);
				this.entityData.TradeByTelephone = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OpenCustAccountColumn.TradeByTelephone, this.entityData.TradeByTelephone);
				OnPropertyChanged("TradeByTelephone");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TradeOnline property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsTradeOnlineNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? TradeOnline
		{
			get
			{
				return this.entityData.TradeOnline; 
			}
			
			set
			{
				if (this.entityData.TradeOnline == value)
					return;
					
				OnColumnChanging(OpenCustAccountColumn.TradeOnline, this.entityData.TradeOnline);
				this.entityData.TradeOnline = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OpenCustAccountColumn.TradeOnline, this.entityData.TradeOnline);
				OnPropertyChanged("TradeOnline");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExistedAccount property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsExistedAccountNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? ExistedAccount
		{
			get
			{
				return this.entityData.ExistedAccount; 
			}
			
			set
			{
				if (this.entityData.ExistedAccount == value)
					return;
					
				OnColumnChanging(OpenCustAccountColumn.ExistedAccount, this.entityData.ExistedAccount);
				this.entityData.ExistedAccount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OpenCustAccountColumn.ExistedAccount, this.entityData.ExistedAccount);
				OnPropertyChanged("ExistedAccount");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("OpenId", "Open Id"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("OpenId", "Open Id", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CardId", "Card Id", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("PlaceIssue", "Place Issue", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Name", "Name", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Occupation", "Occupation", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Nationality", "Nationality", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Address1", "Address1", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Telephone1", "Telephone1", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Fax1", "Fax1", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Address2", "Address2", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Telephone2", "Telephone2", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Fax2", "Fax2", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Address3", "Address3", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Telephone3", "Telephone3", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Fax3", "Fax3", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Email", "Email", 30));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("BranchCode", "Branch Code", 30));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("BranchName", "Branch Name", 100));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CustomerType", "Customer Type", 1));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public override string TableName
		{
			get { return "OpenCustAccount"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"OpenID", "RegisterDate", "CardID", "CardIssue", "PlaceIssue", "Name", "Birthday", "Sex", "Occupation", "Nationality", "Address1", "Telephone1", "Fax1", "Address2", "Telephone2", "Fax2", "Address3", "Telephone3", "Fax3", "Email", "BranchCode", "BranchName", "Custodian", "CustomerType", "TradeAtCompany", "TradeByTelephone", "TradeOnline", "ExistedAccount"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as OpenCustAccountEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (OpenCustAccount) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
        [ScriptIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<OpenCustAccount>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as OpenCustAccount);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed OpenCustAccount Entity 
		///</summary>
		protected virtual OpenCustAccount Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			OpenCustAccount copy = new OpenCustAccount();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.OpenId = this.OpenId;
					copy.OriginalOpenId = this.OriginalOpenId;
				copy.RegisterDate = this.RegisterDate;
				copy.CardId = this.CardId;
				copy.CardIssue = this.CardIssue;
				copy.PlaceIssue = this.PlaceIssue;
				copy.Name = this.Name;
				copy.Birthday = this.Birthday;
				copy.Sex = this.Sex;
				copy.Occupation = this.Occupation;
				copy.Nationality = this.Nationality;
				copy.Address1 = this.Address1;
				copy.Telephone1 = this.Telephone1;
				copy.Fax1 = this.Fax1;
				copy.Address2 = this.Address2;
				copy.Telephone2 = this.Telephone2;
				copy.Fax2 = this.Fax2;
				copy.Address3 = this.Address3;
				copy.Telephone3 = this.Telephone3;
				copy.Fax3 = this.Fax3;
				copy.Email = this.Email;
				copy.BranchCode = this.BranchCode;
				copy.BranchName = this.BranchName;
				copy.Custodian = this.Custodian;
				copy.CustomerType = this.CustomerType;
				copy.TradeAtCompany = this.TradeAtCompany;
				copy.TradeByTelephone = this.TradeByTelephone;
				copy.TradeOnline = this.TradeOnline;
				copy.ExistedAccount = this.ExistedAccount;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed OpenCustAccount Entity 
		///</summary>
		public virtual OpenCustAccount Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed OpenCustAccount Entity which is a deep copy of the current entity.
		///</summary>
		public virtual OpenCustAccount DeepCopy()
		{
			return EntityHelper.Clone<OpenCustAccount>(this as OpenCustAccount);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as OpenCustAccountEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new OpenCustAccountEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as OpenCustAccountEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(OpenCustAccountColumn column)
		{
			switch(column)
			{
					case OpenCustAccountColumn.OpenId:
					return entityData.OpenId != _originalData.OpenId;
					case OpenCustAccountColumn.RegisterDate:
					return entityData.RegisterDate != _originalData.RegisterDate;
					case OpenCustAccountColumn.CardId:
					return entityData.CardId != _originalData.CardId;
					case OpenCustAccountColumn.CardIssue:
					return entityData.CardIssue != _originalData.CardIssue;
					case OpenCustAccountColumn.PlaceIssue:
					return entityData.PlaceIssue != _originalData.PlaceIssue;
					case OpenCustAccountColumn.Name:
					return entityData.Name != _originalData.Name;
					case OpenCustAccountColumn.Birthday:
					return entityData.Birthday != _originalData.Birthday;
					case OpenCustAccountColumn.Sex:
					return entityData.Sex != _originalData.Sex;
					case OpenCustAccountColumn.Occupation:
					return entityData.Occupation != _originalData.Occupation;
					case OpenCustAccountColumn.Nationality:
					return entityData.Nationality != _originalData.Nationality;
					case OpenCustAccountColumn.Address1:
					return entityData.Address1 != _originalData.Address1;
					case OpenCustAccountColumn.Telephone1:
					return entityData.Telephone1 != _originalData.Telephone1;
					case OpenCustAccountColumn.Fax1:
					return entityData.Fax1 != _originalData.Fax1;
					case OpenCustAccountColumn.Address2:
					return entityData.Address2 != _originalData.Address2;
					case OpenCustAccountColumn.Telephone2:
					return entityData.Telephone2 != _originalData.Telephone2;
					case OpenCustAccountColumn.Fax2:
					return entityData.Fax2 != _originalData.Fax2;
					case OpenCustAccountColumn.Address3:
					return entityData.Address3 != _originalData.Address3;
					case OpenCustAccountColumn.Telephone3:
					return entityData.Telephone3 != _originalData.Telephone3;
					case OpenCustAccountColumn.Fax3:
					return entityData.Fax3 != _originalData.Fax3;
					case OpenCustAccountColumn.Email:
					return entityData.Email != _originalData.Email;
					case OpenCustAccountColumn.BranchCode:
					return entityData.BranchCode != _originalData.BranchCode;
					case OpenCustAccountColumn.BranchName:
					return entityData.BranchName != _originalData.BranchName;
					case OpenCustAccountColumn.Custodian:
					return entityData.Custodian != _originalData.Custodian;
					case OpenCustAccountColumn.CustomerType:
					return entityData.CustomerType != _originalData.CustomerType;
					case OpenCustAccountColumn.TradeAtCompany:
					return entityData.TradeAtCompany != _originalData.TradeAtCompany;
					case OpenCustAccountColumn.TradeByTelephone:
					return entityData.TradeByTelephone != _originalData.TradeByTelephone;
					case OpenCustAccountColumn.TradeOnline:
					return entityData.TradeOnline != _originalData.TradeOnline;
					case OpenCustAccountColumn.ExistedAccount:
					return entityData.ExistedAccount != _originalData.ExistedAccount;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< OpenCustAccountColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.OpenId != _originalData.OpenId;
			result = result || entityData.RegisterDate != _originalData.RegisterDate;
			result = result || entityData.CardId != _originalData.CardId;
			result = result || entityData.CardIssue != _originalData.CardIssue;
			result = result || entityData.PlaceIssue != _originalData.PlaceIssue;
			result = result || entityData.Name != _originalData.Name;
			result = result || entityData.Birthday != _originalData.Birthday;
			result = result || entityData.Sex != _originalData.Sex;
			result = result || entityData.Occupation != _originalData.Occupation;
			result = result || entityData.Nationality != _originalData.Nationality;
			result = result || entityData.Address1 != _originalData.Address1;
			result = result || entityData.Telephone1 != _originalData.Telephone1;
			result = result || entityData.Fax1 != _originalData.Fax1;
			result = result || entityData.Address2 != _originalData.Address2;
			result = result || entityData.Telephone2 != _originalData.Telephone2;
			result = result || entityData.Fax2 != _originalData.Fax2;
			result = result || entityData.Address3 != _originalData.Address3;
			result = result || entityData.Telephone3 != _originalData.Telephone3;
			result = result || entityData.Fax3 != _originalData.Fax3;
			result = result || entityData.Email != _originalData.Email;
			result = result || entityData.BranchCode != _originalData.BranchCode;
			result = result || entityData.BranchName != _originalData.BranchName;
			result = result || entityData.Custodian != _originalData.Custodian;
			result = result || entityData.CustomerType != _originalData.CustomerType;
			result = result || entityData.TradeAtCompany != _originalData.TradeAtCompany;
			result = result || entityData.TradeByTelephone != _originalData.TradeByTelephone;
			result = result || entityData.TradeOnline != _originalData.TradeOnline;
			result = result || entityData.ExistedAccount != _originalData.ExistedAccount;
			return result;
		}	
		
		///<summary>
		///  Returns a OpenCustAccount Entity with the original data.
		///</summary>
		public OpenCustAccount GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateOpenCustAccount(
				_originalData.OpenId,
				_originalData.RegisterDate,
				_originalData.CardId,
				_originalData.CardIssue,
				_originalData.PlaceIssue,
				_originalData.Name,
				_originalData.Birthday,
				_originalData.Sex,
				_originalData.Occupation,
				_originalData.Nationality,
				_originalData.Address1,
				_originalData.Telephone1,
				_originalData.Fax1,
				_originalData.Address2,
				_originalData.Telephone2,
				_originalData.Fax2,
				_originalData.Address3,
				_originalData.Telephone3,
				_originalData.Fax3,
				_originalData.Email,
				_originalData.BranchCode,
				_originalData.BranchName,
				_originalData.Custodian,
				_originalData.CustomerType,
				_originalData.TradeAtCompany,
				_originalData.TradeByTelephone,
				_originalData.TradeOnline,
				_originalData.ExistedAccount
				);
				
			return (OpenCustAccount)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="OpenCustAccountBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is OpenCustAccountBase)
				return ValueEquals(this, (OpenCustAccountBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="OpenCustAccountBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.OpenId.GetHashCode() ^ 
					((this.RegisterDate == null) ? string.Empty : this.RegisterDate.ToString()).GetHashCode() ^ 
					((this.CardId == null) ? string.Empty : this.CardId.ToString()).GetHashCode() ^ 
					((this.CardIssue == null) ? string.Empty : this.CardIssue.ToString()).GetHashCode() ^ 
					((this.PlaceIssue == null) ? string.Empty : this.PlaceIssue.ToString()).GetHashCode() ^ 
					((this.Name == null) ? string.Empty : this.Name.ToString()).GetHashCode() ^ 
					((this.Birthday == null) ? string.Empty : this.Birthday.ToString()).GetHashCode() ^ 
					((this.Sex == null) ? string.Empty : this.Sex.ToString()).GetHashCode() ^ 
					((this.Occupation == null) ? string.Empty : this.Occupation.ToString()).GetHashCode() ^ 
					((this.Nationality == null) ? string.Empty : this.Nationality.ToString()).GetHashCode() ^ 
					((this.Address1 == null) ? string.Empty : this.Address1.ToString()).GetHashCode() ^ 
					((this.Telephone1 == null) ? string.Empty : this.Telephone1.ToString()).GetHashCode() ^ 
					((this.Fax1 == null) ? string.Empty : this.Fax1.ToString()).GetHashCode() ^ 
					((this.Address2 == null) ? string.Empty : this.Address2.ToString()).GetHashCode() ^ 
					((this.Telephone2 == null) ? string.Empty : this.Telephone2.ToString()).GetHashCode() ^ 
					((this.Fax2 == null) ? string.Empty : this.Fax2.ToString()).GetHashCode() ^ 
					((this.Address3 == null) ? string.Empty : this.Address3.ToString()).GetHashCode() ^ 
					((this.Telephone3 == null) ? string.Empty : this.Telephone3.ToString()).GetHashCode() ^ 
					((this.Fax3 == null) ? string.Empty : this.Fax3.ToString()).GetHashCode() ^ 
					((this.Email == null) ? string.Empty : this.Email.ToString()).GetHashCode() ^ 
					((this.BranchCode == null) ? string.Empty : this.BranchCode.ToString()).GetHashCode() ^ 
					((this.BranchName == null) ? string.Empty : this.BranchName.ToString()).GetHashCode() ^ 
					((this.Custodian == null) ? string.Empty : this.Custodian.ToString()).GetHashCode() ^ 
					((this.CustomerType == null) ? string.Empty : this.CustomerType.ToString()).GetHashCode() ^ 
					((this.TradeAtCompany == null) ? string.Empty : this.TradeAtCompany.ToString()).GetHashCode() ^ 
					((this.TradeByTelephone == null) ? string.Empty : this.TradeByTelephone.ToString()).GetHashCode() ^ 
					((this.TradeOnline == null) ? string.Empty : this.TradeOnline.ToString()).GetHashCode() ^ 
					((this.ExistedAccount == null) ? string.Empty : this.ExistedAccount.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="OpenCustAccountBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(OpenCustAccountBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="OpenCustAccountBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="OpenCustAccountBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="OpenCustAccountBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(OpenCustAccountBase Object1, OpenCustAccountBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.OpenId != Object2.OpenId)
				equal = false;
			if ( Object1.RegisterDate != null && Object2.RegisterDate != null )
			{
				if (Object1.RegisterDate != Object2.RegisterDate)
					equal = false;
			}
			else if (Object1.RegisterDate == null ^ Object2.RegisterDate == null )
			{
				equal = false;
			}
			if ( Object1.CardId != null && Object2.CardId != null )
			{
				if (Object1.CardId != Object2.CardId)
					equal = false;
			}
			else if (Object1.CardId == null ^ Object2.CardId == null )
			{
				equal = false;
			}
			if ( Object1.CardIssue != null && Object2.CardIssue != null )
			{
				if (Object1.CardIssue != Object2.CardIssue)
					equal = false;
			}
			else if (Object1.CardIssue == null ^ Object2.CardIssue == null )
			{
				equal = false;
			}
			if ( Object1.PlaceIssue != null && Object2.PlaceIssue != null )
			{
				if (Object1.PlaceIssue != Object2.PlaceIssue)
					equal = false;
			}
			else if (Object1.PlaceIssue == null ^ Object2.PlaceIssue == null )
			{
				equal = false;
			}
			if ( Object1.Name != null && Object2.Name != null )
			{
				if (Object1.Name != Object2.Name)
					equal = false;
			}
			else if (Object1.Name == null ^ Object2.Name == null )
			{
				equal = false;
			}
			if ( Object1.Birthday != null && Object2.Birthday != null )
			{
				if (Object1.Birthday != Object2.Birthday)
					equal = false;
			}
			else if (Object1.Birthday == null ^ Object2.Birthday == null )
			{
				equal = false;
			}
			if ( Object1.Sex != null && Object2.Sex != null )
			{
				if (Object1.Sex != Object2.Sex)
					equal = false;
			}
			else if (Object1.Sex == null ^ Object2.Sex == null )
			{
				equal = false;
			}
			if ( Object1.Occupation != null && Object2.Occupation != null )
			{
				if (Object1.Occupation != Object2.Occupation)
					equal = false;
			}
			else if (Object1.Occupation == null ^ Object2.Occupation == null )
			{
				equal = false;
			}
			if ( Object1.Nationality != null && Object2.Nationality != null )
			{
				if (Object1.Nationality != Object2.Nationality)
					equal = false;
			}
			else if (Object1.Nationality == null ^ Object2.Nationality == null )
			{
				equal = false;
			}
			if ( Object1.Address1 != null && Object2.Address1 != null )
			{
				if (Object1.Address1 != Object2.Address1)
					equal = false;
			}
			else if (Object1.Address1 == null ^ Object2.Address1 == null )
			{
				equal = false;
			}
			if ( Object1.Telephone1 != null && Object2.Telephone1 != null )
			{
				if (Object1.Telephone1 != Object2.Telephone1)
					equal = false;
			}
			else if (Object1.Telephone1 == null ^ Object2.Telephone1 == null )
			{
				equal = false;
			}
			if ( Object1.Fax1 != null && Object2.Fax1 != null )
			{
				if (Object1.Fax1 != Object2.Fax1)
					equal = false;
			}
			else if (Object1.Fax1 == null ^ Object2.Fax1 == null )
			{
				equal = false;
			}
			if ( Object1.Address2 != null && Object2.Address2 != null )
			{
				if (Object1.Address2 != Object2.Address2)
					equal = false;
			}
			else if (Object1.Address2 == null ^ Object2.Address2 == null )
			{
				equal = false;
			}
			if ( Object1.Telephone2 != null && Object2.Telephone2 != null )
			{
				if (Object1.Telephone2 != Object2.Telephone2)
					equal = false;
			}
			else if (Object1.Telephone2 == null ^ Object2.Telephone2 == null )
			{
				equal = false;
			}
			if ( Object1.Fax2 != null && Object2.Fax2 != null )
			{
				if (Object1.Fax2 != Object2.Fax2)
					equal = false;
			}
			else if (Object1.Fax2 == null ^ Object2.Fax2 == null )
			{
				equal = false;
			}
			if ( Object1.Address3 != null && Object2.Address3 != null )
			{
				if (Object1.Address3 != Object2.Address3)
					equal = false;
			}
			else if (Object1.Address3 == null ^ Object2.Address3 == null )
			{
				equal = false;
			}
			if ( Object1.Telephone3 != null && Object2.Telephone3 != null )
			{
				if (Object1.Telephone3 != Object2.Telephone3)
					equal = false;
			}
			else if (Object1.Telephone3 == null ^ Object2.Telephone3 == null )
			{
				equal = false;
			}
			if ( Object1.Fax3 != null && Object2.Fax3 != null )
			{
				if (Object1.Fax3 != Object2.Fax3)
					equal = false;
			}
			else if (Object1.Fax3 == null ^ Object2.Fax3 == null )
			{
				equal = false;
			}
			if ( Object1.Email != null && Object2.Email != null )
			{
				if (Object1.Email != Object2.Email)
					equal = false;
			}
			else if (Object1.Email == null ^ Object2.Email == null )
			{
				equal = false;
			}
			if ( Object1.BranchCode != null && Object2.BranchCode != null )
			{
				if (Object1.BranchCode != Object2.BranchCode)
					equal = false;
			}
			else if (Object1.BranchCode == null ^ Object2.BranchCode == null )
			{
				equal = false;
			}
			if ( Object1.BranchName != null && Object2.BranchName != null )
			{
				if (Object1.BranchName != Object2.BranchName)
					equal = false;
			}
			else if (Object1.BranchName == null ^ Object2.BranchName == null )
			{
				equal = false;
			}
			if ( Object1.Custodian != null && Object2.Custodian != null )
			{
				if (Object1.Custodian != Object2.Custodian)
					equal = false;
			}
			else if (Object1.Custodian == null ^ Object2.Custodian == null )
			{
				equal = false;
			}
			if ( Object1.CustomerType != null && Object2.CustomerType != null )
			{
				if (Object1.CustomerType != Object2.CustomerType)
					equal = false;
			}
			else if (Object1.CustomerType == null ^ Object2.CustomerType == null )
			{
				equal = false;
			}
			if ( Object1.TradeAtCompany != null && Object2.TradeAtCompany != null )
			{
				if (Object1.TradeAtCompany != Object2.TradeAtCompany)
					equal = false;
			}
			else if (Object1.TradeAtCompany == null ^ Object2.TradeAtCompany == null )
			{
				equal = false;
			}
			if ( Object1.TradeByTelephone != null && Object2.TradeByTelephone != null )
			{
				if (Object1.TradeByTelephone != Object2.TradeByTelephone)
					equal = false;
			}
			else if (Object1.TradeByTelephone == null ^ Object2.TradeByTelephone == null )
			{
				equal = false;
			}
			if ( Object1.TradeOnline != null && Object2.TradeOnline != null )
			{
				if (Object1.TradeOnline != Object2.TradeOnline)
					equal = false;
			}
			else if (Object1.TradeOnline == null ^ Object2.TradeOnline == null )
			{
				equal = false;
			}
			if ( Object1.ExistedAccount != null && Object2.ExistedAccount != null )
			{
				if (Object1.ExistedAccount != Object2.ExistedAccount)
					equal = false;
			}
			else if (Object1.ExistedAccount == null ^ Object2.ExistedAccount == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((OpenCustAccountBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static OpenCustAccountComparer GetComparer()
        {
            return new OpenCustAccountComparer();
        }
        */

        // Comparer delegates back to OpenCustAccount
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(OpenCustAccount rhs, OpenCustAccountColumn which)
        {
            switch (which)
            {
            	
            	
            	case OpenCustAccountColumn.OpenId:
            		return this.OpenId.CompareTo(rhs.OpenId);
            		
            		                 
            	
            	
            	case OpenCustAccountColumn.RegisterDate:
            		return this.RegisterDate.Value.CompareTo(rhs.RegisterDate.Value);
            		
            		                 
            	
            	
            	case OpenCustAccountColumn.CardId:
            		return this.CardId.CompareTo(rhs.CardId);
            		
            		                 
            	
            	
            	case OpenCustAccountColumn.CardIssue:
            		return this.CardIssue.Value.CompareTo(rhs.CardIssue.Value);
            		
            		                 
            	
            	
            	case OpenCustAccountColumn.PlaceIssue:
            		return this.PlaceIssue.CompareTo(rhs.PlaceIssue);
            		
            		                 
            	
            	
            	case OpenCustAccountColumn.Name:
            		return this.Name.CompareTo(rhs.Name);
            		
            		                 
            	
            	
            	case OpenCustAccountColumn.Birthday:
            		return this.Birthday.Value.CompareTo(rhs.Birthday.Value);
            		
            		                 
            	
            	
            	case OpenCustAccountColumn.Sex:
            		return this.Sex.Value.CompareTo(rhs.Sex.Value);
            		
            		                 
            	
            	
            	case OpenCustAccountColumn.Occupation:
            		return this.Occupation.CompareTo(rhs.Occupation);
            		
            		                 
            	
            	
            	case OpenCustAccountColumn.Nationality:
            		return this.Nationality.CompareTo(rhs.Nationality);
            		
            		                 
            	
            	
            	case OpenCustAccountColumn.Address1:
            		return this.Address1.CompareTo(rhs.Address1);
            		
            		                 
            	
            	
            	case OpenCustAccountColumn.Telephone1:
            		return this.Telephone1.CompareTo(rhs.Telephone1);
            		
            		                 
            	
            	
            	case OpenCustAccountColumn.Fax1:
            		return this.Fax1.CompareTo(rhs.Fax1);
            		
            		                 
            	
            	
            	case OpenCustAccountColumn.Address2:
            		return this.Address2.CompareTo(rhs.Address2);
            		
            		                 
            	
            	
            	case OpenCustAccountColumn.Telephone2:
            		return this.Telephone2.CompareTo(rhs.Telephone2);
            		
            		                 
            	
            	
            	case OpenCustAccountColumn.Fax2:
            		return this.Fax2.CompareTo(rhs.Fax2);
            		
            		                 
            	
            	
            	case OpenCustAccountColumn.Address3:
            		return this.Address3.CompareTo(rhs.Address3);
            		
            		                 
            	
            	
            	case OpenCustAccountColumn.Telephone3:
            		return this.Telephone3.CompareTo(rhs.Telephone3);
            		
            		                 
            	
            	
            	case OpenCustAccountColumn.Fax3:
            		return this.Fax3.CompareTo(rhs.Fax3);
            		
            		                 
            	
            	
            	case OpenCustAccountColumn.Email:
            		return this.Email.CompareTo(rhs.Email);
            		
            		                 
            	
            	
            	case OpenCustAccountColumn.BranchCode:
            		return this.BranchCode.CompareTo(rhs.BranchCode);
            		
            		                 
            	
            	
            	case OpenCustAccountColumn.BranchName:
            		return this.BranchName.CompareTo(rhs.BranchName);
            		
            		                 
            	
            	
            	case OpenCustAccountColumn.Custodian:
            		return this.Custodian.Value.CompareTo(rhs.Custodian.Value);
            		
            		                 
            	
            	
            	case OpenCustAccountColumn.CustomerType:
            		return this.CustomerType.CompareTo(rhs.CustomerType);
            		
            		                 
            	
            	
            	case OpenCustAccountColumn.TradeAtCompany:
            		return this.TradeAtCompany.Value.CompareTo(rhs.TradeAtCompany.Value);
            		
            		                 
            	
            	
            	case OpenCustAccountColumn.TradeByTelephone:
            		return this.TradeByTelephone.Value.CompareTo(rhs.TradeByTelephone.Value);
            		
            		                 
            	
            	
            	case OpenCustAccountColumn.TradeOnline:
            		return this.TradeOnline.Value.CompareTo(rhs.TradeOnline.Value);
            		
            		                 
            	
            	
            	case OpenCustAccountColumn.ExistedAccount:
            		return this.ExistedAccount.Value.CompareTo(rhs.ExistedAccount.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
        [ScriptIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<OpenCustAccountKey> Members
		
		// member variable for the EntityId property
		private OpenCustAccountKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
        [ScriptIgnore]
		public virtual OpenCustAccountKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new OpenCustAccountKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute(), ScriptIgnore()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
        [ScriptIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("OpenCustAccount")
					.Append("|").Append( this.OpenId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{29}{28}- OpenId: {0}{28}- RegisterDate: {1}{28}- CardId: {2}{28}- CardIssue: {3}{28}- PlaceIssue: {4}{28}- Name: {5}{28}- Birthday: {6}{28}- Sex: {7}{28}- Occupation: {8}{28}- Nationality: {9}{28}- Address1: {10}{28}- Telephone1: {11}{28}- Fax1: {12}{28}- Address2: {13}{28}- Telephone2: {14}{28}- Fax2: {15}{28}- Address3: {16}{28}- Telephone3: {17}{28}- Fax3: {18}{28}- Email: {19}{28}- BranchCode: {20}{28}- BranchName: {21}{28}- Custodian: {22}{28}- CustomerType: {23}{28}- TradeAtCompany: {24}{28}- TradeByTelephone: {25}{28}- TradeOnline: {26}{28}- ExistedAccount: {27}{28}{30}", 
				this.OpenId,
				(this.RegisterDate == null) ? string.Empty : this.RegisterDate.ToString(),
				(this.CardId == null) ? string.Empty : this.CardId.ToString(),
				(this.CardIssue == null) ? string.Empty : this.CardIssue.ToString(),
				(this.PlaceIssue == null) ? string.Empty : this.PlaceIssue.ToString(),
				(this.Name == null) ? string.Empty : this.Name.ToString(),
				(this.Birthday == null) ? string.Empty : this.Birthday.ToString(),
				(this.Sex == null) ? string.Empty : this.Sex.ToString(),
				(this.Occupation == null) ? string.Empty : this.Occupation.ToString(),
				(this.Nationality == null) ? string.Empty : this.Nationality.ToString(),
				(this.Address1 == null) ? string.Empty : this.Address1.ToString(),
				(this.Telephone1 == null) ? string.Empty : this.Telephone1.ToString(),
				(this.Fax1 == null) ? string.Empty : this.Fax1.ToString(),
				(this.Address2 == null) ? string.Empty : this.Address2.ToString(),
				(this.Telephone2 == null) ? string.Empty : this.Telephone2.ToString(),
				(this.Fax2 == null) ? string.Empty : this.Fax2.ToString(),
				(this.Address3 == null) ? string.Empty : this.Address3.ToString(),
				(this.Telephone3 == null) ? string.Empty : this.Telephone3.ToString(),
				(this.Fax3 == null) ? string.Empty : this.Fax3.ToString(),
				(this.Email == null) ? string.Empty : this.Email.ToString(),
				(this.BranchCode == null) ? string.Empty : this.BranchCode.ToString(),
				(this.BranchName == null) ? string.Empty : this.BranchName.ToString(),
				(this.Custodian == null) ? string.Empty : this.Custodian.ToString(),
				(this.CustomerType == null) ? string.Empty : this.CustomerType.ToString(),
				(this.TradeAtCompany == null) ? string.Empty : this.TradeAtCompany.ToString(),
				(this.TradeByTelephone == null) ? string.Empty : this.TradeByTelephone.ToString(),
				(this.TradeOnline == null) ? string.Empty : this.TradeOnline.ToString(),
				(this.ExistedAccount == null) ? string.Empty : this.ExistedAccount.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'OpenCustAccount' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class OpenCustAccountEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// OpenID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "OpenCustAccount"</remarks>
		public System.String OpenId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.String OriginalOpenId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// RegisterDate : 
		/// </summary>
		public System.DateTime?		  RegisterDate = null;
		
		/// <summary>
		/// CardID : 
		/// </summary>
		public System.String		  CardId = null;
		
		/// <summary>
		/// CardIssue : 
		/// </summary>
		public System.DateTime?		  CardIssue = null;
		
		/// <summary>
		/// PlaceIssue : 
		/// </summary>
		public System.String		  PlaceIssue = null;
		
		/// <summary>
		/// Name : 
		/// </summary>
		public System.String		  Name = null;
		
		/// <summary>
		/// Birthday : 
		/// </summary>
		public System.DateTime?		  Birthday = null;
		
		/// <summary>
		/// Sex : 
		/// </summary>
		public System.Boolean?		  Sex = null;
		
		/// <summary>
		/// Occupation : 
		/// </summary>
		public System.String		  Occupation = null;
		
		/// <summary>
		/// Nationality : 
		/// </summary>
		public System.String		  Nationality = null;
		
		/// <summary>
		/// Address1 : 
		/// </summary>
		public System.String		  Address1 = null;
		
		/// <summary>
		/// Telephone1 : 
		/// </summary>
		public System.String		  Telephone1 = null;
		
		/// <summary>
		/// Fax1 : 
		/// </summary>
		public System.String		  Fax1 = null;
		
		/// <summary>
		/// Address2 : 
		/// </summary>
		public System.String		  Address2 = null;
		
		/// <summary>
		/// Telephone2 : 
		/// </summary>
		public System.String		  Telephone2 = null;
		
		/// <summary>
		/// Fax2 : 
		/// </summary>
		public System.String		  Fax2 = null;
		
		/// <summary>
		/// Address3 : 
		/// </summary>
		public System.String		  Address3 = null;
		
		/// <summary>
		/// Telephone3 : 
		/// </summary>
		public System.String		  Telephone3 = null;
		
		/// <summary>
		/// Fax3 : 
		/// </summary>
		public System.String		  Fax3 = null;
		
		/// <summary>
		/// Email : 
		/// </summary>
		public System.String		  Email = null;
		
		/// <summary>
		/// BranchCode : 
		/// </summary>
		public System.String		  BranchCode = null;
		
		/// <summary>
		/// BranchName : 
		/// </summary>
		public System.String		  BranchName = null;
		
		/// <summary>
		/// Custodian : 
		/// </summary>
		public System.Boolean?		  Custodian = null;
		
		/// <summary>
		/// CustomerType : 
		/// </summary>
		public System.String		  CustomerType = null;
		
		/// <summary>
		/// TradeAtCompany : 
		/// </summary>
		public System.Boolean?		  TradeAtCompany = null;
		
		/// <summary>
		/// TradeByTelephone : 
		/// </summary>
		public System.Boolean?		  TradeByTelephone = null;
		
		/// <summary>
		/// TradeOnline : 
		/// </summary>
		public System.Boolean?		  TradeOnline = null;
		
		/// <summary>
		/// ExistedAccount : 
		/// </summary>
		public System.Boolean?		  ExistedAccount = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			OpenCustAccountEntityData _tmp = new OpenCustAccountEntityData();
						
			_tmp.OpenId = this.OpenId;
			_tmp.OriginalOpenId = this.OriginalOpenId;
			
			_tmp.RegisterDate = this.RegisterDate;
			_tmp.CardId = this.CardId;
			_tmp.CardIssue = this.CardIssue;
			_tmp.PlaceIssue = this.PlaceIssue;
			_tmp.Name = this.Name;
			_tmp.Birthday = this.Birthday;
			_tmp.Sex = this.Sex;
			_tmp.Occupation = this.Occupation;
			_tmp.Nationality = this.Nationality;
			_tmp.Address1 = this.Address1;
			_tmp.Telephone1 = this.Telephone1;
			_tmp.Fax1 = this.Fax1;
			_tmp.Address2 = this.Address2;
			_tmp.Telephone2 = this.Telephone2;
			_tmp.Fax2 = this.Fax2;
			_tmp.Address3 = this.Address3;
			_tmp.Telephone3 = this.Telephone3;
			_tmp.Fax3 = this.Fax3;
			_tmp.Email = this.Email;
			_tmp.BranchCode = this.BranchCode;
			_tmp.BranchName = this.BranchName;
			_tmp.Custodian = this.Custodian;
			_tmp.CustomerType = this.CustomerType;
			_tmp.TradeAtCompany = this.TradeAtCompany;
			_tmp.TradeByTelephone = this.TradeByTelephone;
			_tmp.TradeOnline = this.TradeOnline;
			_tmp.ExistedAccount = this.ExistedAccount;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			OpenCustAccountEntityData _tmp = new OpenCustAccountEntityData();
						
			_tmp.OpenId = this.OpenId;
			_tmp.OriginalOpenId = this.OriginalOpenId;
			
			_tmp.RegisterDate = this.RegisterDate;
			_tmp.CardId = this.CardId;
			_tmp.CardIssue = this.CardIssue;
			_tmp.PlaceIssue = this.PlaceIssue;
			_tmp.Name = this.Name;
			_tmp.Birthday = this.Birthday;
			_tmp.Sex = this.Sex;
			_tmp.Occupation = this.Occupation;
			_tmp.Nationality = this.Nationality;
			_tmp.Address1 = this.Address1;
			_tmp.Telephone1 = this.Telephone1;
			_tmp.Fax1 = this.Fax1;
			_tmp.Address2 = this.Address2;
			_tmp.Telephone2 = this.Telephone2;
			_tmp.Fax2 = this.Fax2;
			_tmp.Address3 = this.Address3;
			_tmp.Telephone3 = this.Telephone3;
			_tmp.Fax3 = this.Fax3;
			_tmp.Email = this.Email;
			_tmp.BranchCode = this.BranchCode;
			_tmp.BranchName = this.BranchName;
			_tmp.Custodian = this.Custodian;
			_tmp.CustomerType = this.CustomerType;
			_tmp.TradeAtCompany = this.TradeAtCompany;
			_tmp.TradeByTelephone = this.TradeByTelephone;
			_tmp.TradeOnline = this.TradeOnline;
			_tmp.ExistedAccount = this.ExistedAccount;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OpenCustAccountColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(OpenCustAccountColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OpenCustAccountColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(OpenCustAccountColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OpenCustAccountColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(OpenCustAccountColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				OpenCustAccountEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new OpenCustAccountEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OpenCustAccountColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(OpenCustAccountColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				OpenCustAccountEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new OpenCustAccountEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region OpenCustAccountEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="OpenCustAccount"/> object.
	/// </remarks>
	public class OpenCustAccountEventArgs : System.EventArgs
	{
		private OpenCustAccountColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the OpenCustAccountEventArgs class.
		///</summary>
		public OpenCustAccountEventArgs(OpenCustAccountColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the OpenCustAccountEventArgs class.
		///</summary>
		public OpenCustAccountEventArgs(OpenCustAccountColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The OpenCustAccountColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="OpenCustAccountColumn" />
		public OpenCustAccountColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all OpenCustAccount related events.
	///</summary>
	public delegate void OpenCustAccountEventHandler(object sender, OpenCustAccountEventArgs e);
	
	#region OpenCustAccountComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class OpenCustAccountComparer : System.Collections.Generic.IComparer<OpenCustAccount>
	{
		OpenCustAccountColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:OpenCustAccountComparer"/> class.
        /// </summary>
		public OpenCustAccountComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:OpenCustAccountComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public OpenCustAccountComparer(OpenCustAccountColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="OpenCustAccount"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="OpenCustAccount"/> to compare.</param>
        /// <param name="b">The second <c>OpenCustAccount</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(OpenCustAccount a, OpenCustAccount b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(OpenCustAccount entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(OpenCustAccount a, OpenCustAccount b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public OpenCustAccountColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region OpenCustAccountKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="OpenCustAccount"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class OpenCustAccountKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the OpenCustAccountKey class.
		/// </summary>
		public OpenCustAccountKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the OpenCustAccountKey class.
		/// </summary>
		public OpenCustAccountKey(OpenCustAccountBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.OpenId = entity.OpenId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the OpenCustAccountKey class.
		/// </summary>
		public OpenCustAccountKey(System.String _openId)
		{
			#region Init Properties

			this.OpenId = _openId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private OpenCustAccountBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public OpenCustAccountBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the OpenId property
		private System.String _openId;
		
		/// <summary>
		/// Gets or sets the OpenId property.
		/// </summary>
		public System.String OpenId
		{
			get { return _openId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.OpenId = value;
				
				_openId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				OpenId = ( values["OpenId"] != null ) ? (System.String) EntityUtil.ChangeType(values["OpenId"], typeof(System.String)) : string.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("OpenId", OpenId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("OpenId: {0}{1}",
								OpenId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region OpenCustAccountColumn Enum
	
	/// <summary>
	/// Enumerate the OpenCustAccount columns.
	/// </summary>
	[Serializable]
	public enum OpenCustAccountColumn : int
	{
		/// <summary>
		/// OpenId : 
		/// </summary>
		[EnumTextValue("OpenID")]
		[ColumnEnum("OpenID", typeof(System.String), System.Data.DbType.AnsiString, true, false, false, 20)]
		OpenId = 1,
		/// <summary>
		/// RegisterDate : 
		/// </summary>
		[EnumTextValue("RegisterDate")]
		[ColumnEnum("RegisterDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		RegisterDate = 2,
		/// <summary>
		/// CardId : 
		/// </summary>
		[EnumTextValue("CardID")]
		[ColumnEnum("CardID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		CardId = 3,
		/// <summary>
		/// CardIssue : 
		/// </summary>
		[EnumTextValue("CardIssue")]
		[ColumnEnum("CardIssue", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CardIssue = 4,
		/// <summary>
		/// PlaceIssue : 
		/// </summary>
		[EnumTextValue("PlaceIssue")]
		[ColumnEnum("PlaceIssue", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		PlaceIssue = 5,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		Name = 6,
		/// <summary>
		/// Birthday : 
		/// </summary>
		[EnumTextValue("Birthday")]
		[ColumnEnum("Birthday", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		Birthday = 7,
		/// <summary>
		/// Sex : 
		/// </summary>
		[EnumTextValue("Sex")]
		[ColumnEnum("Sex", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Sex = 8,
		/// <summary>
		/// Occupation : 
		/// </summary>
		[EnumTextValue("Occupation")]
		[ColumnEnum("Occupation", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		Occupation = 9,
		/// <summary>
		/// Nationality : 
		/// </summary>
		[EnumTextValue("Nationality")]
		[ColumnEnum("Nationality", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		Nationality = 10,
		/// <summary>
		/// Address1 : 
		/// </summary>
		[EnumTextValue("Address1")]
		[ColumnEnum("Address1", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		Address1 = 11,
		/// <summary>
		/// Telephone1 : 
		/// </summary>
		[EnumTextValue("Telephone1")]
		[ColumnEnum("Telephone1", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		Telephone1 = 12,
		/// <summary>
		/// Fax1 : 
		/// </summary>
		[EnumTextValue("Fax1")]
		[ColumnEnum("Fax1", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		Fax1 = 13,
		/// <summary>
		/// Address2 : 
		/// </summary>
		[EnumTextValue("Address2")]
		[ColumnEnum("Address2", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		Address2 = 14,
		/// <summary>
		/// Telephone2 : 
		/// </summary>
		[EnumTextValue("Telephone2")]
		[ColumnEnum("Telephone2", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		Telephone2 = 15,
		/// <summary>
		/// Fax2 : 
		/// </summary>
		[EnumTextValue("Fax2")]
		[ColumnEnum("Fax2", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		Fax2 = 16,
		/// <summary>
		/// Address3 : 
		/// </summary>
		[EnumTextValue("Address3")]
		[ColumnEnum("Address3", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		Address3 = 17,
		/// <summary>
		/// Telephone3 : 
		/// </summary>
		[EnumTextValue("Telephone3")]
		[ColumnEnum("Telephone3", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		Telephone3 = 18,
		/// <summary>
		/// Fax3 : 
		/// </summary>
		[EnumTextValue("Fax3")]
		[ColumnEnum("Fax3", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		Fax3 = 19,
		/// <summary>
		/// Email : 
		/// </summary>
		[EnumTextValue("Email")]
		[ColumnEnum("Email", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 30)]
		Email = 20,
		/// <summary>
		/// BranchCode : 
		/// </summary>
		[EnumTextValue("BranchCode")]
		[ColumnEnum("BranchCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 30)]
		BranchCode = 21,
		/// <summary>
		/// BranchName : 
		/// </summary>
		[EnumTextValue("BranchName")]
		[ColumnEnum("BranchName", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		BranchName = 22,
		/// <summary>
		/// Custodian : 
		/// </summary>
		[EnumTextValue("Custodian")]
		[ColumnEnum("Custodian", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Custodian = 23,
		/// <summary>
		/// CustomerType : 
		/// </summary>
		[EnumTextValue("CustomerType")]
		[ColumnEnum("CustomerType", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 1)]
		CustomerType = 24,
		/// <summary>
		/// TradeAtCompany : 
		/// </summary>
		[EnumTextValue("TradeAtCompany")]
		[ColumnEnum("TradeAtCompany", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		TradeAtCompany = 25,
		/// <summary>
		/// TradeByTelephone : 
		/// </summary>
		[EnumTextValue("TradeByTelephone")]
		[ColumnEnum("TradeByTelephone", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		TradeByTelephone = 26,
		/// <summary>
		/// TradeOnline : 
		/// </summary>
		[EnumTextValue("TradeOnline")]
		[ColumnEnum("TradeOnline", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		TradeOnline = 27,
		/// <summary>
		/// ExistedAccount : 
		/// </summary>
		[EnumTextValue("ExistedAccount")]
		[ColumnEnum("ExistedAccount", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		ExistedAccount = 28
	}//End enum

	#endregion OpenCustAccountColumn Enum

} // end namespace
