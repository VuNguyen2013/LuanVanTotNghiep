
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Wednesday, January 12, 2011
	Important: Do not modify this file. Edit the file BuyRight.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Web.Script.Serialization;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using AccountManager.Entities.Validation;
#endregion

namespace AccountManager.Entities
{
	///<summary>
	/// An object representation of the 'BuyRight' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class BuyRightBase : EntityBase, IBuyRight, IEntityId<BuyRightKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private BuyRightEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private BuyRightEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private BuyRightEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<BuyRight> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event BuyRightEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event BuyRightEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="BuyRightBase"/> instance.
		///</summary>
		public BuyRightBase()
		{
			this.entityData = new BuyRightEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="BuyRightBase"/> instance.
		///</summary>
		///<param name="_subCustAccountId"></param>
		///<param name="_secSymbol">Securities symbol</param>
		///<param name="_market">Market id</param>
		///<param name="_execDate">Executed date</param>
		///<param name="_owningVol">Owning volume</param>
		///<param name="_allowedVol">Volume allowed to buy</param>
		///<param name="_registeredVol">Volume registered to buy</param>
		///<param name="_right"></param>
		///<param name="_rateRight">The rate of right</param>
		///<param name="_price">Price to buy</param>
		///<param name="_beginDateToRegister">Date to begin registering</param>
		///<param name="_endDateToRegister">Date of end registering</param>
		///<param name="_beginDateToTransfer">Date to begin transferring</param>
		///<param name="_endDateToTransfer">Date to end transferring</param>
		///<param name="_receivedDate">Date to receive stocks</param>
		///<param name="_note">Note</param>
		///<param name="_createdDate">Created date time</param>
		///<param name="_createdUser">Created user</param>
		///<param name="_updatedDate">Updated date time</param>
		///<param name="_updatedUser">Updated user</param>
		public BuyRightBase(System.String _subCustAccountId, System.String _secSymbol, System.String _market, 
			System.DateTime _execDate, System.Int64 _owningVol, System.Int64 _allowedVol, System.Int64 _registeredVol, 
			System.Decimal _right, System.Decimal _rateRight, System.Decimal _price, System.DateTime? _beginDateToRegister, 
			System.DateTime? _endDateToRegister, System.DateTime? _beginDateToTransfer, System.DateTime? _endDateToTransfer, 
			System.DateTime? _receivedDate, System.String _note, System.DateTime _createdDate, System.String _createdUser, 
			System.DateTime? _updatedDate, System.String _updatedUser)
		{
			this.entityData = new BuyRightEntityData();
			this.backupData = null;

			this.SubCustAccountId = _subCustAccountId;
			this.SecSymbol = _secSymbol;
			this.Market = _market;
			this.ExecDate = _execDate;
			this.OwningVol = _owningVol;
			this.AllowedVol = _allowedVol;
			this.RegisteredVol = _registeredVol;
			this.Right = _right;
			this.RateRight = _rateRight;
			this.Price = _price;
			this.BeginDateToRegister = _beginDateToRegister;
			this.EndDateToRegister = _endDateToRegister;
			this.BeginDateToTransfer = _beginDateToTransfer;
			this.EndDateToTransfer = _endDateToTransfer;
			this.ReceivedDate = _receivedDate;
			this.Note = _note;
			this.CreatedDate = _createdDate;
			this.CreatedUser = _createdUser;
			this.UpdatedDate = _updatedDate;
			this.UpdatedUser = _updatedUser;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="BuyRight"/> instance.
		///</summary>
		///<param name="_subCustAccountId"></param>
		///<param name="_secSymbol">Securities symbol</param>
		///<param name="_market">Market id</param>
		///<param name="_execDate">Executed date</param>
		///<param name="_owningVol">Owning volume</param>
		///<param name="_allowedVol">Volume allowed to buy</param>
		///<param name="_registeredVol">Volume registered to buy</param>
		///<param name="_right"></param>
		///<param name="_rateRight">The rate of right</param>
		///<param name="_price">Price to buy</param>
		///<param name="_beginDateToRegister">Date to begin registering</param>
		///<param name="_endDateToRegister">Date of end registering</param>
		///<param name="_beginDateToTransfer">Date to begin transferring</param>
		///<param name="_endDateToTransfer">Date to end transferring</param>
		///<param name="_receivedDate">Date to receive stocks</param>
		///<param name="_note">Note</param>
		///<param name="_createdDate">Created date time</param>
		///<param name="_createdUser">Created user</param>
		///<param name="_updatedDate">Updated date time</param>
		///<param name="_updatedUser">Updated user</param>
		public static BuyRight CreateBuyRight(System.String _subCustAccountId, System.String _secSymbol, System.String _market, 
			System.DateTime _execDate, System.Int64 _owningVol, System.Int64 _allowedVol, System.Int64 _registeredVol, 
			System.Decimal _right, System.Decimal _rateRight, System.Decimal _price, System.DateTime? _beginDateToRegister, 
			System.DateTime? _endDateToRegister, System.DateTime? _beginDateToTransfer, System.DateTime? _endDateToTransfer, 
			System.DateTime? _receivedDate, System.String _note, System.DateTime _createdDate, System.String _createdUser, 
			System.DateTime? _updatedDate, System.String _updatedUser)
		{
			BuyRight newBuyRight = new BuyRight();
			newBuyRight.SubCustAccountId = _subCustAccountId;
			newBuyRight.SecSymbol = _secSymbol;
			newBuyRight.Market = _market;
			newBuyRight.ExecDate = _execDate;
			newBuyRight.OwningVol = _owningVol;
			newBuyRight.AllowedVol = _allowedVol;
			newBuyRight.RegisteredVol = _registeredVol;
			newBuyRight.Right = _right;
			newBuyRight.RateRight = _rateRight;
			newBuyRight.Price = _price;
			newBuyRight.BeginDateToRegister = _beginDateToRegister;
			newBuyRight.EndDateToRegister = _endDateToRegister;
			newBuyRight.BeginDateToTransfer = _beginDateToTransfer;
			newBuyRight.EndDateToTransfer = _endDateToTransfer;
			newBuyRight.ReceivedDate = _receivedDate;
			newBuyRight.Note = _note;
			newBuyRight.CreatedDate = _createdDate;
			newBuyRight.CreatedUser = _createdUser;
			newBuyRight.UpdatedDate = _updatedDate;
			newBuyRight.UpdatedUser = _updatedUser;
			return newBuyRight;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		Auto increase id
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@"Auto increase id"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int64 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(BuyRightColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BuyRightColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SubCustAccountId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String SubCustAccountId
		{
			get
			{
				return this.entityData.SubCustAccountId; 
			}
			
			set
			{
				if (this.entityData.SubCustAccountId == value)
					return;
					
				OnColumnChanging(BuyRightColumn.SubCustAccountId, this.entityData.SubCustAccountId);
				this.entityData.SubCustAccountId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BuyRightColumn.SubCustAccountId, this.entityData.SubCustAccountId);
				OnPropertyChanged("SubCustAccountId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SecSymbol property. 
		///		Securities symbol
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Securities symbol"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 8)]
		public virtual System.String SecSymbol
		{
			get
			{
				return this.entityData.SecSymbol; 
			}
			
			set
			{
				if (this.entityData.SecSymbol == value)
					return;
					
				OnColumnChanging(BuyRightColumn.SecSymbol, this.entityData.SecSymbol);
				this.entityData.SecSymbol = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BuyRightColumn.SecSymbol, this.entityData.SecSymbol);
				OnPropertyChanged("SecSymbol");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Market property. 
		///		Market id
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Market id"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 1)]
		public virtual System.String Market
		{
			get
			{
				return this.entityData.Market; 
			}
			
			set
			{
				if (this.entityData.Market == value)
					return;
					
				OnColumnChanging(BuyRightColumn.Market, this.entityData.Market);
				this.entityData.Market = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BuyRightColumn.Market, this.entityData.Market);
				OnPropertyChanged("Market");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExecDate property. 
		///		Executed date
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Executed date"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ExecDate
		{
			get
			{
				return this.entityData.ExecDate; 
			}
			
			set
			{
				if (this.entityData.ExecDate == value)
					return;
					
				OnColumnChanging(BuyRightColumn.ExecDate, this.entityData.ExecDate);
				this.entityData.ExecDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BuyRightColumn.ExecDate, this.entityData.ExecDate);
				OnPropertyChanged("ExecDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OwningVol property. 
		///		Owning volume
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Owning volume"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int64 OwningVol
		{
			get
			{
				return this.entityData.OwningVol; 
			}
			
			set
			{
				if (this.entityData.OwningVol == value)
					return;
					
				OnColumnChanging(BuyRightColumn.OwningVol, this.entityData.OwningVol);
				this.entityData.OwningVol = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BuyRightColumn.OwningVol, this.entityData.OwningVol);
				OnPropertyChanged("OwningVol");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AllowedVol property. 
		///		Volume allowed to buy
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Volume allowed to buy"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int64 AllowedVol
		{
			get
			{
				return this.entityData.AllowedVol; 
			}
			
			set
			{
				if (this.entityData.AllowedVol == value)
					return;
					
				OnColumnChanging(BuyRightColumn.AllowedVol, this.entityData.AllowedVol);
				this.entityData.AllowedVol = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BuyRightColumn.AllowedVol, this.entityData.AllowedVol);
				OnPropertyChanged("AllowedVol");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RegisteredVol property. 
		///		Volume registered to buy
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Volume registered to buy"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int64 RegisteredVol
		{
			get
			{
				return this.entityData.RegisteredVol; 
			}
			
			set
			{
				if (this.entityData.RegisteredVol == value)
					return;
					
				OnColumnChanging(BuyRightColumn.RegisteredVol, this.entityData.RegisteredVol);
				this.entityData.RegisteredVol = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BuyRightColumn.RegisteredVol, this.entityData.RegisteredVol);
				OnPropertyChanged("RegisteredVol");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Right property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal Right
		{
			get
			{
				return this.entityData.Right; 
			}
			
			set
			{
				if (this.entityData.Right == value)
					return;
					
				OnColumnChanging(BuyRightColumn.Right, this.entityData.Right);
				this.entityData.Right = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BuyRightColumn.Right, this.entityData.Right);
				OnPropertyChanged("Right");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RateRight property. 
		///		The rate of right
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"The rate of right"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal RateRight
		{
			get
			{
				return this.entityData.RateRight; 
			}
			
			set
			{
				if (this.entityData.RateRight == value)
					return;
					
				OnColumnChanging(BuyRightColumn.RateRight, this.entityData.RateRight);
				this.entityData.RateRight = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BuyRightColumn.RateRight, this.entityData.RateRight);
				OnPropertyChanged("RateRight");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Price property. 
		///		Price to buy
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Price to buy"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal Price
		{
			get
			{
				return this.entityData.Price; 
			}
			
			set
			{
				if (this.entityData.Price == value)
					return;
					
				OnColumnChanging(BuyRightColumn.Price, this.entityData.Price);
				this.entityData.Price = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BuyRightColumn.Price, this.entityData.Price);
				OnPropertyChanged("Price");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BeginDateToRegister property. 
		///		Date to begin registering
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsBeginDateToRegisterNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Date to begin registering"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? BeginDateToRegister
		{
			get
			{
				return this.entityData.BeginDateToRegister; 
			}
			
			set
			{
				if (this.entityData.BeginDateToRegister == value)
					return;
					
				OnColumnChanging(BuyRightColumn.BeginDateToRegister, this.entityData.BeginDateToRegister);
				this.entityData.BeginDateToRegister = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BuyRightColumn.BeginDateToRegister, this.entityData.BeginDateToRegister);
				OnPropertyChanged("BeginDateToRegister");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EndDateToRegister property. 
		///		Date of end registering
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsEndDateToRegisterNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Date of end registering"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? EndDateToRegister
		{
			get
			{
				return this.entityData.EndDateToRegister; 
			}
			
			set
			{
				if (this.entityData.EndDateToRegister == value)
					return;
					
				OnColumnChanging(BuyRightColumn.EndDateToRegister, this.entityData.EndDateToRegister);
				this.entityData.EndDateToRegister = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BuyRightColumn.EndDateToRegister, this.entityData.EndDateToRegister);
				OnPropertyChanged("EndDateToRegister");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BeginDateToTransfer property. 
		///		Date to begin transferring
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsBeginDateToTransferNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Date to begin transferring"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? BeginDateToTransfer
		{
			get
			{
				return this.entityData.BeginDateToTransfer; 
			}
			
			set
			{
				if (this.entityData.BeginDateToTransfer == value)
					return;
					
				OnColumnChanging(BuyRightColumn.BeginDateToTransfer, this.entityData.BeginDateToTransfer);
				this.entityData.BeginDateToTransfer = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BuyRightColumn.BeginDateToTransfer, this.entityData.BeginDateToTransfer);
				OnPropertyChanged("BeginDateToTransfer");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EndDateToTransfer property. 
		///		Date to end transferring
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsEndDateToTransferNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Date to end transferring"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? EndDateToTransfer
		{
			get
			{
				return this.entityData.EndDateToTransfer; 
			}
			
			set
			{
				if (this.entityData.EndDateToTransfer == value)
					return;
					
				OnColumnChanging(BuyRightColumn.EndDateToTransfer, this.entityData.EndDateToTransfer);
				this.entityData.EndDateToTransfer = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BuyRightColumn.EndDateToTransfer, this.entityData.EndDateToTransfer);
				OnPropertyChanged("EndDateToTransfer");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReceivedDate property. 
		///		Date to receive stocks
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsReceivedDateNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Date to receive stocks"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ReceivedDate
		{
			get
			{
				return this.entityData.ReceivedDate; 
			}
			
			set
			{
				if (this.entityData.ReceivedDate == value)
					return;
					
				OnColumnChanging(BuyRightColumn.ReceivedDate, this.entityData.ReceivedDate);
				this.entityData.ReceivedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BuyRightColumn.ReceivedDate, this.entityData.ReceivedDate);
				OnPropertyChanged("ReceivedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Note property. 
		///		Note
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Note"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Note
		{
			get
			{
				return this.entityData.Note; 
			}
			
			set
			{
				if (this.entityData.Note == value)
					return;
					
				OnColumnChanging(BuyRightColumn.Note, this.entityData.Note);
				this.entityData.Note = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BuyRightColumn.Note, this.entityData.Note);
				OnPropertyChanged("Note");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedDate property. 
		///		Created date time
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Created date time"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime CreatedDate
		{
			get
			{
				return this.entityData.CreatedDate; 
			}
			
			set
			{
				if (this.entityData.CreatedDate == value)
					return;
					
				OnColumnChanging(BuyRightColumn.CreatedDate, this.entityData.CreatedDate);
				this.entityData.CreatedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BuyRightColumn.CreatedDate, this.entityData.CreatedDate);
				OnPropertyChanged("CreatedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedUser property. 
		///		Created user
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Created user"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual System.String CreatedUser
		{
			get
			{
				return this.entityData.CreatedUser; 
			}
			
			set
			{
				if (this.entityData.CreatedUser == value)
					return;
					
				OnColumnChanging(BuyRightColumn.CreatedUser, this.entityData.CreatedUser);
				this.entityData.CreatedUser = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BuyRightColumn.CreatedUser, this.entityData.CreatedUser);
				OnPropertyChanged("CreatedUser");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdatedDate property. 
		///		Updated date time
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsUpdatedDateNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Updated date time"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? UpdatedDate
		{
			get
			{
				return this.entityData.UpdatedDate; 
			}
			
			set
			{
				if (this.entityData.UpdatedDate == value)
					return;
					
				OnColumnChanging(BuyRightColumn.UpdatedDate, this.entityData.UpdatedDate);
				this.entityData.UpdatedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BuyRightColumn.UpdatedDate, this.entityData.UpdatedDate);
				OnPropertyChanged("UpdatedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdatedUser property. 
		///		Updated user
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Updated user"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String UpdatedUser
		{
			get
			{
				return this.entityData.UpdatedUser; 
			}
			
			set
			{
				if (this.entityData.UpdatedUser == value)
					return;
					
				OnColumnChanging(BuyRightColumn.UpdatedUser, this.entityData.UpdatedUser);
				this.entityData.UpdatedUser = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BuyRightColumn.UpdatedUser, this.entityData.UpdatedUser);
				OnPropertyChanged("UpdatedUser");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="SubCustAccount"/>.
		/// </summary>
		/// <value>The source SubCustAccount for SubCustAccountId.</value>
        [XmlIgnore()]
        [ScriptIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SubCustAccount SubCustAccountIdSource
      	{
            get { return entityData.SubCustAccountIdSource; }
            set { entityData.SubCustAccountIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SubCustAccountId", "Sub Cust Account Id", 20));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("SecSymbol", "Sec Symbol"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SecSymbol", "Sec Symbol", 8));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Market", "Market"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Market", "Market", 1));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("CreatedUser", "Created User"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CreatedUser", "Created User", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UpdatedUser", "Updated User", 20));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public override string TableName
		{
			get { return "BuyRight"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"Id", "SubCustAccountID", "SecSymbol", "Market", "ExecDate", "OwningVol", "AllowedVol", "RegisteredVol", "Right", "RateRight", "Price", "BeginDateToRegister", "EndDateToRegister", "BeginDateToTransfer", "EndDateToTransfer", "ReceivedDate", "Note", "CreatedDate", "CreatedUser", "UpdatedDate", "UpdatedUser"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as BuyRightEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (BuyRight) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
        [ScriptIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<BuyRight>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as BuyRight);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed BuyRight Entity 
		///</summary>
		protected virtual BuyRight Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			BuyRight copy = new BuyRight();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.SubCustAccountId = this.SubCustAccountId;
				copy.SecSymbol = this.SecSymbol;
				copy.Market = this.Market;
				copy.ExecDate = this.ExecDate;
				copy.OwningVol = this.OwningVol;
				copy.AllowedVol = this.AllowedVol;
				copy.RegisteredVol = this.RegisteredVol;
				copy.Right = this.Right;
				copy.RateRight = this.RateRight;
				copy.Price = this.Price;
				copy.BeginDateToRegister = this.BeginDateToRegister;
				copy.EndDateToRegister = this.EndDateToRegister;
				copy.BeginDateToTransfer = this.BeginDateToTransfer;
				copy.EndDateToTransfer = this.EndDateToTransfer;
				copy.ReceivedDate = this.ReceivedDate;
				copy.Note = this.Note;
				copy.CreatedDate = this.CreatedDate;
				copy.CreatedUser = this.CreatedUser;
				copy.UpdatedDate = this.UpdatedDate;
				copy.UpdatedUser = this.UpdatedUser;
			
			if (this.SubCustAccountIdSource != null && existingCopies.Contains(this.SubCustAccountIdSource))
				copy.SubCustAccountIdSource = existingCopies[this.SubCustAccountIdSource] as SubCustAccount;
			else
				copy.SubCustAccountIdSource = MakeCopyOf(this.SubCustAccountIdSource, existingCopies) as SubCustAccount;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed BuyRight Entity 
		///</summary>
		public virtual BuyRight Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed BuyRight Entity which is a deep copy of the current entity.
		///</summary>
		public virtual BuyRight DeepCopy()
		{
			return EntityHelper.Clone<BuyRight>(this as BuyRight);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as BuyRightEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new BuyRightEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as BuyRightEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(BuyRightColumn column)
		{
			switch(column)
			{
					case BuyRightColumn.Id:
					return entityData.Id != _originalData.Id;
					case BuyRightColumn.SubCustAccountId:
					return entityData.SubCustAccountId != _originalData.SubCustAccountId;
					case BuyRightColumn.SecSymbol:
					return entityData.SecSymbol != _originalData.SecSymbol;
					case BuyRightColumn.Market:
					return entityData.Market != _originalData.Market;
					case BuyRightColumn.ExecDate:
					return entityData.ExecDate != _originalData.ExecDate;
					case BuyRightColumn.OwningVol:
					return entityData.OwningVol != _originalData.OwningVol;
					case BuyRightColumn.AllowedVol:
					return entityData.AllowedVol != _originalData.AllowedVol;
					case BuyRightColumn.RegisteredVol:
					return entityData.RegisteredVol != _originalData.RegisteredVol;
					case BuyRightColumn.Right:
					return entityData.Right != _originalData.Right;
					case BuyRightColumn.RateRight:
					return entityData.RateRight != _originalData.RateRight;
					case BuyRightColumn.Price:
					return entityData.Price != _originalData.Price;
					case BuyRightColumn.BeginDateToRegister:
					return entityData.BeginDateToRegister != _originalData.BeginDateToRegister;
					case BuyRightColumn.EndDateToRegister:
					return entityData.EndDateToRegister != _originalData.EndDateToRegister;
					case BuyRightColumn.BeginDateToTransfer:
					return entityData.BeginDateToTransfer != _originalData.BeginDateToTransfer;
					case BuyRightColumn.EndDateToTransfer:
					return entityData.EndDateToTransfer != _originalData.EndDateToTransfer;
					case BuyRightColumn.ReceivedDate:
					return entityData.ReceivedDate != _originalData.ReceivedDate;
					case BuyRightColumn.Note:
					return entityData.Note != _originalData.Note;
					case BuyRightColumn.CreatedDate:
					return entityData.CreatedDate != _originalData.CreatedDate;
					case BuyRightColumn.CreatedUser:
					return entityData.CreatedUser != _originalData.CreatedUser;
					case BuyRightColumn.UpdatedDate:
					return entityData.UpdatedDate != _originalData.UpdatedDate;
					case BuyRightColumn.UpdatedUser:
					return entityData.UpdatedUser != _originalData.UpdatedUser;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< BuyRightColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.SubCustAccountId != _originalData.SubCustAccountId;
			result = result || entityData.SecSymbol != _originalData.SecSymbol;
			result = result || entityData.Market != _originalData.Market;
			result = result || entityData.ExecDate != _originalData.ExecDate;
			result = result || entityData.OwningVol != _originalData.OwningVol;
			result = result || entityData.AllowedVol != _originalData.AllowedVol;
			result = result || entityData.RegisteredVol != _originalData.RegisteredVol;
			result = result || entityData.Right != _originalData.Right;
			result = result || entityData.RateRight != _originalData.RateRight;
			result = result || entityData.Price != _originalData.Price;
			result = result || entityData.BeginDateToRegister != _originalData.BeginDateToRegister;
			result = result || entityData.EndDateToRegister != _originalData.EndDateToRegister;
			result = result || entityData.BeginDateToTransfer != _originalData.BeginDateToTransfer;
			result = result || entityData.EndDateToTransfer != _originalData.EndDateToTransfer;
			result = result || entityData.ReceivedDate != _originalData.ReceivedDate;
			result = result || entityData.Note != _originalData.Note;
			result = result || entityData.CreatedDate != _originalData.CreatedDate;
			result = result || entityData.CreatedUser != _originalData.CreatedUser;
			result = result || entityData.UpdatedDate != _originalData.UpdatedDate;
			result = result || entityData.UpdatedUser != _originalData.UpdatedUser;
			return result;
		}	
		
		///<summary>
		///  Returns a BuyRight Entity with the original data.
		///</summary>
		public BuyRight GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateBuyRight(
				_originalData.SubCustAccountId,
				_originalData.SecSymbol,
				_originalData.Market,
				_originalData.ExecDate,
				_originalData.OwningVol,
				_originalData.AllowedVol,
				_originalData.RegisteredVol,
				_originalData.Right,
				_originalData.RateRight,
				_originalData.Price,
				_originalData.BeginDateToRegister,
				_originalData.EndDateToRegister,
				_originalData.BeginDateToTransfer,
				_originalData.EndDateToTransfer,
				_originalData.ReceivedDate,
				_originalData.Note,
				_originalData.CreatedDate,
				_originalData.CreatedUser,
				_originalData.UpdatedDate,
				_originalData.UpdatedUser
				);
				
			return (BuyRight)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="BuyRightBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is BuyRightBase)
				return ValueEquals(this, (BuyRightBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="BuyRightBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.SubCustAccountId == null) ? string.Empty : this.SubCustAccountId.ToString()).GetHashCode() ^ 
					this.SecSymbol.GetHashCode() ^ 
					this.Market.GetHashCode() ^ 
					this.ExecDate.GetHashCode() ^ 
					this.OwningVol.GetHashCode() ^ 
					this.AllowedVol.GetHashCode() ^ 
					this.RegisteredVol.GetHashCode() ^ 
					this.Right.GetHashCode() ^ 
					this.RateRight.GetHashCode() ^ 
					this.Price.GetHashCode() ^ 
					((this.BeginDateToRegister == null) ? string.Empty : this.BeginDateToRegister.ToString()).GetHashCode() ^ 
					((this.EndDateToRegister == null) ? string.Empty : this.EndDateToRegister.ToString()).GetHashCode() ^ 
					((this.BeginDateToTransfer == null) ? string.Empty : this.BeginDateToTransfer.ToString()).GetHashCode() ^ 
					((this.EndDateToTransfer == null) ? string.Empty : this.EndDateToTransfer.ToString()).GetHashCode() ^ 
					((this.ReceivedDate == null) ? string.Empty : this.ReceivedDate.ToString()).GetHashCode() ^ 
					((this.Note == null) ? string.Empty : this.Note.ToString()).GetHashCode() ^ 
					this.CreatedDate.GetHashCode() ^ 
					this.CreatedUser.GetHashCode() ^ 
					((this.UpdatedDate == null) ? string.Empty : this.UpdatedDate.ToString()).GetHashCode() ^ 
					((this.UpdatedUser == null) ? string.Empty : this.UpdatedUser.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="BuyRightBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(BuyRightBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="BuyRightBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="BuyRightBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="BuyRightBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(BuyRightBase Object1, BuyRightBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.SubCustAccountId != null && Object2.SubCustAccountId != null )
			{
				if (Object1.SubCustAccountId != Object2.SubCustAccountId)
					equal = false;
			}
			else if (Object1.SubCustAccountId == null ^ Object2.SubCustAccountId == null )
			{
				equal = false;
			}
			if (Object1.SecSymbol != Object2.SecSymbol)
				equal = false;
			if (Object1.Market != Object2.Market)
				equal = false;
			if (Object1.ExecDate != Object2.ExecDate)
				equal = false;
			if (Object1.OwningVol != Object2.OwningVol)
				equal = false;
			if (Object1.AllowedVol != Object2.AllowedVol)
				equal = false;
			if (Object1.RegisteredVol != Object2.RegisteredVol)
				equal = false;
			if (Object1.Right != Object2.Right)
				equal = false;
			if (Object1.RateRight != Object2.RateRight)
				equal = false;
			if (Object1.Price != Object2.Price)
				equal = false;
			if ( Object1.BeginDateToRegister != null && Object2.BeginDateToRegister != null )
			{
				if (Object1.BeginDateToRegister != Object2.BeginDateToRegister)
					equal = false;
			}
			else if (Object1.BeginDateToRegister == null ^ Object2.BeginDateToRegister == null )
			{
				equal = false;
			}
			if ( Object1.EndDateToRegister != null && Object2.EndDateToRegister != null )
			{
				if (Object1.EndDateToRegister != Object2.EndDateToRegister)
					equal = false;
			}
			else if (Object1.EndDateToRegister == null ^ Object2.EndDateToRegister == null )
			{
				equal = false;
			}
			if ( Object1.BeginDateToTransfer != null && Object2.BeginDateToTransfer != null )
			{
				if (Object1.BeginDateToTransfer != Object2.BeginDateToTransfer)
					equal = false;
			}
			else if (Object1.BeginDateToTransfer == null ^ Object2.BeginDateToTransfer == null )
			{
				equal = false;
			}
			if ( Object1.EndDateToTransfer != null && Object2.EndDateToTransfer != null )
			{
				if (Object1.EndDateToTransfer != Object2.EndDateToTransfer)
					equal = false;
			}
			else if (Object1.EndDateToTransfer == null ^ Object2.EndDateToTransfer == null )
			{
				equal = false;
			}
			if ( Object1.ReceivedDate != null && Object2.ReceivedDate != null )
			{
				if (Object1.ReceivedDate != Object2.ReceivedDate)
					equal = false;
			}
			else if (Object1.ReceivedDate == null ^ Object2.ReceivedDate == null )
			{
				equal = false;
			}
			if ( Object1.Note != null && Object2.Note != null )
			{
				if (Object1.Note != Object2.Note)
					equal = false;
			}
			else if (Object1.Note == null ^ Object2.Note == null )
			{
				equal = false;
			}
			if (Object1.CreatedDate != Object2.CreatedDate)
				equal = false;
			if (Object1.CreatedUser != Object2.CreatedUser)
				equal = false;
			if ( Object1.UpdatedDate != null && Object2.UpdatedDate != null )
			{
				if (Object1.UpdatedDate != Object2.UpdatedDate)
					equal = false;
			}
			else if (Object1.UpdatedDate == null ^ Object2.UpdatedDate == null )
			{
				equal = false;
			}
			if ( Object1.UpdatedUser != null && Object2.UpdatedUser != null )
			{
				if (Object1.UpdatedUser != Object2.UpdatedUser)
					equal = false;
			}
			else if (Object1.UpdatedUser == null ^ Object2.UpdatedUser == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((BuyRightBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static BuyRightComparer GetComparer()
        {
            return new BuyRightComparer();
        }
        */

        // Comparer delegates back to BuyRight
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(BuyRight rhs, BuyRightColumn which)
        {
            switch (which)
            {
            	
            	
            	case BuyRightColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case BuyRightColumn.SubCustAccountId:
            		return this.SubCustAccountId.CompareTo(rhs.SubCustAccountId);
            		
            		                 
            	
            	
            	case BuyRightColumn.SecSymbol:
            		return this.SecSymbol.CompareTo(rhs.SecSymbol);
            		
            		                 
            	
            	
            	case BuyRightColumn.Market:
            		return this.Market.CompareTo(rhs.Market);
            		
            		                 
            	
            	
            	case BuyRightColumn.ExecDate:
            		return this.ExecDate.CompareTo(rhs.ExecDate);
            		
            		                 
            	
            	
            	case BuyRightColumn.OwningVol:
            		return this.OwningVol.CompareTo(rhs.OwningVol);
            		
            		                 
            	
            	
            	case BuyRightColumn.AllowedVol:
            		return this.AllowedVol.CompareTo(rhs.AllowedVol);
            		
            		                 
            	
            	
            	case BuyRightColumn.RegisteredVol:
            		return this.RegisteredVol.CompareTo(rhs.RegisteredVol);
            		
            		                 
            	
            	
            	case BuyRightColumn.Right:
            		return this.Right.CompareTo(rhs.Right);
            		
            		                 
            	
            	
            	case BuyRightColumn.RateRight:
            		return this.RateRight.CompareTo(rhs.RateRight);
            		
            		                 
            	
            	
            	case BuyRightColumn.Price:
            		return this.Price.CompareTo(rhs.Price);
            		
            		                 
            	
            	
            	case BuyRightColumn.BeginDateToRegister:
            		return this.BeginDateToRegister.Value.CompareTo(rhs.BeginDateToRegister.Value);
            		
            		                 
            	
            	
            	case BuyRightColumn.EndDateToRegister:
            		return this.EndDateToRegister.Value.CompareTo(rhs.EndDateToRegister.Value);
            		
            		                 
            	
            	
            	case BuyRightColumn.BeginDateToTransfer:
            		return this.BeginDateToTransfer.Value.CompareTo(rhs.BeginDateToTransfer.Value);
            		
            		                 
            	
            	
            	case BuyRightColumn.EndDateToTransfer:
            		return this.EndDateToTransfer.Value.CompareTo(rhs.EndDateToTransfer.Value);
            		
            		                 
            	
            	
            	case BuyRightColumn.ReceivedDate:
            		return this.ReceivedDate.Value.CompareTo(rhs.ReceivedDate.Value);
            		
            		                 
            	
            	
            	case BuyRightColumn.Note:
            		return this.Note.CompareTo(rhs.Note);
            		
            		                 
            	
            	
            	case BuyRightColumn.CreatedDate:
            		return this.CreatedDate.CompareTo(rhs.CreatedDate);
            		
            		                 
            	
            	
            	case BuyRightColumn.CreatedUser:
            		return this.CreatedUser.CompareTo(rhs.CreatedUser);
            		
            		                 
            	
            	
            	case BuyRightColumn.UpdatedDate:
            		return this.UpdatedDate.Value.CompareTo(rhs.UpdatedDate.Value);
            		
            		                 
            	
            	
            	case BuyRightColumn.UpdatedUser:
            		return this.UpdatedUser.CompareTo(rhs.UpdatedUser);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
        [ScriptIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<BuyRightKey> Members
		
		// member variable for the EntityId property
		private BuyRightKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
        [ScriptIgnore]
		public virtual BuyRightKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new BuyRightKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute(), ScriptIgnore()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
        [ScriptIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("BuyRight")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{22}{21}- Id: {0}{21}- SubCustAccountId: {1}{21}- SecSymbol: {2}{21}- Market: {3}{21}- ExecDate: {4}{21}- OwningVol: {5}{21}- AllowedVol: {6}{21}- RegisteredVol: {7}{21}- Right: {8}{21}- RateRight: {9}{21}- Price: {10}{21}- BeginDateToRegister: {11}{21}- EndDateToRegister: {12}{21}- BeginDateToTransfer: {13}{21}- EndDateToTransfer: {14}{21}- ReceivedDate: {15}{21}- Note: {16}{21}- CreatedDate: {17}{21}- CreatedUser: {18}{21}- UpdatedDate: {19}{21}- UpdatedUser: {20}{21}{23}", 
				this.Id,
				(this.SubCustAccountId == null) ? string.Empty : this.SubCustAccountId.ToString(),
				this.SecSymbol,
				this.Market,
				this.ExecDate,
				this.OwningVol,
				this.AllowedVol,
				this.RegisteredVol,
				this.Right,
				this.RateRight,
				this.Price,
				(this.BeginDateToRegister == null) ? string.Empty : this.BeginDateToRegister.ToString(),
				(this.EndDateToRegister == null) ? string.Empty : this.EndDateToRegister.ToString(),
				(this.BeginDateToTransfer == null) ? string.Empty : this.BeginDateToTransfer.ToString(),
				(this.EndDateToTransfer == null) ? string.Empty : this.EndDateToTransfer.ToString(),
				(this.ReceivedDate == null) ? string.Empty : this.ReceivedDate.ToString(),
				(this.Note == null) ? string.Empty : this.Note.ToString(),
				this.CreatedDate,
				this.CreatedUser,
				(this.UpdatedDate == null) ? string.Empty : this.UpdatedDate.ToString(),
				(this.UpdatedUser == null) ? string.Empty : this.UpdatedUser.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'BuyRight' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class BuyRightEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// Id : Auto increase id
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "BuyRight"</remarks>
		public System.Int64 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SubCustAccountID : 
		/// </summary>
		public System.String		  SubCustAccountId = null;
		
		/// <summary>
		/// SecSymbol : Securities symbol
		/// </summary>
		public System.String		  SecSymbol = string.Empty;
		
		/// <summary>
		/// Market : Market id
		/// </summary>
		public System.String		  Market = string.Empty;
		
		/// <summary>
		/// ExecDate : Executed date
		/// </summary>
		public System.DateTime		  ExecDate = DateTime.MinValue;
		
		/// <summary>
		/// OwningVol : Owning volume
		/// </summary>
		public System.Int64		  OwningVol = (long)0;
		
		/// <summary>
		/// AllowedVol : Volume allowed to buy
		/// </summary>
		public System.Int64		  AllowedVol = (long)0;
		
		/// <summary>
		/// RegisteredVol : Volume registered to buy
		/// </summary>
		public System.Int64		  RegisteredVol = (long)0;
		
		/// <summary>
		/// Right : 
		/// </summary>
		public System.Decimal		  Right = 0.0m;
		
		/// <summary>
		/// RateRight : The rate of right
		/// </summary>
		public System.Decimal		  RateRight = 0.0m;
		
		/// <summary>
		/// Price : Price to buy
		/// </summary>
		public System.Decimal		  Price = 0.0m;
		
		/// <summary>
		/// BeginDateToRegister : Date to begin registering
		/// </summary>
		public System.DateTime?		  BeginDateToRegister = null;
		
		/// <summary>
		/// EndDateToRegister : Date of end registering
		/// </summary>
		public System.DateTime?		  EndDateToRegister = null;
		
		/// <summary>
		/// BeginDateToTransfer : Date to begin transferring
		/// </summary>
		public System.DateTime?		  BeginDateToTransfer = null;
		
		/// <summary>
		/// EndDateToTransfer : Date to end transferring
		/// </summary>
		public System.DateTime?		  EndDateToTransfer = null;
		
		/// <summary>
		/// ReceivedDate : Date to receive stocks
		/// </summary>
		public System.DateTime?		  ReceivedDate = null;
		
		/// <summary>
		/// Note : Note
		/// </summary>
		public System.String		  Note = null;
		
		/// <summary>
		/// CreatedDate : Created date time
		/// </summary>
		public System.DateTime		  CreatedDate = DateTime.MinValue;
		
		/// <summary>
		/// CreatedUser : Created user
		/// </summary>
		public System.String		  CreatedUser = string.Empty;
		
		/// <summary>
		/// UpdatedDate : Updated date time
		/// </summary>
		public System.DateTime?		  UpdatedDate = null;
		
		/// <summary>
		/// UpdatedUser : Updated user
		/// </summary>
		public System.String		  UpdatedUser = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private SubCustAccount _subCustAccountIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SubCustAccount"/>.
		/// </summary>
		/// <value>The source SubCustAccount for SubCustAccountId.</value>
		[XmlIgnore()]
        [ScriptIgnore()]
		[Browsable(false)]
		public virtual SubCustAccount SubCustAccountIdSource
      	{
            get { return this._subCustAccountIdSource; }
            set { this._subCustAccountIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			BuyRightEntityData _tmp = new BuyRightEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.SubCustAccountId = this.SubCustAccountId;
			_tmp.SecSymbol = this.SecSymbol;
			_tmp.Market = this.Market;
			_tmp.ExecDate = this.ExecDate;
			_tmp.OwningVol = this.OwningVol;
			_tmp.AllowedVol = this.AllowedVol;
			_tmp.RegisteredVol = this.RegisteredVol;
			_tmp.Right = this.Right;
			_tmp.RateRight = this.RateRight;
			_tmp.Price = this.Price;
			_tmp.BeginDateToRegister = this.BeginDateToRegister;
			_tmp.EndDateToRegister = this.EndDateToRegister;
			_tmp.BeginDateToTransfer = this.BeginDateToTransfer;
			_tmp.EndDateToTransfer = this.EndDateToTransfer;
			_tmp.ReceivedDate = this.ReceivedDate;
			_tmp.Note = this.Note;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.CreatedUser = this.CreatedUser;
			_tmp.UpdatedDate = this.UpdatedDate;
			_tmp.UpdatedUser = this.UpdatedUser;
			
			#region Source Parent Composite Entities
			if (this.SubCustAccountIdSource != null)
				_tmp.SubCustAccountIdSource = MakeCopyOf(this.SubCustAccountIdSource) as SubCustAccount;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			BuyRightEntityData _tmp = new BuyRightEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.SubCustAccountId = this.SubCustAccountId;
			_tmp.SecSymbol = this.SecSymbol;
			_tmp.Market = this.Market;
			_tmp.ExecDate = this.ExecDate;
			_tmp.OwningVol = this.OwningVol;
			_tmp.AllowedVol = this.AllowedVol;
			_tmp.RegisteredVol = this.RegisteredVol;
			_tmp.Right = this.Right;
			_tmp.RateRight = this.RateRight;
			_tmp.Price = this.Price;
			_tmp.BeginDateToRegister = this.BeginDateToRegister;
			_tmp.EndDateToRegister = this.EndDateToRegister;
			_tmp.BeginDateToTransfer = this.BeginDateToTransfer;
			_tmp.EndDateToTransfer = this.EndDateToTransfer;
			_tmp.ReceivedDate = this.ReceivedDate;
			_tmp.Note = this.Note;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.CreatedUser = this.CreatedUser;
			_tmp.UpdatedDate = this.UpdatedDate;
			_tmp.UpdatedUser = this.UpdatedUser;
			
			#region Source Parent Composite Entities
			if (this.SubCustAccountIdSource != null && existingCopies.Contains(this.SubCustAccountIdSource))
				_tmp.SubCustAccountIdSource = existingCopies[this.SubCustAccountIdSource] as SubCustAccount;
			else
				_tmp.SubCustAccountIdSource = MakeCopyOf(this.SubCustAccountIdSource, existingCopies) as SubCustAccount;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="BuyRightColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(BuyRightColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="BuyRightColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(BuyRightColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="BuyRightColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(BuyRightColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				BuyRightEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new BuyRightEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="BuyRightColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(BuyRightColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				BuyRightEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new BuyRightEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region BuyRightEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="BuyRight"/> object.
	/// </remarks>
	public class BuyRightEventArgs : System.EventArgs
	{
		private BuyRightColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the BuyRightEventArgs class.
		///</summary>
		public BuyRightEventArgs(BuyRightColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the BuyRightEventArgs class.
		///</summary>
		public BuyRightEventArgs(BuyRightColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The BuyRightColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="BuyRightColumn" />
		public BuyRightColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all BuyRight related events.
	///</summary>
	public delegate void BuyRightEventHandler(object sender, BuyRightEventArgs e);
	
	#region BuyRightComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class BuyRightComparer : System.Collections.Generic.IComparer<BuyRight>
	{
		BuyRightColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:BuyRightComparer"/> class.
        /// </summary>
		public BuyRightComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:BuyRightComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public BuyRightComparer(BuyRightColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="BuyRight"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="BuyRight"/> to compare.</param>
        /// <param name="b">The second <c>BuyRight</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(BuyRight a, BuyRight b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(BuyRight entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(BuyRight a, BuyRight b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public BuyRightColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region BuyRightKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="BuyRight"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class BuyRightKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the BuyRightKey class.
		/// </summary>
		public BuyRightKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the BuyRightKey class.
		/// </summary>
		public BuyRightKey(BuyRightBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the BuyRightKey class.
		/// </summary>
		public BuyRightKey(System.Int64 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private BuyRightBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public BuyRightBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int64 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int64 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int64) EntityUtil.ChangeType(values["Id"], typeof(System.Int64)) : (long)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region BuyRightColumn Enum
	
	/// <summary>
	/// Enumerate the BuyRight columns.
	/// </summary>
	[Serializable]
	public enum BuyRightColumn : int
	{
		/// <summary>
		/// Id : Auto increase id
		/// </summary>
		[EnumTextValue("Id")]
		[ColumnEnum("Id", typeof(System.Int64), System.Data.DbType.Int64, true, true, false)]
		Id = 1,
		/// <summary>
		/// SubCustAccountId : 
		/// </summary>
		[EnumTextValue("SubCustAccountID")]
		[ColumnEnum("SubCustAccountID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		SubCustAccountId = 2,
		/// <summary>
		/// SecSymbol : Securities symbol
		/// </summary>
		[EnumTextValue("SecSymbol")]
		[ColumnEnum("SecSymbol", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 8)]
		SecSymbol = 3,
		/// <summary>
		/// Market : Market id
		/// </summary>
		[EnumTextValue("Market")]
		[ColumnEnum("Market", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 1)]
		Market = 4,
		/// <summary>
		/// ExecDate : Executed date
		/// </summary>
		[EnumTextValue("ExecDate")]
		[ColumnEnum("ExecDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		ExecDate = 5,
		/// <summary>
		/// OwningVol : Owning volume
		/// </summary>
		[EnumTextValue("OwningVol")]
		[ColumnEnum("OwningVol", typeof(System.Int64), System.Data.DbType.Int64, false, false, false)]
		OwningVol = 6,
		/// <summary>
		/// AllowedVol : Volume allowed to buy
		/// </summary>
		[EnumTextValue("AllowedVol")]
		[ColumnEnum("AllowedVol", typeof(System.Int64), System.Data.DbType.Int64, false, false, false)]
		AllowedVol = 7,
		/// <summary>
		/// RegisteredVol : Volume registered to buy
		/// </summary>
		[EnumTextValue("RegisteredVol")]
		[ColumnEnum("RegisteredVol", typeof(System.Int64), System.Data.DbType.Int64, false, false, false)]
		RegisteredVol = 8,
		/// <summary>
		/// Right : 
		/// </summary>
		[EnumTextValue("Right")]
		[ColumnEnum("Right", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		Right = 9,
		/// <summary>
		/// RateRight : The rate of right
		/// </summary>
		[EnumTextValue("RateRight")]
		[ColumnEnum("RateRight", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		RateRight = 10,
		/// <summary>
		/// Price : Price to buy
		/// </summary>
		[EnumTextValue("Price")]
		[ColumnEnum("Price", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		Price = 11,
		/// <summary>
		/// BeginDateToRegister : Date to begin registering
		/// </summary>
		[EnumTextValue("BeginDateToRegister")]
		[ColumnEnum("BeginDateToRegister", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		BeginDateToRegister = 12,
		/// <summary>
		/// EndDateToRegister : Date of end registering
		/// </summary>
		[EnumTextValue("EndDateToRegister")]
		[ColumnEnum("EndDateToRegister", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		EndDateToRegister = 13,
		/// <summary>
		/// BeginDateToTransfer : Date to begin transferring
		/// </summary>
		[EnumTextValue("BeginDateToTransfer")]
		[ColumnEnum("BeginDateToTransfer", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		BeginDateToTransfer = 14,
		/// <summary>
		/// EndDateToTransfer : Date to end transferring
		/// </summary>
		[EnumTextValue("EndDateToTransfer")]
		[ColumnEnum("EndDateToTransfer", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		EndDateToTransfer = 15,
		/// <summary>
		/// ReceivedDate : Date to receive stocks
		/// </summary>
		[EnumTextValue("ReceivedDate")]
		[ColumnEnum("ReceivedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ReceivedDate = 16,
		/// <summary>
		/// Note : Note
		/// </summary>
		[EnumTextValue("Note")]
		[ColumnEnum("Note", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Note = 17,
		/// <summary>
		/// CreatedDate : Created date time
		/// </summary>
		[EnumTextValue("CreatedDate")]
		[ColumnEnum("CreatedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		CreatedDate = 18,
		/// <summary>
		/// CreatedUser : Created user
		/// </summary>
		[EnumTextValue("CreatedUser")]
		[ColumnEnum("CreatedUser", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		CreatedUser = 19,
		/// <summary>
		/// UpdatedDate : Updated date time
		/// </summary>
		[EnumTextValue("UpdatedDate")]
		[ColumnEnum("UpdatedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		UpdatedDate = 20,
		/// <summary>
		/// UpdatedUser : Updated user
		/// </summary>
		[EnumTextValue("UpdatedUser")]
		[ColumnEnum("UpdatedUser", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		UpdatedUser = 21
	}//End enum

	#endregion BuyRightColumn Enum

} // end namespace
