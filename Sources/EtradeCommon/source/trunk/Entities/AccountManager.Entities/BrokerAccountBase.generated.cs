
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Monday, November 15, 2010
	Important: Do not modify this file. Edit the file BrokerAccount.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Web.Script.Serialization;

using AccountManager.Entities.Validation;
#endregion

namespace AccountManager.Entities
{
	///<summary>
	/// An object representation of the 'BrokerAccount' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class BrokerAccountBase : EntityBase, IBrokerAccount, IEntityId<BrokerAccountKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private BrokerAccountEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private BrokerAccountEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private BrokerAccountEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<BrokerAccount> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event BrokerAccountEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event BrokerAccountEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="BrokerAccountBase"/> instance.
		///</summary>
		public BrokerAccountBase()
		{
			this.entityData = new BrokerAccountEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="BrokerAccountBase"/> instance.
		///</summary>
		///<param name="_brokerId"></param>
		///<param name="_name"></param>
		///<param name="_password"></param>
		///<param name="_accountType"></param>
		///<param name="_actived"></param>
		///<param name="_mobilePhone"></param>
		///<param name="_emailAddr"></param>
		///<param name="_createdDate"></param>
		///<param name="_createdUser"></param>
		///<param name="_updatedDate"></param>
		///<param name="_updatedUser"></param>
		public BrokerAccountBase(System.String _brokerId, System.String _name, System.String _password, 
			System.Int16 _accountType, System.Boolean _actived, System.String _mobilePhone, System.String _emailAddr, 
			System.DateTime _createdDate, System.String _createdUser, System.DateTime? _updatedDate, 
			System.String _updatedUser)
		{
			this.entityData = new BrokerAccountEntityData();
			this.backupData = null;

			this.BrokerId = _brokerId;
			this.Name = _name;
			this.Password = _password;
			this.AccountType = _accountType;
			this.Actived = _actived;
			this.MobilePhone = _mobilePhone;
			this.EmailAddr = _emailAddr;
			this.CreatedDate = _createdDate;
			this.CreatedUser = _createdUser;
			this.UpdatedDate = _updatedDate;
			this.UpdatedUser = _updatedUser;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="BrokerAccount"/> instance.
		///</summary>
		///<param name="_brokerId"></param>
		///<param name="_name"></param>
		///<param name="_password"></param>
		///<param name="_accountType"></param>
		///<param name="_actived"></param>
		///<param name="_mobilePhone"></param>
		///<param name="_emailAddr"></param>
		///<param name="_createdDate"></param>
		///<param name="_createdUser"></param>
		///<param name="_updatedDate"></param>
		///<param name="_updatedUser"></param>
		public static BrokerAccount CreateBrokerAccount(System.String _brokerId, System.String _name, System.String _password, 
			System.Int16 _accountType, System.Boolean _actived, System.String _mobilePhone, System.String _emailAddr, 
			System.DateTime _createdDate, System.String _createdUser, System.DateTime? _updatedDate, 
			System.String _updatedUser)
		{
			BrokerAccount newBrokerAccount = new BrokerAccount();
			newBrokerAccount.BrokerId = _brokerId;
			newBrokerAccount.Name = _name;
			newBrokerAccount.Password = _password;
			newBrokerAccount.AccountType = _accountType;
			newBrokerAccount.Actived = _actived;
			newBrokerAccount.MobilePhone = _mobilePhone;
			newBrokerAccount.EmailAddr = _emailAddr;
			newBrokerAccount.CreatedDate = _createdDate;
			newBrokerAccount.CreatedUser = _createdUser;
			newBrokerAccount.UpdatedDate = _updatedDate;
			newBrokerAccount.UpdatedUser = _updatedUser;
			return newBrokerAccount;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the BrokerId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 20)]
		public virtual System.String BrokerId
		{
			get
			{
				return this.entityData.BrokerId; 
			}
			
			set
			{
				if (this.entityData.BrokerId == value)
					return;
					
				OnColumnChanging(BrokerAccountColumn.BrokerId, this.entityData.BrokerId);
				this.entityData.BrokerId = value;
				this.EntityId.BrokerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BrokerAccountColumn.BrokerId, this.entityData.BrokerId);
				OnPropertyChanged("BrokerId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the BrokerID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the BrokerID property.</remarks>
		/// <value>This type is varchar</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalBrokerId
		{
			get { return this.entityData.OriginalBrokerId; }
			set { this.entityData.OriginalBrokerId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String Name
		{
			get
			{
				return this.entityData.Name; 
			}
			
			set
			{
				if (this.entityData.Name == value)
					return;
					
				OnColumnChanging(BrokerAccountColumn.Name, this.entityData.Name);
				this.entityData.Name = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BrokerAccountColumn.Name, this.entityData.Name);
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Password property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String Password
		{
			get
			{
				return this.entityData.Password; 
			}
			
			set
			{
				if (this.entityData.Password == value)
					return;
					
				OnColumnChanging(BrokerAccountColumn.Password, this.entityData.Password);
				this.entityData.Password = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BrokerAccountColumn.Password, this.entityData.Password);
				OnPropertyChanged("Password");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccountType property. 
		///		
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int16 AccountType
		{
			get
			{
				return this.entityData.AccountType; 
			}
			
			set
			{
				if (this.entityData.AccountType == value)
					return;
					
				OnColumnChanging(BrokerAccountColumn.AccountType, this.entityData.AccountType);
				this.entityData.AccountType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BrokerAccountColumn.AccountType, this.entityData.AccountType);
				OnPropertyChanged("AccountType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Actived property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Actived
		{
			get
			{
				return this.entityData.Actived; 
			}
			
			set
			{
				if (this.entityData.Actived == value)
					return;
					
				OnColumnChanging(BrokerAccountColumn.Actived, this.entityData.Actived);
				this.entityData.Actived = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BrokerAccountColumn.Actived, this.entityData.Actived);
				OnPropertyChanged("Actived");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MobilePhone property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MobilePhone
		{
			get
			{
				return this.entityData.MobilePhone; 
			}
			
			set
			{
				if (this.entityData.MobilePhone == value)
					return;
					
				OnColumnChanging(BrokerAccountColumn.MobilePhone, this.entityData.MobilePhone);
				this.entityData.MobilePhone = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BrokerAccountColumn.MobilePhone, this.entityData.MobilePhone);
				OnPropertyChanged("MobilePhone");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmailAddr property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String EmailAddr
		{
			get
			{
				return this.entityData.EmailAddr; 
			}
			
			set
			{
				if (this.entityData.EmailAddr == value)
					return;
					
				OnColumnChanging(BrokerAccountColumn.EmailAddr, this.entityData.EmailAddr);
				this.entityData.EmailAddr = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BrokerAccountColumn.EmailAddr, this.entityData.EmailAddr);
				OnPropertyChanged("EmailAddr");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime CreatedDate
		{
			get
			{
				return this.entityData.CreatedDate; 
			}
			
			set
			{
				if (this.entityData.CreatedDate == value)
					return;
					
				OnColumnChanging(BrokerAccountColumn.CreatedDate, this.entityData.CreatedDate);
				this.entityData.CreatedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BrokerAccountColumn.CreatedDate, this.entityData.CreatedDate);
				OnPropertyChanged("CreatedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedUser property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual System.String CreatedUser
		{
			get
			{
				return this.entityData.CreatedUser; 
			}
			
			set
			{
				if (this.entityData.CreatedUser == value)
					return;
					
				OnColumnChanging(BrokerAccountColumn.CreatedUser, this.entityData.CreatedUser);
				this.entityData.CreatedUser = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BrokerAccountColumn.CreatedUser, this.entityData.CreatedUser);
				OnPropertyChanged("CreatedUser");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdatedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsUpdatedDateNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? UpdatedDate
		{
			get
			{
				return this.entityData.UpdatedDate; 
			}
			
			set
			{
				if (this.entityData.UpdatedDate == value)
					return;
					
				OnColumnChanging(BrokerAccountColumn.UpdatedDate, this.entityData.UpdatedDate);
				this.entityData.UpdatedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BrokerAccountColumn.UpdatedDate, this.entityData.UpdatedDate);
				OnPropertyChanged("UpdatedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UpdatedUser property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String UpdatedUser
		{
			get
			{
				return this.entityData.UpdatedUser; 
			}
			
			set
			{
				if (this.entityData.UpdatedUser == value)
					return;
					
				OnColumnChanging(BrokerAccountColumn.UpdatedUser, this.entityData.UpdatedUser);
				this.entityData.UpdatedUser = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BrokerAccountColumn.UpdatedUser, this.entityData.UpdatedUser);
				OnPropertyChanged("UpdatedUser");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections

		/// <summary>
		///	Holds a collection of BrokerAmPermissionFromBrokerPermission objects
		///	which are related to this object through the junction table BrokerPermission
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<BrokerAmPermission> PermissionIdBrokerAmPermissionCollection_From_BrokerPermission
		{
			get { return entityData.PermissionIdBrokerAmPermissionCollection_From_BrokerPermission; }
			set { entityData.PermissionIdBrokerAmPermissionCollection_From_BrokerPermission = value; }	
		}
	
		/// <summary>
		///	Holds a collection of BrokerPermission objects
		///	which are related to this object through the relation FK_BrokerPermission_BrokerAccount
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<BrokerPermission> BrokerPermissionCollection
		{
			get { return entityData.BrokerPermissionCollection; }
			set { entityData.BrokerPermissionCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of MainCustAccount objects
		///	which are related to this object through the relation FK_MainCustAccount_BrokerAccount
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<MainCustAccount> MainCustAccountCollection
		{
			get { return entityData.MainCustAccountCollection; }
			set { entityData.MainCustAccountCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("BrokerId", "Broker Id"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("BrokerId", "Broker Id", 20));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Name", "Name"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Name", "Name", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("Password", "Password"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Password", "Password", 50));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MobilePhone", "Mobile Phone", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("EmailAddr", "Email Addr", 30));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("CreatedUser", "Created User"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("CreatedUser", "Created User", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("UpdatedUser", "Updated User", 20));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public override string TableName
		{
			get { return "BrokerAccount"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"BrokerID", "Name", "Password", "AccountType", "Actived", "MobilePhone", "EmailAddr", "CreatedDate", "CreatedUser", "UpdatedDate", "UpdatedUser"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as BrokerAccountEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (BrokerAccount) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
        [ScriptIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<BrokerAccount>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as BrokerAccount);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed BrokerAccount Entity 
		///</summary>
		protected virtual BrokerAccount Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			BrokerAccount copy = new BrokerAccount();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.BrokerId = this.BrokerId;
					copy.OriginalBrokerId = this.OriginalBrokerId;
				copy.Name = this.Name;
				copy.Password = this.Password;
				copy.AccountType = this.AccountType;
				copy.Actived = this.Actived;
				copy.MobilePhone = this.MobilePhone;
				copy.EmailAddr = this.EmailAddr;
				copy.CreatedDate = this.CreatedDate;
				copy.CreatedUser = this.CreatedUser;
				copy.UpdatedDate = this.UpdatedDate;
				copy.UpdatedUser = this.UpdatedUser;
			
		
			//deep copy nested objects
			copy.PermissionIdBrokerAmPermissionCollection_From_BrokerPermission = (TList<BrokerAmPermission>) MakeCopyOf(this.PermissionIdBrokerAmPermissionCollection_From_BrokerPermission, existingCopies); 
			copy.BrokerPermissionCollection = (TList<BrokerPermission>) MakeCopyOf(this.BrokerPermissionCollection, existingCopies); 
			copy.MainCustAccountCollection = (TList<MainCustAccount>) MakeCopyOf(this.MainCustAccountCollection, existingCopies); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed BrokerAccount Entity 
		///</summary>
		public virtual BrokerAccount Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed BrokerAccount Entity which is a deep copy of the current entity.
		///</summary>
		public virtual BrokerAccount DeepCopy()
		{
			return EntityHelper.Clone<BrokerAccount>(this as BrokerAccount);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as BrokerAccountEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new BrokerAccountEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as BrokerAccountEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(BrokerAccountColumn column)
		{
			switch(column)
			{
					case BrokerAccountColumn.BrokerId:
					return entityData.BrokerId != _originalData.BrokerId;
					case BrokerAccountColumn.Name:
					return entityData.Name != _originalData.Name;
					case BrokerAccountColumn.Password:
					return entityData.Password != _originalData.Password;
					case BrokerAccountColumn.AccountType:
					return entityData.AccountType != _originalData.AccountType;
					case BrokerAccountColumn.Actived:
					return entityData.Actived != _originalData.Actived;
					case BrokerAccountColumn.MobilePhone:
					return entityData.MobilePhone != _originalData.MobilePhone;
					case BrokerAccountColumn.EmailAddr:
					return entityData.EmailAddr != _originalData.EmailAddr;
					case BrokerAccountColumn.CreatedDate:
					return entityData.CreatedDate != _originalData.CreatedDate;
					case BrokerAccountColumn.CreatedUser:
					return entityData.CreatedUser != _originalData.CreatedUser;
					case BrokerAccountColumn.UpdatedDate:
					return entityData.UpdatedDate != _originalData.UpdatedDate;
					case BrokerAccountColumn.UpdatedUser:
					return entityData.UpdatedUser != _originalData.UpdatedUser;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< BrokerAccountColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.BrokerId != _originalData.BrokerId;
			result = result || entityData.Name != _originalData.Name;
			result = result || entityData.Password != _originalData.Password;
			result = result || entityData.AccountType != _originalData.AccountType;
			result = result || entityData.Actived != _originalData.Actived;
			result = result || entityData.MobilePhone != _originalData.MobilePhone;
			result = result || entityData.EmailAddr != _originalData.EmailAddr;
			result = result || entityData.CreatedDate != _originalData.CreatedDate;
			result = result || entityData.CreatedUser != _originalData.CreatedUser;
			result = result || entityData.UpdatedDate != _originalData.UpdatedDate;
			result = result || entityData.UpdatedUser != _originalData.UpdatedUser;
			return result;
		}	
		
		///<summary>
		///  Returns a BrokerAccount Entity with the original data.
		///</summary>
		public BrokerAccount GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateBrokerAccount(
				_originalData.BrokerId,
				_originalData.Name,
				_originalData.Password,
				_originalData.AccountType,
				_originalData.Actived,
				_originalData.MobilePhone,
				_originalData.EmailAddr,
				_originalData.CreatedDate,
				_originalData.CreatedUser,
				_originalData.UpdatedDate,
				_originalData.UpdatedUser
				);
				
			return (BrokerAccount)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="BrokerAccountBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is BrokerAccountBase)
				return ValueEquals(this, (BrokerAccountBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="BrokerAccountBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.BrokerId.GetHashCode() ^ 
					this.Name.GetHashCode() ^ 
					this.Password.GetHashCode() ^ 
					this.AccountType.GetHashCode() ^ 
					this.Actived.GetHashCode() ^ 
					((this.MobilePhone == null) ? string.Empty : this.MobilePhone.ToString()).GetHashCode() ^ 
					((this.EmailAddr == null) ? string.Empty : this.EmailAddr.ToString()).GetHashCode() ^ 
					this.CreatedDate.GetHashCode() ^ 
					this.CreatedUser.GetHashCode() ^ 
					((this.UpdatedDate == null) ? string.Empty : this.UpdatedDate.ToString()).GetHashCode() ^ 
					((this.UpdatedUser == null) ? string.Empty : this.UpdatedUser.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="BrokerAccountBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(BrokerAccountBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="BrokerAccountBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="BrokerAccountBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="BrokerAccountBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(BrokerAccountBase Object1, BrokerAccountBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.BrokerId != Object2.BrokerId)
				equal = false;
			if (Object1.Name != Object2.Name)
				equal = false;
			if (Object1.Password != Object2.Password)
				equal = false;
			if (Object1.AccountType != Object2.AccountType)
				equal = false;
			if (Object1.Actived != Object2.Actived)
				equal = false;
			if ( Object1.MobilePhone != null && Object2.MobilePhone != null )
			{
				if (Object1.MobilePhone != Object2.MobilePhone)
					equal = false;
			}
			else if (Object1.MobilePhone == null ^ Object2.MobilePhone == null )
			{
				equal = false;
			}
			if ( Object1.EmailAddr != null && Object2.EmailAddr != null )
			{
				if (Object1.EmailAddr != Object2.EmailAddr)
					equal = false;
			}
			else if (Object1.EmailAddr == null ^ Object2.EmailAddr == null )
			{
				equal = false;
			}
			if (Object1.CreatedDate != Object2.CreatedDate)
				equal = false;
			if (Object1.CreatedUser != Object2.CreatedUser)
				equal = false;
			if ( Object1.UpdatedDate != null && Object2.UpdatedDate != null )
			{
				if (Object1.UpdatedDate != Object2.UpdatedDate)
					equal = false;
			}
			else if (Object1.UpdatedDate == null ^ Object2.UpdatedDate == null )
			{
				equal = false;
			}
			if ( Object1.UpdatedUser != null && Object2.UpdatedUser != null )
			{
				if (Object1.UpdatedUser != Object2.UpdatedUser)
					equal = false;
			}
			else if (Object1.UpdatedUser == null ^ Object2.UpdatedUser == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((BrokerAccountBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static BrokerAccountComparer GetComparer()
        {
            return new BrokerAccountComparer();
        }
        */

        // Comparer delegates back to BrokerAccount
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(BrokerAccount rhs, BrokerAccountColumn which)
        {
            switch (which)
            {
            	
            	
            	case BrokerAccountColumn.BrokerId:
            		return this.BrokerId.CompareTo(rhs.BrokerId);
            		
            		                 
            	
            	
            	case BrokerAccountColumn.Name:
            		return this.Name.CompareTo(rhs.Name);
            		
            		                 
            	
            	
            	case BrokerAccountColumn.Password:
            		return this.Password.CompareTo(rhs.Password);
            		
            		                 
            	
            	
            	case BrokerAccountColumn.AccountType:
            		return this.AccountType.CompareTo(rhs.AccountType);
            		
            		                 
            	
            	
            	case BrokerAccountColumn.Actived:
            		return this.Actived.CompareTo(rhs.Actived);
            		
            		                 
            	
            	
            	case BrokerAccountColumn.MobilePhone:
            		return this.MobilePhone.CompareTo(rhs.MobilePhone);
            		
            		                 
            	
            	
            	case BrokerAccountColumn.EmailAddr:
            		return this.EmailAddr.CompareTo(rhs.EmailAddr);
            		
            		                 
            	
            	
            	case BrokerAccountColumn.CreatedDate:
            		return this.CreatedDate.CompareTo(rhs.CreatedDate);
            		
            		                 
            	
            	
            	case BrokerAccountColumn.CreatedUser:
            		return this.CreatedUser.CompareTo(rhs.CreatedUser);
            		
            		                 
            	
            	
            	case BrokerAccountColumn.UpdatedDate:
            		return this.UpdatedDate.Value.CompareTo(rhs.UpdatedDate.Value);
            		
            		                 
            	
            	
            	case BrokerAccountColumn.UpdatedUser:
            		return this.UpdatedUser.CompareTo(rhs.UpdatedUser);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
        [ScriptIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<BrokerAccountKey> Members
		
		// member variable for the EntityId property
		private BrokerAccountKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
        [ScriptIgnore]
		public virtual BrokerAccountKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new BrokerAccountKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute(), ScriptIgnore()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
        [ScriptIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("BrokerAccount")
					.Append("|").Append( this.BrokerId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{12}{11}- BrokerId: {0}{11}- Name: {1}{11}- Password: {2}{11}- AccountType: {3}{11}- Actived: {4}{11}- MobilePhone: {5}{11}- EmailAddr: {6}{11}- CreatedDate: {7}{11}- CreatedUser: {8}{11}- UpdatedDate: {9}{11}- UpdatedUser: {10}{11}{13}", 
				this.BrokerId,
				this.Name,
				this.Password,
				this.AccountType,
				this.Actived,
				(this.MobilePhone == null) ? string.Empty : this.MobilePhone.ToString(),
				(this.EmailAddr == null) ? string.Empty : this.EmailAddr.ToString(),
				this.CreatedDate,
				this.CreatedUser,
				(this.UpdatedDate == null) ? string.Empty : this.UpdatedDate.ToString(),
				(this.UpdatedUser == null) ? string.Empty : this.UpdatedUser.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'BrokerAccount' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class BrokerAccountEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// BrokerID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "BrokerAccount"</remarks>
		public System.String BrokerId;
			
		/// <summary>
		/// keep a copy of the original so it can be used for editable primary keys.
		/// </summary>
		public System.String OriginalBrokerId;
		
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// Name : 
		/// </summary>
		public System.String		  Name = string.Empty;
		
		/// <summary>
		/// Password : 
		/// </summary>
		public System.String		  Password = string.Empty;
		
		/// <summary>
		/// AccountType : 
		/// </summary>
		public System.Int16		  AccountType = (short)0;
		
		/// <summary>
		/// Actived : 
		/// </summary>
		public System.Boolean		  Actived = false;
		
		/// <summary>
		/// MobilePhone : 
		/// </summary>
		public System.String		  MobilePhone = null;
		
		/// <summary>
		/// EmailAddr : 
		/// </summary>
		public System.String		  EmailAddr = null;
		
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		public System.DateTime		  CreatedDate = DateTime.MinValue;
		
		/// <summary>
		/// CreatedUser : 
		/// </summary>
		public System.String		  CreatedUser = string.Empty;
		
		/// <summary>
		/// UpdatedDate : 
		/// </summary>
		public System.DateTime?		  UpdatedDate = null;
		
		/// <summary>
		/// UpdatedUser : 
		/// </summary>
		public System.String		  UpdatedUser = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region PermissionIdBrokerAmPermissionCollection_From_BrokerPermission
		
		private TList<BrokerAmPermission> permissionIdBrokerAmPermissionCollectionFromBrokerPermission;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table permissionIdBrokerAmPermissionCollectionFromBrokerPermission
		/// </summary>
		
		public TList<BrokerAmPermission> PermissionIdBrokerAmPermissionCollection_From_BrokerPermission
		{
			get
			{
				if (permissionIdBrokerAmPermissionCollectionFromBrokerPermission == null)
				{
				permissionIdBrokerAmPermissionCollectionFromBrokerPermission = new TList<BrokerAmPermission>();
				}
	
				return permissionIdBrokerAmPermissionCollectionFromBrokerPermission;
			}
			set { permissionIdBrokerAmPermissionCollectionFromBrokerPermission = value; }
		}
		
		#endregion 

		#region BrokerPermissionCollection
		
		private TList<BrokerPermission> _brokerPermissionBrokerId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _brokerPermissionBrokerId
		/// </summary>
		
		public TList<BrokerPermission> BrokerPermissionCollection
		{
			get
			{
				if (_brokerPermissionBrokerId == null)
				{
				_brokerPermissionBrokerId = new TList<BrokerPermission>();
				}
	
				return _brokerPermissionBrokerId;
			}
			set { _brokerPermissionBrokerId = value; }
		}
		
		#endregion

		#region MainCustAccountCollection
		
		private TList<MainCustAccount> _mainCustAccountBrokerId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _mainCustAccountBrokerId
		/// </summary>
		
		public TList<MainCustAccount> MainCustAccountCollection
		{
			get
			{
				if (_mainCustAccountBrokerId == null)
				{
				_mainCustAccountBrokerId = new TList<MainCustAccount>();
				}
	
				return _mainCustAccountBrokerId;
			}
			set { _mainCustAccountBrokerId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			BrokerAccountEntityData _tmp = new BrokerAccountEntityData();
						
			_tmp.BrokerId = this.BrokerId;
			_tmp.OriginalBrokerId = this.OriginalBrokerId;
			
			_tmp.Name = this.Name;
			_tmp.Password = this.Password;
			_tmp.AccountType = this.AccountType;
			_tmp.Actived = this.Actived;
			_tmp.MobilePhone = this.MobilePhone;
			_tmp.EmailAddr = this.EmailAddr;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.CreatedUser = this.CreatedUser;
			_tmp.UpdatedDate = this.UpdatedDate;
			_tmp.UpdatedUser = this.UpdatedUser;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this.permissionIdBrokerAmPermissionCollectionFromBrokerPermission != null)
				_tmp.PermissionIdBrokerAmPermissionCollection_From_BrokerPermission = (TList<BrokerAmPermission>) MakeCopyOf(this.PermissionIdBrokerAmPermissionCollection_From_BrokerPermission); 
			if (this._brokerPermissionBrokerId != null)
				_tmp.BrokerPermissionCollection = (TList<BrokerPermission>) MakeCopyOf(this.BrokerPermissionCollection); 
			if (this._mainCustAccountBrokerId != null)
				_tmp.MainCustAccountCollection = (TList<MainCustAccount>) MakeCopyOf(this.MainCustAccountCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			BrokerAccountEntityData _tmp = new BrokerAccountEntityData();
						
			_tmp.BrokerId = this.BrokerId;
			_tmp.OriginalBrokerId = this.OriginalBrokerId;
			
			_tmp.Name = this.Name;
			_tmp.Password = this.Password;
			_tmp.AccountType = this.AccountType;
			_tmp.Actived = this.Actived;
			_tmp.MobilePhone = this.MobilePhone;
			_tmp.EmailAddr = this.EmailAddr;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.CreatedUser = this.CreatedUser;
			_tmp.UpdatedDate = this.UpdatedDate;
			_tmp.UpdatedUser = this.UpdatedUser;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			_tmp.PermissionIdBrokerAmPermissionCollection_From_BrokerPermission = (TList<BrokerAmPermission>) MakeCopyOf(this.PermissionIdBrokerAmPermissionCollection_From_BrokerPermission, existingCopies); 
			_tmp.BrokerPermissionCollection = (TList<BrokerPermission>) MakeCopyOf(this.BrokerPermissionCollection, existingCopies); 
			_tmp.MainCustAccountCollection = (TList<MainCustAccount>) MakeCopyOf(this.MainCustAccountCollection, existingCopies); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="BrokerAccountColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(BrokerAccountColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="BrokerAccountColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(BrokerAccountColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="BrokerAccountColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(BrokerAccountColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				BrokerAccountEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new BrokerAccountEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="BrokerAccountColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(BrokerAccountColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				BrokerAccountEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new BrokerAccountEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region BrokerAccountEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="BrokerAccount"/> object.
	/// </remarks>
	public class BrokerAccountEventArgs : System.EventArgs
	{
		private BrokerAccountColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the BrokerAccountEventArgs class.
		///</summary>
		public BrokerAccountEventArgs(BrokerAccountColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the BrokerAccountEventArgs class.
		///</summary>
		public BrokerAccountEventArgs(BrokerAccountColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The BrokerAccountColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="BrokerAccountColumn" />
		public BrokerAccountColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all BrokerAccount related events.
	///</summary>
	public delegate void BrokerAccountEventHandler(object sender, BrokerAccountEventArgs e);
	
	#region BrokerAccountComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class BrokerAccountComparer : System.Collections.Generic.IComparer<BrokerAccount>
	{
		BrokerAccountColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:BrokerAccountComparer"/> class.
        /// </summary>
		public BrokerAccountComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:BrokerAccountComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public BrokerAccountComparer(BrokerAccountColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="BrokerAccount"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="BrokerAccount"/> to compare.</param>
        /// <param name="b">The second <c>BrokerAccount</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(BrokerAccount a, BrokerAccount b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(BrokerAccount entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(BrokerAccount a, BrokerAccount b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public BrokerAccountColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region BrokerAccountKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="BrokerAccount"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class BrokerAccountKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the BrokerAccountKey class.
		/// </summary>
		public BrokerAccountKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the BrokerAccountKey class.
		/// </summary>
		public BrokerAccountKey(BrokerAccountBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.BrokerId = entity.BrokerId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the BrokerAccountKey class.
		/// </summary>
		public BrokerAccountKey(System.String _brokerId)
		{
			#region Init Properties

			this.BrokerId = _brokerId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private BrokerAccountBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public BrokerAccountBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the BrokerId property
		private System.String _brokerId;
		
		/// <summary>
		/// Gets or sets the BrokerId property.
		/// </summary>
		public System.String BrokerId
		{
			get { return _brokerId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.BrokerId = value;
				
				_brokerId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				BrokerId = ( values["BrokerId"] != null ) ? (System.String) EntityUtil.ChangeType(values["BrokerId"], typeof(System.String)) : string.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("BrokerId", BrokerId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("BrokerId: {0}{1}",
								BrokerId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region BrokerAccountColumn Enum
	
	/// <summary>
	/// Enumerate the BrokerAccount columns.
	/// </summary>
	[Serializable]
	public enum BrokerAccountColumn : int
	{
		/// <summary>
		/// BrokerId : 
		/// </summary>
		[EnumTextValue("BrokerID")]
		[ColumnEnum("BrokerID", typeof(System.String), System.Data.DbType.AnsiString, true, false, false, 20)]
		BrokerId = 1,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		Name = 2,
		/// <summary>
		/// Password : 
		/// </summary>
		[EnumTextValue("Password")]
		[ColumnEnum("Password", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 50)]
		Password = 3,
		/// <summary>
		/// AccountType : 
		/// </summary>
		[EnumTextValue("AccountType")]
		[ColumnEnum("AccountType", typeof(System.Int16), System.Data.DbType.Int16, false, false, false)]
		AccountType = 4,
		/// <summary>
		/// Actived : 
		/// </summary>
		[EnumTextValue("Actived")]
		[ColumnEnum("Actived", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Actived = 5,
		/// <summary>
		/// MobilePhone : 
		/// </summary>
		[EnumTextValue("MobilePhone")]
		[ColumnEnum("MobilePhone", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MobilePhone = 6,
		/// <summary>
		/// EmailAddr : 
		/// </summary>
		[EnumTextValue("EmailAddr")]
		[ColumnEnum("EmailAddr", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 30)]
		EmailAddr = 7,
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		[EnumTextValue("CreatedDate")]
		[ColumnEnum("CreatedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		CreatedDate = 8,
		/// <summary>
		/// CreatedUser : 
		/// </summary>
		[EnumTextValue("CreatedUser")]
		[ColumnEnum("CreatedUser", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		CreatedUser = 9,
		/// <summary>
		/// UpdatedDate : 
		/// </summary>
		[EnumTextValue("UpdatedDate")]
		[ColumnEnum("UpdatedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		UpdatedDate = 10,
		/// <summary>
		/// UpdatedUser : 
		/// </summary>
		[EnumTextValue("UpdatedUser")]
		[ColumnEnum("UpdatedUser", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		UpdatedUser = 11
	}//End enum

	#endregion BrokerAccountColumn Enum

} // end namespace
