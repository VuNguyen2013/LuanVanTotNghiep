
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Saturday, December 04, 2010
	Important: Do not modify this file. Edit the file CustomerActionHistory.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Web.Script.Serialization;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using AccountManager.Entities.Validation;
#endregion

namespace AccountManager.Entities
{
	///<summary>
	/// An object representation of the 'CustomerActionHistory' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class CustomerActionHistoryBase : EntityBase, ICustomerActionHistory, IEntityId<CustomerActionHistoryKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private CustomerActionHistoryEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private CustomerActionHistoryEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private CustomerActionHistoryEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<CustomerActionHistory> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CustomerActionHistoryEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CustomerActionHistoryEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="CustomerActionHistoryBase"/> instance.
		///</summary>
		public CustomerActionHistoryBase()
		{
			this.entityData = new CustomerActionHistoryEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="CustomerActionHistoryBase"/> instance.
		///</summary>
		///<param name="_brokerId">BrokerID</param>
		///<param name="_actionTime">The time action happens</param>
		///<param name="_mainCustAccountId">Main customer account ID</param>
		///<param name="_subCustAccountId">Sub customer account ID</param>
		///<param name="_actionType">Action type (login, logout, ...)</param>
		///<param name="_reason">Further information</param>
		public CustomerActionHistoryBase(System.String _brokerId, System.DateTime _actionTime, 
			System.String _mainCustAccountId, System.String _subCustAccountId, System.Int32 _actionType, 
			System.Int32? _reason)
		{
			this.entityData = new CustomerActionHistoryEntityData();
			this.backupData = null;

			this.BrokerId = _brokerId;
			this.ActionTime = _actionTime;
			this.MainCustAccountId = _mainCustAccountId;
			this.SubCustAccountId = _subCustAccountId;
			this.ActionType = _actionType;
			this.Reason = _reason;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="CustomerActionHistory"/> instance.
		///</summary>
		///<param name="_brokerId">BrokerID</param>
		///<param name="_actionTime">The time action happens</param>
		///<param name="_mainCustAccountId">Main customer account ID</param>
		///<param name="_subCustAccountId">Sub customer account ID</param>
		///<param name="_actionType">Action type (login, logout, ...)</param>
		///<param name="_reason">Further information</param>
		public static CustomerActionHistory CreateCustomerActionHistory(System.String _brokerId, System.DateTime _actionTime, 
			System.String _mainCustAccountId, System.String _subCustAccountId, System.Int32 _actionType, 
			System.Int32? _reason)
		{
			CustomerActionHistory newCustomerActionHistory = new CustomerActionHistory();
			newCustomerActionHistory.BrokerId = _brokerId;
			newCustomerActionHistory.ActionTime = _actionTime;
			newCustomerActionHistory.MainCustAccountId = _mainCustAccountId;
			newCustomerActionHistory.SubCustAccountId = _subCustAccountId;
			newCustomerActionHistory.ActionType = _actionType;
			newCustomerActionHistory.Reason = _reason;
			return newCustomerActionHistory;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		Auto increase ID
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@"Auto increase ID"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int64 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(CustomerActionHistoryColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerActionHistoryColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BrokerId property. 
		///		BrokerID
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"BrokerID"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String BrokerId
		{
			get
			{
				return this.entityData.BrokerId; 
			}
			
			set
			{
				if (this.entityData.BrokerId == value)
					return;
					
				OnColumnChanging(CustomerActionHistoryColumn.BrokerId, this.entityData.BrokerId);
				this.entityData.BrokerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerActionHistoryColumn.BrokerId, this.entityData.BrokerId);
				OnPropertyChanged("BrokerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ActionTime property. 
		///		The time action happens
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"The time action happens"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ActionTime
		{
			get
			{
				return this.entityData.ActionTime; 
			}
			
			set
			{
				if (this.entityData.ActionTime == value)
					return;
					
				OnColumnChanging(CustomerActionHistoryColumn.ActionTime, this.entityData.ActionTime);
				this.entityData.ActionTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerActionHistoryColumn.ActionTime, this.entityData.ActionTime);
				OnPropertyChanged("ActionTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MainCustAccountId property. 
		///		Main customer account ID
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Main customer account ID"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual System.String MainCustAccountId
		{
			get
			{
				return this.entityData.MainCustAccountId; 
			}
			
			set
			{
				if (this.entityData.MainCustAccountId == value)
					return;
					
				OnColumnChanging(CustomerActionHistoryColumn.MainCustAccountId, this.entityData.MainCustAccountId);
				this.entityData.MainCustAccountId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerActionHistoryColumn.MainCustAccountId, this.entityData.MainCustAccountId);
				OnPropertyChanged("MainCustAccountId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SubCustAccountId property. 
		///		Sub customer account ID
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Sub customer account ID"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String SubCustAccountId
		{
			get
			{
				return this.entityData.SubCustAccountId; 
			}
			
			set
			{
				if (this.entityData.SubCustAccountId == value)
					return;
					
				OnColumnChanging(CustomerActionHistoryColumn.SubCustAccountId, this.entityData.SubCustAccountId);
				this.entityData.SubCustAccountId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerActionHistoryColumn.SubCustAccountId, this.entityData.SubCustAccountId);
				OnPropertyChanged("SubCustAccountId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ActionType property. 
		///		Action type (login, logout, ...)
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Action type (login, logout, ...)"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ActionType
		{
			get
			{
				return this.entityData.ActionType; 
			}
			
			set
			{
				if (this.entityData.ActionType == value)
					return;
					
				OnColumnChanging(CustomerActionHistoryColumn.ActionType, this.entityData.ActionType);
				this.entityData.ActionType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerActionHistoryColumn.ActionType, this.entityData.ActionType);
				OnPropertyChanged("ActionType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Reason property. 
		///		Further information
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsReasonNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Further information"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Reason
		{
			get
			{
				return this.entityData.Reason; 
			}
			
			set
			{
				if (this.entityData.Reason == value)
					return;
					
				OnColumnChanging(CustomerActionHistoryColumn.Reason, this.entityData.Reason);
				this.entityData.Reason = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerActionHistoryColumn.Reason, this.entityData.Reason);
				OnPropertyChanged("Reason");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="MainCustAccount"/>.
		/// </summary>
		/// <value>The source MainCustAccount for MainCustAccountId.</value>
        [XmlIgnore()]
        [ScriptIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual MainCustAccount MainCustAccountIdSource
      	{
            get { return entityData.MainCustAccountIdSource; }
            set { entityData.MainCustAccountIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SubCustAccount"/>.
		/// </summary>
		/// <value>The source SubCustAccount for SubCustAccountId.</value>
        [XmlIgnore()]
        [ScriptIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SubCustAccount SubCustAccountIdSource
      	{
            get { return entityData.SubCustAccountIdSource; }
            set { entityData.SubCustAccountIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("BrokerId", "Broker Id", 20));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("MainCustAccountId", "Main Cust Account Id"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("MainCustAccountId", "Main Cust Account Id", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SubCustAccountId", "Sub Cust Account Id", 20));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public override string TableName
		{
			get { return "CustomerActionHistory"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "BrokerID", "ActionTime", "MainCustAccountID", "SubCustAccountID", "ActionType", "Reason"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as CustomerActionHistoryEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (CustomerActionHistory) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
        [ScriptIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<CustomerActionHistory>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as CustomerActionHistory);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed CustomerActionHistory Entity 
		///</summary>
		protected virtual CustomerActionHistory Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			CustomerActionHistory copy = new CustomerActionHistory();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.BrokerId = this.BrokerId;
				copy.ActionTime = this.ActionTime;
				copy.MainCustAccountId = this.MainCustAccountId;
				copy.SubCustAccountId = this.SubCustAccountId;
				copy.ActionType = this.ActionType;
				copy.Reason = this.Reason;
			
			if (this.MainCustAccountIdSource != null && existingCopies.Contains(this.MainCustAccountIdSource))
				copy.MainCustAccountIdSource = existingCopies[this.MainCustAccountIdSource] as MainCustAccount;
			else
				copy.MainCustAccountIdSource = MakeCopyOf(this.MainCustAccountIdSource, existingCopies) as MainCustAccount;
			if (this.SubCustAccountIdSource != null && existingCopies.Contains(this.SubCustAccountIdSource))
				copy.SubCustAccountIdSource = existingCopies[this.SubCustAccountIdSource] as SubCustAccount;
			else
				copy.SubCustAccountIdSource = MakeCopyOf(this.SubCustAccountIdSource, existingCopies) as SubCustAccount;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed CustomerActionHistory Entity 
		///</summary>
		public virtual CustomerActionHistory Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed CustomerActionHistory Entity which is a deep copy of the current entity.
		///</summary>
		public virtual CustomerActionHistory DeepCopy()
		{
			return EntityHelper.Clone<CustomerActionHistory>(this as CustomerActionHistory);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as CustomerActionHistoryEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new CustomerActionHistoryEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as CustomerActionHistoryEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(CustomerActionHistoryColumn column)
		{
			switch(column)
			{
					case CustomerActionHistoryColumn.Id:
					return entityData.Id != _originalData.Id;
					case CustomerActionHistoryColumn.BrokerId:
					return entityData.BrokerId != _originalData.BrokerId;
					case CustomerActionHistoryColumn.ActionTime:
					return entityData.ActionTime != _originalData.ActionTime;
					case CustomerActionHistoryColumn.MainCustAccountId:
					return entityData.MainCustAccountId != _originalData.MainCustAccountId;
					case CustomerActionHistoryColumn.SubCustAccountId:
					return entityData.SubCustAccountId != _originalData.SubCustAccountId;
					case CustomerActionHistoryColumn.ActionType:
					return entityData.ActionType != _originalData.ActionType;
					case CustomerActionHistoryColumn.Reason:
					return entityData.Reason != _originalData.Reason;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< CustomerActionHistoryColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.BrokerId != _originalData.BrokerId;
			result = result || entityData.ActionTime != _originalData.ActionTime;
			result = result || entityData.MainCustAccountId != _originalData.MainCustAccountId;
			result = result || entityData.SubCustAccountId != _originalData.SubCustAccountId;
			result = result || entityData.ActionType != _originalData.ActionType;
			result = result || entityData.Reason != _originalData.Reason;
			return result;
		}	
		
		///<summary>
		///  Returns a CustomerActionHistory Entity with the original data.
		///</summary>
		public CustomerActionHistory GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateCustomerActionHistory(
				_originalData.BrokerId,
				_originalData.ActionTime,
				_originalData.MainCustAccountId,
				_originalData.SubCustAccountId,
				_originalData.ActionType,
				_originalData.Reason
				);
				
			return (CustomerActionHistory)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="CustomerActionHistoryBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is CustomerActionHistoryBase)
				return ValueEquals(this, (CustomerActionHistoryBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="CustomerActionHistoryBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.BrokerId == null) ? string.Empty : this.BrokerId.ToString()).GetHashCode() ^ 
					this.ActionTime.GetHashCode() ^ 
					this.MainCustAccountId.GetHashCode() ^ 
					((this.SubCustAccountId == null) ? string.Empty : this.SubCustAccountId.ToString()).GetHashCode() ^ 
					this.ActionType.GetHashCode() ^ 
					((this.Reason == null) ? string.Empty : this.Reason.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="CustomerActionHistoryBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(CustomerActionHistoryBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="CustomerActionHistoryBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="CustomerActionHistoryBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="CustomerActionHistoryBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(CustomerActionHistoryBase Object1, CustomerActionHistoryBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.BrokerId != null && Object2.BrokerId != null )
			{
				if (Object1.BrokerId != Object2.BrokerId)
					equal = false;
			}
			else if (Object1.BrokerId == null ^ Object2.BrokerId == null )
			{
				equal = false;
			}
			if (Object1.ActionTime != Object2.ActionTime)
				equal = false;
			if (Object1.MainCustAccountId != Object2.MainCustAccountId)
				equal = false;
			if ( Object1.SubCustAccountId != null && Object2.SubCustAccountId != null )
			{
				if (Object1.SubCustAccountId != Object2.SubCustAccountId)
					equal = false;
			}
			else if (Object1.SubCustAccountId == null ^ Object2.SubCustAccountId == null )
			{
				equal = false;
			}
			if (Object1.ActionType != Object2.ActionType)
				equal = false;
			if ( Object1.Reason != null && Object2.Reason != null )
			{
				if (Object1.Reason != Object2.Reason)
					equal = false;
			}
			else if (Object1.Reason == null ^ Object2.Reason == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((CustomerActionHistoryBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static CustomerActionHistoryComparer GetComparer()
        {
            return new CustomerActionHistoryComparer();
        }
        */

        // Comparer delegates back to CustomerActionHistory
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(CustomerActionHistory rhs, CustomerActionHistoryColumn which)
        {
            switch (which)
            {
            	
            	
            	case CustomerActionHistoryColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case CustomerActionHistoryColumn.BrokerId:
            		return this.BrokerId.CompareTo(rhs.BrokerId);
            		
            		                 
            	
            	
            	case CustomerActionHistoryColumn.ActionTime:
            		return this.ActionTime.CompareTo(rhs.ActionTime);
            		
            		                 
            	
            	
            	case CustomerActionHistoryColumn.MainCustAccountId:
            		return this.MainCustAccountId.CompareTo(rhs.MainCustAccountId);
            		
            		                 
            	
            	
            	case CustomerActionHistoryColumn.SubCustAccountId:
            		return this.SubCustAccountId.CompareTo(rhs.SubCustAccountId);
            		
            		                 
            	
            	
            	case CustomerActionHistoryColumn.ActionType:
            		return this.ActionType.CompareTo(rhs.ActionType);
            		
            		                 
            	
            	
            	case CustomerActionHistoryColumn.Reason:
            		return this.Reason.Value.CompareTo(rhs.Reason.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
        [ScriptIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<CustomerActionHistoryKey> Members
		
		// member variable for the EntityId property
		private CustomerActionHistoryKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
        [ScriptIgnore]
		public virtual CustomerActionHistoryKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new CustomerActionHistoryKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute(), ScriptIgnore()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
        [ScriptIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("CustomerActionHistory")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{8}{7}- Id: {0}{7}- BrokerId: {1}{7}- ActionTime: {2}{7}- MainCustAccountId: {3}{7}- SubCustAccountId: {4}{7}- ActionType: {5}{7}- Reason: {6}{7}{9}", 
				this.Id,
				(this.BrokerId == null) ? string.Empty : this.BrokerId.ToString(),
				this.ActionTime,
				this.MainCustAccountId,
				(this.SubCustAccountId == null) ? string.Empty : this.SubCustAccountId.ToString(),
				this.ActionType,
				(this.Reason == null) ? string.Empty : this.Reason.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'CustomerActionHistory' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class CustomerActionHistoryEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ID : Auto increase ID
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "CustomerActionHistory"</remarks>
		public System.Int64 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// BrokerID : BrokerID
		/// </summary>
		public System.String		  BrokerId = null;
		
		/// <summary>
		/// ActionTime : The time action happens
		/// </summary>
		public System.DateTime		  ActionTime = DateTime.MinValue;
		
		/// <summary>
		/// MainCustAccountID : Main customer account ID
		/// </summary>
		public System.String		  MainCustAccountId = string.Empty;
		
		/// <summary>
		/// SubCustAccountID : Sub customer account ID
		/// </summary>
		public System.String		  SubCustAccountId = null;
		
		/// <summary>
		/// ActionType : Action type (login, logout, ...)
		/// </summary>
		public System.Int32		  ActionType = (int)0;
		
		/// <summary>
		/// Reason : Further information
		/// </summary>
		public System.Int32?		  Reason = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private MainCustAccount _mainCustAccountIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="MainCustAccount"/>.
		/// </summary>
		/// <value>The source MainCustAccount for MainCustAccountId.</value>
		[XmlIgnore()]
        [ScriptIgnore()]
		[Browsable(false)]
		public virtual MainCustAccount MainCustAccountIdSource
      	{
            get { return this._mainCustAccountIdSource; }
            set { this._mainCustAccountIdSource = value; }
      	}
		private SubCustAccount _subCustAccountIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SubCustAccount"/>.
		/// </summary>
		/// <value>The source SubCustAccount for SubCustAccountId.</value>
		[XmlIgnore()]
        [ScriptIgnore()]
		[Browsable(false)]
		public virtual SubCustAccount SubCustAccountIdSource
      	{
            get { return this._subCustAccountIdSource; }
            set { this._subCustAccountIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			CustomerActionHistoryEntityData _tmp = new CustomerActionHistoryEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.BrokerId = this.BrokerId;
			_tmp.ActionTime = this.ActionTime;
			_tmp.MainCustAccountId = this.MainCustAccountId;
			_tmp.SubCustAccountId = this.SubCustAccountId;
			_tmp.ActionType = this.ActionType;
			_tmp.Reason = this.Reason;
			
			#region Source Parent Composite Entities
			if (this.MainCustAccountIdSource != null)
				_tmp.MainCustAccountIdSource = MakeCopyOf(this.MainCustAccountIdSource) as MainCustAccount;
			if (this.SubCustAccountIdSource != null)
				_tmp.SubCustAccountIdSource = MakeCopyOf(this.SubCustAccountIdSource) as SubCustAccount;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			CustomerActionHistoryEntityData _tmp = new CustomerActionHistoryEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.BrokerId = this.BrokerId;
			_tmp.ActionTime = this.ActionTime;
			_tmp.MainCustAccountId = this.MainCustAccountId;
			_tmp.SubCustAccountId = this.SubCustAccountId;
			_tmp.ActionType = this.ActionType;
			_tmp.Reason = this.Reason;
			
			#region Source Parent Composite Entities
			if (this.MainCustAccountIdSource != null && existingCopies.Contains(this.MainCustAccountIdSource))
				_tmp.MainCustAccountIdSource = existingCopies[this.MainCustAccountIdSource] as MainCustAccount;
			else
				_tmp.MainCustAccountIdSource = MakeCopyOf(this.MainCustAccountIdSource, existingCopies) as MainCustAccount;
			if (this.SubCustAccountIdSource != null && existingCopies.Contains(this.SubCustAccountIdSource))
				_tmp.SubCustAccountIdSource = existingCopies[this.SubCustAccountIdSource] as SubCustAccount;
			else
				_tmp.SubCustAccountIdSource = MakeCopyOf(this.SubCustAccountIdSource, existingCopies) as SubCustAccount;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomerActionHistoryColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(CustomerActionHistoryColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomerActionHistoryColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(CustomerActionHistoryColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomerActionHistoryColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(CustomerActionHistoryColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				CustomerActionHistoryEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new CustomerActionHistoryEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomerActionHistoryColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(CustomerActionHistoryColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				CustomerActionHistoryEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new CustomerActionHistoryEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region CustomerActionHistoryEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="CustomerActionHistory"/> object.
	/// </remarks>
	public class CustomerActionHistoryEventArgs : System.EventArgs
	{
		private CustomerActionHistoryColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the CustomerActionHistoryEventArgs class.
		///</summary>
		public CustomerActionHistoryEventArgs(CustomerActionHistoryColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the CustomerActionHistoryEventArgs class.
		///</summary>
		public CustomerActionHistoryEventArgs(CustomerActionHistoryColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The CustomerActionHistoryColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="CustomerActionHistoryColumn" />
		public CustomerActionHistoryColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all CustomerActionHistory related events.
	///</summary>
	public delegate void CustomerActionHistoryEventHandler(object sender, CustomerActionHistoryEventArgs e);
	
	#region CustomerActionHistoryComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class CustomerActionHistoryComparer : System.Collections.Generic.IComparer<CustomerActionHistory>
	{
		CustomerActionHistoryColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:CustomerActionHistoryComparer"/> class.
        /// </summary>
		public CustomerActionHistoryComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:CustomerActionHistoryComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public CustomerActionHistoryComparer(CustomerActionHistoryColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="CustomerActionHistory"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="CustomerActionHistory"/> to compare.</param>
        /// <param name="b">The second <c>CustomerActionHistory</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(CustomerActionHistory a, CustomerActionHistory b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(CustomerActionHistory entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(CustomerActionHistory a, CustomerActionHistory b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public CustomerActionHistoryColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region CustomerActionHistoryKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="CustomerActionHistory"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class CustomerActionHistoryKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the CustomerActionHistoryKey class.
		/// </summary>
		public CustomerActionHistoryKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the CustomerActionHistoryKey class.
		/// </summary>
		public CustomerActionHistoryKey(CustomerActionHistoryBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the CustomerActionHistoryKey class.
		/// </summary>
		public CustomerActionHistoryKey(System.Int64 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private CustomerActionHistoryBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public CustomerActionHistoryBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int64 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int64 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int64) EntityUtil.ChangeType(values["Id"], typeof(System.Int64)) : (long)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region CustomerActionHistoryColumn Enum
	
	/// <summary>
	/// Enumerate the CustomerActionHistory columns.
	/// </summary>
	[Serializable]
	public enum CustomerActionHistoryColumn : int
	{
		/// <summary>
		/// Id : Auto increase ID
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Int64), System.Data.DbType.Int64, true, true, false)]
		Id = 1,
		/// <summary>
		/// BrokerId : BrokerID
		/// </summary>
		[EnumTextValue("BrokerID")]
		[ColumnEnum("BrokerID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		BrokerId = 2,
		/// <summary>
		/// ActionTime : The time action happens
		/// </summary>
		[EnumTextValue("ActionTime")]
		[ColumnEnum("ActionTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		ActionTime = 3,
		/// <summary>
		/// MainCustAccountId : Main customer account ID
		/// </summary>
		[EnumTextValue("MainCustAccountID")]
		[ColumnEnum("MainCustAccountID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		MainCustAccountId = 4,
		/// <summary>
		/// SubCustAccountId : Sub customer account ID
		/// </summary>
		[EnumTextValue("SubCustAccountID")]
		[ColumnEnum("SubCustAccountID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		SubCustAccountId = 5,
		/// <summary>
		/// ActionType : Action type (login, logout, ...)
		/// </summary>
		[EnumTextValue("ActionType")]
		[ColumnEnum("ActionType", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ActionType = 6,
		/// <summary>
		/// Reason : Further information
		/// </summary>
		[EnumTextValue("Reason")]
		[ColumnEnum("Reason", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Reason = 7
	}//End enum

	#endregion CustomerActionHistoryColumn Enum

} // end namespace
