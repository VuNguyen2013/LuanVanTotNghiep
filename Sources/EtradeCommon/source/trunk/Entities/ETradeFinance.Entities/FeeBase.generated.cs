
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Friday, November 12, 2010
	Important: Do not modify this file. Edit the file Fee.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Web.Script.Serialization;

using ETradeFinance.Entities.Validation;
#endregion

namespace ETradeFinance.Entities
{
	///<summary>
	/// An object representation of the 'Fee' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class FeeBase : EntityBase, IFee, IEntityId<FeeKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private FeeEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private FeeEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private FeeEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Fee> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event FeeEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="FeeBase"/> instance.
		///</summary>
		public FeeBase()
		{
			this.entityData = new FeeEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="FeeBase"/> instance.
		///</summary>
		///<param name="_minValue"></param>
		///<param name="_maxValue"></param>
		///<param name="_minFee"></param>
		///<param name="_feeRatio"></param>
		///<param name="_feeType"></param>
		///<param name="_vat"></param>
		public FeeBase(System.Decimal _minValue, System.Decimal? _maxValue, System.Decimal? _minFee, 
			System.Decimal _feeRatio, System.Int32? _feeType, System.Decimal? _vat)
		{
			this.entityData = new FeeEntityData();
			this.backupData = null;

			this.MinValue = _minValue;
			this.MaxValue = _maxValue;
			this.MinFee = _minFee;
			this.FeeRatio = _feeRatio;
			this.FeeType = _feeType;
			this.Vat = _vat;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Fee"/> instance.
		///</summary>
		///<param name="_minValue"></param>
		///<param name="_maxValue"></param>
		///<param name="_minFee"></param>
		///<param name="_feeRatio"></param>
		///<param name="_feeType"></param>
		///<param name="_vat"></param>
		public static Fee CreateFee(System.Decimal _minValue, System.Decimal? _maxValue, System.Decimal? _minFee, 
			System.Decimal _feeRatio, System.Int32? _feeType, System.Decimal? _vat)
		{
			Fee newFee = new Fee();
			newFee.MinValue = _minValue;
			newFee.MaxValue = _maxValue;
			newFee.MinFee = _minFee;
			newFee.FeeRatio = _feeRatio;
			newFee.FeeType = _feeType;
			newFee.Vat = _vat;
			return newFee;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the FeeId property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int64 FeeId
		{
			get
			{
				return this.entityData.FeeId; 
			}
			
			set
			{
				if (this.entityData.FeeId == value)
					return;
					
				OnColumnChanging(FeeColumn.FeeId, this.entityData.FeeId);
				this.entityData.FeeId = value;
				this.EntityId.FeeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeColumn.FeeId, this.entityData.FeeId);
				OnPropertyChanged("FeeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MinValue property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal MinValue
		{
			get
			{
				return this.entityData.MinValue; 
			}
			
			set
			{
				if (this.entityData.MinValue == value)
					return;
					
				OnColumnChanging(FeeColumn.MinValue, this.entityData.MinValue);
				this.entityData.MinValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeColumn.MinValue, this.entityData.MinValue);
				OnPropertyChanged("MinValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaxValue property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMaxValueNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MaxValue
		{
			get
			{
				return this.entityData.MaxValue; 
			}
			
			set
			{
				if (this.entityData.MaxValue == value)
					return;
					
				OnColumnChanging(FeeColumn.MaxValue, this.entityData.MaxValue);
				this.entityData.MaxValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeColumn.MaxValue, this.entityData.MaxValue);
				OnPropertyChanged("MaxValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MinFee property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMinFeeNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MinFee
		{
			get
			{
				return this.entityData.MinFee; 
			}
			
			set
			{
				if (this.entityData.MinFee == value)
					return;
					
				OnColumnChanging(FeeColumn.MinFee, this.entityData.MinFee);
				this.entityData.MinFee = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeColumn.MinFee, this.entityData.MinFee);
				OnPropertyChanged("MinFee");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeRatio property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal FeeRatio
		{
			get
			{
				return this.entityData.FeeRatio; 
			}
			
			set
			{
				if (this.entityData.FeeRatio == value)
					return;
					
				OnColumnChanging(FeeColumn.FeeRatio, this.entityData.FeeRatio);
				this.entityData.FeeRatio = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeColumn.FeeRatio, this.entityData.FeeRatio);
				OnPropertyChanged("FeeRatio");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FeeType property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsFeeTypeNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? FeeType
		{
			get
			{
				return this.entityData.FeeType; 
			}
			
			set
			{
				if (this.entityData.FeeType == value)
					return;
					
				OnColumnChanging(FeeColumn.FeeType, this.entityData.FeeType);
				this.entityData.FeeType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeColumn.FeeType, this.entityData.FeeType);
				OnPropertyChanged("FeeType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Vat property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsVatNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Vat
		{
			get
			{
				return this.entityData.Vat; 
			}
			
			set
			{
				if (this.entityData.Vat == value)
					return;
					
				OnColumnChanging(FeeColumn.Vat, this.entityData.Vat);
				this.entityData.Vat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(FeeColumn.Vat, this.entityData.Vat);
				OnPropertyChanged("Vat");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public override string TableName
		{
			get { return "Fee"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"FeeID", "MinValue", "MaxValue", "MinFee", "FeeRatio", "FeeType", "VAT"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as FeeEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Fee) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
        [ScriptIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Fee>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Fee);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Fee Entity 
		///</summary>
		protected virtual Fee Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Fee copy = new Fee();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.FeeId = this.FeeId;
				copy.MinValue = this.MinValue;
				copy.MaxValue = this.MaxValue;
				copy.MinFee = this.MinFee;
				copy.FeeRatio = this.FeeRatio;
				copy.FeeType = this.FeeType;
				copy.Vat = this.Vat;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Fee Entity 
		///</summary>
		public virtual Fee Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Fee Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Fee DeepCopy()
		{
			return EntityHelper.Clone<Fee>(this as Fee);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as FeeEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new FeeEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as FeeEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(FeeColumn column)
		{
			switch(column)
			{
					case FeeColumn.FeeId:
					return entityData.FeeId != _originalData.FeeId;
					case FeeColumn.MinValue:
					return entityData.MinValue != _originalData.MinValue;
					case FeeColumn.MaxValue:
					return entityData.MaxValue != _originalData.MaxValue;
					case FeeColumn.MinFee:
					return entityData.MinFee != _originalData.MinFee;
					case FeeColumn.FeeRatio:
					return entityData.FeeRatio != _originalData.FeeRatio;
					case FeeColumn.FeeType:
					return entityData.FeeType != _originalData.FeeType;
					case FeeColumn.Vat:
					return entityData.Vat != _originalData.Vat;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< FeeColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.FeeId != _originalData.FeeId;
			result = result || entityData.MinValue != _originalData.MinValue;
			result = result || entityData.MaxValue != _originalData.MaxValue;
			result = result || entityData.MinFee != _originalData.MinFee;
			result = result || entityData.FeeRatio != _originalData.FeeRatio;
			result = result || entityData.FeeType != _originalData.FeeType;
			result = result || entityData.Vat != _originalData.Vat;
			return result;
		}	
		
		///<summary>
		///  Returns a Fee Entity with the original data.
		///</summary>
		public Fee GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateFee(
				_originalData.MinValue,
				_originalData.MaxValue,
				_originalData.MinFee,
				_originalData.FeeRatio,
				_originalData.FeeType,
				_originalData.Vat
				);
				
			return (Fee)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="FeeBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is FeeBase)
				return ValueEquals(this, (FeeBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="FeeBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.FeeId.GetHashCode() ^ 
					this.MinValue.GetHashCode() ^ 
					((this.MaxValue == null) ? string.Empty : this.MaxValue.ToString()).GetHashCode() ^ 
					((this.MinFee == null) ? string.Empty : this.MinFee.ToString()).GetHashCode() ^ 
					this.FeeRatio.GetHashCode() ^ 
					((this.FeeType == null) ? string.Empty : this.FeeType.ToString()).GetHashCode() ^ 
					((this.Vat == null) ? string.Empty : this.Vat.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="FeeBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(FeeBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="FeeBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="FeeBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="FeeBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(FeeBase Object1, FeeBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.FeeId != Object2.FeeId)
				equal = false;
			if (Object1.MinValue != Object2.MinValue)
				equal = false;
			if ( Object1.MaxValue != null && Object2.MaxValue != null )
			{
				if (Object1.MaxValue != Object2.MaxValue)
					equal = false;
			}
			else if (Object1.MaxValue == null ^ Object2.MaxValue == null )
			{
				equal = false;
			}
			if ( Object1.MinFee != null && Object2.MinFee != null )
			{
				if (Object1.MinFee != Object2.MinFee)
					equal = false;
			}
			else if (Object1.MinFee == null ^ Object2.MinFee == null )
			{
				equal = false;
			}
			if (Object1.FeeRatio != Object2.FeeRatio)
				equal = false;
			if ( Object1.FeeType != null && Object2.FeeType != null )
			{
				if (Object1.FeeType != Object2.FeeType)
					equal = false;
			}
			else if (Object1.FeeType == null ^ Object2.FeeType == null )
			{
				equal = false;
			}
			if ( Object1.Vat != null && Object2.Vat != null )
			{
				if (Object1.Vat != Object2.Vat)
					equal = false;
			}
			else if (Object1.Vat == null ^ Object2.Vat == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((FeeBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static FeeComparer GetComparer()
        {
            return new FeeComparer();
        }
        */

        // Comparer delegates back to Fee
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Fee rhs, FeeColumn which)
        {
            switch (which)
            {
            	
            	
            	case FeeColumn.FeeId:
            		return this.FeeId.CompareTo(rhs.FeeId);
            		
            		                 
            	
            	
            	case FeeColumn.MinValue:
            		return this.MinValue.CompareTo(rhs.MinValue);
            		
            		                 
            	
            	
            	case FeeColumn.MaxValue:
            		return this.MaxValue.Value.CompareTo(rhs.MaxValue.Value);
            		
            		                 
            	
            	
            	case FeeColumn.MinFee:
            		return this.MinFee.Value.CompareTo(rhs.MinFee.Value);
            		
            		                 
            	
            	
            	case FeeColumn.FeeRatio:
            		return this.FeeRatio.CompareTo(rhs.FeeRatio);
            		
            		                 
            	
            	
            	case FeeColumn.FeeType:
            		return this.FeeType.Value.CompareTo(rhs.FeeType.Value);
            		
            		                 
            	
            	
            	case FeeColumn.Vat:
            		return this.Vat.Value.CompareTo(rhs.Vat.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
        [ScriptIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<FeeKey> Members
		
		// member variable for the EntityId property
		private FeeKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
        [ScriptIgnore]
		public virtual FeeKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new FeeKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute(), ScriptIgnore()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
        [ScriptIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Fee")
					.Append("|").Append( this.FeeId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{8}{7}- FeeId: {0}{7}- MinValue: {1}{7}- MaxValue: {2}{7}- MinFee: {3}{7}- FeeRatio: {4}{7}- FeeType: {5}{7}- Vat: {6}{7}{9}", 
				this.FeeId,
				this.MinValue,
				(this.MaxValue == null) ? string.Empty : this.MaxValue.ToString(),
				(this.MinFee == null) ? string.Empty : this.MinFee.ToString(),
				this.FeeRatio,
				(this.FeeType == null) ? string.Empty : this.FeeType.ToString(),
				(this.Vat == null) ? string.Empty : this.Vat.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Fee' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class FeeEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// FeeID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "Fee"</remarks>
		public System.Int64 FeeId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// MinValue : 
		/// </summary>
		public System.Decimal		  MinValue = 0.0m;
		
		/// <summary>
		/// MaxValue : 
		/// </summary>
		public System.Decimal?		  MaxValue = null;
		
		/// <summary>
		/// MinFee : 
		/// </summary>
		public System.Decimal?		  MinFee = null;
		
		/// <summary>
		/// FeeRatio : 
		/// </summary>
		public System.Decimal		  FeeRatio = 0.0m;
		
		/// <summary>
		/// FeeType : 
		/// </summary>
		public System.Int32?		  FeeType = null;
		
		/// <summary>
		/// VAT : 
		/// </summary>
		public System.Decimal?		  Vat = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			FeeEntityData _tmp = new FeeEntityData();
						
			_tmp.FeeId = this.FeeId;
			
			_tmp.MinValue = this.MinValue;
			_tmp.MaxValue = this.MaxValue;
			_tmp.MinFee = this.MinFee;
			_tmp.FeeRatio = this.FeeRatio;
			_tmp.FeeType = this.FeeType;
			_tmp.Vat = this.Vat;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			FeeEntityData _tmp = new FeeEntityData();
						
			_tmp.FeeId = this.FeeId;
			
			_tmp.MinValue = this.MinValue;
			_tmp.MaxValue = this.MaxValue;
			_tmp.MinFee = this.MinFee;
			_tmp.FeeRatio = this.FeeRatio;
			_tmp.FeeType = this.FeeType;
			_tmp.Vat = this.Vat;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(FeeColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(FeeColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(FeeColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				FeeEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new FeeEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="FeeColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(FeeColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				FeeEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new FeeEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region FeeEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Fee"/> object.
	/// </remarks>
	public class FeeEventArgs : System.EventArgs
	{
		private FeeColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the FeeEventArgs class.
		///</summary>
		public FeeEventArgs(FeeColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the FeeEventArgs class.
		///</summary>
		public FeeEventArgs(FeeColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The FeeColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="FeeColumn" />
		public FeeColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Fee related events.
	///</summary>
	public delegate void FeeEventHandler(object sender, FeeEventArgs e);
	
	#region FeeComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class FeeComparer : System.Collections.Generic.IComparer<Fee>
	{
		FeeColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:FeeComparer"/> class.
        /// </summary>
		public FeeComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:FeeComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public FeeComparer(FeeColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Fee"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Fee"/> to compare.</param>
        /// <param name="b">The second <c>Fee</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Fee a, Fee b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Fee entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Fee a, Fee b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public FeeColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region FeeKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Fee"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class FeeKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the FeeKey class.
		/// </summary>
		public FeeKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeKey class.
		/// </summary>
		public FeeKey(FeeBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.FeeId = entity.FeeId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the FeeKey class.
		/// </summary>
		public FeeKey(System.Int64 _feeId)
		{
			#region Init Properties

			this.FeeId = _feeId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private FeeBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public FeeBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the FeeId property
		private System.Int64 _feeId;
		
		/// <summary>
		/// Gets or sets the FeeId property.
		/// </summary>
		public System.Int64 FeeId
		{
			get { return _feeId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.FeeId = value;
				
				_feeId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				FeeId = ( values["FeeId"] != null ) ? (System.Int64) EntityUtil.ChangeType(values["FeeId"], typeof(System.Int64)) : (long)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("FeeId", FeeId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("FeeId: {0}{1}",
								FeeId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region FeeColumn Enum
	
	/// <summary>
	/// Enumerate the Fee columns.
	/// </summary>
	[Serializable]
	public enum FeeColumn : int
	{
		/// <summary>
		/// FeeId : 
		/// </summary>
		[EnumTextValue("FeeID")]
		[ColumnEnum("FeeID", typeof(System.Int64), System.Data.DbType.Int64, true, true, false)]
		FeeId = 1,
		/// <summary>
		/// MinValue : 
		/// </summary>
		[EnumTextValue("MinValue")]
		[ColumnEnum("MinValue", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		MinValue = 2,
		/// <summary>
		/// MaxValue : 
		/// </summary>
		[EnumTextValue("MaxValue")]
		[ColumnEnum("MaxValue", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MaxValue = 3,
		/// <summary>
		/// MinFee : 
		/// </summary>
		[EnumTextValue("MinFee")]
		[ColumnEnum("MinFee", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MinFee = 4,
		/// <summary>
		/// FeeRatio : 
		/// </summary>
		[EnumTextValue("FeeRatio")]
		[ColumnEnum("FeeRatio", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		FeeRatio = 5,
		/// <summary>
		/// FeeType : 
		/// </summary>
		[EnumTextValue("FeeType")]
		[ColumnEnum("FeeType", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		FeeType = 6,
		/// <summary>
		/// Vat : 
		/// </summary>
		[EnumTextValue("VAT")]
		[ColumnEnum("VAT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Vat = 7
	}//End enum

	#endregion FeeColumn Enum

} // end namespace
