
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Monday, January 17, 2011
	Important: Do not modify this file. Edit the file XrOrders.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Web.Script.Serialization;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using ETradeFinance.Entities.Validation;
#endregion

namespace ETradeFinance.Entities
{
	///<summary>
	/// An object representation of the 'XROrders' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class XrOrdersBase : EntityBase, IXrOrders, IEntityId<XrOrdersKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private XrOrdersEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private XrOrdersEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private XrOrdersEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<XrOrders> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event XrOrdersEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event XrOrdersEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="XrOrdersBase"/> instance.
		///</summary>
		public XrOrdersBase()
		{
			this.entityData = new XrOrdersEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="XrOrdersBase"/> instance.
		///</summary>
		///<param name="_subAccountId">Tai khoan con dang ky quyen mua</param>
		///<param name="_buyRightId">Id of buy right table</param>
		///<param name="_secSymbol">Ma CK duoc dang ky mua</param>
		///<param name="_market">Thi truong cua ma CK nay(HOSE, HNX, Upcom)</param>
		///<param name="_volume">Khoi luong CP duoc phep mua</param>
		///<param name="_price">Gia mac dinh cho quyen mua CP nay</param>
		///<param name="_registeredVol">KL co phieu khach da dang ky mua</param>
		///<param name="_availableVol">KL CP con lai khach duoc phep mua</param>
		///<param name="_requestVol">KL CP khach hang dang ky mua</param>
		///<param name="_requestTime">Thoi gian (ngay gio) dang ky</param>
		///<param name="_approvedVol">KL CP mua da chap thuan</param>
		///<param name="_status">Trang thai cua request(dang cho, dang xu ly, da xu ly, da huy boi nha dau tu, tu choi boi broker)</param>
		///<param name="_brokerId">Broker ID cua Broker xu ly request</param>
		///<param name="_execTime">Thoi gian xu ly</param>
		///<param name="_note">Ghi chu cua Broker</param>
		public XrOrdersBase(System.String _subAccountId, System.Int64 _buyRightId, System.String _secSymbol, 
			System.String _market, System.Int64? _volume, System.Decimal? _price, System.Int64? _registeredVol, 
			System.Int64? _availableVol, System.Int64? _requestVol, System.DateTime? _requestTime, System.Int64? _approvedVol, 
			System.Int32 _status, System.String _brokerId, System.DateTime? _execTime, System.String _note)
		{
			this.entityData = new XrOrdersEntityData();
			this.backupData = null;

			this.SubAccountId = _subAccountId;
			this.BuyRightId = _buyRightId;
			this.SecSymbol = _secSymbol;
			this.Market = _market;
			this.Volume = _volume;
			this.Price = _price;
			this.RegisteredVol = _registeredVol;
			this.AvailableVol = _availableVol;
			this.RequestVol = _requestVol;
			this.RequestTime = _requestTime;
			this.ApprovedVol = _approvedVol;
			this.Status = _status;
			this.BrokerId = _brokerId;
			this.ExecTime = _execTime;
			this.Note = _note;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="XrOrders"/> instance.
		///</summary>
		///<param name="_subAccountId">Tai khoan con dang ky quyen mua</param>
		///<param name="_buyRightId">Id of buy right table</param>
		///<param name="_secSymbol">Ma CK duoc dang ky mua</param>
		///<param name="_market">Thi truong cua ma CK nay(HOSE, HNX, Upcom)</param>
		///<param name="_volume">Khoi luong CP duoc phep mua</param>
		///<param name="_price">Gia mac dinh cho quyen mua CP nay</param>
		///<param name="_registeredVol">KL co phieu khach da dang ky mua</param>
		///<param name="_availableVol">KL CP con lai khach duoc phep mua</param>
		///<param name="_requestVol">KL CP khach hang dang ky mua</param>
		///<param name="_requestTime">Thoi gian (ngay gio) dang ky</param>
		///<param name="_approvedVol">KL CP mua da chap thuan</param>
		///<param name="_status">Trang thai cua request(dang cho, dang xu ly, da xu ly, da huy boi nha dau tu, tu choi boi broker)</param>
		///<param name="_brokerId">Broker ID cua Broker xu ly request</param>
		///<param name="_execTime">Thoi gian xu ly</param>
		///<param name="_note">Ghi chu cua Broker</param>
		public static XrOrders CreateXrOrders(System.String _subAccountId, System.Int64 _buyRightId, System.String _secSymbol, 
			System.String _market, System.Int64? _volume, System.Decimal? _price, System.Int64? _registeredVol, 
			System.Int64? _availableVol, System.Int64? _requestVol, System.DateTime? _requestTime, System.Int64? _approvedVol, 
			System.Int32 _status, System.String _brokerId, System.DateTime? _execTime, System.String _note)
		{
			XrOrders newXrOrders = new XrOrders();
			newXrOrders.SubAccountId = _subAccountId;
			newXrOrders.BuyRightId = _buyRightId;
			newXrOrders.SecSymbol = _secSymbol;
			newXrOrders.Market = _market;
			newXrOrders.Volume = _volume;
			newXrOrders.Price = _price;
			newXrOrders.RegisteredVol = _registeredVol;
			newXrOrders.AvailableVol = _availableVol;
			newXrOrders.RequestVol = _requestVol;
			newXrOrders.RequestTime = _requestTime;
			newXrOrders.ApprovedVol = _approvedVol;
			newXrOrders.Status = _status;
			newXrOrders.BrokerId = _brokerId;
			newXrOrders.ExecTime = _execTime;
			newXrOrders.Note = _note;
			return newXrOrders;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int64 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(XrOrdersColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(XrOrdersColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SubAccountId property. 
		///		Tai khoan con dang ky quyen mua
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Tai khoan con dang ky quyen mua"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual System.String SubAccountId
		{
			get
			{
				return this.entityData.SubAccountId; 
			}
			
			set
			{
				if (this.entityData.SubAccountId == value)
					return;
					
				OnColumnChanging(XrOrdersColumn.SubAccountId, this.entityData.SubAccountId);
				this.entityData.SubAccountId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(XrOrdersColumn.SubAccountId, this.entityData.SubAccountId);
				OnPropertyChanged("SubAccountId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BuyRightId property. 
		///		Id of buy right table
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Id of buy right table"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int64 BuyRightId
		{
			get
			{
				return this.entityData.BuyRightId; 
			}
			
			set
			{
				if (this.entityData.BuyRightId == value)
					return;
					
				OnColumnChanging(XrOrdersColumn.BuyRightId, this.entityData.BuyRightId);
				this.entityData.BuyRightId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(XrOrdersColumn.BuyRightId, this.entityData.BuyRightId);
				OnPropertyChanged("BuyRightId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SecSymbol property. 
		///		Ma CK duoc dang ky mua
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Ma CK duoc dang ky mua"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 8)]
		public virtual System.String SecSymbol
		{
			get
			{
				return this.entityData.SecSymbol; 
			}
			
			set
			{
				if (this.entityData.SecSymbol == value)
					return;
					
				OnColumnChanging(XrOrdersColumn.SecSymbol, this.entityData.SecSymbol);
				this.entityData.SecSymbol = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(XrOrdersColumn.SecSymbol, this.entityData.SecSymbol);
				OnPropertyChanged("SecSymbol");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Market property. 
		///		Thi truong cua ma CK nay(HOSE, HNX, Upcom)
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Thi truong cua ma CK nay(HOSE, HNX, Upcom)"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String Market
		{
			get
			{
				return this.entityData.Market; 
			}
			
			set
			{
				if (this.entityData.Market == value)
					return;
					
				OnColumnChanging(XrOrdersColumn.Market, this.entityData.Market);
				this.entityData.Market = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(XrOrdersColumn.Market, this.entityData.Market);
				OnPropertyChanged("Market");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Volume property. 
		///		Khoi luong CP duoc phep mua
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsVolumeNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Khoi luong CP duoc phep mua"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? Volume
		{
			get
			{
				return this.entityData.Volume; 
			}
			
			set
			{
				if (this.entityData.Volume == value)
					return;
					
				OnColumnChanging(XrOrdersColumn.Volume, this.entityData.Volume);
				this.entityData.Volume = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(XrOrdersColumn.Volume, this.entityData.Volume);
				OnPropertyChanged("Volume");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Price property. 
		///		Gia mac dinh cho quyen mua CP nay
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsPriceNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Gia mac dinh cho quyen mua CP nay"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Price
		{
			get
			{
				return this.entityData.Price; 
			}
			
			set
			{
				if (this.entityData.Price == value)
					return;
					
				OnColumnChanging(XrOrdersColumn.Price, this.entityData.Price);
				this.entityData.Price = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(XrOrdersColumn.Price, this.entityData.Price);
				OnPropertyChanged("Price");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RegisteredVol property. 
		///		KL co phieu khach da dang ky mua
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsRegisteredVolNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"KL co phieu khach da dang ky mua"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? RegisteredVol
		{
			get
			{
				return this.entityData.RegisteredVol; 
			}
			
			set
			{
				if (this.entityData.RegisteredVol == value)
					return;
					
				OnColumnChanging(XrOrdersColumn.RegisteredVol, this.entityData.RegisteredVol);
				this.entityData.RegisteredVol = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(XrOrdersColumn.RegisteredVol, this.entityData.RegisteredVol);
				OnPropertyChanged("RegisteredVol");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AvailableVol property. 
		///		KL CP con lai khach duoc phep mua
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsAvailableVolNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"KL CP con lai khach duoc phep mua"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? AvailableVol
		{
			get
			{
				return this.entityData.AvailableVol; 
			}
			
			set
			{
				if (this.entityData.AvailableVol == value)
					return;
					
				OnColumnChanging(XrOrdersColumn.AvailableVol, this.entityData.AvailableVol);
				this.entityData.AvailableVol = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(XrOrdersColumn.AvailableVol, this.entityData.AvailableVol);
				OnPropertyChanged("AvailableVol");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RequestVol property. 
		///		KL CP khach hang dang ky mua
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsRequestVolNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"KL CP khach hang dang ky mua"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? RequestVol
		{
			get
			{
				return this.entityData.RequestVol; 
			}
			
			set
			{
				if (this.entityData.RequestVol == value)
					return;
					
				OnColumnChanging(XrOrdersColumn.RequestVol, this.entityData.RequestVol);
				this.entityData.RequestVol = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(XrOrdersColumn.RequestVol, this.entityData.RequestVol);
				OnPropertyChanged("RequestVol");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RequestTime property. 
		///		Thoi gian (ngay gio) dang ky
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsRequestTimeNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Thoi gian (ngay gio) dang ky"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? RequestTime
		{
			get
			{
				return this.entityData.RequestTime; 
			}
			
			set
			{
				if (this.entityData.RequestTime == value)
					return;
					
				OnColumnChanging(XrOrdersColumn.RequestTime, this.entityData.RequestTime);
				this.entityData.RequestTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(XrOrdersColumn.RequestTime, this.entityData.RequestTime);
				OnPropertyChanged("RequestTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ApprovedVol property. 
		///		KL CP mua da chap thuan
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (long)0. It is up to the developer
		/// to check the value of IsApprovedVolNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"KL CP mua da chap thuan"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int64? ApprovedVol
		{
			get
			{
				return this.entityData.ApprovedVol; 
			}
			
			set
			{
				if (this.entityData.ApprovedVol == value)
					return;
					
				OnColumnChanging(XrOrdersColumn.ApprovedVol, this.entityData.ApprovedVol);
				this.entityData.ApprovedVol = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(XrOrdersColumn.ApprovedVol, this.entityData.ApprovedVol);
				OnPropertyChanged("ApprovedVol");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		Trang thai cua request(dang cho, dang xu ly, da xu ly, da huy boi nha dau tu, tu choi boi broker)
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Trang thai cua request(dang cho, dang xu ly, da xu ly, da huy boi nha dau tu, tu choi boi broker)"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
					
				OnColumnChanging(XrOrdersColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(XrOrdersColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BrokerId property. 
		///		Broker ID cua Broker xu ly request
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Broker ID cua Broker xu ly request"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String BrokerId
		{
			get
			{
				return this.entityData.BrokerId; 
			}
			
			set
			{
				if (this.entityData.BrokerId == value)
					return;
					
				OnColumnChanging(XrOrdersColumn.BrokerId, this.entityData.BrokerId);
				this.entityData.BrokerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(XrOrdersColumn.BrokerId, this.entityData.BrokerId);
				OnPropertyChanged("BrokerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExecTime property. 
		///		Thoi gian xu ly
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsExecTimeNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Thoi gian xu ly"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ExecTime
		{
			get
			{
				return this.entityData.ExecTime; 
			}
			
			set
			{
				if (this.entityData.ExecTime == value)
					return;
					
				OnColumnChanging(XrOrdersColumn.ExecTime, this.entityData.ExecTime);
				this.entityData.ExecTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(XrOrdersColumn.ExecTime, this.entityData.ExecTime);
				OnPropertyChanged("ExecTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Note property. 
		///		Ghi chu cua Broker
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Ghi chu cua Broker"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Note
		{
			get
			{
				return this.entityData.Note; 
			}
			
			set
			{
				if (this.entityData.Note == value)
					return;
					
				OnColumnChanging(XrOrdersColumn.Note, this.entityData.Note);
				this.entityData.Note = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(XrOrdersColumn.Note, this.entityData.Note);
				OnPropertyChanged("Note");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("SubAccountId", "Sub Account Id"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SubAccountId", "Sub Account Id", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SecSymbol", "Sec Symbol", 8));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Market", "Market", 1));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("BrokerId", "Broker Id", 20));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public override string TableName
		{
			get { return "XROrders"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "SubAccountID", "BuyRightID", "SecSymbol", "Market", "Volume", "Price", "RegisteredVol", "AvailableVol", "RequestVol", "RequestTime", "ApprovedVol", "Status", "BrokerID", "ExecTime", "Note"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as XrOrdersEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (XrOrders) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
        [ScriptIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<XrOrders>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as XrOrders);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed XrOrders Entity 
		///</summary>
		protected virtual XrOrders Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			XrOrders copy = new XrOrders();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.SubAccountId = this.SubAccountId;
				copy.BuyRightId = this.BuyRightId;
				copy.SecSymbol = this.SecSymbol;
				copy.Market = this.Market;
				copy.Volume = this.Volume;
				copy.Price = this.Price;
				copy.RegisteredVol = this.RegisteredVol;
				copy.AvailableVol = this.AvailableVol;
				copy.RequestVol = this.RequestVol;
				copy.RequestTime = this.RequestTime;
				copy.ApprovedVol = this.ApprovedVol;
				copy.Status = this.Status;
				copy.BrokerId = this.BrokerId;
				copy.ExecTime = this.ExecTime;
				copy.Note = this.Note;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed XrOrders Entity 
		///</summary>
		public virtual XrOrders Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed XrOrders Entity which is a deep copy of the current entity.
		///</summary>
		public virtual XrOrders DeepCopy()
		{
			return EntityHelper.Clone<XrOrders>(this as XrOrders);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as XrOrdersEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new XrOrdersEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as XrOrdersEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(XrOrdersColumn column)
		{
			switch(column)
			{
					case XrOrdersColumn.Id:
					return entityData.Id != _originalData.Id;
					case XrOrdersColumn.SubAccountId:
					return entityData.SubAccountId != _originalData.SubAccountId;
					case XrOrdersColumn.BuyRightId:
					return entityData.BuyRightId != _originalData.BuyRightId;
					case XrOrdersColumn.SecSymbol:
					return entityData.SecSymbol != _originalData.SecSymbol;
					case XrOrdersColumn.Market:
					return entityData.Market != _originalData.Market;
					case XrOrdersColumn.Volume:
					return entityData.Volume != _originalData.Volume;
					case XrOrdersColumn.Price:
					return entityData.Price != _originalData.Price;
					case XrOrdersColumn.RegisteredVol:
					return entityData.RegisteredVol != _originalData.RegisteredVol;
					case XrOrdersColumn.AvailableVol:
					return entityData.AvailableVol != _originalData.AvailableVol;
					case XrOrdersColumn.RequestVol:
					return entityData.RequestVol != _originalData.RequestVol;
					case XrOrdersColumn.RequestTime:
					return entityData.RequestTime != _originalData.RequestTime;
					case XrOrdersColumn.ApprovedVol:
					return entityData.ApprovedVol != _originalData.ApprovedVol;
					case XrOrdersColumn.Status:
					return entityData.Status != _originalData.Status;
					case XrOrdersColumn.BrokerId:
					return entityData.BrokerId != _originalData.BrokerId;
					case XrOrdersColumn.ExecTime:
					return entityData.ExecTime != _originalData.ExecTime;
					case XrOrdersColumn.Note:
					return entityData.Note != _originalData.Note;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< XrOrdersColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.SubAccountId != _originalData.SubAccountId;
			result = result || entityData.BuyRightId != _originalData.BuyRightId;
			result = result || entityData.SecSymbol != _originalData.SecSymbol;
			result = result || entityData.Market != _originalData.Market;
			result = result || entityData.Volume != _originalData.Volume;
			result = result || entityData.Price != _originalData.Price;
			result = result || entityData.RegisteredVol != _originalData.RegisteredVol;
			result = result || entityData.AvailableVol != _originalData.AvailableVol;
			result = result || entityData.RequestVol != _originalData.RequestVol;
			result = result || entityData.RequestTime != _originalData.RequestTime;
			result = result || entityData.ApprovedVol != _originalData.ApprovedVol;
			result = result || entityData.Status != _originalData.Status;
			result = result || entityData.BrokerId != _originalData.BrokerId;
			result = result || entityData.ExecTime != _originalData.ExecTime;
			result = result || entityData.Note != _originalData.Note;
			return result;
		}	
		
		///<summary>
		///  Returns a XrOrders Entity with the original data.
		///</summary>
		public XrOrders GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateXrOrders(
				_originalData.SubAccountId,
				_originalData.BuyRightId,
				_originalData.SecSymbol,
				_originalData.Market,
				_originalData.Volume,
				_originalData.Price,
				_originalData.RegisteredVol,
				_originalData.AvailableVol,
				_originalData.RequestVol,
				_originalData.RequestTime,
				_originalData.ApprovedVol,
				_originalData.Status,
				_originalData.BrokerId,
				_originalData.ExecTime,
				_originalData.Note
				);
				
			return (XrOrders)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="XrOrdersBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is XrOrdersBase)
				return ValueEquals(this, (XrOrdersBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="XrOrdersBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					this.SubAccountId.GetHashCode() ^ 
					this.BuyRightId.GetHashCode() ^ 
					((this.SecSymbol == null) ? string.Empty : this.SecSymbol.ToString()).GetHashCode() ^ 
					((this.Market == null) ? string.Empty : this.Market.ToString()).GetHashCode() ^ 
					((this.Volume == null) ? string.Empty : this.Volume.ToString()).GetHashCode() ^ 
					((this.Price == null) ? string.Empty : this.Price.ToString()).GetHashCode() ^ 
					((this.RegisteredVol == null) ? string.Empty : this.RegisteredVol.ToString()).GetHashCode() ^ 
					((this.AvailableVol == null) ? string.Empty : this.AvailableVol.ToString()).GetHashCode() ^ 
					((this.RequestVol == null) ? string.Empty : this.RequestVol.ToString()).GetHashCode() ^ 
					((this.RequestTime == null) ? string.Empty : this.RequestTime.ToString()).GetHashCode() ^ 
					((this.ApprovedVol == null) ? string.Empty : this.ApprovedVol.ToString()).GetHashCode() ^ 
					this.Status.GetHashCode() ^ 
					((this.BrokerId == null) ? string.Empty : this.BrokerId.ToString()).GetHashCode() ^ 
					((this.ExecTime == null) ? string.Empty : this.ExecTime.ToString()).GetHashCode() ^ 
					((this.Note == null) ? string.Empty : this.Note.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="XrOrdersBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(XrOrdersBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="XrOrdersBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="XrOrdersBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="XrOrdersBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(XrOrdersBase Object1, XrOrdersBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.SubAccountId != Object2.SubAccountId)
				equal = false;
			if (Object1.BuyRightId != Object2.BuyRightId)
				equal = false;
			if ( Object1.SecSymbol != null && Object2.SecSymbol != null )
			{
				if (Object1.SecSymbol != Object2.SecSymbol)
					equal = false;
			}
			else if (Object1.SecSymbol == null ^ Object2.SecSymbol == null )
			{
				equal = false;
			}
			if ( Object1.Market != null && Object2.Market != null )
			{
				if (Object1.Market != Object2.Market)
					equal = false;
			}
			else if (Object1.Market == null ^ Object2.Market == null )
			{
				equal = false;
			}
			if ( Object1.Volume != null && Object2.Volume != null )
			{
				if (Object1.Volume != Object2.Volume)
					equal = false;
			}
			else if (Object1.Volume == null ^ Object2.Volume == null )
			{
				equal = false;
			}
			if ( Object1.Price != null && Object2.Price != null )
			{
				if (Object1.Price != Object2.Price)
					equal = false;
			}
			else if (Object1.Price == null ^ Object2.Price == null )
			{
				equal = false;
			}
			if ( Object1.RegisteredVol != null && Object2.RegisteredVol != null )
			{
				if (Object1.RegisteredVol != Object2.RegisteredVol)
					equal = false;
			}
			else if (Object1.RegisteredVol == null ^ Object2.RegisteredVol == null )
			{
				equal = false;
			}
			if ( Object1.AvailableVol != null && Object2.AvailableVol != null )
			{
				if (Object1.AvailableVol != Object2.AvailableVol)
					equal = false;
			}
			else if (Object1.AvailableVol == null ^ Object2.AvailableVol == null )
			{
				equal = false;
			}
			if ( Object1.RequestVol != null && Object2.RequestVol != null )
			{
				if (Object1.RequestVol != Object2.RequestVol)
					equal = false;
			}
			else if (Object1.RequestVol == null ^ Object2.RequestVol == null )
			{
				equal = false;
			}
			if ( Object1.RequestTime != null && Object2.RequestTime != null )
			{
				if (Object1.RequestTime != Object2.RequestTime)
					equal = false;
			}
			else if (Object1.RequestTime == null ^ Object2.RequestTime == null )
			{
				equal = false;
			}
			if ( Object1.ApprovedVol != null && Object2.ApprovedVol != null )
			{
				if (Object1.ApprovedVol != Object2.ApprovedVol)
					equal = false;
			}
			else if (Object1.ApprovedVol == null ^ Object2.ApprovedVol == null )
			{
				equal = false;
			}
			if (Object1.Status != Object2.Status)
				equal = false;
			if ( Object1.BrokerId != null && Object2.BrokerId != null )
			{
				if (Object1.BrokerId != Object2.BrokerId)
					equal = false;
			}
			else if (Object1.BrokerId == null ^ Object2.BrokerId == null )
			{
				equal = false;
			}
			if ( Object1.ExecTime != null && Object2.ExecTime != null )
			{
				if (Object1.ExecTime != Object2.ExecTime)
					equal = false;
			}
			else if (Object1.ExecTime == null ^ Object2.ExecTime == null )
			{
				equal = false;
			}
			if ( Object1.Note != null && Object2.Note != null )
			{
				if (Object1.Note != Object2.Note)
					equal = false;
			}
			else if (Object1.Note == null ^ Object2.Note == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((XrOrdersBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static XrOrdersComparer GetComparer()
        {
            return new XrOrdersComparer();
        }
        */

        // Comparer delegates back to XrOrders
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(XrOrders rhs, XrOrdersColumn which)
        {
            switch (which)
            {
            	
            	
            	case XrOrdersColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case XrOrdersColumn.SubAccountId:
            		return this.SubAccountId.CompareTo(rhs.SubAccountId);
            		
            		                 
            	
            	
            	case XrOrdersColumn.BuyRightId:
            		return this.BuyRightId.CompareTo(rhs.BuyRightId);
            		
            		                 
            	
            	
            	case XrOrdersColumn.SecSymbol:
            		return this.SecSymbol.CompareTo(rhs.SecSymbol);
            		
            		                 
            	
            	
            	case XrOrdersColumn.Market:
            		return this.Market.CompareTo(rhs.Market);
            		
            		                 
            	
            	
            	case XrOrdersColumn.Volume:
            		return this.Volume.Value.CompareTo(rhs.Volume.Value);
            		
            		                 
            	
            	
            	case XrOrdersColumn.Price:
            		return this.Price.Value.CompareTo(rhs.Price.Value);
            		
            		                 
            	
            	
            	case XrOrdersColumn.RegisteredVol:
            		return this.RegisteredVol.Value.CompareTo(rhs.RegisteredVol.Value);
            		
            		                 
            	
            	
            	case XrOrdersColumn.AvailableVol:
            		return this.AvailableVol.Value.CompareTo(rhs.AvailableVol.Value);
            		
            		                 
            	
            	
            	case XrOrdersColumn.RequestVol:
            		return this.RequestVol.Value.CompareTo(rhs.RequestVol.Value);
            		
            		                 
            	
            	
            	case XrOrdersColumn.RequestTime:
            		return this.RequestTime.Value.CompareTo(rhs.RequestTime.Value);
            		
            		                 
            	
            	
            	case XrOrdersColumn.ApprovedVol:
            		return this.ApprovedVol.Value.CompareTo(rhs.ApprovedVol.Value);
            		
            		                 
            	
            	
            	case XrOrdersColumn.Status:
            		return this.Status.CompareTo(rhs.Status);
            		
            		                 
            	
            	
            	case XrOrdersColumn.BrokerId:
            		return this.BrokerId.CompareTo(rhs.BrokerId);
            		
            		                 
            	
            	
            	case XrOrdersColumn.ExecTime:
            		return this.ExecTime.Value.CompareTo(rhs.ExecTime.Value);
            		
            		                 
            	
            	
            	case XrOrdersColumn.Note:
            		return this.Note.CompareTo(rhs.Note);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
        [ScriptIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<XrOrdersKey> Members
		
		// member variable for the EntityId property
		private XrOrdersKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
        [ScriptIgnore]
		public virtual XrOrdersKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new XrOrdersKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute(), ScriptIgnore()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
        [ScriptIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("XrOrders")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{17}{16}- Id: {0}{16}- SubAccountId: {1}{16}- BuyRightId: {2}{16}- SecSymbol: {3}{16}- Market: {4}{16}- Volume: {5}{16}- Price: {6}{16}- RegisteredVol: {7}{16}- AvailableVol: {8}{16}- RequestVol: {9}{16}- RequestTime: {10}{16}- ApprovedVol: {11}{16}- Status: {12}{16}- BrokerId: {13}{16}- ExecTime: {14}{16}- Note: {15}{16}{18}", 
				this.Id,
				this.SubAccountId,
				this.BuyRightId,
				(this.SecSymbol == null) ? string.Empty : this.SecSymbol.ToString(),
				(this.Market == null) ? string.Empty : this.Market.ToString(),
				(this.Volume == null) ? string.Empty : this.Volume.ToString(),
				(this.Price == null) ? string.Empty : this.Price.ToString(),
				(this.RegisteredVol == null) ? string.Empty : this.RegisteredVol.ToString(),
				(this.AvailableVol == null) ? string.Empty : this.AvailableVol.ToString(),
				(this.RequestVol == null) ? string.Empty : this.RequestVol.ToString(),
				(this.RequestTime == null) ? string.Empty : this.RequestTime.ToString(),
				(this.ApprovedVol == null) ? string.Empty : this.ApprovedVol.ToString(),
				this.Status,
				(this.BrokerId == null) ? string.Empty : this.BrokerId.ToString(),
				(this.ExecTime == null) ? string.Empty : this.ExecTime.ToString(),
				(this.Note == null) ? string.Empty : this.Note.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'XROrders' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class XrOrdersEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "XROrders"</remarks>
		public System.Int64 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SubAccountID : Tai khoan con dang ky quyen mua
		/// </summary>
		public System.String		  SubAccountId = string.Empty;
		
		/// <summary>
		/// BuyRightID : Id of buy right table
		/// </summary>
		public System.Int64		  BuyRightId = (long)0;
		
		/// <summary>
		/// SecSymbol : Ma CK duoc dang ky mua
		/// </summary>
		public System.String		  SecSymbol = null;
		
		/// <summary>
		/// Market : Thi truong cua ma CK nay(HOSE, HNX, Upcom)
		/// </summary>
		public System.String		  Market = null;
		
		/// <summary>
		/// Volume : Khoi luong CP duoc phep mua
		/// </summary>
		public System.Int64?		  Volume = null;
		
		/// <summary>
		/// Price : Gia mac dinh cho quyen mua CP nay
		/// </summary>
		public System.Decimal?		  Price = null;
		
		/// <summary>
		/// RegisteredVol : KL co phieu khach da dang ky mua
		/// </summary>
		public System.Int64?		  RegisteredVol = null;
		
		/// <summary>
		/// AvailableVol : KL CP con lai khach duoc phep mua
		/// </summary>
		public System.Int64?		  AvailableVol = null;
		
		/// <summary>
		/// RequestVol : KL CP khach hang dang ky mua
		/// </summary>
		public System.Int64?		  RequestVol = null;
		
		/// <summary>
		/// RequestTime : Thoi gian (ngay gio) dang ky
		/// </summary>
		public System.DateTime?		  RequestTime = null;
		
		/// <summary>
		/// ApprovedVol : KL CP mua da chap thuan
		/// </summary>
		public System.Int64?		  ApprovedVol = null;
		
		/// <summary>
		/// Status : Trang thai cua request(dang cho, dang xu ly, da xu ly, da huy boi nha dau tu, tu choi boi broker)
		/// </summary>
		public System.Int32		  Status = (int)0;
		
		/// <summary>
		/// BrokerID : Broker ID cua Broker xu ly request
		/// </summary>
		public System.String		  BrokerId = null;
		
		/// <summary>
		/// ExecTime : Thoi gian xu ly
		/// </summary>
		public System.DateTime?		  ExecTime = null;
		
		/// <summary>
		/// Note : Ghi chu cua Broker
		/// </summary>
		public System.String		  Note = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			XrOrdersEntityData _tmp = new XrOrdersEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.SubAccountId = this.SubAccountId;
			_tmp.BuyRightId = this.BuyRightId;
			_tmp.SecSymbol = this.SecSymbol;
			_tmp.Market = this.Market;
			_tmp.Volume = this.Volume;
			_tmp.Price = this.Price;
			_tmp.RegisteredVol = this.RegisteredVol;
			_tmp.AvailableVol = this.AvailableVol;
			_tmp.RequestVol = this.RequestVol;
			_tmp.RequestTime = this.RequestTime;
			_tmp.ApprovedVol = this.ApprovedVol;
			_tmp.Status = this.Status;
			_tmp.BrokerId = this.BrokerId;
			_tmp.ExecTime = this.ExecTime;
			_tmp.Note = this.Note;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			XrOrdersEntityData _tmp = new XrOrdersEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.SubAccountId = this.SubAccountId;
			_tmp.BuyRightId = this.BuyRightId;
			_tmp.SecSymbol = this.SecSymbol;
			_tmp.Market = this.Market;
			_tmp.Volume = this.Volume;
			_tmp.Price = this.Price;
			_tmp.RegisteredVol = this.RegisteredVol;
			_tmp.AvailableVol = this.AvailableVol;
			_tmp.RequestVol = this.RequestVol;
			_tmp.RequestTime = this.RequestTime;
			_tmp.ApprovedVol = this.ApprovedVol;
			_tmp.Status = this.Status;
			_tmp.BrokerId = this.BrokerId;
			_tmp.ExecTime = this.ExecTime;
			_tmp.Note = this.Note;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="XrOrdersColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(XrOrdersColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="XrOrdersColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(XrOrdersColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="XrOrdersColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(XrOrdersColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				XrOrdersEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new XrOrdersEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="XrOrdersColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(XrOrdersColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				XrOrdersEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new XrOrdersEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region XrOrdersEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="XrOrders"/> object.
	/// </remarks>
	public class XrOrdersEventArgs : System.EventArgs
	{
		private XrOrdersColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the XrOrdersEventArgs class.
		///</summary>
		public XrOrdersEventArgs(XrOrdersColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the XrOrdersEventArgs class.
		///</summary>
		public XrOrdersEventArgs(XrOrdersColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The XrOrdersColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="XrOrdersColumn" />
		public XrOrdersColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all XrOrders related events.
	///</summary>
	public delegate void XrOrdersEventHandler(object sender, XrOrdersEventArgs e);
	
	#region XrOrdersComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class XrOrdersComparer : System.Collections.Generic.IComparer<XrOrders>
	{
		XrOrdersColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:XrOrdersComparer"/> class.
        /// </summary>
		public XrOrdersComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:XrOrdersComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public XrOrdersComparer(XrOrdersColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="XrOrders"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="XrOrders"/> to compare.</param>
        /// <param name="b">The second <c>XrOrders</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(XrOrders a, XrOrders b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(XrOrders entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(XrOrders a, XrOrders b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public XrOrdersColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region XrOrdersKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="XrOrders"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class XrOrdersKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the XrOrdersKey class.
		/// </summary>
		public XrOrdersKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the XrOrdersKey class.
		/// </summary>
		public XrOrdersKey(XrOrdersBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the XrOrdersKey class.
		/// </summary>
		public XrOrdersKey(System.Int64 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private XrOrdersBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public XrOrdersBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int64 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int64 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int64) EntityUtil.ChangeType(values["Id"], typeof(System.Int64)) : (long)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region XrOrdersColumn Enum
	
	/// <summary>
	/// Enumerate the XrOrders columns.
	/// </summary>
	[Serializable]
	public enum XrOrdersColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Int64), System.Data.DbType.Int64, true, true, false)]
		Id = 1,
		/// <summary>
		/// SubAccountId : Tai khoan con dang ky quyen mua
		/// </summary>
		[EnumTextValue("SubAccountID")]
		[ColumnEnum("SubAccountID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		SubAccountId = 2,
		/// <summary>
		/// BuyRightId : Id of buy right table
		/// </summary>
		[EnumTextValue("BuyRightID")]
		[ColumnEnum("BuyRightID", typeof(System.Int64), System.Data.DbType.Int64, false, false, false)]
		BuyRightId = 3,
		/// <summary>
		/// SecSymbol : Ma CK duoc dang ky mua
		/// </summary>
		[EnumTextValue("SecSymbol")]
		[ColumnEnum("SecSymbol", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 8)]
		SecSymbol = 4,
		/// <summary>
		/// Market : Thi truong cua ma CK nay(HOSE, HNX, Upcom)
		/// </summary>
		[EnumTextValue("Market")]
		[ColumnEnum("Market", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 1)]
		Market = 5,
		/// <summary>
		/// Volume : Khoi luong CP duoc phep mua
		/// </summary>
		[EnumTextValue("Volume")]
		[ColumnEnum("Volume", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		Volume = 6,
		/// <summary>
		/// Price : Gia mac dinh cho quyen mua CP nay
		/// </summary>
		[EnumTextValue("Price")]
		[ColumnEnum("Price", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Price = 7,
		/// <summary>
		/// RegisteredVol : KL co phieu khach da dang ky mua
		/// </summary>
		[EnumTextValue("RegisteredVol")]
		[ColumnEnum("RegisteredVol", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		RegisteredVol = 8,
		/// <summary>
		/// AvailableVol : KL CP con lai khach duoc phep mua
		/// </summary>
		[EnumTextValue("AvailableVol")]
		[ColumnEnum("AvailableVol", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		AvailableVol = 9,
		/// <summary>
		/// RequestVol : KL CP khach hang dang ky mua
		/// </summary>
		[EnumTextValue("RequestVol")]
		[ColumnEnum("RequestVol", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		RequestVol = 10,
		/// <summary>
		/// RequestTime : Thoi gian (ngay gio) dang ky
		/// </summary>
		[EnumTextValue("RequestTime")]
		[ColumnEnum("RequestTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		RequestTime = 11,
		/// <summary>
		/// ApprovedVol : KL CP mua da chap thuan
		/// </summary>
		[EnumTextValue("ApprovedVol")]
		[ColumnEnum("ApprovedVol", typeof(System.Int64), System.Data.DbType.Int64, false, false, true)]
		ApprovedVol = 12,
		/// <summary>
		/// Status : Trang thai cua request(dang cho, dang xu ly, da xu ly, da huy boi nha dau tu, tu choi boi broker)
		/// </summary>
		[EnumTextValue("Status")]
		[ColumnEnum("Status", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		Status = 13,
		/// <summary>
		/// BrokerId : Broker ID cua Broker xu ly request
		/// </summary>
		[EnumTextValue("BrokerID")]
		[ColumnEnum("BrokerID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		BrokerId = 14,
		/// <summary>
		/// ExecTime : Thoi gian xu ly
		/// </summary>
		[EnumTextValue("ExecTime")]
		[ColumnEnum("ExecTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ExecTime = 15,
		/// <summary>
		/// Note : Ghi chu cua Broker
		/// </summary>
		[EnumTextValue("Note")]
		[ColumnEnum("Note", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Note = 16
	}//End enum

	#endregion XrOrdersColumn Enum

} // end namespace
