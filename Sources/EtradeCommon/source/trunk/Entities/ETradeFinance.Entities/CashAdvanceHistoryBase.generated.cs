
/*
	File generated by NetTiers templates [www.nettiers.com]
	Generated on : Wednesday, November 24, 2010
	Important: Do not modify this file. Edit the file CashAdvanceHistory.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;
using System.Web.Script.Serialization;

using ETradeFinance.Entities.Validation;
#endregion

namespace ETradeFinance.Entities
{
	///<summary>
	/// An object representation of the 'CashAdvanceHistory' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class CashAdvanceHistoryBase : EntityBase, ICashAdvanceHistory, IEntityId<CashAdvanceHistoryKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private CashAdvanceHistoryEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private CashAdvanceHistoryEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private CashAdvanceHistoryEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<CashAdvanceHistory> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CashAdvanceHistoryEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CashAdvanceHistoryEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="CashAdvanceHistoryBase"/> instance.
		///</summary>
		public CashAdvanceHistoryBase()
		{
			this.entityData = new CashAdvanceHistoryEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="CashAdvanceHistoryBase"/> instance.
		///</summary>
		///<param name="_subAccountId">order id sinh ra tu FIS</param>
		///<param name="_advanceDate">Thoi gian giao dich</param>
		///<param name="_contractNo">Ma chung khoan</param>
		///<param name="_orderId">Gia chung khoan</param>
		///<param name="_stockSymbol">Khoi luong co phieu ban</param>
		///<param name="_sellDueDate">So tien con lai sau khi tru phi giao dich</param>
		///<param name="_cashDueDate">So tien da ung truoc </param>
		///<param name="_totalSellValue">Thoi gian yeu cau ung</param>
		///<param name="_cashAvilable">So tien yeu cau ung: Amount < AmountAfterTradeFee - AdvancedAmount</param>
		///<param name="_cashRequest">Phi ung truoc</param>
		///<param name="_fee">So tien nhan duoc sau khi tru phi ung truoc: AmountAfterAdvanceFee = Amount - AdvanceFee</param>
		///<param name="_cashReceived">Thoi gian yeu cau bi tu choi</param>
		///<param name="_status">Trang thai cua yeu cau</param>
		///<param name="_tradeType">Ghi chú</param>
		///<param name="_brokerId">Id c?a broker x? lý request.</param>
		///<param name="_brokerName">Ngày gi? x? lý</param>
		///<param name="_reason">Loai ung truoc</param>
		///<param name="_execTime"></param>
		///<param name="_vat"></param>
		public CashAdvanceHistoryBase(System.String _subAccountId, System.DateTime _advanceDate, 
			System.String _contractNo, System.Int32? _orderId, System.String _stockSymbol, 
			System.DateTime? _sellDueDate, System.DateTime? _cashDueDate, System.Decimal? _totalSellValue, 
			System.Decimal? _cashAvilable, System.Decimal? _cashRequest, System.Decimal? _fee, 
			System.Decimal? _cashReceived, System.Int32? _status, System.Int32 _tradeType, 
			System.String _brokerId, System.String _brokerName, System.String _reason, 
			System.DateTime? _execTime, System.Decimal? _vat)
		{
			this.entityData = new CashAdvanceHistoryEntityData();
			this.backupData = null;

			this.SubAccountId = _subAccountId;
			this.AdvanceDate = _advanceDate;
			this.ContractNo = _contractNo;
			this.OrderId = _orderId;
			this.StockSymbol = _stockSymbol;
			this.SellDueDate = _sellDueDate;
			this.CashDueDate = _cashDueDate;
			this.TotalSellValue = _totalSellValue;
			this.CashAvilable = _cashAvilable;
			this.CashRequest = _cashRequest;
			this.Fee = _fee;
			this.CashReceived = _cashReceived;
			this.Status = _status;
			this.TradeType = _tradeType;
			this.BrokerId = _brokerId;
			this.BrokerName = _brokerName;
			this.Reason = _reason;
			this.ExecTime = _execTime;
			this.Vat = _vat;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="CashAdvanceHistory"/> instance.
		///</summary>
		///<param name="_subAccountId">order id sinh ra tu FIS</param>
		///<param name="_advanceDate">Thoi gian giao dich</param>
		///<param name="_contractNo">Ma chung khoan</param>
		///<param name="_orderId">Gia chung khoan</param>
		///<param name="_stockSymbol">Khoi luong co phieu ban</param>
		///<param name="_sellDueDate">So tien con lai sau khi tru phi giao dich</param>
		///<param name="_cashDueDate">So tien da ung truoc </param>
		///<param name="_totalSellValue">Thoi gian yeu cau ung</param>
		///<param name="_cashAvilable">So tien yeu cau ung: Amount < AmountAfterTradeFee - AdvancedAmount</param>
		///<param name="_cashRequest">Phi ung truoc</param>
		///<param name="_fee">So tien nhan duoc sau khi tru phi ung truoc: AmountAfterAdvanceFee = Amount - AdvanceFee</param>
		///<param name="_cashReceived">Thoi gian yeu cau bi tu choi</param>
		///<param name="_status">Trang thai cua yeu cau</param>
		///<param name="_tradeType">Ghi chú</param>
		///<param name="_brokerId">Id c?a broker x? lý request.</param>
		///<param name="_brokerName">Ngày gi? x? lý</param>
		///<param name="_reason">Loai ung truoc</param>
		///<param name="_execTime"></param>
		///<param name="_vat"></param>
		public static CashAdvanceHistory CreateCashAdvanceHistory(System.String _subAccountId, System.DateTime _advanceDate, 
			System.String _contractNo, System.Int32? _orderId, System.String _stockSymbol, 
			System.DateTime? _sellDueDate, System.DateTime? _cashDueDate, System.Decimal? _totalSellValue, 
			System.Decimal? _cashAvilable, System.Decimal? _cashRequest, System.Decimal? _fee, 
			System.Decimal? _cashReceived, System.Int32? _status, System.Int32 _tradeType, 
			System.String _brokerId, System.String _brokerName, System.String _reason, 
			System.DateTime? _execTime, System.Decimal? _vat)
		{
			CashAdvanceHistory newCashAdvanceHistory = new CashAdvanceHistory();
			newCashAdvanceHistory.SubAccountId = _subAccountId;
			newCashAdvanceHistory.AdvanceDate = _advanceDate;
			newCashAdvanceHistory.ContractNo = _contractNo;
			newCashAdvanceHistory.OrderId = _orderId;
			newCashAdvanceHistory.StockSymbol = _stockSymbol;
			newCashAdvanceHistory.SellDueDate = _sellDueDate;
			newCashAdvanceHistory.CashDueDate = _cashDueDate;
			newCashAdvanceHistory.TotalSellValue = _totalSellValue;
			newCashAdvanceHistory.CashAvilable = _cashAvilable;
			newCashAdvanceHistory.CashRequest = _cashRequest;
			newCashAdvanceHistory.Fee = _fee;
			newCashAdvanceHistory.CashReceived = _cashReceived;
			newCashAdvanceHistory.Status = _status;
			newCashAdvanceHistory.TradeType = _tradeType;
			newCashAdvanceHistory.BrokerId = _brokerId;
			newCashAdvanceHistory.BrokerName = _brokerName;
			newCashAdvanceHistory.Reason = _reason;
			newCashAdvanceHistory.ExecTime = _execTime;
			newCashAdvanceHistory.Vat = _vat;
			return newCashAdvanceHistory;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		CashAdvanceID identifies CashAdvance
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@"CashAdvanceID identifies CashAdvance"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int64 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(CashAdvanceHistoryColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashAdvanceHistoryColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SubAccountId property. 
		///		order id sinh ra tu FIS
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"order id sinh ra tu FIS"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 20)]
		public virtual System.String SubAccountId
		{
			get
			{
				return this.entityData.SubAccountId; 
			}
			
			set
			{
				if (this.entityData.SubAccountId == value)
					return;
					
				OnColumnChanging(CashAdvanceHistoryColumn.SubAccountId, this.entityData.SubAccountId);
				this.entityData.SubAccountId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashAdvanceHistoryColumn.SubAccountId, this.entityData.SubAccountId);
				OnPropertyChanged("SubAccountId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AdvanceDate property. 
		///		Thoi gian giao dich
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Thoi gian giao dich"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime AdvanceDate
		{
			get
			{
				return this.entityData.AdvanceDate; 
			}
			
			set
			{
				if (this.entityData.AdvanceDate == value)
					return;
					
				OnColumnChanging(CashAdvanceHistoryColumn.AdvanceDate, this.entityData.AdvanceDate);
				this.entityData.AdvanceDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashAdvanceHistoryColumn.AdvanceDate, this.entityData.AdvanceDate);
				OnPropertyChanged("AdvanceDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ContractNo property. 
		///		Ma chung khoan
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Ma chung khoan"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String ContractNo
		{
			get
			{
				return this.entityData.ContractNo; 
			}
			
			set
			{
				if (this.entityData.ContractNo == value)
					return;
					
				OnColumnChanging(CashAdvanceHistoryColumn.ContractNo, this.entityData.ContractNo);
				this.entityData.ContractNo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashAdvanceHistoryColumn.ContractNo, this.entityData.ContractNo);
				OnPropertyChanged("ContractNo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OrderId property. 
		///		Gia chung khoan
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsOrderIdNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Gia chung khoan"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? OrderId
		{
			get
			{
				return this.entityData.OrderId; 
			}
			
			set
			{
				if (this.entityData.OrderId == value)
					return;
					
				OnColumnChanging(CashAdvanceHistoryColumn.OrderId, this.entityData.OrderId);
				this.entityData.OrderId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashAdvanceHistoryColumn.OrderId, this.entityData.OrderId);
				OnPropertyChanged("OrderId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StockSymbol property. 
		///		Khoi luong co phieu ban
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>




		[DescriptionAttribute(@"Khoi luong co phieu ban"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 8)]
		public virtual System.String StockSymbol
		{
			get
			{
				return this.entityData.StockSymbol; 
			}
			
			set
			{
				if (this.entityData.StockSymbol == value)
					return;
					
				OnColumnChanging(CashAdvanceHistoryColumn.StockSymbol, this.entityData.StockSymbol);
				this.entityData.StockSymbol = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashAdvanceHistoryColumn.StockSymbol, this.entityData.StockSymbol);
				OnPropertyChanged("StockSymbol");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SellDueDate property. 
		///		So tien con lai sau khi tru phi giao dich
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsSellDueDateNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"So tien con lai sau khi tru phi giao dich"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? SellDueDate
		{
			get
			{
				return this.entityData.SellDueDate; 
			}
			
			set
			{
				if (this.entityData.SellDueDate == value)
					return;
					
				OnColumnChanging(CashAdvanceHistoryColumn.SellDueDate, this.entityData.SellDueDate);
				this.entityData.SellDueDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashAdvanceHistoryColumn.SellDueDate, this.entityData.SellDueDate);
				OnPropertyChanged("SellDueDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CashDueDate property. 
		///		So tien da ung truoc 
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCashDueDateNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"So tien da ung truoc "), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CashDueDate
		{
			get
			{
				return this.entityData.CashDueDate; 
			}
			
			set
			{
				if (this.entityData.CashDueDate == value)
					return;
					
				OnColumnChanging(CashAdvanceHistoryColumn.CashDueDate, this.entityData.CashDueDate);
				this.entityData.CashDueDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashAdvanceHistoryColumn.CashDueDate, this.entityData.CashDueDate);
				OnPropertyChanged("CashDueDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalSellValue property. 
		///		Thoi gian yeu cau ung
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTotalSellValueNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Thoi gian yeu cau ung"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TotalSellValue
		{
			get
			{
				return this.entityData.TotalSellValue; 
			}
			
			set
			{
				if (this.entityData.TotalSellValue == value)
					return;
					
				OnColumnChanging(CashAdvanceHistoryColumn.TotalSellValue, this.entityData.TotalSellValue);
				this.entityData.TotalSellValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashAdvanceHistoryColumn.TotalSellValue, this.entityData.TotalSellValue);
				OnPropertyChanged("TotalSellValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CashAvilable property. 
		///		So tien yeu cau ung: Amount < AmountAfterTradeFee - AdvancedAmount
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCashAvilableNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"So tien yeu cau ung: Amount < AmountAfterTradeFee - AdvancedAmount"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CashAvilable
		{
			get
			{
				return this.entityData.CashAvilable; 
			}
			
			set
			{
				if (this.entityData.CashAvilable == value)
					return;
					
				OnColumnChanging(CashAdvanceHistoryColumn.CashAvilable, this.entityData.CashAvilable);
				this.entityData.CashAvilable = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashAdvanceHistoryColumn.CashAvilable, this.entityData.CashAvilable);
				OnPropertyChanged("CashAvilable");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CashRequest property. 
		///		Phi ung truoc
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCashRequestNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Phi ung truoc"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CashRequest
		{
			get
			{
				return this.entityData.CashRequest; 
			}
			
			set
			{
				if (this.entityData.CashRequest == value)
					return;
					
				OnColumnChanging(CashAdvanceHistoryColumn.CashRequest, this.entityData.CashRequest);
				this.entityData.CashRequest = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashAdvanceHistoryColumn.CashRequest, this.entityData.CashRequest);
				OnPropertyChanged("CashRequest");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Fee property. 
		///		So tien nhan duoc sau khi tru phi ung truoc: AmountAfterAdvanceFee = Amount - AdvanceFee
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFeeNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"So tien nhan duoc sau khi tru phi ung truoc: AmountAfterAdvanceFee = Amount - AdvanceFee"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Fee
		{
			get
			{
				return this.entityData.Fee; 
			}
			
			set
			{
				if (this.entityData.Fee == value)
					return;
					
				OnColumnChanging(CashAdvanceHistoryColumn.Fee, this.entityData.Fee);
				this.entityData.Fee = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashAdvanceHistoryColumn.Fee, this.entityData.Fee);
				OnPropertyChanged("Fee");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CashReceived property. 
		///		Thoi gian yeu cau bi tu choi
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCashReceivedNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Thoi gian yeu cau bi tu choi"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CashReceived
		{
			get
			{
				return this.entityData.CashReceived; 
			}
			
			set
			{
				if (this.entityData.CashReceived == value)
					return;
					
				OnColumnChanging(CashAdvanceHistoryColumn.CashReceived, this.entityData.CashReceived);
				this.entityData.CashReceived = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashAdvanceHistoryColumn.CashReceived, this.entityData.CashReceived);
				OnPropertyChanged("CashReceived");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		Trang thai cua yeu cau
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsStatusNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Trang thai cua yeu cau"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
					
				OnColumnChanging(CashAdvanceHistoryColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashAdvanceHistoryColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TradeType property. 
		///		Ghi chú
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>




		[DescriptionAttribute(@"Ghi chú"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 TradeType
		{
			get
			{
				return this.entityData.TradeType; 
			}
			
			set
			{
				if (this.entityData.TradeType == value)
					return;
					
				OnColumnChanging(CashAdvanceHistoryColumn.TradeType, this.entityData.TradeType);
				this.entityData.TradeType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashAdvanceHistoryColumn.TradeType, this.entityData.TradeType);
				OnPropertyChanged("TradeType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BrokerId property. 
		///		Id c?a broker x? lý request.
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Id c?a broker x? lý request."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String BrokerId
		{
			get
			{
				return this.entityData.BrokerId; 
			}
			
			set
			{
				if (this.entityData.BrokerId == value)
					return;
					
				OnColumnChanging(CashAdvanceHistoryColumn.BrokerId, this.entityData.BrokerId);
				this.entityData.BrokerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashAdvanceHistoryColumn.BrokerId, this.entityData.BrokerId);
				OnPropertyChanged("BrokerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BrokerName property. 
		///		Ngày gi? x? lý
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Ngày gi? x? lý"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String BrokerName
		{
			get
			{
				return this.entityData.BrokerName; 
			}
			
			set
			{
				if (this.entityData.BrokerName == value)
					return;
					
				OnColumnChanging(CashAdvanceHistoryColumn.BrokerName, this.entityData.BrokerName);
				this.entityData.BrokerName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashAdvanceHistoryColumn.BrokerName, this.entityData.BrokerName);
				OnPropertyChanged("BrokerName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Reason property. 
		///		Loai ung truoc
		/// </summary>
		/// <value>This type is ntext.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@"Loai ung truoc"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Reason
		{
			get
			{
				return this.entityData.Reason; 
			}
			
			set
			{
				if (this.entityData.Reason == value)
					return;
					
				OnColumnChanging(CashAdvanceHistoryColumn.Reason, this.entityData.Reason);
				this.entityData.Reason = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashAdvanceHistoryColumn.Reason, this.entityData.Reason);
				OnPropertyChanged("Reason");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExecTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsExecTimeNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ExecTime
		{
			get
			{
				return this.entityData.ExecTime; 
			}
			
			set
			{
				if (this.entityData.ExecTime == value)
					return;
					
				OnColumnChanging(CashAdvanceHistoryColumn.ExecTime, this.entityData.ExecTime);
				this.entityData.ExecTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashAdvanceHistoryColumn.ExecTime, this.entityData.ExecTime);
				OnPropertyChanged("ExecTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Vat property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsVatNull() and perform business logic appropriately.
		/// </remarks>




		[XmlElement(IsNullable=true)]
		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Vat
		{
			get
			{
				return this.entityData.Vat; 
			}
			
			set
			{
				if (this.entityData.Vat == value)
					return;
					
				OnColumnChanging(CashAdvanceHistoryColumn.Vat, this.entityData.Vat);
				this.entityData.Vat = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CashAdvanceHistoryColumn.Vat, this.entityData.Vat);
				OnPropertyChanged("Vat");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("SubAccountId", "Sub Account Id"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("SubAccountId", "Sub Account Id", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ContractNo", "Contract No", 50));
			ValidationRules.AddRule( CommonRules.NotNull,
				new ValidationRuleArgs("StockSymbol", "Stock Symbol"));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("StockSymbol", "Stock Symbol", 8));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("BrokerId", "Broker Id", 20));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("BrokerName", "Broker Name", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public override string TableName
		{
			get { return "CashAdvanceHistory"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "SubAccountID", "AdvanceDate", "ContractNo", "OrderID", "StockSymbol", "SellDueDate", "CashDueDate", "TotalSellValue", "CashAvilable", "CashRequest", "Fee", "CashReceived", "Status", "TradeType", "BrokerID", "BrokerName", "Reason", "ExecTime", "VAT"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as CashAdvanceHistoryEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (CashAdvanceHistory) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
        [ScriptIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<CashAdvanceHistory>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as CashAdvanceHistory);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed CashAdvanceHistory Entity 
		///</summary>
		protected virtual CashAdvanceHistory Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			CashAdvanceHistory copy = new CashAdvanceHistory();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.Id = this.Id;
				copy.SubAccountId = this.SubAccountId;
				copy.AdvanceDate = this.AdvanceDate;
				copy.ContractNo = this.ContractNo;
				copy.OrderId = this.OrderId;
				copy.StockSymbol = this.StockSymbol;
				copy.SellDueDate = this.SellDueDate;
				copy.CashDueDate = this.CashDueDate;
				copy.TotalSellValue = this.TotalSellValue;
				copy.CashAvilable = this.CashAvilable;
				copy.CashRequest = this.CashRequest;
				copy.Fee = this.Fee;
				copy.CashReceived = this.CashReceived;
				copy.Status = this.Status;
				copy.TradeType = this.TradeType;
				copy.BrokerId = this.BrokerId;
				copy.BrokerName = this.BrokerName;
				copy.Reason = this.Reason;
				copy.ExecTime = this.ExecTime;
				copy.Vat = this.Vat;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed CashAdvanceHistory Entity 
		///</summary>
		public virtual CashAdvanceHistory Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed CashAdvanceHistory Entity which is a deep copy of the current entity.
		///</summary>
		public virtual CashAdvanceHistory DeepCopy()
		{
			return EntityHelper.Clone<CashAdvanceHistory>(this as CashAdvanceHistory);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as CashAdvanceHistoryEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new CashAdvanceHistoryEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as CashAdvanceHistoryEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(CashAdvanceHistoryColumn column)
		{
			switch(column)
			{
					case CashAdvanceHistoryColumn.Id:
					return entityData.Id != _originalData.Id;
					case CashAdvanceHistoryColumn.SubAccountId:
					return entityData.SubAccountId != _originalData.SubAccountId;
					case CashAdvanceHistoryColumn.AdvanceDate:
					return entityData.AdvanceDate != _originalData.AdvanceDate;
					case CashAdvanceHistoryColumn.ContractNo:
					return entityData.ContractNo != _originalData.ContractNo;
					case CashAdvanceHistoryColumn.OrderId:
					return entityData.OrderId != _originalData.OrderId;
					case CashAdvanceHistoryColumn.StockSymbol:
					return entityData.StockSymbol != _originalData.StockSymbol;
					case CashAdvanceHistoryColumn.SellDueDate:
					return entityData.SellDueDate != _originalData.SellDueDate;
					case CashAdvanceHistoryColumn.CashDueDate:
					return entityData.CashDueDate != _originalData.CashDueDate;
					case CashAdvanceHistoryColumn.TotalSellValue:
					return entityData.TotalSellValue != _originalData.TotalSellValue;
					case CashAdvanceHistoryColumn.CashAvilable:
					return entityData.CashAvilable != _originalData.CashAvilable;
					case CashAdvanceHistoryColumn.CashRequest:
					return entityData.CashRequest != _originalData.CashRequest;
					case CashAdvanceHistoryColumn.Fee:
					return entityData.Fee != _originalData.Fee;
					case CashAdvanceHistoryColumn.CashReceived:
					return entityData.CashReceived != _originalData.CashReceived;
					case CashAdvanceHistoryColumn.Status:
					return entityData.Status != _originalData.Status;
					case CashAdvanceHistoryColumn.TradeType:
					return entityData.TradeType != _originalData.TradeType;
					case CashAdvanceHistoryColumn.BrokerId:
					return entityData.BrokerId != _originalData.BrokerId;
					case CashAdvanceHistoryColumn.BrokerName:
					return entityData.BrokerName != _originalData.BrokerName;
					case CashAdvanceHistoryColumn.Reason:
					return entityData.Reason != _originalData.Reason;
					case CashAdvanceHistoryColumn.ExecTime:
					return entityData.ExecTime != _originalData.ExecTime;
					case CashAdvanceHistoryColumn.Vat:
					return entityData.Vat != _originalData.Vat;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< CashAdvanceHistoryColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.SubAccountId != _originalData.SubAccountId;
			result = result || entityData.AdvanceDate != _originalData.AdvanceDate;
			result = result || entityData.ContractNo != _originalData.ContractNo;
			result = result || entityData.OrderId != _originalData.OrderId;
			result = result || entityData.StockSymbol != _originalData.StockSymbol;
			result = result || entityData.SellDueDate != _originalData.SellDueDate;
			result = result || entityData.CashDueDate != _originalData.CashDueDate;
			result = result || entityData.TotalSellValue != _originalData.TotalSellValue;
			result = result || entityData.CashAvilable != _originalData.CashAvilable;
			result = result || entityData.CashRequest != _originalData.CashRequest;
			result = result || entityData.Fee != _originalData.Fee;
			result = result || entityData.CashReceived != _originalData.CashReceived;
			result = result || entityData.Status != _originalData.Status;
			result = result || entityData.TradeType != _originalData.TradeType;
			result = result || entityData.BrokerId != _originalData.BrokerId;
			result = result || entityData.BrokerName != _originalData.BrokerName;
			result = result || entityData.Reason != _originalData.Reason;
			result = result || entityData.ExecTime != _originalData.ExecTime;
			result = result || entityData.Vat != _originalData.Vat;
			return result;
		}	
		
		///<summary>
		///  Returns a CashAdvanceHistory Entity with the original data.
		///</summary>
		public CashAdvanceHistory GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateCashAdvanceHistory(
				_originalData.SubAccountId,
				_originalData.AdvanceDate,
				_originalData.ContractNo,
				_originalData.OrderId,
				_originalData.StockSymbol,
				_originalData.SellDueDate,
				_originalData.CashDueDate,
				_originalData.TotalSellValue,
				_originalData.CashAvilable,
				_originalData.CashRequest,
				_originalData.Fee,
				_originalData.CashReceived,
				_originalData.Status,
				_originalData.TradeType,
				_originalData.BrokerId,
				_originalData.BrokerName,
				_originalData.Reason,
				_originalData.ExecTime,
				_originalData.Vat
				);
				
			return (CashAdvanceHistory)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="CashAdvanceHistoryBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is CashAdvanceHistoryBase)
				return ValueEquals(this, (CashAdvanceHistoryBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="CashAdvanceHistoryBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					this.SubAccountId.GetHashCode() ^ 
					this.AdvanceDate.GetHashCode() ^ 
					((this.ContractNo == null) ? string.Empty : this.ContractNo.ToString()).GetHashCode() ^ 
					((this.OrderId == null) ? string.Empty : this.OrderId.ToString()).GetHashCode() ^ 
					this.StockSymbol.GetHashCode() ^ 
					((this.SellDueDate == null) ? string.Empty : this.SellDueDate.ToString()).GetHashCode() ^ 
					((this.CashDueDate == null) ? string.Empty : this.CashDueDate.ToString()).GetHashCode() ^ 
					((this.TotalSellValue == null) ? string.Empty : this.TotalSellValue.ToString()).GetHashCode() ^ 
					((this.CashAvilable == null) ? string.Empty : this.CashAvilable.ToString()).GetHashCode() ^ 
					((this.CashRequest == null) ? string.Empty : this.CashRequest.ToString()).GetHashCode() ^ 
					((this.Fee == null) ? string.Empty : this.Fee.ToString()).GetHashCode() ^ 
					((this.CashReceived == null) ? string.Empty : this.CashReceived.ToString()).GetHashCode() ^ 
					((this.Status == null) ? string.Empty : this.Status.ToString()).GetHashCode() ^ 
					this.TradeType.GetHashCode() ^ 
					((this.BrokerId == null) ? string.Empty : this.BrokerId.ToString()).GetHashCode() ^ 
					((this.BrokerName == null) ? string.Empty : this.BrokerName.ToString()).GetHashCode() ^ 
					((this.Reason == null) ? string.Empty : this.Reason.ToString()).GetHashCode() ^ 
					((this.ExecTime == null) ? string.Empty : this.ExecTime.ToString()).GetHashCode() ^ 
					((this.Vat == null) ? string.Empty : this.Vat.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="CashAdvanceHistoryBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(CashAdvanceHistoryBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="CashAdvanceHistoryBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="CashAdvanceHistoryBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="CashAdvanceHistoryBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(CashAdvanceHistoryBase Object1, CashAdvanceHistoryBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.SubAccountId != Object2.SubAccountId)
				equal = false;
			if (Object1.AdvanceDate != Object2.AdvanceDate)
				equal = false;
			if ( Object1.ContractNo != null && Object2.ContractNo != null )
			{
				if (Object1.ContractNo != Object2.ContractNo)
					equal = false;
			}
			else if (Object1.ContractNo == null ^ Object2.ContractNo == null )
			{
				equal = false;
			}
			if ( Object1.OrderId != null && Object2.OrderId != null )
			{
				if (Object1.OrderId != Object2.OrderId)
					equal = false;
			}
			else if (Object1.OrderId == null ^ Object2.OrderId == null )
			{
				equal = false;
			}
			if (Object1.StockSymbol != Object2.StockSymbol)
				equal = false;
			if ( Object1.SellDueDate != null && Object2.SellDueDate != null )
			{
				if (Object1.SellDueDate != Object2.SellDueDate)
					equal = false;
			}
			else if (Object1.SellDueDate == null ^ Object2.SellDueDate == null )
			{
				equal = false;
			}
			if ( Object1.CashDueDate != null && Object2.CashDueDate != null )
			{
				if (Object1.CashDueDate != Object2.CashDueDate)
					equal = false;
			}
			else if (Object1.CashDueDate == null ^ Object2.CashDueDate == null )
			{
				equal = false;
			}
			if ( Object1.TotalSellValue != null && Object2.TotalSellValue != null )
			{
				if (Object1.TotalSellValue != Object2.TotalSellValue)
					equal = false;
			}
			else if (Object1.TotalSellValue == null ^ Object2.TotalSellValue == null )
			{
				equal = false;
			}
			if ( Object1.CashAvilable != null && Object2.CashAvilable != null )
			{
				if (Object1.CashAvilable != Object2.CashAvilable)
					equal = false;
			}
			else if (Object1.CashAvilable == null ^ Object2.CashAvilable == null )
			{
				equal = false;
			}
			if ( Object1.CashRequest != null && Object2.CashRequest != null )
			{
				if (Object1.CashRequest != Object2.CashRequest)
					equal = false;
			}
			else if (Object1.CashRequest == null ^ Object2.CashRequest == null )
			{
				equal = false;
			}
			if ( Object1.Fee != null && Object2.Fee != null )
			{
				if (Object1.Fee != Object2.Fee)
					equal = false;
			}
			else if (Object1.Fee == null ^ Object2.Fee == null )
			{
				equal = false;
			}
			if ( Object1.CashReceived != null && Object2.CashReceived != null )
			{
				if (Object1.CashReceived != Object2.CashReceived)
					equal = false;
			}
			else if (Object1.CashReceived == null ^ Object2.CashReceived == null )
			{
				equal = false;
			}
			if ( Object1.Status != null && Object2.Status != null )
			{
				if (Object1.Status != Object2.Status)
					equal = false;
			}
			else if (Object1.Status == null ^ Object2.Status == null )
			{
				equal = false;
			}
			if (Object1.TradeType != Object2.TradeType)
				equal = false;
			if ( Object1.BrokerId != null && Object2.BrokerId != null )
			{
				if (Object1.BrokerId != Object2.BrokerId)
					equal = false;
			}
			else if (Object1.BrokerId == null ^ Object2.BrokerId == null )
			{
				equal = false;
			}
			if ( Object1.BrokerName != null && Object2.BrokerName != null )
			{
				if (Object1.BrokerName != Object2.BrokerName)
					equal = false;
			}
			else if (Object1.BrokerName == null ^ Object2.BrokerName == null )
			{
				equal = false;
			}
			if ( Object1.Reason != null && Object2.Reason != null )
			{
				if (Object1.Reason != Object2.Reason)
					equal = false;
			}
			else if (Object1.Reason == null ^ Object2.Reason == null )
			{
				equal = false;
			}
			if ( Object1.ExecTime != null && Object2.ExecTime != null )
			{
				if (Object1.ExecTime != Object2.ExecTime)
					equal = false;
			}
			else if (Object1.ExecTime == null ^ Object2.ExecTime == null )
			{
				equal = false;
			}
			if ( Object1.Vat != null && Object2.Vat != null )
			{
				if (Object1.Vat != Object2.Vat)
					equal = false;
			}
			else if (Object1.Vat == null ^ Object2.Vat == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((CashAdvanceHistoryBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static CashAdvanceHistoryComparer GetComparer()
        {
            return new CashAdvanceHistoryComparer();
        }
        */

        // Comparer delegates back to CashAdvanceHistory
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(CashAdvanceHistory rhs, CashAdvanceHistoryColumn which)
        {
            switch (which)
            {
            	
            	
            	case CashAdvanceHistoryColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case CashAdvanceHistoryColumn.SubAccountId:
            		return this.SubAccountId.CompareTo(rhs.SubAccountId);
            		
            		                 
            	
            	
            	case CashAdvanceHistoryColumn.AdvanceDate:
            		return this.AdvanceDate.CompareTo(rhs.AdvanceDate);
            		
            		                 
            	
            	
            	case CashAdvanceHistoryColumn.ContractNo:
            		return this.ContractNo.CompareTo(rhs.ContractNo);
            		
            		                 
            	
            	
            	case CashAdvanceHistoryColumn.OrderId:
            		return this.OrderId.Value.CompareTo(rhs.OrderId.Value);
            		
            		                 
            	
            	
            	case CashAdvanceHistoryColumn.StockSymbol:
            		return this.StockSymbol.CompareTo(rhs.StockSymbol);
            		
            		                 
            	
            	
            	case CashAdvanceHistoryColumn.SellDueDate:
            		return this.SellDueDate.Value.CompareTo(rhs.SellDueDate.Value);
            		
            		                 
            	
            	
            	case CashAdvanceHistoryColumn.CashDueDate:
            		return this.CashDueDate.Value.CompareTo(rhs.CashDueDate.Value);
            		
            		                 
            	
            	
            	case CashAdvanceHistoryColumn.TotalSellValue:
            		return this.TotalSellValue.Value.CompareTo(rhs.TotalSellValue.Value);
            		
            		                 
            	
            	
            	case CashAdvanceHistoryColumn.CashAvilable:
            		return this.CashAvilable.Value.CompareTo(rhs.CashAvilable.Value);
            		
            		                 
            	
            	
            	case CashAdvanceHistoryColumn.CashRequest:
            		return this.CashRequest.Value.CompareTo(rhs.CashRequest.Value);
            		
            		                 
            	
            	
            	case CashAdvanceHistoryColumn.Fee:
            		return this.Fee.Value.CompareTo(rhs.Fee.Value);
            		
            		                 
            	
            	
            	case CashAdvanceHistoryColumn.CashReceived:
            		return this.CashReceived.Value.CompareTo(rhs.CashReceived.Value);
            		
            		                 
            	
            	
            	case CashAdvanceHistoryColumn.Status:
            		return this.Status.Value.CompareTo(rhs.Status.Value);
            		
            		                 
            	
            	
            	case CashAdvanceHistoryColumn.TradeType:
            		return this.TradeType.CompareTo(rhs.TradeType);
            		
            		                 
            	
            	
            	case CashAdvanceHistoryColumn.BrokerId:
            		return this.BrokerId.CompareTo(rhs.BrokerId);
            		
            		                 
            	
            	
            	case CashAdvanceHistoryColumn.BrokerName:
            		return this.BrokerName.CompareTo(rhs.BrokerName);
            		
            		                 
            	
            	
            	case CashAdvanceHistoryColumn.Reason:
            		return this.Reason.CompareTo(rhs.Reason);
            		
            		                 
            	
            	
            	case CashAdvanceHistoryColumn.ExecTime:
            		return this.ExecTime.Value.CompareTo(rhs.ExecTime.Value);
            		
            		                 
            	
            	
            	case CashAdvanceHistoryColumn.Vat:
            		return this.Vat.Value.CompareTo(rhs.Vat.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
        [ScriptIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<CashAdvanceHistoryKey> Members
		
		// member variable for the EntityId property
		private CashAdvanceHistoryKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
        [ScriptIgnore]
		public virtual CashAdvanceHistoryKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new CashAdvanceHistoryKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute(), ScriptIgnore()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
        [ScriptIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("CashAdvanceHistory")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{21}{20}- Id: {0}{20}- SubAccountId: {1}{20}- AdvanceDate: {2}{20}- ContractNo: {3}{20}- OrderId: {4}{20}- StockSymbol: {5}{20}- SellDueDate: {6}{20}- CashDueDate: {7}{20}- TotalSellValue: {8}{20}- CashAvilable: {9}{20}- CashRequest: {10}{20}- Fee: {11}{20}- CashReceived: {12}{20}- Status: {13}{20}- TradeType: {14}{20}- BrokerId: {15}{20}- BrokerName: {16}{20}- Reason: {17}{20}- ExecTime: {18}{20}- Vat: {19}{20}{22}", 
				this.Id,
				this.SubAccountId,
				this.AdvanceDate,
				(this.ContractNo == null) ? string.Empty : this.ContractNo.ToString(),
				(this.OrderId == null) ? string.Empty : this.OrderId.ToString(),
				this.StockSymbol,
				(this.SellDueDate == null) ? string.Empty : this.SellDueDate.ToString(),
				(this.CashDueDate == null) ? string.Empty : this.CashDueDate.ToString(),
				(this.TotalSellValue == null) ? string.Empty : this.TotalSellValue.ToString(),
				(this.CashAvilable == null) ? string.Empty : this.CashAvilable.ToString(),
				(this.CashRequest == null) ? string.Empty : this.CashRequest.ToString(),
				(this.Fee == null) ? string.Empty : this.Fee.ToString(),
				(this.CashReceived == null) ? string.Empty : this.CashReceived.ToString(),
				(this.Status == null) ? string.Empty : this.Status.ToString(),
				this.TradeType,
				(this.BrokerId == null) ? string.Empty : this.BrokerId.ToString(),
				(this.BrokerName == null) ? string.Empty : this.BrokerName.ToString(),
				(this.Reason == null) ? string.Empty : this.Reason.ToString(),
				(this.ExecTime == null) ? string.Empty : this.ExecTime.ToString(),
				(this.Vat == null) ? string.Empty : this.Vat.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'CashAdvanceHistory' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class CashAdvanceHistoryEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// ID : CashAdvanceID identifies CashAdvance
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "CashAdvanceHistory"</remarks>
		public System.Int64 Id;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// SubAccountID : order id sinh ra tu FIS
		/// </summary>
		public System.String		  SubAccountId = string.Empty;
		
		/// <summary>
		/// AdvanceDate : Thoi gian giao dich
		/// </summary>
		public System.DateTime		  AdvanceDate = DateTime.MinValue;
		
		/// <summary>
		/// ContractNo : Ma chung khoan
		/// </summary>
		public System.String		  ContractNo = null;
		
		/// <summary>
		/// OrderID : Gia chung khoan
		/// </summary>
		public System.Int32?		  OrderId = null;
		
		/// <summary>
		/// StockSymbol : Khoi luong co phieu ban
		/// </summary>
		public System.String		  StockSymbol = string.Empty;
		
		/// <summary>
		/// SellDueDate : So tien con lai sau khi tru phi giao dich
		/// </summary>
		public System.DateTime?		  SellDueDate = null;
		
		/// <summary>
		/// CashDueDate : So tien da ung truoc 
		/// </summary>
		public System.DateTime?		  CashDueDate = null;
		
		/// <summary>
		/// TotalSellValue : Thoi gian yeu cau ung
		/// </summary>
		public System.Decimal?		  TotalSellValue = null;
		
		/// <summary>
		/// CashAvilable : So tien yeu cau ung: Amount < AmountAfterTradeFee - AdvancedAmount
		/// </summary>
		public System.Decimal?		  CashAvilable = null;
		
		/// <summary>
		/// CashRequest : Phi ung truoc
		/// </summary>
		public System.Decimal?		  CashRequest = null;
		
		/// <summary>
		/// Fee : So tien nhan duoc sau khi tru phi ung truoc: AmountAfterAdvanceFee = Amount - AdvanceFee
		/// </summary>
		public System.Decimal?		  Fee = null;
		
		/// <summary>
		/// CashReceived : Thoi gian yeu cau bi tu choi
		/// </summary>
		public System.Decimal?		  CashReceived = null;
		
		/// <summary>
		/// Status : Trang thai cua yeu cau
		/// </summary>
		public System.Int32?		  Status = null;
		
		/// <summary>
		/// TradeType : Ghi chú
		/// </summary>
		public System.Int32		  TradeType = (int)0;
		
		/// <summary>
		/// BrokerID : Id c?a broker x? lý request.
		/// </summary>
		public System.String		  BrokerId = null;
		
		/// <summary>
		/// BrokerName : Ngày gi? x? lý
		/// </summary>
		public System.String		  BrokerName = null;
		
		/// <summary>
		/// Reason : Loai ung truoc
		/// </summary>
		public System.String		  Reason = null;
		
		/// <summary>
		/// ExecTime : 
		/// </summary>
		public System.DateTime?		  ExecTime = null;
		
		/// <summary>
		/// VAT : 
		/// </summary>
		public System.Decimal?		  Vat = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			CashAdvanceHistoryEntityData _tmp = new CashAdvanceHistoryEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.SubAccountId = this.SubAccountId;
			_tmp.AdvanceDate = this.AdvanceDate;
			_tmp.ContractNo = this.ContractNo;
			_tmp.OrderId = this.OrderId;
			_tmp.StockSymbol = this.StockSymbol;
			_tmp.SellDueDate = this.SellDueDate;
			_tmp.CashDueDate = this.CashDueDate;
			_tmp.TotalSellValue = this.TotalSellValue;
			_tmp.CashAvilable = this.CashAvilable;
			_tmp.CashRequest = this.CashRequest;
			_tmp.Fee = this.Fee;
			_tmp.CashReceived = this.CashReceived;
			_tmp.Status = this.Status;
			_tmp.TradeType = this.TradeType;
			_tmp.BrokerId = this.BrokerId;
			_tmp.BrokerName = this.BrokerName;
			_tmp.Reason = this.Reason;
			_tmp.ExecTime = this.ExecTime;
			_tmp.Vat = this.Vat;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			CashAdvanceHistoryEntityData _tmp = new CashAdvanceHistoryEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.SubAccountId = this.SubAccountId;
			_tmp.AdvanceDate = this.AdvanceDate;
			_tmp.ContractNo = this.ContractNo;
			_tmp.OrderId = this.OrderId;
			_tmp.StockSymbol = this.StockSymbol;
			_tmp.SellDueDate = this.SellDueDate;
			_tmp.CashDueDate = this.CashDueDate;
			_tmp.TotalSellValue = this.TotalSellValue;
			_tmp.CashAvilable = this.CashAvilable;
			_tmp.CashRequest = this.CashRequest;
			_tmp.Fee = this.Fee;
			_tmp.CashReceived = this.CashReceived;
			_tmp.Status = this.Status;
			_tmp.TradeType = this.TradeType;
			_tmp.BrokerId = this.BrokerId;
			_tmp.BrokerName = this.BrokerName;
			_tmp.Reason = this.Reason;
			_tmp.ExecTime = this.ExecTime;
			_tmp.Vat = this.Vat;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute(), ScriptIgnore()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct











		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CashAdvanceHistoryColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(CashAdvanceHistoryColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CashAdvanceHistoryColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(CashAdvanceHistoryColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CashAdvanceHistoryColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(CashAdvanceHistoryColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				CashAdvanceHistoryEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new CashAdvanceHistoryEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CashAdvanceHistoryColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(CashAdvanceHistoryColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				CashAdvanceHistoryEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new CashAdvanceHistoryEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region CashAdvanceHistoryEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="CashAdvanceHistory"/> object.
	/// </remarks>
	public class CashAdvanceHistoryEventArgs : System.EventArgs
	{
		private CashAdvanceHistoryColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the CashAdvanceHistoryEventArgs class.
		///</summary>
		public CashAdvanceHistoryEventArgs(CashAdvanceHistoryColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the CashAdvanceHistoryEventArgs class.
		///</summary>
		public CashAdvanceHistoryEventArgs(CashAdvanceHistoryColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The CashAdvanceHistoryColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="CashAdvanceHistoryColumn" />
		public CashAdvanceHistoryColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all CashAdvanceHistory related events.
	///</summary>
	public delegate void CashAdvanceHistoryEventHandler(object sender, CashAdvanceHistoryEventArgs e);
	
	#region CashAdvanceHistoryComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class CashAdvanceHistoryComparer : System.Collections.Generic.IComparer<CashAdvanceHistory>
	{
		CashAdvanceHistoryColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:CashAdvanceHistoryComparer"/> class.
        /// </summary>
		public CashAdvanceHistoryComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:CashAdvanceHistoryComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public CashAdvanceHistoryComparer(CashAdvanceHistoryColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="CashAdvanceHistory"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="CashAdvanceHistory"/> to compare.</param>
        /// <param name="b">The second <c>CashAdvanceHistory</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(CashAdvanceHistory a, CashAdvanceHistory b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(CashAdvanceHistory entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(CashAdvanceHistory a, CashAdvanceHistory b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public CashAdvanceHistoryColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region CashAdvanceHistoryKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="CashAdvanceHistory"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class CashAdvanceHistoryKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the CashAdvanceHistoryKey class.
		/// </summary>
		public CashAdvanceHistoryKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the CashAdvanceHistoryKey class.
		/// </summary>
		public CashAdvanceHistoryKey(CashAdvanceHistoryBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the CashAdvanceHistoryKey class.
		/// </summary>
		public CashAdvanceHistoryKey(System.Int64 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private CashAdvanceHistoryBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public CashAdvanceHistoryBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int64 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int64 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int64) EntityUtil.ChangeType(values["Id"], typeof(System.Int64)) : (long)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region CashAdvanceHistoryColumn Enum
	
	/// <summary>
	/// Enumerate the CashAdvanceHistory columns.
	/// </summary>
	[Serializable]
	public enum CashAdvanceHistoryColumn : int
	{
		/// <summary>
		/// Id : CashAdvanceID identifies CashAdvance
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Int64), System.Data.DbType.Int64, true, true, false)]
		Id = 1,
		/// <summary>
		/// SubAccountId : order id sinh ra tu FIS
		/// </summary>
		[EnumTextValue("SubAccountID")]
		[ColumnEnum("SubAccountID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 20)]
		SubAccountId = 2,
		/// <summary>
		/// AdvanceDate : Thoi gian giao dich
		/// </summary>
		[EnumTextValue("AdvanceDate")]
		[ColumnEnum("AdvanceDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		AdvanceDate = 3,
		/// <summary>
		/// ContractNo : Ma chung khoan
		/// </summary>
		[EnumTextValue("ContractNo")]
		[ColumnEnum("ContractNo", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		ContractNo = 4,
		/// <summary>
		/// OrderId : Gia chung khoan
		/// </summary>
		[EnumTextValue("OrderID")]
		[ColumnEnum("OrderID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		OrderId = 5,
		/// <summary>
		/// StockSymbol : Khoi luong co phieu ban
		/// </summary>
		[EnumTextValue("StockSymbol")]
		[ColumnEnum("StockSymbol", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 8)]
		StockSymbol = 6,
		/// <summary>
		/// SellDueDate : So tien con lai sau khi tru phi giao dich
		/// </summary>
		[EnumTextValue("SellDueDate")]
		[ColumnEnum("SellDueDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		SellDueDate = 7,
		/// <summary>
		/// CashDueDate : So tien da ung truoc 
		/// </summary>
		[EnumTextValue("CashDueDate")]
		[ColumnEnum("CashDueDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CashDueDate = 8,
		/// <summary>
		/// TotalSellValue : Thoi gian yeu cau ung
		/// </summary>
		[EnumTextValue("TotalSellValue")]
		[ColumnEnum("TotalSellValue", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TotalSellValue = 9,
		/// <summary>
		/// CashAvilable : So tien yeu cau ung: Amount < AmountAfterTradeFee - AdvancedAmount
		/// </summary>
		[EnumTextValue("CashAvilable")]
		[ColumnEnum("CashAvilable", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CashAvilable = 10,
		/// <summary>
		/// CashRequest : Phi ung truoc
		/// </summary>
		[EnumTextValue("CashRequest")]
		[ColumnEnum("CashRequest", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CashRequest = 11,
		/// <summary>
		/// Fee : So tien nhan duoc sau khi tru phi ung truoc: AmountAfterAdvanceFee = Amount - AdvanceFee
		/// </summary>
		[EnumTextValue("Fee")]
		[ColumnEnum("Fee", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Fee = 12,
		/// <summary>
		/// CashReceived : Thoi gian yeu cau bi tu choi
		/// </summary>
		[EnumTextValue("CashReceived")]
		[ColumnEnum("CashReceived", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CashReceived = 13,
		/// <summary>
		/// Status : Trang thai cua yeu cau
		/// </summary>
		[EnumTextValue("Status")]
		[ColumnEnum("Status", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Status = 14,
		/// <summary>
		/// TradeType : Ghi chú
		/// </summary>
		[EnumTextValue("TradeType")]
		[ColumnEnum("TradeType", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		TradeType = 15,
		/// <summary>
		/// BrokerId : Id c?a broker x? lý request.
		/// </summary>
		[EnumTextValue("BrokerID")]
		[ColumnEnum("BrokerID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		BrokerId = 16,
		/// <summary>
		/// BrokerName : Ngày gi? x? lý
		/// </summary>
		[EnumTextValue("BrokerName")]
		[ColumnEnum("BrokerName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		BrokerName = 17,
		/// <summary>
		/// Reason : Loai ung truoc
		/// </summary>
		[EnumTextValue("Reason")]
		[ColumnEnum("Reason", typeof(System.String), System.Data.DbType.String, false, false, true)]
		Reason = 18,
		/// <summary>
		/// ExecTime : 
		/// </summary>
		[EnumTextValue("ExecTime")]
		[ColumnEnum("ExecTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ExecTime = 19,
		/// <summary>
		/// Vat : 
		/// </summary>
		[EnumTextValue("VAT")]
		[ColumnEnum("VAT", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Vat = 20
	}//End enum

	#endregion CashAdvanceHistoryColumn Enum

} // end namespace
