using System;
using System.ComponentModel;

namespace ETradeOrders.Entities
{
	/// <summary>
	///		The data structure representation of the 'ConditionOrderDetail' table via interface.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	public interface IConditionOrderDetail 
	{
		/// <summary>			
		/// DetailId : Auto increase key
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "ConditionOrderDetail"</remarks>
		System.Int64 DetailId { get; set; }
				
		
		
		/// <summary>
		/// Volume : Volume putted at that day
		/// </summary>
		System.Int32  Volume  { get; set; }
		
		/// <summary>
		/// MatchedVolume : MatchedVolume at that day
		/// </summary>
		System.Int32  MatchedVolume  { get; set; }
		
		/// <summary>
		/// OrderStatus : Status of order (WAITING = 0, ACTIVED = 1, CANCELLED = 2,  EXPIRED = 3, DONE = 4)
		/// </summary>
		System.Int16?  OrderStatus  { get; set; }
		
		/// <summary>
		/// ConditionOrderID : Foreign key to ConditionOrder table
		/// </summary>
		System.Int64  ConditionOrderId  { get; set; }
		
		/// <summary>
		/// FISOrderID : FIS order id
		/// </summary>
		System.Int32?  FisOrderId  { get; set; }
		
		/// <summary>
		/// OrdRejReason : Order reject reason 
		/// 		///    00: MP order without contra-side 
		/// 		///    01: Illegal price spread 
		/// 		///    02: Incorrect volume for specified board 
		/// 		///    03: Illegal request - Market Closed 
		/// 		///    04: Incorrect Stock Symbol 
		/// 		///    05: Incorrect Firm 
		/// 		///    06: Incorrect Trader ID 
		/// 		///    07: Incorrect confirm number 
		/// 		///    08: Too late to perform requested action 
		/// 		///    09: Incorrect Reference Number 
		/// 		///    10: Incorrect Conditions 
		/// 		///    11: Trading halted in Stock 
		/// 		///    12: Incorrect Board 
		/// 		///    13: Security in DS - Missing Client ID 
		/// 		///    14: Incorrect Order Type 
		/// 		///    15: Incorrect Port / Client flag 
		/// 		///    16: Incorrect Request Code or Reply Code 
		/// 		///    17: Incorrect Side: must be Buy or Sell 
		/// 		///    18: Incorrect Order Number 
		/// 		///    19: Incorrect Time 
		/// 		///    20: Incorrect Date 
		/// 		///    21: Cannot do on Odd-Lot board 
		/// 		///    22: Incorrect Sub-Broker ID 
		/// 		///    23: Illegal Trustee ID 
		/// 		///    24: Security suspended 
		/// 		///    25: Missing P/C Flag 
		/// 		///    26: Missing Sub-Broker ID 
		/// 		///    27: No available room for Thai Trust Fund 
		/// 		///    28: Market in Intermission 
		/// 		///    29: Market Halted 
		/// 		///    30: Incorrect Published Volume 
		/// 		///    31: Changing Deal information disallowed 
		/// 		///    32: Publish Vol disallowed at this time 
		/// 		///    33: Trading disallowed for this stock 
		/// 		///    34: Incorrect price - above ceiling 
		/// 		///    35: Incorrect price - below floor 
		/// 		///    36: Put-Through price incorrect format 
		/// 		///    37: Cancel of automatch deal disallowed 
		/// 		///    38: Incorrect Volume for Put-Through deal 
		/// 		///    39: Incorrect Market Maker 
		/// 		///    40: Illegal Short Sales Order 
		/// 		///    41: Illegal Market ID 
		/// 		///    42: Illegal Message Type/Header 
		/// 		///    43: Illegal Message Length 
		/// 		///    71: Warning! Price over 10 % 
		/// 		///    81: Disapprove Order 
		/// 		///    82: Reject form FIS 
		/// 		///    99: Unidentified Error 
		/// </summary>
		System.Int32?  OrdRejReason  { get; set; }
		
		/// <summary>
		/// NumOfMatch : Number of matches
		/// </summary>
		System.Int32?  NumOfMatch  { get; set; }
		
		/// <summary>
		/// CancelledVol : Cancelled volume
		/// </summary>
		System.Int32?  CancelledVol  { get; set; }
		
		/// <summary>
		/// CreatedDateTime : Created date time
		/// </summary>
		System.DateTime  CreatedDateTime  { get; set; }
		
		/// <summary>
		/// UpdatedDateTime : Updated date time
		/// </summary>
		System.DateTime?  UpdatedDateTime  { get; set; }
		
		/// <summary>
		/// AvgPrice : Average price
		/// </summary>
		System.Decimal?  AvgPrice  { get; set; }
			
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		System.Object Clone();
		
		#region Data Properties

		#endregion Data Properties

	}
}


