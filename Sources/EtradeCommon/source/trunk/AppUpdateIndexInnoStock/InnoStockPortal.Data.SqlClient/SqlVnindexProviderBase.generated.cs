
/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlVnindexProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using InnoStockPortal.Entities;
using InnoStockPortal.Data;
using InnoStockPortal.Data.Bases;

#endregion

namespace InnoStockPortal.Data.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="Vnindex"/> entity.
	///</summary>
	public abstract partial class SqlVnindexProviderBase : VnindexProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlVnindexProviderBase"/> instance.
		/// </summary>
		public SqlVnindexProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlVnindexProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlVnindexProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_vnindexId">. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int32 _vnindexId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.vnindex_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@VnindexId", DbType.Int32, _vnindexId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(Vnindex)
					,_vnindexId);
                EntityManager.StopTracking(entityKey);
                
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of InnoStockPortal.Entities.Vnindex objects.</returns>
		public override TList<Vnindex> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<Vnindex>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.vnindex_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@VnindexId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@VnindexDate", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Open", DbType.Double, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Close", DbType.Double, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Change", DbType.Double, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Unchange", DbType.Double, DBNull.Value);
		database.AddInParameter(commandWrapper, "@High", DbType.Double, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Low", DbType.Double, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Up", DbType.Double, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Down", DbType.Double, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Average", DbType.Double, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Vol", DbType.Double, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Val", DbType.Double, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Attribute1", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Totaltrade", DbType.Double, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Attribute3", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ThitruongId", DbType.String, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Status", DbType.Int16, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Trans", DbType.Double, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("vnindex_id ") || clause.Trim().StartsWith("vnindex_id="))
				{
					database.SetParameterValue(commandWrapper, "@VnindexId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("vnindex_date ") || clause.Trim().StartsWith("vnindex_date="))
				{
					database.SetParameterValue(commandWrapper, "@VnindexDate", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("open ") || clause.Trim().StartsWith("open="))
				{
					database.SetParameterValue(commandWrapper, "@Open", 
						clause.Trim().Remove(0,4).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("close ") || clause.Trim().StartsWith("close="))
				{
					database.SetParameterValue(commandWrapper, "@Close", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("change ") || clause.Trim().StartsWith("change="))
				{
					database.SetParameterValue(commandWrapper, "@Change", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("unchange ") || clause.Trim().StartsWith("unchange="))
				{
					database.SetParameterValue(commandWrapper, "@Unchange", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("high ") || clause.Trim().StartsWith("high="))
				{
					database.SetParameterValue(commandWrapper, "@High", 
						clause.Trim().Remove(0,4).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("low ") || clause.Trim().StartsWith("low="))
				{
					database.SetParameterValue(commandWrapper, "@Low", 
						clause.Trim().Remove(0,3).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("up ") || clause.Trim().StartsWith("up="))
				{
					database.SetParameterValue(commandWrapper, "@Up", 
						clause.Trim().Remove(0,2).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("down ") || clause.Trim().StartsWith("down="))
				{
					database.SetParameterValue(commandWrapper, "@Down", 
						clause.Trim().Remove(0,4).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("average ") || clause.Trim().StartsWith("average="))
				{
					database.SetParameterValue(commandWrapper, "@Average", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("vol ") || clause.Trim().StartsWith("vol="))
				{
					database.SetParameterValue(commandWrapper, "@Vol", 
						clause.Trim().Remove(0,3).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("val ") || clause.Trim().StartsWith("val="))
				{
					database.SetParameterValue(commandWrapper, "@Val", 
						clause.Trim().Remove(0,3).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("attribute1 ") || clause.Trim().StartsWith("attribute1="))
				{
					database.SetParameterValue(commandWrapper, "@Attribute1", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("totaltrade ") || clause.Trim().StartsWith("totaltrade="))
				{
					database.SetParameterValue(commandWrapper, "@Totaltrade", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("attribute3 ") || clause.Trim().StartsWith("attribute3="))
				{
					database.SetParameterValue(commandWrapper, "@Attribute3", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("thitruong_id ") || clause.Trim().StartsWith("thitruong_id="))
				{
					database.SetParameterValue(commandWrapper, "@ThitruongId", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("status ") || clause.Trim().StartsWith("status="))
				{
					database.SetParameterValue(commandWrapper, "@Status", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("trans ") || clause.Trim().StartsWith("trans="))
				{
					database.SetParameterValue(commandWrapper, "@Trans", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<Vnindex> rows = new TList<Vnindex>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of InnoStockPortal.Entities.Vnindex objects.</returns>
		public override TList<Vnindex> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.vnindex_Find_Dynamic", typeof(VnindexColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<Vnindex> rows = new TList<Vnindex>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of InnoStockPortal.Entities.Vnindex objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<Vnindex> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.vnindex_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<Vnindex> rows = new TList<Vnindex>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of InnoStockPortal.Entities.Vnindex objects.</returns>
		public override TList<Vnindex> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.vnindex_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<Vnindex> rows = new TList<Vnindex>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions
	#endregion
	
		#region Get By Index Functions

		#region GetByVnindexId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_vnindex index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_vnindexId"></param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="InnoStockPortal.Entities.Vnindex"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override InnoStockPortal.Entities.Vnindex GetByVnindexId(TransactionManager transactionManager, System.Int32 _vnindexId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.vnindex_GetByVnindexId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@VnindexId", DbType.Int32, _vnindexId);
			
			IDataReader reader = null;
			TList<Vnindex> tmp = new TList<Vnindex>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByVnindexId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByVnindexId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the InnoStockPortal.Entities.Vnindex object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<InnoStockPortal.Entities.Vnindex> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "vnindex";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("VNINDEX_ID", typeof(System.Int32));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("VNINDEX_DATE", typeof(System.DateTime));
			col1.AllowDBNull = true;		
			DataColumn col2 = dataTable.Columns.Add("OPEN", typeof(System.Double));
			col2.AllowDBNull = true;		
			DataColumn col3 = dataTable.Columns.Add("CLOSE", typeof(System.Double));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("CHANGE", typeof(System.Double));
			col4.AllowDBNull = true;		
			DataColumn col5 = dataTable.Columns.Add("UNCHANGE", typeof(System.Double));
			col5.AllowDBNull = true;		
			DataColumn col6 = dataTable.Columns.Add("HIGH", typeof(System.Double));
			col6.AllowDBNull = true;		
			DataColumn col7 = dataTable.Columns.Add("LOW", typeof(System.Double));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("UP", typeof(System.Double));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("DOWN", typeof(System.Double));
			col9.AllowDBNull = true;		
			DataColumn col10 = dataTable.Columns.Add("AVERAGE", typeof(System.Double));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("VOL", typeof(System.Double));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("VAL", typeof(System.Double));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("ATTRIBUTE1", typeof(System.String));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("TOTALTRADE", typeof(System.Double));
			col14.AllowDBNull = true;		
			DataColumn col15 = dataTable.Columns.Add("ATTRIBUTE3", typeof(System.DateTime));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("THITRUONG_ID", typeof(System.String));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("STATUS", typeof(System.Int16));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("TRANS", typeof(System.Double));
			col18.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("VNINDEX_ID", "VNINDEX_ID");
			bulkCopy.ColumnMappings.Add("VNINDEX_DATE", "VNINDEX_DATE");
			bulkCopy.ColumnMappings.Add("OPEN", "OPEN");
			bulkCopy.ColumnMappings.Add("CLOSE", "CLOSE");
			bulkCopy.ColumnMappings.Add("CHANGE", "CHANGE");
			bulkCopy.ColumnMappings.Add("UNCHANGE", "UNCHANGE");
			bulkCopy.ColumnMappings.Add("HIGH", "HIGH");
			bulkCopy.ColumnMappings.Add("LOW", "LOW");
			bulkCopy.ColumnMappings.Add("UP", "UP");
			bulkCopy.ColumnMappings.Add("DOWN", "DOWN");
			bulkCopy.ColumnMappings.Add("AVERAGE", "AVERAGE");
			bulkCopy.ColumnMappings.Add("VOL", "VOL");
			bulkCopy.ColumnMappings.Add("VAL", "VAL");
			bulkCopy.ColumnMappings.Add("ATTRIBUTE1", "ATTRIBUTE1");
			bulkCopy.ColumnMappings.Add("TOTALTRADE", "TOTALTRADE");
			bulkCopy.ColumnMappings.Add("ATTRIBUTE3", "ATTRIBUTE3");
			bulkCopy.ColumnMappings.Add("THITRUONG_ID", "THITRUONG_ID");
			bulkCopy.ColumnMappings.Add("STATUS", "STATUS");
			bulkCopy.ColumnMappings.Add("TRANS", "TRANS");
			
			foreach(InnoStockPortal.Entities.Vnindex entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["VNINDEX_ID"] = entity.VnindexId;
							
				
					row["VNINDEX_DATE"] = entity.VnindexDate.HasValue ? (object) entity.VnindexDate  : System.DBNull.Value;
							
				
					row["OPEN"] = entity.Open.HasValue ? (object) entity.Open  : System.DBNull.Value;
							
				
					row["CLOSE"] = entity.Close.HasValue ? (object) entity.Close  : System.DBNull.Value;
							
				
					row["CHANGE"] = entity.Change.HasValue ? (object) entity.Change  : System.DBNull.Value;
							
				
					row["UNCHANGE"] = entity.Unchange.HasValue ? (object) entity.Unchange  : System.DBNull.Value;
							
				
					row["HIGH"] = entity.High.HasValue ? (object) entity.High  : System.DBNull.Value;
							
				
					row["LOW"] = entity.Low.HasValue ? (object) entity.Low  : System.DBNull.Value;
							
				
					row["UP"] = entity.Up.HasValue ? (object) entity.Up  : System.DBNull.Value;
							
				
					row["DOWN"] = entity.Down.HasValue ? (object) entity.Down  : System.DBNull.Value;
							
				
					row["AVERAGE"] = entity.Average.HasValue ? (object) entity.Average  : System.DBNull.Value;
							
				
					row["VOL"] = entity.Vol.HasValue ? (object) entity.Vol  : System.DBNull.Value;
							
				
					row["VAL"] = entity.Val.HasValue ? (object) entity.Val  : System.DBNull.Value;
							
				
					row["ATTRIBUTE1"] = entity.Attribute1;
							
				
					row["TOTALTRADE"] = entity.Totaltrade.HasValue ? (object) entity.Totaltrade  : System.DBNull.Value;
							
				
					row["ATTRIBUTE3"] = entity.Attribute3.HasValue ? (object) entity.Attribute3  : System.DBNull.Value;
							
				
					row["THITRUONG_ID"] = entity.ThitruongId;
							
				
					row["STATUS"] = entity.Status.HasValue ? (object) entity.Status  : System.DBNull.Value;
							
				
					row["TRANS"] = entity.Trans.HasValue ? (object) entity.Trans  : System.DBNull.Value;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(InnoStockPortal.Entities.Vnindex entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a InnoStockPortal.Entities.Vnindex object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">InnoStockPortal.Entities.Vnindex object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the InnoStockPortal.Entities.Vnindex object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, InnoStockPortal.Entities.Vnindex entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.vnindex_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@VnindexId", DbType.Int32, 4);
			database.AddInParameter(commandWrapper, "@VnindexDate", DbType.DateTime, (entity.VnindexDate.HasValue ? (object) entity.VnindexDate  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Open", DbType.Double, (entity.Open.HasValue ? (object) entity.Open  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Close", DbType.Double, (entity.Close.HasValue ? (object) entity.Close  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Change", DbType.Double, (entity.Change.HasValue ? (object) entity.Change  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Unchange", DbType.Double, (entity.Unchange.HasValue ? (object) entity.Unchange  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@High", DbType.Double, (entity.High.HasValue ? (object) entity.High  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Low", DbType.Double, (entity.Low.HasValue ? (object) entity.Low  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Up", DbType.Double, (entity.Up.HasValue ? (object) entity.Up  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Down", DbType.Double, (entity.Down.HasValue ? (object) entity.Down  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Average", DbType.Double, (entity.Average.HasValue ? (object) entity.Average  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Vol", DbType.Double, (entity.Vol.HasValue ? (object) entity.Vol  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Val", DbType.Double, (entity.Val.HasValue ? (object) entity.Val  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Attribute1", DbType.String, entity.Attribute1 );
			database.AddInParameter(commandWrapper, "@Totaltrade", DbType.Double, (entity.Totaltrade.HasValue ? (object) entity.Totaltrade  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Attribute3", DbType.DateTime, (entity.Attribute3.HasValue ? (object) entity.Attribute3  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ThitruongId", DbType.String, entity.ThitruongId );
			database.AddInParameter(commandWrapper, "@Status", DbType.Int16, (entity.Status.HasValue ? (object) entity.Status  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Trans", DbType.Double, (entity.Trans.HasValue ? (object) entity.Trans  : System.DBNull.Value));
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _vnindexId = database.GetParameterValue(commandWrapper, "@VnindexId");
			entity.VnindexId = (System.Int32)_vnindexId;
			
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">InnoStockPortal.Entities.Vnindex object to update.</param>
		/// <remarks>
		///		After updating the datasource, the InnoStockPortal.Entities.Vnindex object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, InnoStockPortal.Entities.Vnindex entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.vnindex_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@VnindexId", DbType.Int32, entity.VnindexId );
			database.AddInParameter(commandWrapper, "@VnindexDate", DbType.DateTime, (entity.VnindexDate.HasValue ? (object) entity.VnindexDate : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Open", DbType.Double, (entity.Open.HasValue ? (object) entity.Open : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Close", DbType.Double, (entity.Close.HasValue ? (object) entity.Close : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Change", DbType.Double, (entity.Change.HasValue ? (object) entity.Change : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Unchange", DbType.Double, (entity.Unchange.HasValue ? (object) entity.Unchange : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@High", DbType.Double, (entity.High.HasValue ? (object) entity.High : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Low", DbType.Double, (entity.Low.HasValue ? (object) entity.Low : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Up", DbType.Double, (entity.Up.HasValue ? (object) entity.Up : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Down", DbType.Double, (entity.Down.HasValue ? (object) entity.Down : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Average", DbType.Double, (entity.Average.HasValue ? (object) entity.Average : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Vol", DbType.Double, (entity.Vol.HasValue ? (object) entity.Vol : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Val", DbType.Double, (entity.Val.HasValue ? (object) entity.Val : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Attribute1", DbType.String, entity.Attribute1 );
			database.AddInParameter(commandWrapper, "@Totaltrade", DbType.Double, (entity.Totaltrade.HasValue ? (object) entity.Totaltrade : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Attribute3", DbType.DateTime, (entity.Attribute3.HasValue ? (object) entity.Attribute3 : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ThitruongId", DbType.String, entity.ThitruongId );
			database.AddInParameter(commandWrapper, "@Status", DbType.Int16, (entity.Status.HasValue ? (object) entity.Status : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Trans", DbType.Double, (entity.Trans.HasValue ? (object) entity.Trans : System.DBNull.Value) );
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
            {
                EntityManager.StopTracking(entity.EntityTrackingKey);				
            }
			
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	
		#endregion
	}//end class
} // end namespace
