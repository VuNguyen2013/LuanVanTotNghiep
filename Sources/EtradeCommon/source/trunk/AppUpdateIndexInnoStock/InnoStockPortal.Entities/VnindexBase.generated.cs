
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Vnindex.cs instead.
*/

#region using directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

using InnoStockPortal.Entities.Validation;
#endregion

namespace InnoStockPortal.Entities
{
	///<summary>
	/// An object representation of the 'vnindex' table. [No description found the database]	
	///</summary>
	[Serializable]
	[DataObject, CLSCompliant(true)]
	public abstract partial class VnindexBase : EntityBase, IVnindex, IEntityId<VnindexKey>, System.IComparable, System.ICloneable, ICloneableEx, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private VnindexEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private VnindexEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private VnindexEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Vnindex> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event VnindexEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event VnindexEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="VnindexBase"/> instance.
		///</summary>
		public VnindexBase()
		{
			this.entityData = new VnindexEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="VnindexBase"/> instance.
		///</summary>
		///<param name="_vnindexDate"></param>
		///<param name="_open"></param>
		///<param name="_close"></param>
		///<param name="_change"></param>
		///<param name="_unchange"></param>
		///<param name="_high"></param>
		///<param name="_low"></param>
		///<param name="_up"></param>
		///<param name="_down"></param>
		///<param name="_average"></param>
		///<param name="_vol"></param>
		///<param name="_val"></param>
		///<param name="_attribute1"></param>
		///<param name="_totaltrade"></param>
		///<param name="_attribute3"></param>
		///<param name="_thitruongId"></param>
		///<param name="_status"></param>
		///<param name="_trans"></param>
		public VnindexBase(System.DateTime? _vnindexDate, System.Double? _open, System.Double? _close, 
			System.Double? _change, System.Double? _unchange, System.Double? _high, System.Double? _low, System.Double? _up, 
			System.Double? _down, System.Double? _average, System.Double? _vol, System.Double? _val, System.String _attribute1, 
			System.Double? _totaltrade, System.DateTime? _attribute3, System.String _thitruongId, System.Int16? _status, 
			System.Double? _trans)
		{
			this.entityData = new VnindexEntityData();
			this.backupData = null;

			this.VnindexDate = _vnindexDate;
			this.Open = _open;
			this.Close = _close;
			this.Change = _change;
			this.Unchange = _unchange;
			this.High = _high;
			this.Low = _low;
			this.Up = _up;
			this.Down = _down;
			this.Average = _average;
			this.Vol = _vol;
			this.Val = _val;
			this.Attribute1 = _attribute1;
			this.Totaltrade = _totaltrade;
			this.Attribute3 = _attribute3;
			this.ThitruongId = _thitruongId;
			this.Status = _status;
			this.Trans = _trans;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Vnindex"/> instance.
		///</summary>
		///<param name="_vnindexDate"></param>
		///<param name="_open"></param>
		///<param name="_close"></param>
		///<param name="_change"></param>
		///<param name="_unchange"></param>
		///<param name="_high"></param>
		///<param name="_low"></param>
		///<param name="_up"></param>
		///<param name="_down"></param>
		///<param name="_average"></param>
		///<param name="_vol"></param>
		///<param name="_val"></param>
		///<param name="_attribute1"></param>
		///<param name="_totaltrade"></param>
		///<param name="_attribute3"></param>
		///<param name="_thitruongId"></param>
		///<param name="_status"></param>
		///<param name="_trans"></param>
		public static Vnindex CreateVnindex(System.DateTime? _vnindexDate, System.Double? _open, System.Double? _close, 
			System.Double? _change, System.Double? _unchange, System.Double? _high, System.Double? _low, System.Double? _up, 
			System.Double? _down, System.Double? _average, System.Double? _vol, System.Double? _val, System.String _attribute1, 
			System.Double? _totaltrade, System.DateTime? _attribute3, System.String _thitruongId, System.Int16? _status, 
			System.Double? _trans)
		{
			Vnindex newVnindex = new Vnindex();
			newVnindex.VnindexDate = _vnindexDate;
			newVnindex.Open = _open;
			newVnindex.Close = _close;
			newVnindex.Change = _change;
			newVnindex.Unchange = _unchange;
			newVnindex.High = _high;
			newVnindex.Low = _low;
			newVnindex.Up = _up;
			newVnindex.Down = _down;
			newVnindex.Average = _average;
			newVnindex.Vol = _vol;
			newVnindex.Val = _val;
			newVnindex.Attribute1 = _attribute1;
			newVnindex.Totaltrade = _totaltrade;
			newVnindex.Attribute3 = _attribute3;
			newVnindex.ThitruongId = _thitruongId;
			newVnindex.Status = _status;
			newVnindex.Trans = _trans;
			return newVnindex;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the VnindexId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		
		




		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public override System.Int32 VnindexId
		{
			get
			{
				return this.entityData.VnindexId; 
			}
			
			set
			{
				if (this.entityData.VnindexId == value)
					return;
				
                OnPropertyChanging("VnindexId");                    
				OnColumnChanging(VnindexColumn.VnindexId, this.entityData.VnindexId);
				this.entityData.VnindexId = value;
				this.EntityId.VnindexId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VnindexColumn.VnindexId, this.entityData.VnindexId);
				OnPropertyChanged("VnindexId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the VnindexDate property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsVnindexDateNull() and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public override System.DateTime? VnindexDate
		{
			get
			{
				return this.entityData.VnindexDate; 
			}
			
			set
			{
				if (this.entityData.VnindexDate == value)
					return;
				
                OnPropertyChanging("VnindexDate");                    
				OnColumnChanging(VnindexColumn.VnindexDate, this.entityData.VnindexDate);
				this.entityData.VnindexDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VnindexColumn.VnindexDate, this.entityData.VnindexDate);
				OnPropertyChanged("VnindexDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Open property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsOpenNull() and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public override System.Double? Open
		{
			get
			{
				return this.entityData.Open; 
			}
			
			set
			{
				if (this.entityData.Open == value)
					return;
				
                OnPropertyChanging("Open");                    
				OnColumnChanging(VnindexColumn.Open, this.entityData.Open);
				this.entityData.Open = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VnindexColumn.Open, this.entityData.Open);
				OnPropertyChanged("Open");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Close property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsCloseNull() and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public override System.Double? Close
		{
			get
			{
				return this.entityData.Close; 
			}
			
			set
			{
				if (this.entityData.Close == value)
					return;
				
                OnPropertyChanging("Close");                    
				OnColumnChanging(VnindexColumn.Close, this.entityData.Close);
				this.entityData.Close = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VnindexColumn.Close, this.entityData.Close);
				OnPropertyChanged("Close");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Change property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsChangeNull() and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public override System.Double? Change
		{
			get
			{
				return this.entityData.Change; 
			}
			
			set
			{
				if (this.entityData.Change == value)
					return;
				
                OnPropertyChanging("Change");                    
				OnColumnChanging(VnindexColumn.Change, this.entityData.Change);
				this.entityData.Change = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VnindexColumn.Change, this.entityData.Change);
				OnPropertyChanged("Change");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Unchange property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsUnchangeNull() and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public override System.Double? Unchange
		{
			get
			{
				return this.entityData.Unchange; 
			}
			
			set
			{
				if (this.entityData.Unchange == value)
					return;
				
                OnPropertyChanging("Unchange");                    
				OnColumnChanging(VnindexColumn.Unchange, this.entityData.Unchange);
				this.entityData.Unchange = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VnindexColumn.Unchange, this.entityData.Unchange);
				OnPropertyChanged("Unchange");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the High property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsHighNull() and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public override System.Double? High
		{
			get
			{
				return this.entityData.High; 
			}
			
			set
			{
				if (this.entityData.High == value)
					return;
				
                OnPropertyChanging("High");                    
				OnColumnChanging(VnindexColumn.High, this.entityData.High);
				this.entityData.High = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VnindexColumn.High, this.entityData.High);
				OnPropertyChanged("High");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Low property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsLowNull() and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public override System.Double? Low
		{
			get
			{
				return this.entityData.Low; 
			}
			
			set
			{
				if (this.entityData.Low == value)
					return;
				
                OnPropertyChanging("Low");                    
				OnColumnChanging(VnindexColumn.Low, this.entityData.Low);
				this.entityData.Low = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VnindexColumn.Low, this.entityData.Low);
				OnPropertyChanged("Low");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Up property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsUpNull() and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public override System.Double? Up
		{
			get
			{
				return this.entityData.Up; 
			}
			
			set
			{
				if (this.entityData.Up == value)
					return;
				
                OnPropertyChanging("Up");                    
				OnColumnChanging(VnindexColumn.Up, this.entityData.Up);
				this.entityData.Up = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VnindexColumn.Up, this.entityData.Up);
				OnPropertyChanged("Up");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Down property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsDownNull() and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public override System.Double? Down
		{
			get
			{
				return this.entityData.Down; 
			}
			
			set
			{
				if (this.entityData.Down == value)
					return;
				
                OnPropertyChanging("Down");                    
				OnColumnChanging(VnindexColumn.Down, this.entityData.Down);
				this.entityData.Down = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VnindexColumn.Down, this.entityData.Down);
				OnPropertyChanged("Down");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Average property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsAverageNull() and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public override System.Double? Average
		{
			get
			{
				return this.entityData.Average; 
			}
			
			set
			{
				if (this.entityData.Average == value)
					return;
				
                OnPropertyChanging("Average");                    
				OnColumnChanging(VnindexColumn.Average, this.entityData.Average);
				this.entityData.Average = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VnindexColumn.Average, this.entityData.Average);
				OnPropertyChanged("Average");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Vol property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsVolNull() and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public override System.Double? Vol
		{
			get
			{
				return this.entityData.Vol; 
			}
			
			set
			{
				if (this.entityData.Vol == value)
					return;
				
                OnPropertyChanging("Vol");                    
				OnColumnChanging(VnindexColumn.Vol, this.entityData.Vol);
				this.entityData.Vol = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VnindexColumn.Vol, this.entityData.Vol);
				OnPropertyChanged("Vol");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Val property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsValNull() and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public override System.Double? Val
		{
			get
			{
				return this.entityData.Val; 
			}
			
			set
			{
				if (this.entityData.Val == value)
					return;
				
                OnPropertyChanging("Val");                    
				OnColumnChanging(VnindexColumn.Val, this.entityData.Val);
				this.entityData.Val = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VnindexColumn.Val, this.entityData.Val);
				OnPropertyChanged("Val");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Attribute1 property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public override System.String Attribute1
		{
			get
			{
				return this.entityData.Attribute1; 
			}
			
			set
			{
				if (this.entityData.Attribute1 == value)
					return;
				
                OnPropertyChanging("Attribute1");                    
				OnColumnChanging(VnindexColumn.Attribute1, this.entityData.Attribute1);
				this.entityData.Attribute1 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VnindexColumn.Attribute1, this.entityData.Attribute1);
				OnPropertyChanged("Attribute1");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Totaltrade property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsTotaltradeNull() and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public override System.Double? Totaltrade
		{
			get
			{
				return this.entityData.Totaltrade; 
			}
			
			set
			{
				if (this.entityData.Totaltrade == value)
					return;
				
                OnPropertyChanging("Totaltrade");                    
				OnColumnChanging(VnindexColumn.Totaltrade, this.entityData.Totaltrade);
				this.entityData.Totaltrade = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VnindexColumn.Totaltrade, this.entityData.Totaltrade);
				OnPropertyChanged("Totaltrade");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Attribute3 property. 
		///		
		/// </summary>
		/// <value>This type is smalldatetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsAttribute3Null() and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public override System.DateTime? Attribute3
		{
			get
			{
				return this.entityData.Attribute3; 
			}
			
			set
			{
				if (this.entityData.Attribute3 == value)
					return;
				
                OnPropertyChanging("Attribute3");                    
				OnColumnChanging(VnindexColumn.Attribute3, this.entityData.Attribute3);
				this.entityData.Attribute3 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VnindexColumn.Attribute3, this.entityData.Attribute3);
				OnPropertyChanged("Attribute3");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ThitruongId property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public override System.String ThitruongId
		{
			get
			{
				return this.entityData.ThitruongId; 
			}
			
			set
			{
				if (this.entityData.ThitruongId == value)
					return;
				
                OnPropertyChanging("ThitruongId");                    
				OnColumnChanging(VnindexColumn.ThitruongId, this.entityData.ThitruongId);
				this.entityData.ThitruongId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VnindexColumn.ThitruongId, this.entityData.ThitruongId);
				OnPropertyChanged("ThitruongId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Status property. 
		///		
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsStatusNull() and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public override System.Int16? Status
		{
			get
			{
				return this.entityData.Status; 
			}
			
			set
			{
				if (this.entityData.Status == value)
					return;
				
                OnPropertyChanging("Status");                    
				OnColumnChanging(VnindexColumn.Status, this.entityData.Status);
				this.entityData.Status = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VnindexColumn.Status, this.entityData.Status);
				OnPropertyChanged("Status");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Trans property. 
		///		
		/// </summary>
		/// <value>This type is float.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0f. It is up to the developer
		/// to check the value of IsTransNull() and perform business logic appropriately.
		/// </remarks>
		
		




		[DescriptionAttribute(@""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public override System.Double? Trans
		{
			get
			{
				return this.entityData.Trans; 
			}
			
			set
			{
				if (this.entityData.Trans == value)
					return;
				
                OnPropertyChanging("Trans");                    
				OnColumnChanging(VnindexColumn.Trans, this.entityData.Trans);
				this.entityData.Trans = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(VnindexColumn.Trans, this.entityData.Trans);
				OnPropertyChanged("Trans");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("Attribute1", "Attribute1", 255));
			ValidationRules.AddRule( CommonRules.StringMaxLength, 
				new CommonRules.MaxLengthRuleArgs("ThitruongId", "Thitruong Id", 30));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "vnindex"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"VNINDEX_ID", "VNINDEX_DATE", "OPEN", "CLOSE", "CHANGE", "UNCHANGE", "HIGH", "LOW", "UP", "DOWN", "AVERAGE", "VOL", "VAL", "ATTRIBUTE1", "TOTALTRADE", "ATTRIBUTE3", "THITRUONG_ID", "STATUS", "TRANS"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as VnindexEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Vnindex) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Vnindex>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Vnindex);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Vnindex Entity 
		///</summary>
		protected virtual Vnindex Copy(IDictionary existingCopies)
		{
			if (existingCopies == null)
			{
				// This is the root of the tree to be copied!
				existingCopies = new Hashtable();
			}

			//shallow copy entity
			Vnindex copy = new Vnindex();
			existingCopies.Add(this, copy);
			copy.SuppressEntityEvents = true;
				copy.VnindexId = this.VnindexId;
				copy.VnindexDate = this.VnindexDate;
				copy.Open = this.Open;
				copy.Close = this.Close;
				copy.Change = this.Change;
				copy.Unchange = this.Unchange;
				copy.High = this.High;
				copy.Low = this.Low;
				copy.Up = this.Up;
				copy.Down = this.Down;
				copy.Average = this.Average;
				copy.Vol = this.Vol;
				copy.Val = this.Val;
				copy.Attribute1 = this.Attribute1;
				copy.Totaltrade = this.Totaltrade;
				copy.Attribute3 = this.Attribute3;
				copy.ThitruongId = this.ThitruongId;
				copy.Status = this.Status;
				copy.Trans = this.Trans;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}		
		
		
		
		///<summary>
		///  Returns a Typed Vnindex Entity 
		///</summary>
		public virtual Vnindex Copy()
		{
			return this.Copy(null);	
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy(null);
		}
		
		///<summary>
		/// ICloneableEx.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone(IDictionary existingCopies)
		{
			return this.Copy(existingCopies);
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x, IDictionary existingCopies)
		{
			if (x == null)
				return null;
			
			if (x is ICloneableEx)
			{
				// Return a deep copy of the object
				return ((ICloneableEx)x).Clone(existingCopies);
			}
			else if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable or IClonableEx Interface.");
		}
		
		
		///<summary>
		///  Returns a Typed Vnindex Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Vnindex DeepCopy()
		{
			return EntityHelper.Clone<Vnindex>(this as Vnindex);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as VnindexEntityData;
			}
			else
			{
				//Since this had no _originalData, then just reset the entityData with a new one.  entityData cannot be null.
				this.entityData = new VnindexEntityData();
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as VnindexEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(VnindexColumn column)
		{
			switch(column)
			{
					case VnindexColumn.VnindexId:
					return entityData.VnindexId != _originalData.VnindexId;
					case VnindexColumn.VnindexDate:
					return entityData.VnindexDate != _originalData.VnindexDate;
					case VnindexColumn.Open:
					return entityData.Open != _originalData.Open;
					case VnindexColumn.Close:
					return entityData.Close != _originalData.Close;
					case VnindexColumn.Change:
					return entityData.Change != _originalData.Change;
					case VnindexColumn.Unchange:
					return entityData.Unchange != _originalData.Unchange;
					case VnindexColumn.High:
					return entityData.High != _originalData.High;
					case VnindexColumn.Low:
					return entityData.Low != _originalData.Low;
					case VnindexColumn.Up:
					return entityData.Up != _originalData.Up;
					case VnindexColumn.Down:
					return entityData.Down != _originalData.Down;
					case VnindexColumn.Average:
					return entityData.Average != _originalData.Average;
					case VnindexColumn.Vol:
					return entityData.Vol != _originalData.Vol;
					case VnindexColumn.Val:
					return entityData.Val != _originalData.Val;
					case VnindexColumn.Attribute1:
					return entityData.Attribute1 != _originalData.Attribute1;
					case VnindexColumn.Totaltrade:
					return entityData.Totaltrade != _originalData.Totaltrade;
					case VnindexColumn.Attribute3:
					return entityData.Attribute3 != _originalData.Attribute3;
					case VnindexColumn.ThitruongId:
					return entityData.ThitruongId != _originalData.ThitruongId;
					case VnindexColumn.Status:
					return entityData.Status != _originalData.Status;
					case VnindexColumn.Trans:
					return entityData.Trans != _originalData.Trans;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="columnName">The column name.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public override bool IsPropertyChanged(string columnName)
		{
			return 	IsPropertyChanged(EntityHelper.GetEnumValue< VnindexColumn >(columnName));
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if data has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.VnindexId != _originalData.VnindexId;
			result = result || entityData.VnindexDate != _originalData.VnindexDate;
			result = result || entityData.Open != _originalData.Open;
			result = result || entityData.Close != _originalData.Close;
			result = result || entityData.Change != _originalData.Change;
			result = result || entityData.Unchange != _originalData.Unchange;
			result = result || entityData.High != _originalData.High;
			result = result || entityData.Low != _originalData.Low;
			result = result || entityData.Up != _originalData.Up;
			result = result || entityData.Down != _originalData.Down;
			result = result || entityData.Average != _originalData.Average;
			result = result || entityData.Vol != _originalData.Vol;
			result = result || entityData.Val != _originalData.Val;
			result = result || entityData.Attribute1 != _originalData.Attribute1;
			result = result || entityData.Totaltrade != _originalData.Totaltrade;
			result = result || entityData.Attribute3 != _originalData.Attribute3;
			result = result || entityData.ThitruongId != _originalData.ThitruongId;
			result = result || entityData.Status != _originalData.Status;
			result = result || entityData.Trans != _originalData.Trans;
			return result;
		}	
		
		///<summary>
		///  Returns a Vnindex Entity with the original data.
		///</summary>
		public Vnindex GetOriginalEntity()
		{
			if (_originalData != null)
				return CreateVnindex(
				_originalData.VnindexDate,
				_originalData.Open,
				_originalData.Close,
				_originalData.Change,
				_originalData.Unchange,
				_originalData.High,
				_originalData.Low,
				_originalData.Up,
				_originalData.Down,
				_originalData.Average,
				_originalData.Vol,
				_originalData.Val,
				_originalData.Attribute1,
				_originalData.Totaltrade,
				_originalData.Attribute3,
				_originalData.ThitruongId,
				_originalData.Status,
				_originalData.Trans
				);
				
			return (Vnindex)this.Clone();
		}
		#endregion
	
	#region Value Semantics Instance Equality
        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object using value semantics.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="VnindexBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			// Cast exception if Object1 is null or DbNull
			if (Object1 != null && Object1 != DBNull.Value && Object1 is VnindexBase)
				return ValueEquals(this, (VnindexBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="VnindexBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.VnindexId.GetHashCode() ^ 
					((this.VnindexDate == null) ? string.Empty : this.VnindexDate.ToString()).GetHashCode() ^ 
					((this.Open == null) ? string.Empty : this.Open.ToString()).GetHashCode() ^ 
					((this.Close == null) ? string.Empty : this.Close.ToString()).GetHashCode() ^ 
					((this.Change == null) ? string.Empty : this.Change.ToString()).GetHashCode() ^ 
					((this.Unchange == null) ? string.Empty : this.Unchange.ToString()).GetHashCode() ^ 
					((this.High == null) ? string.Empty : this.High.ToString()).GetHashCode() ^ 
					((this.Low == null) ? string.Empty : this.Low.ToString()).GetHashCode() ^ 
					((this.Up == null) ? string.Empty : this.Up.ToString()).GetHashCode() ^ 
					((this.Down == null) ? string.Empty : this.Down.ToString()).GetHashCode() ^ 
					((this.Average == null) ? string.Empty : this.Average.ToString()).GetHashCode() ^ 
					((this.Vol == null) ? string.Empty : this.Vol.ToString()).GetHashCode() ^ 
					((this.Val == null) ? string.Empty : this.Val.ToString()).GetHashCode() ^ 
					((this.Attribute1 == null) ? string.Empty : this.Attribute1.ToString()).GetHashCode() ^ 
					((this.Totaltrade == null) ? string.Empty : this.Totaltrade.ToString()).GetHashCode() ^ 
					((this.Attribute3 == null) ? string.Empty : this.Attribute3.ToString()).GetHashCode() ^ 
					((this.ThitruongId == null) ? string.Empty : this.ThitruongId.ToString()).GetHashCode() ^ 
					((this.Status == null) ? string.Empty : this.Status.ToString()).GetHashCode() ^ 
					((this.Trans == null) ? string.Empty : this.Trans.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object using value semantics.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="VnindexBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(VnindexBase toObject)
		{
			if (toObject == null)
				return false;
			return ValueEquals(this, toObject);
		}
		#endregion
		
		///<summary>
		/// Determines whether the specified <see cref="VnindexBase"/> instances are considered equal using value semantics.
		///</summary>
		///<param name="Object1">The first <see cref="VnindexBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="VnindexBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool ValueEquals(VnindexBase Object1, VnindexBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.VnindexId != Object2.VnindexId)
				equal = false;
			if ( Object1.VnindexDate != null && Object2.VnindexDate != null )
			{
				if (Object1.VnindexDate != Object2.VnindexDate)
					equal = false;
			}
			else if (Object1.VnindexDate == null ^ Object2.VnindexDate == null )
			{
				equal = false;
			}
			if ( Object1.Open != null && Object2.Open != null )
			{
				if (Object1.Open != Object2.Open)
					equal = false;
			}
			else if (Object1.Open == null ^ Object2.Open == null )
			{
				equal = false;
			}
			if ( Object1.Close != null && Object2.Close != null )
			{
				if (Object1.Close != Object2.Close)
					equal = false;
			}
			else if (Object1.Close == null ^ Object2.Close == null )
			{
				equal = false;
			}
			if ( Object1.Change != null && Object2.Change != null )
			{
				if (Object1.Change != Object2.Change)
					equal = false;
			}
			else if (Object1.Change == null ^ Object2.Change == null )
			{
				equal = false;
			}
			if ( Object1.Unchange != null && Object2.Unchange != null )
			{
				if (Object1.Unchange != Object2.Unchange)
					equal = false;
			}
			else if (Object1.Unchange == null ^ Object2.Unchange == null )
			{
				equal = false;
			}
			if ( Object1.High != null && Object2.High != null )
			{
				if (Object1.High != Object2.High)
					equal = false;
			}
			else if (Object1.High == null ^ Object2.High == null )
			{
				equal = false;
			}
			if ( Object1.Low != null && Object2.Low != null )
			{
				if (Object1.Low != Object2.Low)
					equal = false;
			}
			else if (Object1.Low == null ^ Object2.Low == null )
			{
				equal = false;
			}
			if ( Object1.Up != null && Object2.Up != null )
			{
				if (Object1.Up != Object2.Up)
					equal = false;
			}
			else if (Object1.Up == null ^ Object2.Up == null )
			{
				equal = false;
			}
			if ( Object1.Down != null && Object2.Down != null )
			{
				if (Object1.Down != Object2.Down)
					equal = false;
			}
			else if (Object1.Down == null ^ Object2.Down == null )
			{
				equal = false;
			}
			if ( Object1.Average != null && Object2.Average != null )
			{
				if (Object1.Average != Object2.Average)
					equal = false;
			}
			else if (Object1.Average == null ^ Object2.Average == null )
			{
				equal = false;
			}
			if ( Object1.Vol != null && Object2.Vol != null )
			{
				if (Object1.Vol != Object2.Vol)
					equal = false;
			}
			else if (Object1.Vol == null ^ Object2.Vol == null )
			{
				equal = false;
			}
			if ( Object1.Val != null && Object2.Val != null )
			{
				if (Object1.Val != Object2.Val)
					equal = false;
			}
			else if (Object1.Val == null ^ Object2.Val == null )
			{
				equal = false;
			}
			if ( Object1.Attribute1 != null && Object2.Attribute1 != null )
			{
				if (Object1.Attribute1 != Object2.Attribute1)
					equal = false;
			}
			else if (Object1.Attribute1 == null ^ Object2.Attribute1 == null )
			{
				equal = false;
			}
			if ( Object1.Totaltrade != null && Object2.Totaltrade != null )
			{
				if (Object1.Totaltrade != Object2.Totaltrade)
					equal = false;
			}
			else if (Object1.Totaltrade == null ^ Object2.Totaltrade == null )
			{
				equal = false;
			}
			if ( Object1.Attribute3 != null && Object2.Attribute3 != null )
			{
				if (Object1.Attribute3 != Object2.Attribute3)
					equal = false;
			}
			else if (Object1.Attribute3 == null ^ Object2.Attribute3 == null )
			{
				equal = false;
			}
			if ( Object1.ThitruongId != null && Object2.ThitruongId != null )
			{
				if (Object1.ThitruongId != Object2.ThitruongId)
					equal = false;
			}
			else if (Object1.ThitruongId == null ^ Object2.ThitruongId == null )
			{
				equal = false;
			}
			if ( Object1.Status != null && Object2.Status != null )
			{
				if (Object1.Status != Object2.Status)
					equal = false;
			}
			else if (Object1.Status == null ^ Object2.Status == null )
			{
				equal = false;
			}
			if ( Object1.Trans != null && Object2.Trans != null )
			{
				if (Object1.Trans != Object2.Trans)
					equal = false;
			}
			else if (Object1.Trans == null ^ Object2.Trans == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((VnindexBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static VnindexComparer GetComparer()
        {
            return new VnindexComparer();
        }
        */

        // Comparer delegates back to Vnindex
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Vnindex rhs, VnindexColumn which)
        {
            switch (which)
            {
            	
            	
            	case VnindexColumn.VnindexId:
            		return this.VnindexId.CompareTo(rhs.VnindexId);
            		
            		                 
            	
            	
            	case VnindexColumn.VnindexDate:
            		return this.VnindexDate.Value.CompareTo(rhs.VnindexDate.Value);
            		
            		                 
            	
            	
            	case VnindexColumn.Open:
            		return this.Open.Value.CompareTo(rhs.Open.Value);
            		
            		                 
            	
            	
            	case VnindexColumn.Close:
            		return this.Close.Value.CompareTo(rhs.Close.Value);
            		
            		                 
            	
            	
            	case VnindexColumn.Change:
            		return this.Change.Value.CompareTo(rhs.Change.Value);
            		
            		                 
            	
            	
            	case VnindexColumn.Unchange:
            		return this.Unchange.Value.CompareTo(rhs.Unchange.Value);
            		
            		                 
            	
            	
            	case VnindexColumn.High:
            		return this.High.Value.CompareTo(rhs.High.Value);
            		
            		                 
            	
            	
            	case VnindexColumn.Low:
            		return this.Low.Value.CompareTo(rhs.Low.Value);
            		
            		                 
            	
            	
            	case VnindexColumn.Up:
            		return this.Up.Value.CompareTo(rhs.Up.Value);
            		
            		                 
            	
            	
            	case VnindexColumn.Down:
            		return this.Down.Value.CompareTo(rhs.Down.Value);
            		
            		                 
            	
            	
            	case VnindexColumn.Average:
            		return this.Average.Value.CompareTo(rhs.Average.Value);
            		
            		                 
            	
            	
            	case VnindexColumn.Vol:
            		return this.Vol.Value.CompareTo(rhs.Vol.Value);
            		
            		                 
            	
            	
            	case VnindexColumn.Val:
            		return this.Val.Value.CompareTo(rhs.Val.Value);
            		
            		                 
            	
            	
            	case VnindexColumn.Attribute1:
            		return this.Attribute1.CompareTo(rhs.Attribute1);
            		
            		                 
            	
            	
            	case VnindexColumn.Totaltrade:
            		return this.Totaltrade.Value.CompareTo(rhs.Totaltrade.Value);
            		
            		                 
            	
            	
            	case VnindexColumn.Attribute3:
            		return this.Attribute3.Value.CompareTo(rhs.Attribute3.Value);
            		
            		                 
            	
            	
            	case VnindexColumn.ThitruongId:
            		return this.ThitruongId.CompareTo(rhs.ThitruongId);
            		
            		                 
            	
            	
            	case VnindexColumn.Status:
            		return this.Status.Value.CompareTo(rhs.Status.Value);
            		
            		                 
            	
            	
            	case VnindexColumn.Trans:
            		return this.Trans.Value.CompareTo(rhs.Trans.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<VnindexKey> Members
		
		// member variable for the EntityId property
		private VnindexKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual VnindexKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new VnindexKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Vnindex")
					.Append("|").Append( this.VnindexId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{20}{19}- VnindexId: {0}{19}- VnindexDate: {1}{19}- Open: {2}{19}- Close: {3}{19}- Change: {4}{19}- Unchange: {5}{19}- High: {6}{19}- Low: {7}{19}- Up: {8}{19}- Down: {9}{19}- Average: {10}{19}- Vol: {11}{19}- Val: {12}{19}- Attribute1: {13}{19}- Totaltrade: {14}{19}- Attribute3: {15}{19}- ThitruongId: {16}{19}- Status: {17}{19}- Trans: {18}{19}{21}", 
				this.VnindexId,
				(this.VnindexDate == null) ? string.Empty : this.VnindexDate.ToString(),
				(this.Open == null) ? string.Empty : this.Open.ToString(),
				(this.Close == null) ? string.Empty : this.Close.ToString(),
				(this.Change == null) ? string.Empty : this.Change.ToString(),
				(this.Unchange == null) ? string.Empty : this.Unchange.ToString(),
				(this.High == null) ? string.Empty : this.High.ToString(),
				(this.Low == null) ? string.Empty : this.Low.ToString(),
				(this.Up == null) ? string.Empty : this.Up.ToString(),
				(this.Down == null) ? string.Empty : this.Down.ToString(),
				(this.Average == null) ? string.Empty : this.Average.ToString(),
				(this.Vol == null) ? string.Empty : this.Vol.ToString(),
				(this.Val == null) ? string.Empty : this.Val.ToString(),
				(this.Attribute1 == null) ? string.Empty : this.Attribute1.ToString(),
				(this.Totaltrade == null) ? string.Empty : this.Totaltrade.ToString(),
				(this.Attribute3 == null) ? string.Empty : this.Attribute3.ToString(),
				(this.ThitruongId == null) ? string.Empty : this.ThitruongId.ToString(),
				(this.Status == null) ? string.Empty : this.Status.ToString(),
				(this.Trans == null) ? string.Empty : this.Trans.ToString(),
				System.Environment.NewLine, 
				this.GetType(),
				this.Error.Length == 0 ? string.Empty : string.Format("- Error: {0}\n",this.Error));
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'vnindex' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class VnindexEntityData : ICloneable, ICloneableEx
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
		/// <summary>			
		/// VNINDEX_ID : 
		/// </summary>
		/// <remarks>Member of the primary key of the underlying table "vnindex"</remarks>
		public System.Int32 VnindexId;
			
		#endregion
		
		#region Non Primary key(s)
		
		/// <summary>
		/// VNINDEX_DATE : 
		/// </summary>
		public System.DateTime? VnindexDate = null;
		
		/// <summary>
		/// OPEN : 
		/// </summary>
		public System.Double? Open = null;
		
		/// <summary>
		/// CLOSE : 
		/// </summary>
		public System.Double? Close = null;
		
		/// <summary>
		/// CHANGE : 
		/// </summary>
		public System.Double? Change = null;
		
		/// <summary>
		/// UNCHANGE : 
		/// </summary>
		public System.Double? Unchange = null;
		
		/// <summary>
		/// HIGH : 
		/// </summary>
		public System.Double? High = null;
		
		/// <summary>
		/// LOW : 
		/// </summary>
		public System.Double? Low = null;
		
		/// <summary>
		/// UP : 
		/// </summary>
		public System.Double? Up = null;
		
		/// <summary>
		/// DOWN : 
		/// </summary>
		public System.Double? Down = null;
		
		/// <summary>
		/// AVERAGE : 
		/// </summary>
		public System.Double? Average = null;
		
		/// <summary>
		/// VOL : 
		/// </summary>
		public System.Double? Vol = null;
		
		/// <summary>
		/// VAL : 
		/// </summary>
		public System.Double? Val = null;
		
		/// <summary>
		/// ATTRIBUTE1 : 
		/// </summary>
		public System.String Attribute1 = null;
		
		/// <summary>
		/// TOTALTRADE : 
		/// </summary>
		public System.Double? Totaltrade = null;
		
		/// <summary>
		/// ATTRIBUTE3 : 
		/// </summary>
		public System.DateTime? Attribute3 = null;
		
		/// <summary>
		/// THITRUONG_ID : 
		/// </summary>
		public System.String ThitruongId = null;
		
		/// <summary>
		/// STATUS : 
		/// </summary>
		public System.Int16? Status = null;
		
		/// <summary>
		/// TRANS : 
		/// </summary>
		public System.Double? Trans = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
        
		#endregion Variable Declarations

		#region Data Properties

		#endregion Data Properties
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			VnindexEntityData _tmp = new VnindexEntityData();
						
			_tmp.VnindexId = this.VnindexId;
			
			_tmp.VnindexDate = this.VnindexDate;
			_tmp.Open = this.Open;
			_tmp.Close = this.Close;
			_tmp.Change = this.Change;
			_tmp.Unchange = this.Unchange;
			_tmp.High = this.High;
			_tmp.Low = this.Low;
			_tmp.Up = this.Up;
			_tmp.Down = this.Down;
			_tmp.Average = this.Average;
			_tmp.Vol = this.Vol;
			_tmp.Val = this.Val;
			_tmp.Attribute1 = this.Attribute1;
			_tmp.Totaltrade = this.Totaltrade;
			_tmp.Attribute3 = this.Attribute3;
			_tmp.ThitruongId = this.ThitruongId;
			_tmp.Status = this.Status;
			_tmp.Trans = this.Trans;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public object Clone(IDictionary existingCopies)
		{
			if (existingCopies == null)
				existingCopies = new Hashtable();
				
			VnindexEntityData _tmp = new VnindexEntityData();
						
			_tmp.VnindexId = this.VnindexId;
			
			_tmp.VnindexDate = this.VnindexDate;
			_tmp.Open = this.Open;
			_tmp.Close = this.Close;
			_tmp.Change = this.Change;
			_tmp.Unchange = this.Unchange;
			_tmp.High = this.High;
			_tmp.Low = this.Low;
			_tmp.Up = this.Up;
			_tmp.Down = this.Down;
			_tmp.Average = this.Average;
			_tmp.Vol = this.Vol;
			_tmp.Val = this.Val;
			_tmp.Attribute1 = this.Attribute1;
			_tmp.Totaltrade = this.Totaltrade;
			_tmp.Attribute3 = this.Attribute3;
			_tmp.ThitruongId = this.ThitruongId;
			_tmp.Status = this.Status;
			_tmp.Trans = this.Trans;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct

		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="VnindexColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanging(VnindexColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="VnindexColumn"/> which has raised the event.</param>
		public virtual void OnColumnChanged(VnindexColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="VnindexColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanging(VnindexColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
                EntityManager.StopTracking(entityTrackingKey);
                
			if (!SuppressEntityEvents)
			{
				VnindexEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new VnindexEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="VnindexColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public virtual void OnColumnChanged(VnindexColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				VnindexEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new VnindexEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region VnindexEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Vnindex"/> object.
	/// </remarks>
	public class VnindexEventArgs : System.EventArgs
	{
		private VnindexColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the VnindexEventArgs class.
		///</summary>
		public VnindexEventArgs(VnindexColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the VnindexEventArgs class.
		///</summary>
		public VnindexEventArgs(VnindexColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The VnindexColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="VnindexColumn" />
		public VnindexColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Vnindex related events.
	///</summary>
	public delegate void VnindexEventHandler(object sender, VnindexEventArgs e);
	
	#region VnindexComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class VnindexComparer : System.Collections.Generic.IComparer<Vnindex>
	{
		VnindexColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:VnindexComparer"/> class.
        /// </summary>
		public VnindexComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:VnindexComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public VnindexComparer(VnindexColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <see cref="Vnindex"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <see cref="Vnindex"/> to compare.</param>
        /// <param name="b">The second <c>Vnindex</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Vnindex a, Vnindex b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Vnindex entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Vnindex a, Vnindex b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public VnindexColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region VnindexKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Vnindex"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class VnindexKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the VnindexKey class.
		/// </summary>
		public VnindexKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the VnindexKey class.
		/// </summary>
		public VnindexKey(VnindexBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.VnindexId = entity.VnindexId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the VnindexKey class.
		/// </summary>
		public VnindexKey(System.Int32 _vnindexId)
		{
			#region Init Properties

			this.VnindexId = _vnindexId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private VnindexBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public VnindexBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the VnindexId property
		private System.Int32 _vnindexId;
		
		/// <summary>
		/// Gets or sets the VnindexId property.
		/// </summary>
		public System.Int32 VnindexId
		{
			get { return _vnindexId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.VnindexId = value;
				
				_vnindexId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				VnindexId = ( values["VnindexId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["VnindexId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("VnindexId", VnindexId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("VnindexId: {0}{1}",
								VnindexId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region VnindexColumn Enum
	
	/// <summary>
	/// Enumerate the Vnindex columns.
	/// </summary>
	[Serializable]
	public enum VnindexColumn : int
	{
		/// <summary>
		/// VnindexId : 
		/// </summary>
		[EnumTextValue("VNINDEX_ID")]
		[ColumnEnum("VNINDEX_ID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		VnindexId = 1,
		/// <summary>
		/// VnindexDate : 
		/// </summary>
		[EnumTextValue("VNINDEX_DATE")]
		[ColumnEnum("VNINDEX_DATE", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		VnindexDate = 2,
		/// <summary>
		/// Open : 
		/// </summary>
		[EnumTextValue("OPEN")]
		[ColumnEnum("OPEN", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Open = 3,
		/// <summary>
		/// Close : 
		/// </summary>
		[EnumTextValue("CLOSE")]
		[ColumnEnum("CLOSE", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Close = 4,
		/// <summary>
		/// Change : 
		/// </summary>
		[EnumTextValue("CHANGE")]
		[ColumnEnum("CHANGE", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Change = 5,
		/// <summary>
		/// Unchange : 
		/// </summary>
		[EnumTextValue("UNCHANGE")]
		[ColumnEnum("UNCHANGE", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Unchange = 6,
		/// <summary>
		/// High : 
		/// </summary>
		[EnumTextValue("HIGH")]
		[ColumnEnum("HIGH", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		High = 7,
		/// <summary>
		/// Low : 
		/// </summary>
		[EnumTextValue("LOW")]
		[ColumnEnum("LOW", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Low = 8,
		/// <summary>
		/// Up : 
		/// </summary>
		[EnumTextValue("UP")]
		[ColumnEnum("UP", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Up = 9,
		/// <summary>
		/// Down : 
		/// </summary>
		[EnumTextValue("DOWN")]
		[ColumnEnum("DOWN", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Down = 10,
		/// <summary>
		/// Average : 
		/// </summary>
		[EnumTextValue("AVERAGE")]
		[ColumnEnum("AVERAGE", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Average = 11,
		/// <summary>
		/// Vol : 
		/// </summary>
		[EnumTextValue("VOL")]
		[ColumnEnum("VOL", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Vol = 12,
		/// <summary>
		/// Val : 
		/// </summary>
		[EnumTextValue("VAL")]
		[ColumnEnum("VAL", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Val = 13,
		/// <summary>
		/// Attribute1 : 
		/// </summary>
		[EnumTextValue("ATTRIBUTE1")]
		[ColumnEnum("ATTRIBUTE1", typeof(System.String), System.Data.DbType.String, false, false, true, 255)]
		Attribute1 = 14,
		/// <summary>
		/// Totaltrade : 
		/// </summary>
		[EnumTextValue("TOTALTRADE")]
		[ColumnEnum("TOTALTRADE", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Totaltrade = 15,
		/// <summary>
		/// Attribute3 : 
		/// </summary>
		[EnumTextValue("ATTRIBUTE3")]
		[ColumnEnum("ATTRIBUTE3", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		Attribute3 = 16,
		/// <summary>
		/// ThitruongId : 
		/// </summary>
		[EnumTextValue("THITRUONG_ID")]
		[ColumnEnum("THITRUONG_ID", typeof(System.String), System.Data.DbType.String, false, false, true, 30)]
		ThitruongId = 17,
		/// <summary>
		/// Status : 
		/// </summary>
		[EnumTextValue("STATUS")]
		[ColumnEnum("STATUS", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		Status = 18,
		/// <summary>
		/// Trans : 
		/// </summary>
		[EnumTextValue("TRANS")]
		[ColumnEnum("TRANS", typeof(System.Double), System.Data.DbType.Double, false, false, true)]
		Trans = 19
	}//End enum

	#endregion VnindexColumn Enum

} // end namespace
