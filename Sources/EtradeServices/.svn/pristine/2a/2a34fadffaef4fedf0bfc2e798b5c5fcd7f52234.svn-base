#include "Log.h"
#include <time.h>

const enum Log::logLevels DEFAULT_LOG_LEVEL = Log::LEVEL_1;

string defaultLogFile = "SocketHandler.log";

Log::Log()
{
    initVars();
	init();
}

Log::Log(enum logLevels levelIn)
{
    initVars();
	init();
    logLevel = levelIn;
}

Log::~Log()
{
   if (logLevel < QUIET_MODE )
   {
      clear(ios::goodbit);
      *this << endl;
      printHeader(1);    // add ending time to log file
   }

   close();
}

void Log::init(const string& fileName)
{
	close();

	if ( (fileName.c_str())[0] )
	{
		openLog(fileName,LOG_WRITE);
	}
	else
    {  
		openLog(defaultLogFile.c_str(),LOG_WRITE);
	}
}

void Log::init(const string& fileName, int mode)
{
	close();

	if ( (fileName.c_str())[0] )
	{
		openLog(fileName,mode);
	}
	else
	{
		openLog(defaultLogFile, mode);
	}
}

void Log::init()
{
   openLog("SocketHandler.log", LOG_WRITE);
}

void Log::openLog(const string& fileName, int mode)
{
	if (logLevel < QUIET_MODE)
	{
		open(fileName.c_str(),mode);
      
		if ( fail() == 0 )
		{
			logName = fileName;
			printHeader(0);         // insert start time into top of log file
		}
		else
		{
			logLevel = QUIET_MODE;
		}
	}
}

void Log::initVars()
{
	time(&startTime);
	logLevel = DEFAULT_LOG_LEVEL;
}

void Log::printHeader(int theEnd)
{
	if ( logLevel < QUIET_MODE )
	{
		clear(ios::goodbit);

		// setup time
		time_t sttime;

		time(&sttime);

		// convert to gm time
		struct tm * tim = gmtime(&sttime);

		// set data items
		int sec  = tim->tm_sec;           // second (0-61, allows for leap seconds)
		int min  = tim->tm_min;           // minute (0-59)
		int hour = tim->tm_hour;          // hour (0-23)

		int mon  = tim->tm_mon + 1;       // month (0-11)
		int mday = tim->tm_mday;          // day of the month (1-31)
		int year = tim->tm_year % 100;    // years since 1900

		char cur_time[9];
		char cur_date[9];

		sprintf(cur_time,"%02d:%02d:%02d",hour,min,sec);
		sprintf(cur_date,"%02d/%02d/%02d",mon,mday,year);

		char line_2[61];

		sprintf(line_2, "DATE: %s - %s%30s", cur_date, cur_time, logName.c_str());

		*this << line_2 << endl << endl;

		if (theEnd) 
		{
			*this << getExecTime() << endl;
		}
	}
} 

void Log::getExecTime(int* min, int* sec)
{
	time_t endTime;

	time(&endTime);

	*min = (int)((endTime - startTime)/60);
	*sec = (int)((endTime - startTime)%60);
} 

char* Log::getExecTime()
{
    int min = 0;
    int sec = 0;

    getExecTime(&min, &sec);

    static char execTime[128];

    sprintf(execTime, "Execution time: %d minutes %d seconds", min, sec);

    return execTime;
}
