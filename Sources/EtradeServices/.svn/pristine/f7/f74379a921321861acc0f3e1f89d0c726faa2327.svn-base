// --------------------------------------------------------------------------------------------------------------------
// <copyright file="ETradeServicesWebServices.asmx.cs" company="OTS">
//   2010
// </copyright>
// <summary>
//   Summary description for ETradeServicesWebServices
// </summary>
// --------------------------------------------------------------------------------------------------------------------

using ETradeHistory.Entities;
using ETradeHistory.Services;
using ETradeOrders.Services;

namespace ETradeWebServices
{
    using System;
    using System.Collections.Generic;
    using System.Web;
    using System.Web.Caching;
    using System.Web.Script.Serialization;
    using System.Web.Script.Services;
    using System.Web.Services;

    using AccountManager.Entities;

    using ETradeCommon;
    using ETradeCommon.Enums;

    using ETradeCore.Entities;

    using ETradeFinance.Entities;

    using ETradeOrders.Entities;

    using ETradeServices.Services;

    using AMServices;

    using CashAdvance = ETradeCore.Entities.CashAdvance;
    using SubCustAccount = AccountManager.Entities.SubCustAccount;

    /// <summary>
    /// Summary description for ETradeServicesWebServices
    /// </summary>
    [WebService(Namespace = "http://tempuri.org/")]
    [WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
    [System.ComponentModel.ToolboxItem(false)]
    // To allow this Web Service to be called from script, using ASP.NET AJAX, uncomment the following line. 
    [ScriptService]
    public class ETradeServicesWebServices : WebService
    {
        private static readonly JavaScriptSerializer Serializer = new JavaScriptSerializer();

        /// <summary>
        /// Exception policy
        /// </summary>
        public const string WEB_SERVICE_POLICY = "WebServiceExceptionPolicy";

        /// <summary>
        /// </summary>
        private static readonly AccountManagerServices AccountManagerServices = new AccountManagerServices();

        private static readonly ETradeServices ETradeServices = new ETradeServices();

        #region balance

        /// <summary>
        /// Get cash available os an investor. There are some account types:
        /// 1. Normal account (cash account with 1 in rail): There just BuyCredit
        /// 2. Margin account (with 6 in rail): There BuyCredit, PP, IM
        /// And other accounts
        /// </summary>
        /// <param name="accountNo">
        /// The account no.
        /// </param>
        /// <param name="accountType">
        /// The account type.
        /// </param>
        /// <returns>ResultObject of a CashAvailable
        /// </returns>
        [WebMethod(
            Description = "Get available cash for buy order, accountType = 0 for normal account, 1 for margin account",
            EnableSession = true)]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetAvailableCash(string accountNo, int accountType)
        {
            try
            {
                if (Session == null || Session[CommonEnums.SESSION_KEY.CUSTOMER_ACCOUNT.ToString()] == null)
                {
                    return
                        Serializer.Serialize(
                            new ResultObject<CashAvailable>
                            {
                                Result = null,
                                RetCode = CommonEnums.RET_CODE.NOT_LOGIN,
                                ErrorMessage = CommonEnums.RET_CODE.NOT_LOGIN.ToString()
                            });
                }

                ResultObject<CashAvailable> cashAvailable = ETradeServices.GetAvailableCash(accountNo, accountType);

                return Serializer.Serialize(cashAvailable);
            }
            catch (Exception e)
            {
                ExceptionHandler.HandleException(e, WEB_SERVICE_POLICY);
                return Serializer.Serialize(
                            new ResultObject<CashAvailable>
                            {
                                Result = null,
                                RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR,
                                ErrorMessage = CommonEnums.RET_CODE.SYSTEM_ERROR.ToString()
                            });
            }
        }

        /// <summary>
        /// Get portfolio of an investor. This is list stock available in portfolio, includes
        /// 1. Sellable stock
        /// 2. Pledge stock
        /// 3. Limittransfer
        /// 4. Wait to receive intra-day
        /// 5. Wait to send intra-day
        /// 6. Wait to receive T1, T2, T3
        /// 7. Wait to send T1, T2, T3
        /// </summary>
        /// <param name="accountNo">
        /// The account no.
        /// </param>
        /// <param name="pageNumber">
        /// The page number.
        /// </param>
        /// <param name="pageSize">
        /// The page size.
        /// </param>
        /// <param name="accountType">
        /// The account type.
        /// </param>
        /// <returns>ResultObject of a list of PortfolioInfo
        /// </returns>
        [WebMethod(Description = "Get portfolio - stock balance of an investor (it for statement), accountType: 1 for normal account, 1 for margin account", EnableSession = true)]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetPortfolio(string accountNo, int pageNumber, int pageSize, int accountType)
        {
            try
            {
                if (Session == null || Session[CommonEnums.SESSION_KEY.CUSTOMER_ACCOUNT.ToString()] == null)
                {
                    return
                        Serializer.Serialize(
                            new ResultObject<PagingObject<List<PortfolioInfo>, PortfolioInfo, PortfolioInfo>>
                            {
                                Result = new PagingObject<List<PortfolioInfo>, PortfolioInfo, PortfolioInfo>(),
                                RetCode = CommonEnums.RET_CODE.NOT_LOGIN,
                                ErrorMessage = CommonEnums.RET_CODE.NOT_LOGIN.ToString()
                            });
                }

                var subCustAccount = (SubCustAccount)Session[accountNo + CommonEnums.SESSION_KEY.TRADING_ACCOUNT];

                if (subCustAccount == null)
                {
                    return Serializer.Serialize(
                            new ResultObject<PagingObject<List<PortfolioInfo>, PortfolioInfo, PortfolioInfo>>
                            {
                                Result = null,
                                RetCode = CommonEnums.RET_CODE.ERROR_ACCOUNT,
                                ErrorMessage = CommonEnums.RET_CODE.ERROR_ACCOUNT.ToString()
                            });
                }

                ResultObject<PagingObject<List<PortfolioInfo>, PortfolioInfo, PortfolioInfo>> resultObject = ETradeServices.GetPortfolio(
                    accountNo, pageNumber, pageSize, accountType, subCustAccount);

                return Serializer.Serialize(resultObject);
            }
            catch (Exception e)
            {
                ExceptionHandler.HandleException(e, WEB_SERVICE_POLICY);
                return Serializer.Serialize(
                            new ResultObject<PagingObject<List<PortfolioInfo>, PortfolioInfo, PortfolioInfo>>
                            {
                                Result = null,
                                RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR,
                                ErrorMessage = CommonEnums.RET_CODE.SYSTEM_ERROR.ToString()
                            });
            }
        }

        /// <summary>
        /// Get list of portfolio of an investor. This is list stock available in portfolio, includes
        /// 1. Sellable stock
        /// 2. Pledge stock
        /// 3. Limittransfer
        /// 4. Wait to receive intra-day
        /// 5. Wait to send intra-day
        /// 6. Wait to receive T1, T2, T3
        /// 7. Wait to send T1, T2, T3
        /// </summary>
        /// <param name="accountNo">
        /// The account no.
        /// </param>
        /// <param name="accountType">
        /// The account type.
        /// </param>
        /// <returns>ResultObject of a list of PortfolioInfo
        /// </returns>
        [WebMethod(Description = "Get portfolio - stock balance of an investor (it for statement), accountType: 0 for normal account, 1 for margin account", EnableSession = true)]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetListPortfolio(string accountNo, int accountType)
        {
            var resultObject = new ResultObject<List<string>>();
            try
            {
                if (Session == null || Session[CommonEnums.SESSION_KEY.CUSTOMER_ACCOUNT.ToString()] == null)
                {
                    resultObject.Result = null;
                    resultObject.RetCode = CommonEnums.RET_CODE.NOT_LOGIN;
                    resultObject.ErrorMessage = CommonEnums.RET_CODE.NOT_LOGIN.ToString();
                    return Serializer.Serialize(resultObject);
                }
                var subCustAccount = (SubCustAccount)Session[accountNo + CommonEnums.SESSION_KEY.TRADING_ACCOUNT];

                if (subCustAccount == null)
                {
                    resultObject.Result = null;
                    resultObject.RetCode = CommonEnums.RET_CODE.ERROR_ACCOUNT;
                    resultObject.ErrorMessage = CommonEnums.RET_CODE.ERROR_ACCOUNT.ToString();
                    return Serializer.Serialize(resultObject);
                }

                var listPortfolio = ETradeServices.GetListPortfolio(accountNo, accountType);
                resultObject.Result = listPortfolio;
                resultObject.RetCode = CommonEnums.RET_CODE.SUCCESS;
                return Serializer.Serialize(resultObject);
            }
            catch (Exception e)
            {
                ExceptionHandler.HandleException(e, WEB_SERVICE_POLICY);
                resultObject.Result = null;
                resultObject.RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR;
                resultObject.ErrorMessage = CommonEnums.RET_CODE.SYSTEM_ERROR.ToString();
                return Serializer.Serialize(resultObject);
            }
        }

        /// <summary>
        /// Get available stock of an investor. This just sellable share
        /// </summary>
        /// <param name="accountNo">
        /// The account no.
        /// </param>
        /// <param name="symbol">
        /// The symbol.
        /// </param>
        /// <param name="accountType">
        /// The account type.
        /// </param>
        /// <returns>ResultObject of a StockAvailable
        /// </returns>
        [WebMethod(Description = "Get stock available of a specified symbol for sell order, accountType: 0 for normal account, 1 for margin account", EnableSession = true)]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetAvailableStock(string accountNo, string symbol, int accountType)
        {
            try
            {
                if (Session == null || Session[CommonEnums.SESSION_KEY.CUSTOMER_ACCOUNT.ToString()] == null)
                {
                    return
                        Serializer.Serialize(
                            new ResultObject<StockAvailable>
                            {
                                Result = new StockAvailable(),
                                RetCode = CommonEnums.RET_CODE.NOT_LOGIN,
                                ErrorMessage = CommonEnums.RET_CODE.NOT_LOGIN.ToString()
                            });
                }

                var resultObject = ETradeServices.GetAvailableStock(accountNo, symbol, accountType);

                return Serializer.Serialize(resultObject);
            }
            catch (Exception e)
            {
                ExceptionHandler.HandleException(e, WEB_SERVICE_POLICY);
                return Serializer.Serialize(
                            new ResultObject<StockAvailable>
                            {
                                Result = null,
                                RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR,
                                ErrorMessage = CommonEnums.RET_CODE.SYSTEM_ERROR.ToString()
                            });
            }
        }

        /// <summary>
        /// Get cash balance of an investor. This includes:
        /// 1. Buycredit
        /// 2. CashBalance for margin account
        /// 3. PP, IM for margin account
        /// 4. Withdraw
        /// 5. Net amount of T1, T2, T3
        /// 6. Total buy intra-day
        /// 7. Total sell intra-day
        /// </summary>
        /// <param name="accountNo">
        /// The account no.
        /// </param>
        /// <param name="accountType">
        /// The account type.
        /// </param>
        /// <returns>ResultObject of a CashBalance
        /// </returns>
        [WebMethod(Description = "Get cash balance information (it for statement), accountType: 0 for normal account, 1 for margin account", EnableSession = true)]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetCashBalance(string accountNo, int accountType)
        {
            try
            {
                if (Session == null || Session[CommonEnums.SESSION_KEY.CUSTOMER_ACCOUNT.ToString()] == null)
                {
                    return
                        Serializer.Serialize(
                            new ResultObject<CashBalance>
                            {
                                Result = new CashBalance(),
                                RetCode = CommonEnums.RET_CODE.NOT_LOGIN,
                                ErrorMessage = CommonEnums.RET_CODE.NOT_LOGIN.ToString()
                            });
                }

                var resultObject = ETradeServices.GetCashBalance(accountNo, accountType);

                return Serializer.Serialize(resultObject);
            }
            catch (Exception e)
            {
                ExceptionHandler.HandleException(e, WEB_SERVICE_POLICY);
                return Serializer.Serialize(
                            new ResultObject<CashBalance>
                            {
                                Result = null,
                                RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR,
                                ErrorMessage = CommonEnums.RET_CODE.SYSTEM_ERROR.ToString()
                            });
            }
        }

        /// <summary>
        /// Gets the portfolio direct.
        /// </summary>
        /// <param name="accountNo">The account no.</param>
        /// <param name="accountType">Type of the account.</param>
        /// <returns></returns>
        [WebMethod(Description = "Get portfolio information. This option for accessing direct table", EnableSession = true)]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetPortfolioDirect(string accountNo, int accountType)
        {
            try
            {
                if (Session == null || Session[CommonEnums.SESSION_KEY.CUSTOMER_ACCOUNT.ToString()] == null)
                {
                    return
                        Serializer.Serialize(
                            new ResultObject<CommonEnums.RET_CODE>
                            {
                                Result = CommonEnums.RET_CODE.NOT_LOGIN,
                                RetCode = CommonEnums.RET_CODE.NOT_LOGIN,
                                ErrorMessage = CommonEnums.RET_CODE.NOT_LOGIN.ToString()
                            });
                }

                var resultObject = ETradeServices.GetPortfolioDirect(accountNo, accountType);

                return Serializer.Serialize(resultObject);
            }
            catch (Exception e)
            {
                ExceptionHandler.HandleException(e, WEB_SERVICE_POLICY);
                return Serializer.Serialize(
                            new ResultObject<List<Portfolio>>
                            {
                                Result = null,
                                RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR,
                                ErrorMessage = CommonEnums.RET_CODE.SYSTEM_ERROR.ToString()
                            });
            }
        }

        #endregion

        #region account manager

        /// <summary>
        /// Logins the specified username.
        /// </summary>
        /// <param name="username">The username.</param>
        /// <param name="password">The password.</param>
        /// <param name="authType">The authentication type: authType = 0: pin/pass, 1: RSA, 2: TODOS, 3: ENTRUST .</param>
        /// <returns>ResultObject of a MainCustAccount</returns>
        [WebMethod(Description = "Logon for investor, authType = 0: pin/pass, 1: RSA, 2: TODOS, 3: ENTRUST return ResultObject<MainCustAccount>",
            EnableSession = true)]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string Login(string username, string password, int authType)
        {
            int result;
            try
            {
                result =
                int.TryParse(
                    AccountManagerServices.AuthenticateCustLogon(username, password, authType).ToString(),
                    out result)
                    ? result
                    : 0;
            }
            catch (Exception e)
            {

                ExceptionHandler.HandleException(e, WEB_SERVICE_POLICY);
                return Serializer.Serialize(
                            new ResultObject<AccountManager.Entities.MainCustAccount>
                            {
                                Result = null,
                                RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR,
                                ErrorMessage = CommonEnums.RET_CODE.SYSTEM_ERROR.ToString()
                            });
            }

            if (result != (int)CommonEnums.RET_CODE.SUCCESS)
            {
                return
                    Serializer.Serialize(
                        new ResultObject<AccountManager.Entities.MainCustAccount>
                        {
                            Result = null,
                            RetCode = (CommonEnums.RET_CODE)result,
                            ErrorMessage = ((CommonEnums.RET_CODE)result).ToString()
                        });
            }

            string retVal = AccountManagerServices.GetCustomerNoSession(username);

            var mainCustAccount = Serializer.Deserialize<ResultObject<AccountManager.Entities.MainCustAccount>>(
                retVal);

            //var resultObject = new ResultObject<AccountManager.Entities.MainCustAccount> { RetCode = (CommonEnums.RET_CODE)result, Result = mainCustAccount.Result };

            Session[CommonEnums.SESSION_KEY.CUSTOMER_ACCOUNT.ToString()] = username;
            Session[CommonEnums.SESSION_KEY.PASSWORD.ToString()] = mainCustAccount.Result.Password;
            Session[CommonEnums.SESSION_KEY.PIN.ToString()] = mainCustAccount.Result.Pin;
            Session[CommonEnums.SESSION_KEY.CUSTOMER_TYPE.ToString()] = mainCustAccount.Result.CustomerType;
            Session[CommonEnums.SESSION_KEY.LIST_SUB_ACCOUNTS.ToString()] =
                mainCustAccount.Result.SubCustAccountCollection;

            var subCustAccountCollection = mainCustAccount.Result.SubCustAccountCollection;

            foreach (SubCustAccount subCustAccount in subCustAccountCollection)
            {
                Session[subCustAccount.SubCustAccountId + CommonEnums.SESSION_KEY.TRADING_ACCOUNT] = subCustAccount;
            }

            // Put sessionId into cache to compare user session later
            string cacheKey = username;
            var cacheTimeout = new TimeSpan(0, 0, HttpContext.Current.Session.Timeout, 0, 0);
            if (HttpContext.Current.Cache[cacheKey] != null)
            {
                HttpContext.Current.Cache.Remove(cacheKey);
            }

            HttpContext.Current.Cache.Insert(
                cacheKey, Session.SessionID, null, Cache.NoAbsoluteExpiration, cacheTimeout);

            //return Serializer.Serialize(resultObject);
            return retVal;
        }

        /// <summary>
        /// Logouts the specified session id.
        /// </summary>
        /// <param name="sessionId">The session id.</param>
        /// <returns>ResultObject of CommonEnums.RET_CODE</returns>
        [WebMethod(Description = "Logout for investor, return ResultObject<CommonEnums.RET_CODE>", EnableSession = true)]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string Logout(string sessionId)
        {
            try
            {
                if (Session == null || Session[CommonEnums.SESSION_KEY.CUSTOMER_ACCOUNT.ToString()] == null)
                {
                    return
                        Serializer.Serialize(
                            new ResultObject<CommonEnums.RET_CODE>
                            {
                                Result = CommonEnums.RET_CODE.NOT_LOGIN,
                                RetCode = CommonEnums.RET_CODE.NOT_LOGIN,
                                ErrorMessage = CommonEnums.RET_CODE.NOT_LOGIN.ToString()
                            });
                }

                var resultObject = new ResultObject<CommonEnums.RET_CODE>
                {
                    RetCode = CommonEnums.RET_CODE.SUCCESS,
                    Result = CommonEnums.RET_CODE.SUCCESS,
                    ErrorMessage =
                        CommonEnums.RET_CODE.SUCCESS.ToString()
                };

                Session.Abandon();

                return Serializer.Serialize(resultObject);
            }
            catch (Exception e)
            {
                ExceptionHandler.HandleException(e, WEB_SERVICE_POLICY);
                return Serializer.Serialize(
                            new ResultObject<CommonEnums.RET_CODE>
                            {
                                Result = CommonEnums.RET_CODE.SYSTEM_ERROR,
                                RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR,
                                ErrorMessage = CommonEnums.RET_CODE.SYSTEM_ERROR.ToString()
                            });
            }
        }

        /// <summary>
        /// Gets the account info.
        /// </summary>
        /// <param name="accountId">The account id.</param>
        /// <returns>ResultObject of a MainCustAccount</returns>
        [WebMethod(Description = "Get account information, return ResultObject<MainCustAccount>", EnableSession = true)]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetAccountInfo(string accountId)
        {
            try
            {
                if (Session == null || Session[CommonEnums.SESSION_KEY.CUSTOMER_ACCOUNT.ToString()] == null)
                {
                    return
                        Serializer.Serialize(
                            new ResultObject<AccountManager.Entities.MainCustAccount>
                            {
                                Result = null,
                                RetCode = CommonEnums.RET_CODE.NOT_LOGIN,
                                ErrorMessage = CommonEnums.RET_CODE.NOT_LOGIN.ToString()
                            });
                }

                string returnVal = AccountManagerServices.GetCustomerNoSession(accountId);

                /* Don't need this code
                 * var mainCustAccount =
                    Serializer.Deserialize<ResultObject<AccountManager.Entities.MainCustAccount>>(returnVal);

                ResultObject<AccountManager.Entities.MainCustAccount> resultObject;

                if (mainCustAccount == null)
                {
                    resultObject = new ResultObject<AccountManager.Entities.MainCustAccount> { Result = null, RetCode = CommonEnums.RET_CODE.ERROR_ACCOUNT };

                    LogHandler.Log(
                        "GetAccountInfo: " + accountId + " not existed in DB",
                        GetType() + ".GetAccountInfo()",
                        TraceEventType.Information);

                    return Serializer.Serialize(resultObject);
                }

                resultObject = new ResultObject<AccountManager.Entities.MainCustAccount> { RetCode = mainCustAccount.RetCode, Result = mainCustAccount.Result };

                return Serializer.Serialize(resultObject);*/
                return returnVal;
            }
            catch (Exception e)
            {
                ExceptionHandler.HandleException(e, WEB_SERVICE_POLICY);
                return Serializer.Serialize(
                            new ResultObject<AccountManager.Entities.MainCustAccount>
                            {
                                Result = null,
                                RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR,
                                ErrorMessage = CommonEnums.RET_CODE.SYSTEM_ERROR.ToString()
                            });
            }
        }

        /// <summary>
        /// Changes the password.
        /// </summary>
        /// <param name="accountId">The account id.</param>
        /// <param name="oldPass">The old pass.</param>
        /// <param name="newPass">The new pass.</param>
        /// <returns>ResultObject of a CommonEnums.RET_CODE</returns>
        [WebMethod(Description = "Change password for investor", EnableSession = true)]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string ChangePassword(string accountId, string oldPass, string newPass)
        {
            try
            {
                if (Session == null || Session[CommonEnums.SESSION_KEY.CUSTOMER_ACCOUNT.ToString()] == null)
                {
                    return
                        Serializer.Serialize(
                            new ResultObject<int>
                            {
                                Result = (int)CommonEnums.RET_CODE.NOT_LOGIN,
                                RetCode = CommonEnums.RET_CODE.NOT_LOGIN,
                                ErrorMessage = CommonEnums.RET_CODE.NOT_LOGIN.ToString()
                            });
                }

                int result = AccountManagerServices.ChangeCustPassword(accountId, oldPass, newPass);

                var resultObject = new ResultObject<int> { RetCode = (CommonEnums.RET_CODE)result, Result = result };

                return Serializer.Serialize(resultObject);
            }
            catch (Exception e)
            {
                ExceptionHandler.HandleException(e, WEB_SERVICE_POLICY);
                return Serializer.Serialize(
                            new ResultObject<int>
                            {
                                Result = -1,
                                RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR,
                                ErrorMessage = CommonEnums.RET_CODE.SYSTEM_ERROR.ToString()
                            });
            }
        }

        /// <summary>
        /// Chang pin of an investor
        /// </summary>
        /// <param name="accountId">
        /// The account id.
        /// </param>
        /// <param name="oldPin">
        /// The old pin.
        /// </param>
        /// <param name="newPin">
        /// The new pin.
        /// </param>
        /// <returns>ResultObject of a CommonEnums.RET_CODE
        /// </returns>
        [WebMethod(Description = "Change pin for investor", EnableSession = true)]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string ChangePin(string accountId, string oldPin, string newPin)
        {
            try
            {
                if (Session == null || Session[CommonEnums.SESSION_KEY.CUSTOMER_ACCOUNT.ToString()] == null)
                {
                    return
                        Serializer.Serialize(
                            new ResultObject<int>
                            {
                                Result = (int)CommonEnums.RET_CODE.NOT_LOGIN,
                                RetCode = CommonEnums.RET_CODE.NOT_LOGIN,
                                ErrorMessage = CommonEnums.RET_CODE.NOT_LOGIN.ToString()
                            });
                }

                int result = AccountManagerServices.ChangeCustPin(accountId, oldPin, newPin);

                var resultObject = new ResultObject<int> { RetCode = (CommonEnums.RET_CODE)result, Result = result };

                return Serializer.Serialize(resultObject);
            }
            catch (Exception e)
            {
                ExceptionHandler.HandleException(e, WEB_SERVICE_POLICY);
                return Serializer.Serialize(
                            new ResultObject<int>
                            {
                                Result = -1,
                                RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR,
                                ErrorMessage = CommonEnums.RET_CODE.SYSTEM_ERROR.ToString()
                            });
            }
        }

        /// <summary>
        /// Send message to customer.
        /// </summary>
        /// <param name="username">Customer account</param>
        /// <param name="message">Message to send</param>
        /// <returns>ResultObject object of int that contains result of sending message</returns>
        [WebMethod(Description = "Send message to customer")]
        public string SendMessage(string username, string message)
        {
            try
            {
                int result = AccountManagerServices.SendMessage(username, message);

                var resultObject = new ResultObject<int> { RetCode = (CommonEnums.RET_CODE)result, Result = result };

                return Serializer.Serialize(resultObject);
            }
            catch (Exception e)
            {
                ExceptionHandler.HandleException(e, WEB_SERVICE_POLICY);
                return Serializer.Serialize(
                            new ResultObject<int>
                            {
                                Result = -1,
                                RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR,
                                ErrorMessage = CommonEnums.RET_CODE.SYSTEM_ERROR.ToString()
                            });
            }
        }

        #endregion

        #region orders

        /// <summary>
        /// Puts new order.
        /// </summary>
        /// <param name="market">
        /// The market id. Please refer to the enum MARKET_ID in CommonEnums.cs to know the values.
        /// </param>
        /// <param name="accountNo">
        /// The sub account ID such as 0088661, 0088666
        /// </param>
        /// <param name="pin">
        /// The pin code
        /// </param>
        /// <param name="secSymbol">
        /// The sec symbol of HOSE/HNX/UpCom
        /// </param>
        /// <param name="side">
        /// The side includes values BUY: "B", SELL: "S". Please refer to the enum TRADE_SIDE in CommonEnums.cs to know the values.
        /// </param>
        /// <param name="volume">
        /// The volume.
        /// </param>
        /// <param name="price">
        /// The price.
        /// </param>
        /// <param name="conPrice">
        /// The con price includes values ATO: 'A', ATC: 'C', LO: ' '. Please refer to the enum TRADE_SIDE in Constants.cs to know the values.
        /// </param>
        /// <param name="accountType">
        /// Type of the account includes values Normal account (such as 0088661): 0, Margin account (such as 0088666): 1
        /// </param>
        /// <returns>
        /// ResultObject of interger. 
        /// If the RetCode is CommonEnums.RET_CODE.SUCCESS then Result of ResultObject is the order id.
        /// Otherwise, it is a reject code. Please refer to the reject code in the enum REJECT_REASON of CommonEnums.cs
        /// </returns>
        [WebMethod(Description = "Put Order, return a ResultObject<Integer>", EnableSession = true)]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string PutOrder(int market, string accountNo, string pin, string secSymbol, char side, int volume, decimal price, char conPrice, int accountType)
        {
            try
            {
                if (Session == null || Session[CommonEnums.SESSION_KEY.CUSTOMER_ACCOUNT.ToString()] == null)
                {
                    return Serializer.Serialize(
                            new ResultObject<int>
                            {
                                Result = -1,
                                RetCode = CommonEnums.RET_CODE.NOT_LOGIN,
                                ErrorMessage = CommonEnums.RET_CODE.NOT_LOGIN.ToString()
                            });
                }

                if (Session[accountNo + CommonEnums.SESSION_KEY.TRADING_ACCOUNT] == null)
                {
                    return
                        Serializer.Serialize(
                            new ResultObject<int>
                                {
                                    ErrorMessage = CommonEnums.RET_CODE.ERROR_ACCOUNT.ToString(),
                                    Result = (int)CommonEnums.RET_CODE.ERROR_ACCOUNT,
                                    RetCode = CommonEnums.RET_CODE.ERROR_ACCOUNT
                                });
                }

                string sessionPin = Session[CommonEnums.SESSION_KEY.PIN.ToString()].ToString();

                if (PasswordHandlerMd5.Encrypt(pin) != sessionPin)
                {
                    return
                        Serializer.Serialize(
                            new ResultObject<int>
                                {
                                    ErrorMessage = CommonEnums.RET_CODE.INCORRECT_PIN.ToString(),
                                    Result = (int)CommonEnums.RET_CODE.FAIL,
                                    RetCode = CommonEnums.RET_CODE.INCORRECT_PIN
                                });
                }

                var subCustAccount = (SubCustAccount)Session[accountNo + CommonEnums.SESSION_KEY.TRADING_ACCOUNT];

                var subCustAccounts = (AccountManager.Entities.TList<SubCustAccount>)
                    Session[CommonEnums.SESSION_KEY.LIST_SUB_ACCOUNTS.ToString()];

                int customerType;
                customerType = int.TryParse(Session[CommonEnums.SESSION_KEY.CUSTOMER_TYPE.ToString()].ToString(), out customerType) ? customerType : (int)CommonEnums.CUSTOMER_TYPE.INTERNAL;

                ResultObject<int> resultObject = ETradeServices.PutOrder(market, accountNo, secSymbol, side, volume, price, conPrice, accountType, customerType, subCustAccount, subCustAccounts);

                return Serializer.Serialize(resultObject);
            }
            catch (Exception e)
            {
                ExceptionHandler.HandleException(e, WEB_SERVICE_POLICY);
                return Serializer.Serialize(
                            new ResultObject<int>
                            {
                                Result = -1,
                                RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR,
                                ErrorMessage = CommonEnums.RET_CODE.SYSTEM_ERROR.ToString()
                            });
            }
        }

        /// <summary>
        /// Cancels an existed order. This order must is pending or is already confirmed from SET or FIS
        /// </summary>
        /// <param name="orderId">The order id that was return by PutOrder APIs</param>
        /// <param name="accountNo">The sub accountId such as 0088661, 0088666</param>
        /// <param name="pin">The pin code</param>
        /// <returns>
        /// ResultObject of interger. 
        /// If the RetCode is CommonEnums.RET_CODE.SUCCESS then Result of ResultObject is the order id.
        /// Otherwise, it is a reject code. Please refer to the reject code in the enum REJECT_REASON of CommonEnums.cs
        /// </returns>
        [WebMethod(Description = "Cancel Order, return a ResultObject<Integer>", EnableSession = true)]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string CancelOrder(int orderId, string accountNo, string pin)
        {
            try
            {
                if (Session == null || Session[CommonEnums.SESSION_KEY.CUSTOMER_ACCOUNT.ToString()] == null)
                {
                    return
                        Serializer.Serialize(
                            new ResultObject<int>
                            {
                                Result = -1,
                                RetCode = CommonEnums.RET_CODE.NOT_LOGIN,
                                ErrorMessage = CommonEnums.RET_CODE.NOT_LOGIN.ToString()
                            });
                }

                string sessionPin = Session[CommonEnums.SESSION_KEY.PIN.ToString()].ToString();

                if (PasswordHandlerMd5.Encrypt(pin) != sessionPin)
                {
                    return
                        Serializer.Serialize(
                            new ResultObject<int>
                            {
                                ErrorMessage = CommonEnums.RET_CODE.INCORRECT_PIN.ToString(),
                                Result = (int)CommonEnums.RET_CODE.FAIL,
                                RetCode = CommonEnums.RET_CODE.INCORRECT_PIN
                            });
                }

                ResultObject<int> resultObject = ETradeServices.CancelOrder(orderId);

                return Serializer.Serialize(resultObject);
            }
            catch (Exception e)
            {
                ExceptionHandler.HandleException(e, WEB_SERVICE_POLICY);
                return Serializer.Serialize(
                            new ResultObject<int>
                            {
                                Result = -1,
                                RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR
                            });
            }

        }

        /// <summary>
        /// Gets all the newest order information that put to system from all sources.
        /// </summary>
        /// <param name="pageSize">Size of the page.</param> 
        /// <param name="pageIndex">The page number. if pageIndex = 0, it will return all orders</param>
        /// <param name="accountNo">The account no.</param>
        /// <param name="isPending">You want it to return the pending orders. Values is True/False.</param>
        /// <param name="isMatched">You want it to return the matched orders. Values is True/False.</param>
        /// <param name="isSemiMatched">You want it to return the semimatched orders. Values is True/False.</param>
        /// <param name="isCanceling">You want it to return the canceling orders. Values is True/False.</param>
        /// <param name="isCancelled">You want it to return the canceled orders. Values is True/False.</param>
        /// <param name="isRejected">You want it to return the rejected orders. Values is True/False.</param>
        /// <returns>ResultObject of PagingObject is a list of ExecOrder. Please refer the Entities PagingObject</returns>
        [WebMethod(Description = "Get newest order status Order. Return ResultObject<PagingObject<List<ExecOrder>>>", EnableSession = true)]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string NewestOrdStatus(int pageSize, int pageIndex, string accountNo,
                                             bool isPending, bool isMatched, bool isSemiMatched, bool isCanceling, bool isCancelled, bool isRejected)
        {
            try
            {
                if (Session == null || Session[CommonEnums.SESSION_KEY.CUSTOMER_ACCOUNT.ToString()] == null)
                {
                    return
                        Serializer.Serialize(
                            new ResultObject<PagingObject<List<ExecOrder>>>
                            {
                                Result = new PagingObject<List<ExecOrder>>(),
                                RetCode = CommonEnums.RET_CODE.NOT_LOGIN,
                                ErrorMessage = CommonEnums.RET_CODE.NOT_LOGIN.ToString()
                            });
                }

                ResultObject<PagingObject<List<ExecOrder>>> resultObject = ETradeServices.GetNewsestOrderStatus(pageSize, pageIndex, accountNo, isPending, isMatched, isSemiMatched, isCanceling, isCancelled, isRejected);
                if (resultObject.RetCode == CommonEnums.RET_CODE.SUCCESS)
                {
                    var listOrders = resultObject.Result.Data;

                    resultObject.Result.isNew = IsOrdersUpdated(listOrders);
                }
                else
                {
                    resultObject.Result.isNew = false;
                }

                return Serializer.Serialize(resultObject);
            }
            catch (Exception e)
            {
                ExceptionHandler.HandleException(e, WEB_SERVICE_POLICY);
                return Serializer.Serialize(
                            new ResultObject<PagingObject<List<ExecOrder>>>
                            {
                                Result = null,
                                RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR
                            });
            }
        }
        /// <summary>
        /// Compare to find out the different between new and old order status. Update new ones to sesssion
        /// </summary>
        /// <param name="listOrders"></param>
        /// <returns></returns>
        private Boolean IsOrdersUpdated (List<ExecOrder> listOrders)
        {
            List<ExecOrder> oldListOrders = null;

            if (listOrders == null || listOrders.Count == 0)
                return false;

            if (Session[CommonEnums.SESSION_KEY.STOCK_ORDERS.ToString()] == null)
            {
                Session[CommonEnums.SESSION_KEY.STOCK_ORDERS.ToString()] = listOrders;

                return true;
            }

            oldListOrders = (List<ExecOrder>)Session[CommonEnums.SESSION_KEY.STOCK_ORDERS.ToString()];

            if (listOrders.Count != oldListOrders.Count )
            {
                Session[CommonEnums.SESSION_KEY.STOCK_ORDERS.ToString()] = listOrders;

                return true;
            }

            for (int index = 0; index < listOrders.Count; index++)
            {
                ExecOrder oldItem = oldListOrders[index];
                ExecOrder newItem = listOrders[index];

                if (oldItem.OrderId != newItem.OrderId || 
                    oldItem.OrderStatus != newItem.OrderStatus || 
                    oldItem.NumOfMatch != newItem.NumOfMatch ||
                    oldItem.canCancel != newItem.canCancel)
                {
                    Session[CommonEnums.SESSION_KEY.STOCK_ORDERS.ToString()] = listOrders;

                    return true;
                }
            }

            return false;
        }

        /// <summary>
        /// Gets the total orders that put to system from all sources.
        /// </summary>
        /// <param name="accountId">The account no.</param>
        /// <param name="isPending">You want it to return the pending orders. Values is True/False.</param>
        /// <param name="isMatched">You want it to return the matched orders. Values is True/False.</param>
        /// <param name="isSemiMatched">You want it to return the semimatched orders. Values is True/False.</param>
        /// <param name="isCanceling">You want it to return the canceling orders. Values is True/False.</param>
        /// <param name="isCancelled">You want it to return the canceled orders. Values is True/False.</param>
        /// <param name="isRejected">You want it to return the rejected orders. Values is True/False.</param>
        /// <returns>ResultObject of interger is the count total of found orders.</returns>
        [WebMethod(Description = "Get newest order status Order", EnableSession = true)]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string NewestOrdCount(string accountId, bool isPending, bool isMatched, bool isSemiMatched, bool isCanceling, bool isCancelled, bool isRejected)
        {
            try
            {
                if (Session == null || Session[CommonEnums.SESSION_KEY.CUSTOMER_ACCOUNT.ToString()] == null)
                {
                    return
                        Serializer.Serialize(
                            new ResultObject<int>
                            {
                                Result = -1,
                                RetCode = CommonEnums.RET_CODE.NOT_LOGIN,
                                ErrorMessage = CommonEnums.RET_CODE.NOT_LOGIN.ToString()
                            });
                }

                ResultObject<int> resultObject = ETradeServices.GetNewsestOrderCount(accountId, isPending, isMatched, isSemiMatched, isCanceling, isCancelled, isRejected);

                return Serializer.Serialize(resultObject);
            }
            catch (Exception e)
            {
                ExceptionHandler.HandleException(e, WEB_SERVICE_POLICY);
                return Serializer.Serialize(
                            new ResultObject<int>
                            {
                                Result = -1,
                                RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR
                            });
            }
        }

        /// <summary>
        /// Get order history of an investor
        /// </summary>
        /// <param name="accountNo">
        /// The sub account no. such as 0088661, 0088666
        /// </param>
        /// <param name="fromDate">
        /// The from date. Format(YYYYMMDD)
        /// </param>
        /// <param name="toDate">
        /// The to date. Format(YYYYMMDD)
        /// </param>
        /// <param name="symbol">
        /// The symbol.
        /// </param>
        /// <param name="orderStatus">
        /// The order status. please refer the values from FILTER_ORDER_STATUS in CommonEnums.cs
        /// </param>
        /// <param name="pageIndex">
        /// The page index. if pageIndex = 0 then it will return all results.
        /// </param>
        /// <param name="pageSize">
        /// The page size.
        /// </param>
        /// <returns>ResultObject of PagingObject of list of OrderHistory.
        /// </returns>
        [WebMethod(Description = "Get order history", EnableSession = true)]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetOrderHistory(string accountNo, string fromDate, string toDate, string symbol, int orderStatus, int pageIndex, int pageSize)
        {
            try
            {
                if (Session == null || Session[CommonEnums.SESSION_KEY.CUSTOMER_ACCOUNT.ToString()] == null)
                {
                    return
                        Serializer.Serialize(
                            new ResultObject<PagingObject<List<OrderHistory>>>
                            {
                                Result = new PagingObject<List<OrderHistory>>(),
                                RetCode = CommonEnums.RET_CODE.NOT_LOGIN,
                                ErrorMessage = CommonEnums.RET_CODE.NOT_LOGIN.ToString()
                            });
                }

                var resultObject = ETradeServices.GetOrderHistory(accountNo, fromDate, toDate, symbol, orderStatus, pageIndex, pageSize);

                return Serializer.Serialize(resultObject);
            }
            catch (Exception e)
            {
                ExceptionHandler.HandleException(e, WEB_SERVICE_POLICY);
                return Serializer.Serialize(
                            new ResultObject<PagingObject<List<OrderHistory>>>
                            {
                                Result = null,
                                RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR,
                                ErrorMessage = CommonEnums.RET_CODE.SYSTEM_ERROR.ToString()
                            });
            }
        }

        /// <summary>
        /// Gets the order history count.
        /// </summary>
        /// <param name="accountNo">
        /// The sub account no. such as 0088661, 0088666
        /// </param>
        /// <param name="fromDate">
        /// The from date. Format(YYYYMMDD)
        /// </param>
        /// <param name="toDate">
        /// The to date. Format(YYYYMMDD)
        /// </param>
        /// <param name="symbol">
        /// The symbol.
        /// </param>
        /// <param name="orderStatus">
        /// The order status. please refer the values from FILTER_ORDER_STATUS in CommonEnums.cs
        /// </param>
        /// <returns>ResultObject of Integer</returns>
        [WebMethod(Description = "Get order history count, return ResultObject<int>", EnableSession = true)]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetOrderHistoryCount(string accountNo, string fromDate, string toDate, string symbol, int orderStatus)
        {
            try
            {
                if (Session == null || Session[CommonEnums.SESSION_KEY.CUSTOMER_ACCOUNT.ToString()] == null)
                {
                    return
                        Serializer.Serialize(
                            new ResultObject<int>
                            {
                                Result = 0,
                                RetCode = CommonEnums.RET_CODE.NOT_LOGIN,
                                ErrorMessage = CommonEnums.RET_CODE.NOT_LOGIN.ToString()
                            });
                }

                var resultObject = ETradeServices.GetOrderHistoryCount(accountNo, fromDate, toDate, symbol, orderStatus);

                return Serializer.Serialize(resultObject);
            }
            catch (Exception e)
            {
                ExceptionHandler.HandleException(e, WEB_SERVICE_POLICY);
                return Serializer.Serialize(
                            new ResultObject<int>
                            {
                                Result = -1,
                                RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR,
                                ErrorMessage = CommonEnums.RET_CODE.SYSTEM_ERROR.ToString()
                            });
            }
        }

        /// <summary>
        /// Get deal detail of order history
        /// </summary>
        /// <param name="orderNo">
        /// The order no that was returned by GetOrderHistory.
        /// </param>
        /// <param name="dealDate">
        /// The deal date. Format (YYYYMMDD)
        /// </param>
        /// <param name="page">
        /// The page. page = 0 is all.
        /// </param>
        /// <returns>
        /// ResultObject of List of DealHistory
        /// </returns>
        [WebMethod(Description = "Get deal history, return ResultObject<List<DealHistory>>", EnableSession = true)]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetDealHistory(decimal orderNo, string dealDate, int page)
        {
            try
            {
                if (Session == null || Session[CommonEnums.SESSION_KEY.CUSTOMER_ACCOUNT.ToString()] == null)
                {
                    return
                        Serializer.Serialize(
                            new ResultObject<List<DealHistory>>
                            {
                                Result = null,
                                RetCode = CommonEnums.RET_CODE.NOT_LOGIN,
                                ErrorMessage = CommonEnums.RET_CODE.NOT_LOGIN.ToString()
                            });
                }

                var resultObject = ETradeServices.GetDealHistory(orderNo, dealDate, page);

                return Serializer.Serialize(resultObject);
            }
            catch (Exception e)
            {
                ExceptionHandler.HandleException(e, WEB_SERVICE_POLICY);
                return Serializer.Serialize(
                            new ResultObject<List<DealHistory>>
                            {
                                Result = null,
                                RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR,
                                ErrorMessage = CommonEnums.RET_CODE.SYSTEM_ERROR.ToString()
                            });
            }
        }

        /// <summary>
        /// Gets the deal intra day.
        /// </summary>
        /// <param name="orderNo">The order no that was returned by PutOrder.</param>
        /// <param name="page">The page. If page = 0, it return all results.</param>
        /// <returns>ResultObject of list of DealInfo</returns>
        [WebMethod(Description = "Get deal information for intra-day, return ResultObject<List<DealInfo>>", EnableSession = true)]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetDealIntraDay(decimal orderNo, int page)
        {
            try
            {
                if (Session == null || Session[CommonEnums.SESSION_KEY.CUSTOMER_ACCOUNT.ToString()] == null)
                {
                    return
                        Serializer.Serialize(
                            new ResultObject<List<DealInfo>>
                            {
                                Result = null,
                                RetCode = CommonEnums.RET_CODE.NOT_LOGIN,
                                ErrorMessage = CommonEnums.RET_CODE.NOT_LOGIN.ToString()
                            });
                }

                var resultObject = ETradeServices.GetDealIntraDay(orderNo, page);

                return Serializer.Serialize(resultObject);
            }
            catch (Exception e)
            {
                ExceptionHandler.HandleException(e, WEB_SERVICE_POLICY);
                return Serializer.Serialize(
                            new ResultObject<List<DealInfo>>
                            {
                                Result = null,
                                RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR,
                                ErrorMessage = CommonEnums.RET_CODE.SYSTEM_ERROR.ToString()
                            });
            }
        }

        /// <summary>
        /// Gets the information that support for user that can refer before puting order.
        /// </summary>
        /// <param name="accountNo">The sub account no. Such as 0088661, 0088666</param>
        /// <param name="symbol">The symbol of HOSE/HNX/UPCOM</param>
        /// <param name="accountType">
        /// Type of the account. 
        /// 0: is normal account (such as 0088661).
        /// 1: is margin account (such as 0088666).
        /// Please refer to ACCOUNT_TYPE in CommonEnums.cs
        /// </param>
        /// <param name="side">
        /// The side of trading.
        /// 'B': buy, 'S': sell.
        /// Please refer to TRADE_SIDE in CommonEnums.cs
        /// </param>
        /// <returns>return the ResultObject of PreTradeInfo. Please refer to the entities PreTradeInfo.</returns>
        [WebMethod(Description = "Get pre trade information, it includes: stock available, cash available, stock information, tradign state", EnableSession = true)]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetPreTradeInfo(string accountNo, string symbol, int accountType, char side)
        {
            try
            {
                if (Session == null || Session[CommonEnums.SESSION_KEY.CUSTOMER_ACCOUNT.ToString()] == null)
                {
                    return
                        Serializer.Serialize(
                            new ResultObject<PreTradeInfo>
                            {
                                Result = null,
                                RetCode = CommonEnums.RET_CODE.NOT_LOGIN,
                                ErrorMessage = CommonEnums.RET_CODE.NOT_LOGIN.ToString()
                            });
                }

                var resultObject = ETradeServices.GetPreTradeInfo(accountNo, symbol, accountType, side);

                return Serializer.Serialize(resultObject);
            }
            catch (Exception e)
            {
                ExceptionHandler.HandleException(e, WEB_SERVICE_POLICY);
                return Serializer.Serialize(
                            new ResultObject<PreTradeInfo>
                            {
                                Result = null,
                                RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR,
                                ErrorMessage = CommonEnums.RET_CODE.SYSTEM_ERROR.ToString()
                            });
            }
        }

        #endregion

        #region market

        /// <summary>
        /// Gets the state of the trading.
        /// </summary>
        /// <param name="marketId">The market id.</param>
        /// <returns>The current trading status. Note: if GW not connect to LinkOPS yet, the trading status wil be 'W'
        /// ResultObject of char. Please refer to the MARKET_STATUS in CommonEnums.cs</returns>
        [WebMethod(Description = "Get current trading status, return objectResult of market status", EnableSession = true)]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetTradingState(int marketId)
        {
            try
            {
                /*if (Session == null || Session[CommonEnums.SESSION_KEY.CUSTOMER_ACCOUNT.ToString()] == null)
                {
                    return
                        Serializer.Serialize(
                            new ResultObject<int>
                            {
                                Result = -1,
                                RetCode = CommonEnums.RET_CODE.NOT_LOGIN,
                                ErrorMessage = CommonEnums.RET_CODE.NOT_LOGIN.ToString()
                            });
                }*/

                ResultObject<char> resultObject = ETradeServices.GetTradingState(marketId);

                return Serializer.Serialize(resultObject);
            }
            catch (Exception e)
            {
                ExceptionHandler.HandleException(e, WEB_SERVICE_POLICY);
                return Serializer.Serialize(
                            new ResultObject<char>
                            {
                                Result = (char)CommonEnums.MARKET_STATUS.UNVAILABLE,
                                RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR,
                                ErrorMessage = CommonEnums.RET_CODE.SYSTEM_ERROR.ToString()
                            });
            }
        }

        #endregion

        #region cash advance

        /// <summary>
        /// Gets the advance history.
        /// </summary>
        /// <param name="accountNo">The account no. Such as 0088661, 0088666</param>
        /// <param name="fromAdvanceDate">From advance date.Format(YYYYMMDD)</param>
        /// <param name="toAdvanceDate">To advance date.Format(YYYYMMDD)</param>
        /// <param name="fromSellDate">From sell date.Format(YYYYMMDD)</param>
        /// <param name="toSellDate">To sell date.Format(YYYYMMDD)</param>
        /// <param name="advanceStatus">The advance status</param>
        /// <param name="contractNo">The contract number</param>
        /// <param name="pageIndex">The page index. If pageIndex = 0 then it will return all results.</param>
        /// <param name="pageSize">Size of the page.</param>
        /// <returns>
        /// Return the PagingObject of list CashAdvance.
        /// </returns>
        [WebMethod(Description = "Get advance history from Core, return ResultObject<PagingObject<List<CashAdvance>>>", EnableSession = true)]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetAdvanceHistory(
            string accountNo,
            string fromAdvanceDate,
            string toAdvanceDate,
            string fromSellDate,
            string toSellDate,
            int advanceStatus,
            string contractNo,
            int pageIndex,
            int pageSize)
        {
            try
            {
                if (Session == null || Session[CommonEnums.SESSION_KEY.CUSTOMER_ACCOUNT.ToString()] == null)
                {
                    return
                        Serializer.Serialize(
                            new ResultObject<PagingObject<List<CashAdvance>>>
                            {
                                Result = new PagingObject<List<CashAdvance>>(),
                                RetCode = CommonEnums.RET_CODE.NOT_LOGIN,
                                ErrorMessage = CommonEnums.RET_CODE.NOT_LOGIN.ToString()
                            });
                }

                var resultObject = ETradeServices.GetAdvanceHistory(
                    accountNo,
                    fromAdvanceDate,
                    toAdvanceDate,
                    fromSellDate,
                    toSellDate,
                    advanceStatus,
                    contractNo,
                    pageIndex,
                    pageSize);

                return Serializer.Serialize(resultObject);
            }
            catch (Exception e)
            {
                ExceptionHandler.HandleException(e, WEB_SERVICE_POLICY);
                return Serializer.Serialize(
                            new ResultObject<PagingObject<List<CashAdvance>>>
                            {
                                Result = new PagingObject<List<CashAdvance>>(),
                                RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR,
                                ErrorMessage = CommonEnums.RET_CODE.SYSTEM_ERROR.ToString()
                            });
            }
        }

        /// <summary>
        /// Gets the advance info that support to create the request to cash advance.
        /// </summary>
        /// <param name="accountNo">The account no. such as 0088661, 0088666</param>
        /// <returns>
        /// Result object of list AdvanceInfo, and Sum information for each page/ all.
        /// </returns>
        [WebMethod(Description = "Get advance information, return ResultObject<PagingObject<List<AdvanceInfo>, AdvanceInfo, AdvanceInfo>>", EnableSession = true)]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetAdvanceInfo(string accountNo)
        {
            try
            {
                var resultObject = ETradeServices.GetAdvanceInfo(accountNo);
                return Serializer.Serialize(resultObject);
            }
            catch (Exception e)
            {
                ExceptionHandler.HandleException(e, WEB_SERVICE_POLICY);
                return Serializer.Serialize(
                            new ResultObject<PagingObject<List<AdvanceInfo>, AdvanceInfo, AdvanceInfo>>
                            {
                                Result = new PagingObject<List<AdvanceInfo>, AdvanceInfo, AdvanceInfo>(),
                                RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR,
                                ErrorMessage = CommonEnums.RET_CODE.SYSTEM_ERROR.ToString()
                            });
            }
        }

        /// <summary>
        /// News the cash advance.
        /// </summary>
        /// <param name="accountNo">The sub account no.</param>
        /// <param name="sellAmt">The sellAmt is the mount that was sold after fee/vat. </param>
        /// <param name="cashAdvance">The mount you would like to cash advance.</param>
        /// <param name="maxCanAdvance">The maximum mount that you can advance.</param>
        /// <param name="tradeDate">The sell date</param>
        /// <param name="pinCode">The pin code.</param>
        /// <returns>
        /// If it is successful, return code is SUCCESS.
        /// ResultObject of contract number.
        /// Otherwise, return code is reject reason.
        /// </returns>
        [WebMethod(Description = "New a cash advance, return ResultObject<string>", EnableSession = true)]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string NewCashAdvance(string accountNo,
            decimal sellAmt,
            decimal cashAdvance,
            decimal maxCanAdvance,
            string tradeDate)
        {
            try
            {
                
                var resultObject = ETradeServices.NewCashAdvance(
                    accountNo, sellAmt, cashAdvance, maxCanAdvance, tradeDate);

                return Serializer.Serialize(resultObject);
            }
            catch (Exception e)
            {
                ExceptionHandler.HandleException(e, WEB_SERVICE_POLICY);
                return Serializer.Serialize(
                            new ResultObject<string>
                            {
                                Result = string.Empty,
                                RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR,
                                ErrorMessage = CommonEnums.RET_CODE.SYSTEM_ERROR.ToString()
                            });

            }
        }

        /// <summary>
        /// Cancels the cash advance.
        /// </summary>
        /// <param name="accountNo">The sub account no.</param>
        /// <param name="contractNo">The contract no that was created by NewCashAdvance APIs..</param>
        /// <param name="pinCode">The pin code.</param>
        /// <returns>
        /// ResultObject of RET_CODE.
        /// </returns>
        [WebMethod(Description = "Cancel a cash advance, return ResultObject of RET_CODE.", EnableSession = true)]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string CancelCashAdvance(string accountNo, string contractNo)
        {
            try
            {
                var retCode = ETradeServices.CancelAdvance(accountNo, contractNo);

                return
                    Serializer.Serialize(
                        new ResultObject<CommonEnums.RET_CODE>
                            { 
                                ErrorMessage = retCode.ToString(), 
                                Result = retCode, 
                                RetCode = retCode 
                            });
            }
            catch (Exception e)
            {
                ExceptionHandler.HandleException(e, WEB_SERVICE_POLICY);
                return Serializer.Serialize(
                            new ResultObject<CommonEnums.RET_CODE>
                            {
                                Result = CommonEnums.RET_CODE.SYSTEM_ERROR,
                                RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR,
                                ErrorMessage = CommonEnums.RET_CODE.SYSTEM_ERROR.ToString()
                            });

            }
        }


        /// <summary>
        /// Gets the cash advance status.
        /// </summary>
        /// <param name="accountNo">The account no.</param>
        /// <param name="fromDate">From date.</param>
        /// <param name="toDate">To date.</param>
        /// <param name="status">The status.</param>
        /// <param name="pageIndex">Index of the page.</param>
        /// <param name="pageSize">Size of the page.</param>
        /// <returns>ResultObject<PagingObject<List<ETradeFinance.Entities.CashAdvance>>></returns>
        [WebMethod(Description = "Get cash advance status", EnableSession = true)]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetCashAdvanceStatus(string accountNo, string fromDate, string toDate, int status, int pageIndex, int pageSize)
        {
            try
            {
                var resultObject = ETradeServices.GetCashAdvanceStatus(accountNo, fromDate, toDate, status, pageIndex, pageSize);
                return Serializer.Serialize(resultObject);
            }
            catch (Exception e)
            {
                ExceptionHandler.HandleException(e, WEB_SERVICE_POLICY);
                return Serializer.Serialize(
                            new ResultObject<PagingObject<List<ETradeFinance.Entities.CashAdvance>>>
                            {
                                Result = new PagingObject<List<ETradeFinance.Entities.CashAdvance>>(),
                                RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR,
                                ErrorMessage = CommonEnums.RET_CODE.SYSTEM_ERROR.ToString()
                            });
            }
        }

        #endregion

        #region actual trade

        /// <summary>
        /// Gets the actual trade.
        /// </summary>
        /// <param name="accountNo">The sub account no.</param>
        /// <param name="fromDate">From date.Format (YYYYMMDD)</param>
        /// <param name="toDate">To date.Format (YYYYYMMDD)</param>
        /// <param name="symbol">
        /// The symbol.
        /// "all" or " ": get all symbol.
        /// </param>
        /// <param name="pageNumber">The page number. if pageNumber = 0 it will return all results</param>
        /// <param name="pageSize">Size of the page.</param>
        /// <returns>
        /// Return ResultObject of PageingObject of list ActualTrade
        /// </returns>
        [WebMethod(Description = "Get actual trading. Return a ResultObject<PagingObject<List<ActualTrade>>>", EnableSession = true)]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetActualTrade(string accountNo, string fromDate, string toDate, string symbol, int pageNumber, int pageSize)
        {
            try
            {
                if (Session == null || Session[CommonEnums.SESSION_KEY.CUSTOMER_ACCOUNT.ToString()] == null)
                {
                    return
                        Serializer.Serialize(
                            new ResultObject<PagingObject<List<ActualTrade>>>
                            {
                                Result = null,
                                RetCode = CommonEnums.RET_CODE.NOT_LOGIN,
                                ErrorMessage = CommonEnums.RET_CODE.NOT_LOGIN.ToString()
                            });
                }

                var resultObject = ETradeServices.GetActualTrade(
                    accountNo, fromDate, toDate, symbol, pageNumber, pageSize);

                return Serializer.Serialize(resultObject);
            }
            catch (Exception e)
            {
                ExceptionHandler.HandleException(e, WEB_SERVICE_POLICY);
                return Serializer.Serialize(
                            new ResultObject<PagingObject<List<ActualTrade>>>
                            {
                                Result = null,
                                RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR,
                                ErrorMessage = CommonEnums.RET_CODE.SYSTEM_ERROR.ToString()
                            });
            }
        }

        #endregion

        #region stocks

        /// <summary>
        /// Gets the XD info.
        /// </summary>
        /// <param name="accountNo">The sub account no.</param>
        /// <param name="fromDate">From date.Format (YYYYMMDD)</param>
        /// <param name="toDate">To date.Format (YYYYYMMDD)</param>
        /// <param name="symbol">
        /// The symbol.
        /// "all" or " ": get all symbol.
        /// </param>
        /// <param name="pageNumber">The page number. if pageNumber = 0 it will return all results</param>
        /// <param name="pageSize">Size of the page.</param>
        /// <returns>ResulObject of PagingObject of list of XD</returns>
        [WebMethod(Description = "Get right XD stock return ResultObject<PagingObject<List<XD>>>", EnableSession = true)]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetXDInfo(string accountNo, string symbol, string fromDate, string toDate, int pageIndex, int pageSize)
        {
            try
            {
                if (Session == null || Session[CommonEnums.SESSION_KEY.CUSTOMER_ACCOUNT.ToString()] == null)
                {
                    return
                        Serializer.Serialize(
                            new ResultObject<PagingObject<List<XD>>>
                            {
                                Result = new PagingObject<List<XD>>(),
                                RetCode = CommonEnums.RET_CODE.NOT_LOGIN,
                                ErrorMessage = CommonEnums.RET_CODE.NOT_LOGIN.ToString()
                            });
                }

                var resultObject = ETradeServices.GetXDInfo(accountNo, symbol, fromDate, toDate, pageIndex, pageSize);

                return Serializer.Serialize(resultObject);
            }
            catch (Exception e)
            {
                ExceptionHandler.HandleException(e, WEB_SERVICE_POLICY);
                return Serializer.Serialize(
                            new ResultObject<PagingObject<List<XD>>>
                            {
                                Result = new PagingObject<List<XD>>(),
                                RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR,
                                ErrorMessage = CommonEnums.RET_CODE.SYSTEM_ERROR.ToString()
                            });
            }
        }

        /// <summary>
        /// Gets the XR info.
        /// </summary>
        /// <param name="accountNo">The sub account no.</param>
        /// <param name="fromDate">From date.Format (YYYYMMDD)</param>
        /// <param name="toDate">To date.Format (YYYYYMMDD)</param>
        /// <param name="xType">
        /// The type of right: 0 : Right to buy. 1 : stock devident. 2: stock bonus. 3: cash devident.
        /// </param>
        /// <param name="pageIndex">The page number. if pageIndex = 0 it will return all results</param>
        /// <param name="pageSize">Size of the page.</param>
        /// <returns>ResulObject of PagingObject of list of XR</returns>
        [WebMethod(Description = "Get right XR stock, return ResultObject<PagingObject<List<XR>>>", EnableSession = true)]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetXRInfo(string accountNo, string symbol, string fromDate, string toDate, int xType, int pageIndex, int pageSize)
        {
            try
            {
                if (Session == null || Session[CommonEnums.SESSION_KEY.CUSTOMER_ACCOUNT.ToString()] == null)
                {
                    return
                        Serializer.Serialize(
                            new ResultObject<PagingObject<List<XR>>>
                            {
                                Result = new PagingObject<List<XR>>(),
                                RetCode = CommonEnums.RET_CODE.NOT_LOGIN,
                                ErrorMessage = CommonEnums.RET_CODE.NOT_LOGIN.ToString()
                            });
                }

                var resultObject = ETradeServices.GetXRInfo(accountNo, symbol, fromDate, toDate,
                                                            xType, pageIndex, pageSize);

                return Serializer.Serialize(resultObject);
            }
            catch (Exception e)
            {
                ExceptionHandler.HandleException(e, WEB_SERVICE_POLICY);
                return Serializer.Serialize(
                            new ResultObject<PagingObject<List<XR>>>
                            {
                                Result = new PagingObject<List<XR>>(),
                                RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR,
                                ErrorMessage = CommonEnums.RET_CODE.SYSTEM_ERROR.ToString()
                            });
            }
        }
        #endregion

        #region History
        
        ///<summary>
        /// Get list of pnl history.
        ///</summary>
        ///<param name="accountNo">Sub account no</param>
        ///<param name="fromDate">Search from date, format DD/MM/YYYY</param>
        ///<param name="toDate">Search to date, format DD/MM/YYYY</param>
        ///<param name="symbol">Stock symbol. if it empty, it will return for all symbol.</param>
        ///<param name="pageIndex">Page index</param>
        ///<param name="pageSize">Page size</param>
        /// <returns>
        /// <para>A ResultObject&lt;PagingObject&lt;List&lt;PnLhistory&gt;&gt;&gt; object contains returned code, 
        /// returned message and a list of PnLhistory object that contains pnl historyinformation.</para>
        /// <para>RET_CODE=NOT_LOGIN: User has not logged in.</para>
        /// <para>RET_CODE=NOT_ALLOW: User is not allowed to do this function.</para>
        /// <para>RET_CODE=NO_EXISTED_DATA: Data is not existing.</para>
        /// <para>RET_CODE=SUCCESS: Create data successfully.</para>
        /// <para>RET_CODE=SYSTEM_ERROR: System error.</para>
        /// </returns>
        [WebMethod(Description = "Get list of pnl history. return ResultObject<PagingObject<List<PnLhistory>>>", EnableSession = true)]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetListPnLHistory(string accountNo, string fromDate, string toDate, string symbol, int pageIndex, int pageSize)
        {
            var resultObject = new ResultObject<PagingObject<List<PnLhistory>>> {Result = null};
            try
            {
                if (Session == null || Session[CommonEnums.SESSION_KEY.CUSTOMER_ACCOUNT.ToString()] == null)
                {
                    resultObject.RetCode = CommonEnums.RET_CODE.NOT_LOGIN;
                    return Serializer.Serialize(resultObject);
                }
                // Only allow to get data of current login customer
                if (Session[accountNo + CommonEnums.SESSION_KEY.TRADING_ACCOUNT] != null)
                {
                    int count;
                    var pnlHistoryService = new PnLhistoryService();
                    var list = pnlHistoryService.GetList(accountNo, fromDate, toDate, symbol, pageIndex, pageSize,
                                                         out count);
                    if ((list != null) && (list.Count > 0))
                    {
                        var pagingObject = new PagingObject<List<PnLhistory>> {Count = count, Data = list};
                        resultObject.Result = pagingObject;
                        resultObject.RetCode = CommonEnums.RET_CODE.SUCCESS;
                    }
                    else
                    {
                        resultObject.RetCode = CommonEnums.RET_CODE.NO_EXISTED_DATA;
                    }
                }
                else
                {
                    resultObject.RetCode = CommonEnums.RET_CODE.NOT_ALLOW;
                }
                return Serializer.Serialize(resultObject);
            }
            catch (Exception e)
            {
                ExceptionHandler.HandleException(e, WEB_SERVICE_POLICY);
                resultObject.RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR;
                return Serializer.Serialize(resultObject);
            }
        }
        #endregion

        #region Bank Account
        [WebMethod(Description = "Get bank account info, return ResultObject<BankAccountInfo>", EnableSession = true)]
        [ScriptMethod(ResponseFormat = ResponseFormat.Json)]
        public string GetBankAccountInfo(string accountNo)
        {
            try
            {
                if (Session == null || Session[CommonEnums.SESSION_KEY.CUSTOMER_ACCOUNT.ToString()] == null)
                {
                    return
                        Serializer.Serialize(
                            new ResultObject<PagingObject<List<XR>>>
                            {
                                Result = new PagingObject<List<XR>>(),
                                RetCode = CommonEnums.RET_CODE.NOT_LOGIN,
                                ErrorMessage = CommonEnums.RET_CODE.NOT_LOGIN.ToString()
                            });
                }

                var resultObject = ETradeServices.GetBankAccountInfo (accountNo);

                return Serializer.Serialize(resultObject);
            }
            catch (Exception e)
            {
                ExceptionHandler.HandleException(e, WEB_SERVICE_POLICY);
                return Serializer.Serialize(
                            new ResultObject<BankAccountInfo>
                            {
                                Result = new BankAccountInfo(),
                                RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR,
                                ErrorMessage = CommonEnums.RET_CODE.SYSTEM_ERROR.ToString()
                            });
            }
        }
        #endregion
    }
}