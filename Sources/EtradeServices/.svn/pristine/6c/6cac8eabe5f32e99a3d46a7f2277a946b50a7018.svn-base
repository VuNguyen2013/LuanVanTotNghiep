// --------------------------------------------------------------------------------------------------------------------
// <copyright file="CashServices.cs" company="OTS">
//   2010
// </copyright>
// <summary>
//   Defines the CashServices type.
// </summary>
// --------------------------------------------------------------------------------------------------------------------

using ETradeCommon;
using ETradeFinance.Entities;

namespace ETradeCore.Services
{
    using ETradeCommon.Enums;

    using DataAccess;
    using DataAccess.SqlClient;
    using Entities;
    using ETradeFinance.Services;

    public class CashServices
    {
        readonly IFisCoreProvider _db2Provider = new SqlDb2Provider();
        readonly MarginServices marginSerive=new MarginServices();

        /// <summary>
        /// Gets the available cash.
        /// </summary>
        /// <param name="accountNo">The account no.</param>
        /// <param name="accountType"></param>
        /// <returns></returns>
        public CashAvailable GetAvailableCash(string accountNo, int accountType)
        {
            if (accountType == (int)CommonEnums.ACCOUNT_TYPE.NORMAL)
            {
                return _db2Provider.GetCashAvailable4NormalAccount(accountNo);
            }

            if (accountType == (int)CommonEnums.ACCOUNT_TYPE.MARGIN)
            {                
                CashAvailable cashAvailable=_db2Provider.GetCashAvailable4MarginAccount(accountNo);                      
                return cashAvailable;
            }
            //Not support other accountType
            return null;
        }

        /// <summary>
        /// Gets the available cash.
        /// </summary>
        /// <param name="accountNo">The account no.</param>
        /// <param name="accountType">Type of the account.</param>
        /// <param name="symbol">The symbol.</param>
        /// <returns></returns>
        public CashAvailable GetAvailableCash(string accountNo, int accountType,string tradeDate,string symbol)
        {
            if (accountType == (int)CommonEnums.ACCOUNT_TYPE.NORMAL)
            {
                return _db2Provider.GetCashAvailable4NormalAccount(accountNo);
            }

            if (accountType == (int)CommonEnums.ACCOUNT_TYPE.MARGIN)
            {
                CashAvailable cashAvailable = _db2Provider.GetCashAvailable4MarginAccount(accountNo);
                MaginSecInfo maginSecInfo = marginSerive.GetMaginSecInfo(tradeDate, symbol);
                if(maginSecInfo!=null)
                {
                    cashAvailable.IMStock = maginSecInfo.IM;
                    //Caculate the StockPP = EE/IMStock. IM Stock get form maginsec view of BA_VIEW
                    if (cashAvailable != null && maginSecInfo != null)
                    {
                        if (maginSecInfo.IM != 0)
                            cashAvailable.PPStock = cashAvailable.EE / maginSecInfo.IM;
                        else
                        {
                            cashAvailable.PPStock = 0;
                        }
                    }     
                }
                                             
                
                return cashAvailable;
            }
            //Not support other accountType
            return null;
        }

        /// <summary>
        /// Gets the cash balance.
        /// </summary>
        /// <param name="accountNo">The account no.</param>
        /// <param name="accountType">Type of the account.</param>
        /// <returns></returns>
        public CashBalance GetCashBalance(string accountNo, int accountType)
        {
            var cashBalance = new CashBalance();

            if (accountType == (int)CommonEnums.ACCOUNT_TYPE.NORMAL)
            {
                cashBalance = _db2Provider.GetCashBalance4NormalAccount(accountNo);
                if(cashBalance!=null)
                {
                    FeeService feeService = new FeeService();
                    cashBalance.TotalBuy = feeService.BuyValueAfterFee(cashBalance.TotalBuy);
                    cashBalance.TotalSell = feeService.SelValueAfterFee(cashBalance.TotalSell);                                 
                }
            }
            else if (accountType == (int)CommonEnums.ACCOUNT_TYPE.MARGIN)
            {
                cashBalance = _db2Provider.GetCashBalance4MarginAccount(accountNo);                
            }

            CashDueInfo cashDueInfo = _db2Provider.GetCashDue(accountNo);

            if (cashBalance == null)
            {
                return null;
            }

            if (cashDueInfo != null)
            {

                if (accountType == (int)CommonEnums.ACCOUNT_TYPE.NORMAL)
                {
                    cashBalance.AMT_T1 = cashDueInfo.AMT_T1;
                    cashBalance.AMT_T2 = cashDueInfo.AMT_T2;
                    cashBalance.AMT_T3 = cashDueInfo.AMT_T3;
                }                

                cashBalance.OverDue = cashDueInfo.OverDue;
                cashBalance.Payment = cashDueInfo.Payment;
            }

            return cashBalance;
        }
        
    }
}