// --------------------------------------------------------------------------------------------------------------------
// <copyright file="ETradeServices.cs" company="OTS">
//   2010
// </copyright>
// <summary>
//   This is main service and used to call other services
// </summary>
// --------------------------------------------------------------------------------------------------------------------

namespace ETradeServices.Services
{
    using System;
    using System.Collections.Generic;
    using System.Diagnostics;
    using System.Text;
    using System.Web.Script.Serialization;

    using AccountManager.Entities;

    using ETradeCommon;
    using ETradeCommon.Enums;

    using ETradeCore.Entities;
    using ETradeCore.Services;

    using ETradeFinance.Entities;
    using ETradeFinance.Services;

    using ETradeGWServices;

    using ETradeOrders.Entities;
    using ETradeOrders.Services;

    using global::ETradeServices.Services.RTServices;

    using RTDataServices.Entities;

    using CashAdvance = ETradeCore.Entities.CashAdvance;

    /// <summary>
    /// This is main service and used to call other services
    /// </summary>
    public class ETradeServices
    {
        /// <summary>
        /// The cash services: related all cash informations
        /// </summary>
        readonly CashServices _cashServices = new CashServices();

        /// <summary>
        /// eTradeGW: related orders
        /// </summary>
        readonly ETradeGW _eTradeGW = new ETradeGW();

        readonly ExecOrderService _execOrderService = new ExecOrderService();

        /// <summary>
        /// The stock services: related all stock informations
        /// </summary>
        readonly StockServices _stockServices = new StockServices();

        /// <summary>
        /// The order history services: related all order history informations
        /// </summary>
        readonly OrderHistoryServices _orderHistoryServices = new OrderHistoryServices();

        readonly DealServices _dealServices = new DealServices();

        readonly ValidateServices _validateServices = new ValidateServices();

        readonly Service _rtServices = new Service();

        private static readonly JavaScriptSerializer Serializer = new JavaScriptSerializer();

        private readonly CashAdvanceServices _cashAdvanceServices = new CashAdvanceServices();

        private readonly CashAdvanceHistoryService _cashAdvanceHistoryServices = new CashAdvanceHistoryService();

        private readonly ActualTradeServices _actualTradeServices = new ActualTradeServices();

        private readonly StockServices stockServices = new StockServices();


        /// <summary>
        /// Recovery lost packages from begin sequence to end sequence.
        /// </summary>
        /// <param name="beginSeq">Begin Sequence.</param>
        /// <param name="endSeq">End Sequence.</param>
        /// <returns>ResultObject<Boolean></returns>
        public ResultObject<Boolean> Recovery(int beginSeq, int endSeq)
        {
            Boolean ret = _eTradeGW.Recovery(beginSeq, endSeq);

            return new ResultObject<Boolean>
            {
                ErrorMessage = CommonEnums.RET_CODE.SUCCESS.ToString(),
                Result = ret,
                RetCode = CommonEnums.RET_CODE.SUCCESS
            };
        }


        /// <summary>
        /// Gets the available cash.
        /// </summary>
        /// <param name="accountNo">The account no.</param>
        /// <param name="accountType">Type of the account.</param>
        /// <returns>CashAvailable</returns>
        public ResultObject<CashAvailable> GetAvailableCash(string accountNo, int accountType)
        {
            CashAvailable cashAvailable = _cashServices.GetAvailableCash(accountNo, accountType);

            if (cashAvailable == null)
            {
                return new ResultObject<CashAvailable>
                    {
                        Result = null,
                        ErrorMessage = CommonEnums.RET_CODE.ERROR_NOT_CASH_AVAILABLE.ToString(),
                        RetCode = CommonEnums.RET_CODE.ERROR_NOT_CASH_AVAILABLE
                    };
            }

            return new ResultObject<CashAvailable>
                {
                    ErrorMessage = CommonEnums.RET_CODE.SUCCESS.ToString(),
                    Result = cashAvailable,
                    RetCode = CommonEnums.RET_CODE.SUCCESS
                };
        }

        /// <summary>
        /// Gets the cash balance.
        /// </summary>
        /// <param name="accountNo">The account no.</param>
        /// <param name="accountType">Type of the account.</param>
        /// <returns>CashBalance</returns>
        public ResultObject<CashBalance> GetCashBalance(string accountNo, int accountType)
        {
            CashBalance cashBalance = _cashServices.GetCashBalance(accountNo, accountType);

            if (cashBalance == null)
                return new ResultObject<CashBalance>
                    {
                        ErrorMessage = CommonEnums.RET_CODE.NO_EXISTED_DATA.ToString(),
                        Result = null,
                        RetCode = CommonEnums.RET_CODE.NO_EXISTED_DATA
                    };

            return new ResultObject<CashBalance>
            {
                ErrorMessage = CommonEnums.RET_CODE.SUCCESS.ToString(),
                Result = cashBalance,
                RetCode = CommonEnums.RET_CODE.SUCCESS
            };
        }

        /// <summary>
        /// Gets the stock balance.
        /// </summary>
        /// <param name="accountNo">
        /// The account no.
        /// </param>
        /// <param name="symbol">
        /// The symbol.
        /// </param>
        /// <param name="accountType">
        /// The account Type.
        /// </param>
        /// <returns>
        /// </returns>
        public ResultObject<StockAvailable> GetAvailableStock(string accountNo, string symbol, int accountType)
        {
            StockAvailable stockBalance = _stockServices.GetStockAvailable(accountNo, symbol, accountType);

            if (stockBalance == null)
                return new ResultObject<StockAvailable>
                    {
                        ErrorMessage = CommonEnums.RET_CODE.ERROR_NOT_STOCK_AVAILABLE.ToString(),
                        Result = null,
                        RetCode = CommonEnums.RET_CODE.ERROR_NOT_STOCK_AVAILABLE
                    };

            return new ResultObject<StockAvailable>
            {
                Result = stockBalance,
                RetCode = CommonEnums.RET_CODE.SUCCESS,
                ErrorMessage = CommonEnums.RET_CODE.SUCCESS.ToString()
            };
        }

        /// <summary>
        /// Caculates the portfolio.
        /// </summary>
        /// <param name="portfolioInfos">The portfolio infos.</param>
        /// <returns></returns>
        private void CaculatePortfolio(ref Dictionary<string, PortfolioInfo> portfolioInfos)
        {
            try
            {

                if (portfolioInfos != null)
                {
                    foreach (KeyValuePair<string, PortfolioInfo> portfolioInfo in portfolioInfos)
                    {
                        var stockInfo =
                            Serializer.Deserialize<ResultObject<StockInfo>>(
                                this._rtServices.GetStockInfo(portfolioInfo.Value.Symbol));

                        if (stockInfo.Result != null)
                        {
                            portfolioInfo.Value.MarketPrice = ((Decimal) stockInfo.Result.Last > 0)
                                                                  ? (Decimal) stockInfo.Result.Last
                                                                  : (Decimal) stockInfo.Result.RefPrice;

                        }
                        else
                        {
                            portfolioInfo.Value.MarketPrice = 0;
                        }

                        if (stockInfo.Result != null)
                        {
                            portfolioInfo.Value.GainLostToday =
                                ((Decimal) stockInfo.Result.Last - (Decimal) stockInfo.Result.RefPrice)*
                                portfolioInfo.Value.Total;
                            portfolioInfo.Value.GainLostToday =
                                Math.Round(portfolioInfo.Value.GainLostToday*Constants.MONEY_UNIT, 2);
                        }

                        portfolioInfo.Value.GainLoss = (portfolioInfo.Value.MarketPrice - portfolioInfo.Value.AvgPrice)*
                                                       portfolioInfo.Value.Total;

                        portfolioInfo.Value.GainLoss = Math.Round(portfolioInfo.Value.GainLoss*Constants.MONEY_UNIT, 2);

                        portfolioInfo.Value.InvestValue =
                            Math.Round(portfolioInfo.Value.AvgPrice*portfolioInfo.Value.Total*Constants.MONEY_UNIT, 2);
                        portfolioInfo.Value.CurrentValue =
                            Math.Round(portfolioInfo.Value.MarketPrice*portfolioInfo.Value.Total*Constants.MONEY_UNIT, 2);

                        if (portfolioInfo.Value.InvestValue != 0)
                        {
                            portfolioInfo.Value.Percent =
                                Math.Round((portfolioInfo.Value.GainLoss/portfolioInfo.Value.InvestValue)*100, 2);
                        }
                        else if (portfolioInfo.Value.Total > 0)
                        {
                            portfolioInfo.Value.Percent = 100;
                        }
                        else
                        {
                            portfolioInfo.Value.Percent = 0;
                        }
                    }
                }
            }
            catch(Exception exception)
            {
                LogHandler.Log(
                "CaculatePortfolio: Exception =" + exception,
                    GetType() + ".CaculatePortfolio()",
                    TraceEventType.Error);
            }
        }

        /// <summary>
        /// Caculate the profit and lost for each page or total portfolio (pageNumber == 0)
        /// </summary>
        /// <param name="portfolioInfos"></param>
        /// <param name="pageNumber"></param>
        /// <param name="pageSize"></param>
        /// <returns></returns>
        private static PortfolioInfo CaculateSumPortfolio(List<PortfolioInfo> portfolioInfos, int pageNumber, int pageSize)
        {
            var sumpage = new PortfolioInfo();

            try
            {
                int startIndex;
                int count;

                if (pageNumber == 0)
                {
                    startIndex = 0;
                    count = portfolioInfos.Count;
                }
                else
                {
                    startIndex = (pageNumber - 1)*pageSize;
                    int remainsItemCount = portfolioInfos.Count - startIndex;
                    count = (remainsItemCount > pageSize) ? pageSize : remainsItemCount;
                }

                var pagePortfolio = portfolioInfos.GetRange(startIndex, count);

                // Add a row for sumary portfolio
                sumpage.Total = 0;
                sumpage.CurrentValue = 0;
                sumpage.InvestValue = 0;

                foreach (PortfolioInfo item in pagePortfolio)
                {
                    if (item.Symbol != Constants.SUM_PORTFOLIO_PAGE &&
                        item.Symbol != Constants.SUM_PORTFOLIO_TOTAL)
                    {
                        sumpage.Total += item.Total;
                        sumpage.InvestValue += item.InvestValue;
                        sumpage.CurrentValue += item.CurrentValue;
                        sumpage.GainLostToday += item.GainLostToday;
                    }
                }

                sumpage.GainLoss = sumpage.CurrentValue - sumpage.InvestValue;

                if (sumpage.InvestValue != 0)
                {
                    sumpage.Percent = Math.Round(sumpage.GainLoss/sumpage.InvestValue*100, 2);
                }
                else if (sumpage.GainLoss != 0)
                {
                    sumpage.Percent = 100;
                }
                else
                {
                    sumpage.Percent = 0;
                }


                sumpage.Symbol = pageNumber > 0 ? Constants.SUM_PORTFOLIO_PAGE : Constants.SUM_PORTFOLIO_TOTAL;


            }
            catch (Exception exception)
            {
                LogHandler.Log(
                "CaculateSumPortfolio: Exception =" + exception,
                    "CaculateSumPortfolio()",
                    TraceEventType.Error);
            }

            return sumpage;
        }

        /// <summary>
        /// Gets the portfolio.
        /// </summary>
        /// <param name="accountNo">The account no.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="pageSize">Size of the page.</param>
        /// <param name="accountType">Type of the account.</param>
        /// <param name="subCustAccounts">The sub cust accounts.</param>
        /// <returns></returns>
        public ResultObject<PagingObject<List<PortfolioInfo>, PortfolioInfo, PortfolioInfo>> GetPortfolio(
            string accountNo, int pageNumber, int pageSize, int accountType, SubCustAccount subCustAccounts)
        {
            Dictionary<string, PortfolioInfo> portfolioInfos;

            try
            {
                portfolioInfos = this._stockServices.GetPortfolioInfo(accountNo, accountType);

                if (portfolioInfos == null)
                {
                    return new ResultObject<PagingObject<List<PortfolioInfo>, PortfolioInfo, PortfolioInfo>>
                        {
                            ErrorMessage = CommonEnums.RET_CODE.NO_EXISTED_DATA.ToString(),
                            RetCode = CommonEnums.RET_CODE.NO_EXISTED_DATA,
                            Result = new PagingObject<List<PortfolioInfo>, PortfolioInfo, PortfolioInfo>()
                        };
                }

                this.CaculatePortfolio(ref portfolioInfos);
            }
            catch (Exception exception)
            {
                LogHandler.Log(
                    "GetPortfolio: accountNo = " + accountNo + ", Exception = " + exception,
                    GetType() + ".GetPortfolio()",
                    TraceEventType.Error);

                return new ResultObject<PagingObject<List<PortfolioInfo>, PortfolioInfo, PortfolioInfo>>
                    {
                        Result = null,
                        RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR,
                        ErrorMessage = CommonEnums.RET_CODE.SYSTEM_ERROR.ToString()
                    };
            }

            if (portfolioInfos == null)
            {
                return new ResultObject<PagingObject<List<PortfolioInfo>, PortfolioInfo, PortfolioInfo>>
                    {
                        ErrorMessage = CommonEnums.RET_CODE.NO_EXISTED_DATA.ToString(),
                        Result = null,
                        RetCode = CommonEnums.RET_CODE.NO_EXISTED_DATA
                    };
            }

            // Create the list of portfolio
            var listporfolio = new List<PortfolioInfo>();

            foreach (KeyValuePair<string, PortfolioInfo> portfolioInfo in portfolioInfos)
            {
                // should validate cansell by:
                // 1. market status 
                // 2. sellable share 
                // 3. canbuy/cansell permission.
                portfolioInfo.Value.CanSell = this._validateServices.CanSell(
                    portfolioInfo.Value.Symbol, portfolioInfo.Value.SellableShare, accountNo, subCustAccounts);

                listporfolio.Add(portfolioInfo.Value);
            }

            var sumInPage = new PortfolioInfo();
            if (pageNumber > 0)
            {
                // caculate the sum profit and lost for this page.
                sumInPage = CaculateSumPortfolio(listporfolio, pageNumber, pageSize);
            }

            // caculate the sum profit and lost for total portfolio
            var totalSum = CaculateSumPortfolio(listporfolio, 0, 0);

            // paging
            List<PortfolioInfo> result = this.Paging(listporfolio, pageNumber, pageSize);

            return new ResultObject<PagingObject<List<PortfolioInfo>, PortfolioInfo, PortfolioInfo>>
                {
                    RetCode = CommonEnums.RET_CODE.SUCCESS,
                    Result =
                        new PagingObject<List<PortfolioInfo>, PortfolioInfo, PortfolioInfo>
                            {
                                Count = portfolioInfos.Count,
                                Data = result,
                                SumInPage = sumInPage,
                                TotalSum = totalSum
                            },
                    ErrorMessage = CommonEnums.RET_CODE.SUCCESS.ToString()
                };
        }

        /// <summary>
        /// Get the portfolio list.
        /// </summary>
        /// <param name="accountNo">The account no.</param>
        /// <param name="accountType">Type of the account.</param>
        /// <returns></returns>
        public List<string> GetListPortfolio(string accountNo, int accountType)
        {
            var portfolioList = _stockServices.GetListPortfolio(accountNo, accountType);
            return portfolioList;
        }

        /// <summary>
        /// Gets the order history.
        /// </summary>
        /// <param name="accountNo">The account no.</param>
        /// <param name="fromDate">From date.</param>
        /// <param name="toDate">To date.</param>
        /// <param name="symbol">The symbol.</param>
        /// <param name="orderStatus">The order status.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="pageSize">Size of the page.</param>
        /// <returns></returns>
        public ResultObject<PagingObject<List<OrderHistory>>> GetOrderHistory(string accountNo, string fromDate, string toDate, string symbol, int orderStatus, int pageNumber, int pageSize)
        {
            List<OrderHistory> list = _orderHistoryServices.GetOrderHistory(accountNo, fromDate, toDate, symbol, orderStatus, pageNumber, pageSize);

            if (list == null)
                return new ResultObject<PagingObject<List<OrderHistory>>>
                           {
                               ErrorMessage = CommonEnums.RET_CODE.NO_EXISTED_DATA.ToString(),
                               Result = null,
                               RetCode = CommonEnums.RET_CODE.NO_EXISTED_DATA
                           };

            // Paging order history
            int startIndex;
            int count;
            if (pageNumber == 0)
            {
                startIndex = 0;
                count = list.Count;
            }
            else
            {
                startIndex = (pageNumber - 1) * pageSize;
                int remainsItemCount = list.Count - startIndex;
                count = (remainsItemCount > pageSize) ? pageSize : remainsItemCount;
            }

            var returnValue = list.GetRange(startIndex, count);

            return new ResultObject<PagingObject<List<OrderHistory>>>
            {
                ErrorMessage = CommonEnums.RET_CODE.SUCCESS.ToString(),
                Result = new PagingObject<List<OrderHistory>>
                    {
                        Count = list.Count,
                        Data = returnValue
                    },
                RetCode = CommonEnums.RET_CODE.SUCCESS
            };
        }

        /// <summary>
        /// Gets the order history count.
        /// </summary>
        /// <param name="accountNo">The account no.</param>
        /// <param name="fromDate">From date.</param>
        /// <param name="toDate">To date.</param>
        /// <param name="symbol">The symbol.</param>
        /// <param name="orderStatus">The order status.</param>
        /// <returns></returns>
        public ResultObject<int> GetOrderHistoryCount(string accountNo, string fromDate, string toDate, string symbol, int orderStatus)
        {
            List<OrderHistory> list = _orderHistoryServices.GetOrderHistory(accountNo, fromDate, toDate, symbol, orderStatus, 0, 10);

            if (list == null)
                return new ResultObject<int>
                {
                    ErrorMessage = CommonEnums.RET_CODE.NO_EXISTED_DATA.ToString(),
                    Result = 0,
                    RetCode = CommonEnums.RET_CODE.NO_EXISTED_DATA
                };

            return new ResultObject<int>
            {
                ErrorMessage = CommonEnums.RET_CODE.SUCCESS.ToString(),
                Result = list.Count,
                RetCode = CommonEnums.RET_CODE.SUCCESS
            };
        }

        /// <summary>
        /// Gets the deal history.
        /// </summary>
        /// <param name="orderNo">The order no.</param>
        /// <param name="dealDate">The deal date.</param>
        /// <param name="page">The page.</param>
        /// <returns></returns>
        public ResultObject<List<DealHistory>> GetDealHistory(decimal orderNo, string dealDate, int page)
        {
            try
            {
                List<DealHistory> list = _dealServices.GetDealHistory(orderNo, dealDate, page);

                if (list == null)
                    return new ResultObject<List<DealHistory>>
                               {
                                   ErrorMessage = CommonEnums.RET_CODE.NO_EXISTED_DATA.ToString(),
                                   Result = null,
                                   RetCode = CommonEnums.RET_CODE.NO_EXISTED_DATA
                               };

                return new ResultObject<List<DealHistory>>
                           {
                               ErrorMessage = CommonEnums.RET_CODE.SUCCESS.ToString(),
                               Result = list,
                               RetCode = CommonEnums.RET_CODE.SUCCESS
                           };
            }
            catch(Exception exception)
            {
                LogHandler.Log(
                    "GetDealHistory orderNo = " + orderNo + " dealDate = " + dealDate + " Exception = " + exception,
                    GetType() + ".PutOrder()",
                    TraceEventType.Error);

                return new ResultObject<List<DealHistory>>
                           {
                               ErrorMessage = CommonEnums.RET_CODE.SYSTEM_ERROR.ToString(),
                               Result = null,
                               RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR
                           };
            }
        }

        /// <summary>
        /// Puts the order.
        /// </summary>
        /// <param name="market">The market.</param>
        /// <param name="accountNo">The account no.</param>
        /// <param name="secSymbol">The sec symbol.</param>
        /// <param name="side">The side.</param>
        /// <param name="volume">The volume.</param>
        /// <param name="price">The price.</param>
        /// <param name="conPrice">The con price.</param>
        /// <param name="accountType">Type of the account.</param>
        /// <param name="customerType">Type of the customer.</param>
        /// <param name="subCustAccount">The sub cust account.</param>
        /// <param name="subCustAccounts">The sub cust accounts.</param>
        /// <returns></returns>
        public ResultObject<int> PutOrder(
            int market,
            string accountNo,
            string secSymbol,
            char side,
            int volume,
            decimal price,
            char conPrice,
            int accountType,
            int customerType,
            SubCustAccount subCustAccount,
            AccountManager.Entities.TList<SubCustAccount> subCustAccounts)
        {
            var resultObject = new ResultObject<int> { RetCode = CommonEnums.RET_CODE.FAIL, Result = -1 };

            var stockAvailable = new StockAvailable();

            decimal avgPrice = 0;

            try
            {
                if (side == (char)CommonEnums.TRADE_SIDE.SELL)
                {
                    stockAvailable = this.stockServices.GetStockAvailable(accountNo, secSymbol, accountType);

                    avgPrice = stockAvailable != null ? stockAvailable.AvgPrice : 0;
                }

                CommonEnums.REJECT_REASON rejectReason = this._validateServices.IsValidNewOrder(
                    market, accountNo, secSymbol, side, volume, price, conPrice, accountType, customerType,
                    subCustAccount,
                    subCustAccounts, stockAvailable);

                if (rejectReason != CommonEnums.REJECT_REASON.IS_VALID)
                {
                    return new ResultObject<int>
                               {
                                   ErrorMessage = rejectReason.ToString(),
                                   Result = (int)rejectReason,
                                   RetCode = CommonEnums.RET_CODE.FAIL
                               };
                }

                var orderSession = MarketServices.GetOrderSession(market);
                int orderID;

                CommonEnums.RET_CODE ret = _eTradeGW.PutOrder(market, orderSession, accountNo, secSymbol, side, volume,
                                                              price, conPrice, avgPrice, out orderID);

                resultObject.Result = orderID;
                resultObject.RetCode = ret;
                resultObject.ErrorMessage = ret.ToString();

                return resultObject;
            }

            catch (Exception exception)
            {
                LogHandler.Log("PutOrder Account = " + accountNo + " side = " + side + " Symbol = " + secSymbol + " price = " + price + " Exception = " + exception, 
                     GetType() + ".PutOrder()",
                                         TraceEventType.Error);

                return new ResultObject<int>
                {
                    ErrorMessage = CommonEnums.RET_CODE.SYSTEM_ERROR.ToString(),
                    Result = (int)CommonEnums.RET_CODE.SYSTEM_ERROR,
                    RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR
                };
            }
        }

        /// <summary>
        /// Cancels the order.
        /// </summary>
        /// <param name="orderId">The order id.</param>
        /// <returns>ResultObject of CommonEnums.RET_CODE</returns>
        public ResultObject<int> CancelOrder(int orderId)
        {
            ExecOrder execOrder;

            try
            {
                execOrder = _execOrderService.GetByOrderId(orderId);
                if (execOrder == null)
                {
                    return new ResultObject<int>
                               {
                                   ErrorMessage = CommonEnums.REJECT_REASON.INCORRECT_ORDER_NO.ToString(),
                                   Result = (int)CommonEnums.REJECT_REASON.INCORRECT_ORDER_NO,
                                   RetCode = CommonEnums.RET_CODE.FAIL
                               };
                }

                CommonEnums.REJECT_REASON rejectReason = _validateServices.IsValidCancelOrder(execOrder);

                if (rejectReason != CommonEnums.REJECT_REASON.IS_VALID)
                {
                    return new ResultObject<int>
                               {
                                   ErrorMessage = rejectReason.ToString(),
                                   Result = (int)rejectReason,
                                   RetCode = CommonEnums.RET_CODE.FAIL
                               };
                }

                CommonEnums.RET_CODE retCode = _eTradeGW.CancelOrder(orderId);

                return new ResultObject<int>
                           {
                               RetCode = retCode,
                               Result = (int)retCode,
                               ErrorMessage = retCode.ToString()
                           };
            }
            catch (Exception exception)
            {
                LogHandler.Log("CancelOrder OrderID = " + orderId + " Exception = " + exception,
                    this.GetType() + ".CancelOrder()",
                                        TraceEventType.Error);

                return new ResultObject<int>
                           {
                               ErrorMessage = CommonEnums.RET_CODE.SYSTEM_ERROR.ToString(),
                               Result = (int)CommonEnums.RET_CODE.SYSTEM_ERROR,
                               RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR
                           };
            }
        }

        /// <summary>
        /// Gets the newest order status.
        /// </summary>
        /// <param name="pageSize">Size of the page.</param> 
        /// <param name="pageIndex">The page number.</param>
        /// <param name="accountId">The account id.</param>
        /// <param name="isPending">Is Pending.</param>
        /// <param name="isMatched">Is Matched.</param>
        /// <param name="isSemiMatched">Is SemiMatched.</param>
        /// <param name="isCanceling">Is Canceling.</param>
        /// <param name="isCancelled">Is Cancelled.</param>
        /// <param name="isRejected">IsRjected.</param>
        /// <returns>ResultObject is list of ExecOrder</returns>
        public ResultObject<PagingObject<List<ExecOrder>>> GetNewsestOrderStatus(
            int pageSize,
            int pageIndex,
            string accountId,
            bool isPending,
            bool isMatched,
            bool isSemiMatched,
            bool isCanceling,
            bool isCancelled,
            bool isRejected)
        {
            var resultObject = new ResultObject<PagingObject<List<ExecOrder>>>
                {
                    RetCode = CommonEnums.RET_CODE.SUCCESS,
                    Result = new PagingObject<List<ExecOrder>>(),
                    ErrorMessage = CommonEnums.RET_CODE.SUCCESS.ToString()
                };

            string whereClause = GetWhereClause(
                accountId, isPending, isMatched, isSemiMatched, isCanceling, isCancelled, isRejected);

            int totalCount = 0;

            var orders = new ETradeOrders.Entities.TList<ExecOrder>();
            if (pageIndex == 0)
            {
                // Get all pages
                orders = this._execOrderService.GetPaged(
                whereClause, "OrderID DESC", pageIndex, int.MaxValue, out totalCount);
            }
            else if (pageIndex > 0)
            {
                orders = this._execOrderService.GetPaged(
                whereClause, "OrderID DESC", pageIndex - 1, pageSize, out totalCount);
            }

            if (orders == null || orders.Count == 0)
            {
                resultObject.Result = new PagingObject<List<ExecOrder>>();
                resultObject.RetCode = CommonEnums.RET_CODE.NO_EXISTED_DATA;
                resultObject.ErrorMessage = CommonEnums.RET_CODE.NO_EXISTED_DATA.ToString();

                return resultObject;
            }

            var result = new List<ExecOrder>();

            // validate this order can be canceled or not
            foreach (ExecOrder order in orders)
            {
                order.canCancel = (CommonEnums.REJECT_REASON.IS_VALID == this._validateServices.IsValidCancelOrder(order)) ? true : false;
                result.Add(order);
            }

            resultObject.Result = new PagingObject<List<ExecOrder>>
                {
                    Count = totalCount,
                    Data = result
                };

            return resultObject;
        }

        /// <summary>
        /// Gets the newest order count.
        /// </summary>
        /// <param name="accountId">The account id.</param>
        /// <param name="isPending">Is Pending.</param>
        /// <param name="isMatched">Is Matched.</param>
        /// <param name="isSemiMatched">Is SemiMatched.</param>
        /// <param name="isCanceling">Is Canceling.</param>
        /// <param name="isCancelled">Is Cancelled.</param>
        /// <param name="isRejected">IsRjected.</param>
        /// <returns>int</returns>
        public ResultObject<int> GetNewsestOrderCount(string accountId, bool isPending, bool isMatched, bool isSemiMatched, bool isCanceling, bool isCancelled, bool isRejected)
        {
            var resultObject = new ResultObject<int> { RetCode = CommonEnums.RET_CODE.SUCCESS, Result = 0 };

            string whereClause = GetWhereClause(accountId, isPending, isMatched, isSemiMatched, isCanceling, isCancelled, isRejected);
            int totalCount;

            resultObject.Result = this._execOrderService.GetTotalItems(whereClause, out totalCount);

            return resultObject;
        }

        /// <summary>
        /// Gets the GetWhereClause
        /// </summary>
        /// <param name="accountId">
        /// The account no.
        /// </param>
        /// <param name="isPending">
        /// From date.
        /// </param>
        /// <param name="isMatched">
        /// To date.
        /// </param>
        /// <param name="isSemiMatched">
        /// The symbol.
        /// </param>
        /// <param name="isCanceling">
        /// The order status.
        /// </param>
        /// <param name="isCancelled">
        /// The order status.
        /// </param>
        /// <param name="isRejected">
        /// The order status.
        /// </param>
        /// <returns>
        /// string
        /// </returns>
        private static string GetWhereClause(string accountId, bool isPending, bool isMatched, bool isSemiMatched,
            bool isCanceling, bool isCancelled, bool isRejected)
        {
            var whereClause = new StringBuilder();
            const string orString = " OR ";
            string whereString;

            if (isPending && isMatched && isSemiMatched && isCanceling && isCancelled && isRejected)
            {
                whereString = string.Format("SubCustAccountID = '{0}'", accountId);
            }
            else
            {
                if (isPending)
                {
                    whereClause.Append(
                        string.Format(
                            "(OrderStatus = {0} OR OrderStatus = {1} OR OrderStatus = {2})",
                            (int)CommonEnums.ORDER_STATUS.NEW_ORDER,
                            (int)CommonEnums.ORDER_STATUS.CONFIRMED_FIS,
                                                (int)CommonEnums.ORDER_STATUS.CONFIRMED_SET));
                }

                if (isMatched)
                {
                    whereClause.Append(orString);
                    whereClause.AppendFormat(" (OrderStatus = {0})", (int)CommonEnums.ORDER_STATUS.FULL_MATCHED);
                }

                if (isSemiMatched)
                {
                    whereClause.Append(orString);
                    whereClause.AppendFormat(
                        " (OrderStatus = {0} OR (ExecutedVol > 0 AND (((Volume - ExecutedVol) > 0) OR (CancelledVolume > 0))))",
                        (int)CommonEnums.ORDER_STATUS.SEMI_MATCHED);
                }

                if (isCanceling)
                {
                    whereClause.Append(orString);
                    whereClause.AppendFormat(
                        " (OrderStatus = {0} OR OrderStatus = {1})",
                        (int)CommonEnums.ORDER_STATUS.NEW_CANCEL,
                        (int)CommonEnums.ORDER_STATUS.WAITING_CANCEL);
                }

                if (isCancelled)
                {
                    whereClause.Append(orString);
                    whereClause.AppendFormat(" (OrderStatus = {0})", (int)CommonEnums.ORDER_STATUS.CANCELLED);
                }

                if (isRejected)
                {
                    whereClause.Append(orString);
                    whereClause.AppendFormat(
                        " (OrderStatus = {0} OR OrderStatus = {1})",
                        (int)CommonEnums.ORDER_STATUS.ORDER_REJECTED,
                        (int)CommonEnums.ORDER_STATUS.CANCEL_REJECTED);
                }

                whereString = whereClause.ToString();
                if (string.IsNullOrEmpty(whereString.Trim()))
                {
                    whereString = string.Format("SubCustAccountID = '{0}'", accountId);
                }
                else
                {
                    if (whereString.StartsWith(orString))
                    {
                        whereString = whereString.Substring(orString.Length, whereString.Length - orString.Length);
                    }
                    whereString = "SubCustAccountID = '" + accountId + "' AND (" + whereString + ")";
                }
            }

            return whereString;
        }

        /// <summary>
        /// Gets the state of the trading.
        /// </summary>
        /// <param name="marketId">The market id.</param>
        /// <returns>ResultObject of char</returns>
        public ResultObject<char> GetTradingState(int marketId)
        {
            if (AppConfig.CheckGWConnection && !_eTradeGW.IsConnected())
            {
                return new ResultObject<char>
                {
                    ErrorMessage = CommonEnums.MARKET_STATUS.WAITING.ToString(),
                    RetCode = CommonEnums.RET_CODE.SUCCESS,
                    Result = (char)CommonEnums.MARKET_STATUS.WAITING
                };
            }

            char tradingStatus = MarketServices.TradingStatus(marketId);

            return new ResultObject<char>
                {
                    ErrorMessage = ((CommonEnums.MARKET_STATUS)tradingStatus).ToString(),
                    RetCode = CommonEnums.RET_CODE.SUCCESS,
                    Result = tradingStatus
                };
        }

        /// <summary>
        /// Gets the deal intra day.
        /// </summary>
        /// <param name="orderNo">The order no.</param>
        /// <param name="page">The page.</param>
        /// <returns>ResultObject of list of DealInfo</returns>
        public ResultObject<List<DealInfo>> GetDealIntraDay(decimal orderNo, int page)
        {
            List<DealInfo> list = _dealServices.GetDealIntraDay(orderNo, page);

            if (list == null)
                return new ResultObject<List<DealInfo>>
                    {
                        ErrorMessage = CommonEnums.RET_CODE.NO_EXISTED_DATA.ToString(),
                        Result = null,
                        RetCode = CommonEnums.RET_CODE.NO_EXISTED_DATA
                    };

            return new ResultObject<List<DealInfo>>
            {
                ErrorMessage = CommonEnums.RET_CODE.SUCCESS.ToString(),
                Result = list,
                RetCode = CommonEnums.RET_CODE.SUCCESS
            };
        }

        /// <summary>
        /// Gets the portfolio direct.
        /// </summary>
        /// <param name="accountNo">The account no.</param>
        /// <param name="accounType">Type of the accoun.</param>
        /// <returns></returns>
        public ResultObject<List<Portfolio>> GetPortfolioDirect(string accountNo, int accounType)
        {
            List<Portfolio> returnVal = new List<Portfolio>();
            if (accounType == (int)CommonEnums.ACCOUNT_TYPE.NORMAL)
            {
                returnVal = _stockServices.GetPortfolioDirect4NormalAccount(accountNo);
            }

            return new ResultObject<List<Portfolio>>
                {
                    ErrorMessage = CommonEnums.RET_CODE.SUCCESS.ToString(),
                    Result = returnVal,
                    RetCode = CommonEnums.RET_CODE.SUCCESS
                };

        }

        /// <summary>
        /// Gets the advance history.
        /// </summary>
        /// <param name="accountNo">The account no.</param>
        /// <param name="fromAdvanceDate">From advance date.</param>
        /// <param name="toAdvanceDate">To advance date.</param>
        /// <param name="fromSellDate">From sell date.</param>
        /// <param name="toSellDate">To sell date.</param>
        /// <param name="advanceStatus">The advance status.</param>
        /// <param name="contractNo">The contract no.</param>
        /// <param name="pageIndex">Index of the page.</param>
        /// <param name="pageSize">Size of the page.</param>
        /// <returns></returns>
        public ResultObject<PagingObject<List<CashAdvance>>> GetAdvanceHistory(
            string accountNo,
            string fromAdvanceDate,
            string toAdvanceDate,
            string fromSellDate,
            string toSellDate,
            int advanceStatus,
            string contractNo,
            int pageIndex,
            int pageSize)
        {
            List<CashAdvance> cashAdvHistFromCore = null;
            List<CashAdvance> cashAdvHistFromOtsDb = null;

            switch (advanceStatus)
            {
                case (int)CommonEnums.ADVANCE_STATUS.FINISHED:
                    // Get advance finished from core
                    cashAdvHistFromCore = _cashAdvanceServices.GetAdvanceHistoryFromCore(
                        accountNo, fromAdvanceDate, toAdvanceDate, fromSellDate, toSellDate, contractNo);
                    break;
                case (int)CommonEnums.ADVANCE_STATUS.CANCELLED:
                case (int)CommonEnums.ADVANCE_STATUS.PENDING:
                case (int)CommonEnums.ADVANCE_STATUS.REJECTED:
                case (int)CommonEnums.ADVANCE_STATUS.PROCESSING:
                    // Get advance history (cancelled, rejected) from Ots database
                    cashAdvHistFromOtsDb = _cashAdvanceServices.GetAdvanceHistoryFromOtsDb(
                        accountNo, fromAdvanceDate, toAdvanceDate, fromSellDate, toSellDate, advanceStatus, contractNo);
                    break;
                case (int)CommonEnums.ADVANCE_STATUS.ALL:
                    // Get advance finished from core
                    cashAdvHistFromCore = _cashAdvanceServices.GetAdvanceHistoryFromCore(
                        accountNo, fromAdvanceDate, toAdvanceDate, fromSellDate, toSellDate, contractNo);

                    // Get advance history (cancelled, rejected) from Ots database
                    cashAdvHistFromOtsDb = _cashAdvanceServices.GetAdvanceHistoryFromOtsDb(
                        accountNo, fromAdvanceDate, toAdvanceDate, fromSellDate, toSellDate, advanceStatus, contractNo);
                    break;

                    default:
                    break;


            }

            // No data found
            if ((cashAdvHistFromCore == null && cashAdvHistFromOtsDb == null) || 
                ((cashAdvHistFromCore != null && cashAdvHistFromCore.Count == 0) 
                && (cashAdvHistFromOtsDb != null && cashAdvHistFromOtsDb.Count == 0)))
            {
                return new ResultObject<PagingObject<List<CashAdvance>>>
                    {
                        ErrorMessage = CommonEnums.RET_CODE.NO_EXISTED_DATA.ToString(),
                        Result = new PagingObject<List<CashAdvance>>(),
                        RetCode = CommonEnums.RET_CODE.NO_EXISTED_DATA
                    };
            }

            var totalCashAdvance = new List<CashAdvance>();

            // Join cash advance from core and cash advance from Otsdb
            if (cashAdvHistFromCore != null)
            {
                totalCashAdvance.AddRange(cashAdvHistFromCore);
            }

            if (cashAdvHistFromOtsDb != null)
            {
                totalCashAdvance.AddRange(cashAdvHistFromOtsDb);
            }

            // Paging advance history
            int startIndex = 0;
            int count = 0;

            if (pageIndex == 0)
            {
                startIndex = 0;
                count = totalCashAdvance.Count;
            }
            else
            {
                startIndex = (pageIndex - 1) * pageSize;
                int remainsItemCount = totalCashAdvance.Count - startIndex;
                count = (remainsItemCount > pageSize) ? pageSize : remainsItemCount;
            }

            var returnValue = totalCashAdvance.GetRange(startIndex, count);

            return new ResultObject<PagingObject<List<CashAdvance>>>
                {
                    ErrorMessage = CommonEnums.RET_CODE.SUCCESS.ToString(),
                    Result = new PagingObject<List<CashAdvance>>
                        {
                            Data = returnValue,
                            Count = totalCashAdvance.Count
                        },
                    RetCode = CommonEnums.RET_CODE.SUCCESS
                };
        }

        /// <summary>
        /// Gets the actual trade.
        /// </summary>
        /// <param name="accountNo">The account no.</param>
        /// <param name="fromDate">From date.</param>
        /// <param name="toDate">To date.</param>
        /// <param name="symbol">The symbol.</param>
        /// <param name="pageNumber">The page number.</param>
        /// <param name="pageSize">Size of the page.</param>
        /// <returns></returns>
        public ResultObject<PagingObject<List<ActualTrade>>> GetActualTrade(string accountNo, string fromDate, string toDate, string symbol, int pageNumber, int pageSize)
        {
            List<ActualTrade> actualTrades = this._actualTradeServices.GetActualTrading(accountNo, fromDate, toDate, symbol);

            if (actualTrades == null)
            {
                return new ResultObject<PagingObject<List<ActualTrade>>>
                    {
                        ErrorMessage = CommonEnums.RET_CODE.NO_EXISTED_DATA.ToString(),
                        Result = new PagingObject<List<ActualTrade>>(),
                        RetCode = CommonEnums.RET_CODE.NO_EXISTED_DATA
                    };
            }

            // Paging actual trading
            int startIndex;
            int count;
            if (pageNumber == 0)
            {
                startIndex = 0;
                count = actualTrades.Count;
            }
            else
            {
                startIndex = (pageNumber - 1) * pageSize;
                int remainsItemCount = actualTrades.Count - startIndex;
                count = (remainsItemCount > pageSize) ? pageSize : remainsItemCount;
            }

            var returnValue = actualTrades.GetRange(startIndex, count);

            return new ResultObject<PagingObject<List<ActualTrade>>>
            {
                ErrorMessage = CommonEnums.RET_CODE.SUCCESS.ToString(),
                Result = new PagingObject<List<ActualTrade>>
                             {
                                 Count = actualTrades.Count,
                                 Data = returnValue
                             },
                RetCode = CommonEnums.RET_CODE.SUCCESS
            };
        }

        #region paging

        /// <summary>
        /// Pagings the specified data.
        /// </summary>
        /// <param name="data">The data.</param>
        /// <param name="pageIndex">Index of the page.</param>
        /// <param name="pageSize">Size of the page.</param>
        /// <returns></returns>
        private List<PortfolioInfo> Paging(List<PortfolioInfo> data, int pageIndex, int pageSize)
        {
            int startIndex;
            int count;

            if (pageIndex == 0)
            {
                startIndex = 0;
                count = data.Count;
            }
            else
            {
                startIndex = (pageIndex - 1) * pageSize;
                int remainsItemCount = data.Count - startIndex;
                count = (remainsItemCount > pageSize) ? pageSize : remainsItemCount;
            }

            var pagePortfolio = data.GetRange(startIndex, count);

            return pagePortfolio;
        }

        /// <summary>
        /// Pagings the specified data.
        /// </summary>
        /// <param name="data">The data.</param>
        /// <param name="pageIndex">Index of the page.</param>
        /// <param name="pageSize">Size of the page.</param>
        /// <returns></returns>
        private List<XD> Paging(List<XD> data, int pageIndex, int pageSize)
        {
            int startIndex;
            int count;

            if (pageIndex == 0)
            {
                startIndex = 0;
                count = data.Count;
            }
            else
            {
                startIndex = (pageIndex - 1) * pageSize;
                int remainsItemCount = data.Count - startIndex;
                count = (remainsItemCount > pageSize) ? pageSize : remainsItemCount;
            }

            var xds = data.GetRange(startIndex, count);

            return xds;
        }

        /// <summary>
        /// Pagings the specified data.
        /// </summary>
        /// <param name="data">The data.</param>
        /// <param name="pageIndex">Index of the page.</param>
        /// <param name="pageSize">Size of the page.</param>
        /// <returns></returns>
        private List<XR> Paging(List<XR> data, int pageIndex, int pageSize)
        {
            int startIndex;
            int count;

            if (pageIndex == 0)
            {
                startIndex = 0;
                count = data.Count;
            }
            else
            {
                startIndex = (pageIndex - 1) * pageSize;
                int remainsItemCount = data.Count - startIndex;
                count = (remainsItemCount > pageSize) ? pageSize : remainsItemCount;
            }

            var xds = data.GetRange(startIndex, count);

            return xds;
        }

        #endregion

        /// <summary>
        /// Gets the pre trade info.
        /// </summary>
        /// <param name="accountNo">The account no.</param>
        /// <param name="symbol">The symbol.</param>
        /// <param name="accountType">Type of the account.</param>
        /// <param name="side">The side.</param>
        /// <returns></returns>
        public ResultObject<PreTradeInfo> GetPreTradeInfo(string accountNo, string symbol, int accountType, char side)
        {
            ResultObject<PreTradeInfo> retObject = new ResultObject<PreTradeInfo>
                                                          {
                                                              ErrorMessage =
                                                                  CommonEnums.RET_CODE.SYSTEM_ERROR.ToString(),
                                                              Result = null,
                                                              RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR
                                                          };

            var stockInfo = Serializer.Deserialize<ResultObject<StockInfo>>(this._rtServices.GetStockInfo(symbol));

            if (stockInfo.Result == null)
            {
                return retObject;
            }

            ResultObject<char> tradingState = this.GetTradingState(stockInfo.Result.MarketID);

            if (side == (char)CommonEnums.TRADE_SIDE.BUY)
            {
                var cashAvailable = this.GetAvailableCash(accountNo, accountType);

                return new ResultObject<PreTradeInfo>
                           {
                               ErrorMessage = CommonEnums.RET_CODE.SUCCESS.ToString(),
                               Result =
                                   new PreTradeInfo
                                       {
                                           CashAvailable = cashAvailable.Result,
                                           StockInfo = stockInfo.Result,
                                           TradingState = (CommonEnums.MARKET_STATUS)tradingState.Result
                                       },
                               RetCode = CommonEnums.RET_CODE.SUCCESS
                           };
            }

            //for SELL side
            var stockAvailable = this.GetAvailableStock(accountNo, symbol, accountType);

            return new ResultObject<PreTradeInfo>
            {
                ErrorMessage = CommonEnums.RET_CODE.SUCCESS.ToString(),
                Result =
                    new PreTradeInfo
                    {
                        StockAvailable = stockAvailable.Result,
                        StockInfo = stockInfo.Result,
                        TradingState = (CommonEnums.MARKET_STATUS)tradingState.Result
                    },
                RetCode = CommonEnums.RET_CODE.SUCCESS
            };
        }

        /// <summary>
        /// Gets the XD info.
        /// </summary>
        /// <param name="accountNo">The account no.</param>
        /// <param name="symbol">The symbol.</param>
        /// <param name="fromDate">From date.</param>
        /// <param name="toDate">To date.</param>
        /// <param name="pageIndex">Index of the page.</param>
        /// <param name="pageSize">Size of the page.</param>
        /// <returns></returns>
        public ResultObject<PagingObject<List<XD>>> GetXDInfo(string accountNo, string symbol, string fromDate, string toDate, int pageIndex, int pageSize)
        {
            List<XD> list = this.stockServices.GetXDInfo(accountNo, symbol, fromDate, toDate);

            if (list == null)
            {
                return new ResultObject<PagingObject<List<XD>>>
                           {
                               ErrorMessage = CommonEnums.RET_CODE.NO_EXISTED_DATA.ToString(),
                               RetCode = CommonEnums.RET_CODE.NO_EXISTED_DATA,
                               Result = new PagingObject<List<XD>>()
                           };
            }

            // Paging XD
            var returnValue = this.Paging(list, pageIndex, pageSize);

            return new ResultObject<PagingObject<List<XD>>>
            {
                ErrorMessage = CommonEnums.RET_CODE.SUCCESS.ToString(),
                Result = new PagingObject<List<XD>>
                {
                    Data = returnValue,
                    Count = list.Count
                },
                RetCode = CommonEnums.RET_CODE.SUCCESS
            };
        }

        /// <summary>
        /// Gets the XR info.
        /// </summary>
        /// <param name="accountNo">The account no.</param>
        /// <param name="symbol">The symbol.</param>
        /// <param name="sellFromDate">The sell from date.</param>
        /// <param name="sellToDate">The sell to date.</param>
        /// <param name="transferFromDate">The transfer from date.</param>
        /// <param name="transferToDate">The transfer to date.</param>
        /// <param name="pageIndex">Index of the page.</param>
        /// <param name="pageSize">Size of the page.</param>
        /// <returns></returns>
        public ResultObject<PagingObject<List<XR>>> GetXRInfo(string accountNo, string symbol, string fromDate, string toDate, int xType, int pageIndex, int pageSize)
        {
            List<XR> list = this.stockServices.GetXRInfo(
                accountNo, symbol, fromDate, toDate, xType);

          

            if (list == null)
            {
                return new ResultObject<PagingObject<List<XR>>>
                {
                    ErrorMessage = CommonEnums.RET_CODE.NO_EXISTED_DATA.ToString(),
                    RetCode = CommonEnums.RET_CODE.NO_EXISTED_DATA,
                    Result = new PagingObject<List<XR>>()
                };
            }

            if (xType == (int)CommonEnums.RIGHTTYPE.ALL_RIGHT)
            {
                List<XR> retList = new List<XR>();

                foreach (var item in list)
                {
                    if ((int)item.xType == (int)CommonEnums.RIGHTTYPE.STOCK_DIVIDENT ||
                        (int)item.xType == (int)CommonEnums.RIGHTTYPE.STOCK_BONUS)
                    {
                        retList.Add(item);
                    }
                }

                // Paging XR
                var returnValueAll = this.Paging(retList, pageIndex, pageSize);

                return new ResultObject<PagingObject<List<XR>>>
                {
                    ErrorMessage = CommonEnums.RET_CODE.SUCCESS.ToString(),
                    Result = new PagingObject<List<XR>>
                    {
                        Data = returnValueAll,
                        Count = retList.Count
                    },
                    RetCode = CommonEnums.RET_CODE.SUCCESS
                };
            }
            // Paging XR
            var returnValue = this.Paging(list, pageIndex, pageSize);

            return new ResultObject<PagingObject<List<XR>>>
            {
                ErrorMessage = CommonEnums.RET_CODE.SUCCESS.ToString(),
                Result = new PagingObject<List<XR>>
                {
                    Data = returnValue,
                    Count = list.Count
                },
                RetCode = CommonEnums.RET_CODE.SUCCESS
            };
        }

        /// <summary>
        /// Gets the advance info.
        /// </summary>
        /// <param name="accountNo">The account no.</param>
        /// <returns></returns>
        public ResultObject<PagingObject<List<AdvanceInfo>, AdvanceInfo, AdvanceInfo>> GetAdvanceInfo(string accountNo)
        {
            var newestWorkingDatesInfo = Serializer.Deserialize<ResultObject<List<NewestWorkingDatesInfo>>>(this._rtServices.GetNewestWorkingDates());

            if (newestWorkingDatesInfo == null || newestWorkingDatesInfo.Result == null || newestWorkingDatesInfo.RetCode != CommonEnums.RET_CODE.SUCCESS)
            {
                LogHandler.Log(
                    "GetAdvanceInfo: GetNewestWorkingDates of RTServices return null",
                    this.GetType() + ".GetAdvanceInfo()",
                    TraceEventType.Warning);
                return new ResultObject<PagingObject<List<AdvanceInfo>, AdvanceInfo, AdvanceInfo>>
                    {
                        ErrorMessage = CommonEnums.RET_CODE.NO_EXISTED_DATA.ToString(),
                        Result = new PagingObject<List<AdvanceInfo>, AdvanceInfo, AdvanceInfo>(),
                        RetCode = CommonEnums.RET_CODE.NO_EXISTED_DATA
                    };
            }

            newestWorkingDatesInfo.Result[0].T  = newestWorkingDatesInfo.Result[0].T.ToLocalTime();
            newestWorkingDatesInfo.Result[0].T1 = newestWorkingDatesInfo.Result[0].T1.ToLocalTime();
            newestWorkingDatesInfo.Result[0].T2 = newestWorkingDatesInfo.Result[0].T2.ToLocalTime();
            newestWorkingDatesInfo.Result[0].T3 = newestWorkingDatesInfo.Result[0].T3.ToLocalTime();

            List<AdvanceInfo> advanceInfos = this._cashAdvanceServices.GetAdvanceInfo(accountNo, newestWorkingDatesInfo.Result[0]);

            var sumInPage = new AdvanceInfo();

            if (advanceInfos == null)
                return new ResultObject<PagingObject<List<AdvanceInfo>, AdvanceInfo, AdvanceInfo>>
                    {
                        ErrorMessage = CommonEnums.RET_CODE.NO_EXISTED_DATA.ToString(),
                        Result = new PagingObject<List<AdvanceInfo>, AdvanceInfo, AdvanceInfo>(),
                        RetCode = CommonEnums.RET_CODE.NO_EXISTED_DATA
                    };

            foreach (var advanceInfo in advanceInfos)
            {
                sumInPage.SellAmt += advanceInfo.SellAmt;
                sumInPage.MaxCanAdvance += advanceInfo.MaxCanAdvance;
                sumInPage.AdvanceFinished += advanceInfo.AdvanceFinished;
            }

            return new ResultObject<PagingObject<List<AdvanceInfo>, AdvanceInfo, AdvanceInfo>>
                {
                    ErrorMessage = CommonEnums.RET_CODE.SUCCESS.ToString(),
                    Result = new PagingObject<List<AdvanceInfo>, AdvanceInfo, AdvanceInfo>
                        {
                            Count = advanceInfos.Count, 
                            Data = advanceInfos, 
                            SumInPage = sumInPage, 
                            TotalSum = new AdvanceInfo()
                        },
                    RetCode = CommonEnums.RET_CODE.SUCCESS
                };
        }

        /// <summary>
        /// News the cash advance.
        /// </summary>
        /// <param name="accountNo">The account no.</param>
        /// <param name="sellAmt">The sell amt.</param>
        /// <param name="cashAdvance">The cash advance.</param>
        /// <param name="maxCanAdvance">The max can advance.</param>
        /// <param name="tradeDate">The trade date.</param>
        /// <returns></returns>
        public ResultObject<string> NewCashAdvance(string accountNo,
            decimal sellAmt,
            decimal cashAdvance,
            decimal maxCanAdvance,
            string tradeDate)
        {
            CommonEnums.RET_CODE retCode = CommonEnums.RET_CODE.SUCCESS;

            // calculate dueDate
            DateTime dueDate = this._cashAdvanceServices.CalculateDueDate(tradeDate);

            decimal advanceFee = this._cashAdvanceServices.CalculateAdvanceFee(cashAdvance, dueDate);

            // TODO: shoule calculate tax per advance fee
            decimal tax = 0;

            // Validate new advance
            retCode = this._cashAdvanceServices.IsValidAdvance(maxCanAdvance, cashAdvance, dueDate, advanceFee, tax);
            if (retCode != CommonEnums.RET_CODE.SUCCESS)
            {
                return new ResultObject<string>
                    {
                        RetCode = retCode,
                        ErrorMessage = retCode.ToString(),
                        Result = string.Empty
                    };
            }

            //validate the amount of advance
            if (cashAdvance > _cashAdvanceServices.GetMaxAdvance(accountNo, tradeDate))
            {
                retCode = CommonEnums.RET_CODE.ERROR_NOT_ENOUGH_CASH_TO_ADVANCE;
                return new ResultObject<string>
                {
                    RetCode = retCode,
                    ErrorMessage = retCode.ToString(),
                    Result = string.Empty
                };
            }

            DateTime _tradeDate;

            try
            {
                // convert trade date string to DateTime value
                _tradeDate = new DateTime(
                    int.Parse(tradeDate.Substring(0, 4)),
                    int.Parse(tradeDate.Substring(4, 2)),
                    int.Parse(tradeDate.Substring(6, 2)));
            }
            catch
            {
                _tradeDate = new DateTime();
                LogHandler.Log(
                    "NewCashAdvance: tradeDate was incorrect format (yyyyMMdd), tradeDate = " + tradeDate,
                    this.GetType() + ".NewCashAdvance()",
                    TraceEventType.Warning);
            }

            var contractNo = _cashAdvanceServices.BuildContractNo(DateTime.Now);

            var advanceInfo = new ETradeFinance.Entities.CashAdvance
                        {
                            ContractNo = contractNo,
                            SubAccountId = accountNo,
                            AdvanceDate = DateTime.Now,
                            CashReceived = 0,
                            Fee = advanceFee,
                            Status = (int)CommonEnums.ADVANCE_STATUS.PENDING,
                            SellDueDate = _tradeDate,
                            CashDueDate = dueDate,
                            Vat = tax,
                            CashAvailable = maxCanAdvance,
                            Reason = string.Empty,
                            TotalSellValue = sellAmt,
                            CashRequest = cashAdvance
                        };

            // Insert new advance to DB
            bool result =
                this._cashAdvanceServices.InsertCashAdvance(advanceInfo);

            //Update to cashAdvanceHistories.
            if (result)
            {
                var advanceInfoHistory = new CashAdvanceHistory()
                {
                    ContractNo = contractNo,
                    SubAccountId = accountNo,
                    AdvanceDate = DateTime.Now,
                    CashReceived = 0,
                    Fee = advanceFee,
                    Status = (int)CommonEnums.ADVANCE_STATUS.PENDING,
                    SellDueDate = _tradeDate,
                    CashDueDate = dueDate,
                    Vat = tax,
                    CashAvilable = maxCanAdvance,
                    Reason = string.Empty,
                    TotalSellValue = sellAmt,
                    CashRequest = cashAdvance
                };
                result = this._cashAdvanceServices.InsertCashAdvanceHistory(advanceInfoHistory);
            }

            retCode = !result ? CommonEnums.RET_CODE.SYSTEM_ERROR : CommonEnums.RET_CODE.SUCCESS;

            return new ResultObject<string>
                {
                    ErrorMessage = retCode.ToString(),
                    Result = contractNo,
                    RetCode = retCode
                };
        }

        /// <summary>
        /// Cancels the advance.
        /// </summary>
        /// <param name="accountNo">The account no.</param>
        /// <param name="contractNo">The contract no.</param>
        /// <returns></returns>
        public CommonEnums.RET_CODE CancelAdvance(string accountNo, string contractNo)
        {
            var cashAdvanceService = new CashAdvanceService();
            var cashAdvanceHistoryService = new CashAdvanceHistoryService();

            string whereClause = string.Format(" ContractNo = '{0}' AND SubAccountId = '{1}'", contractNo, accountNo);
            int totalRecords = 0;

            var cashAdvances =
                cashAdvanceService.GetPaged(whereClause, "ID DESC", 0, int.MaxValue, out totalRecords);

            var cashAdvance = cashAdvances[0];

            var retCode = this._cashAdvanceServices.IsValidCancelAdvance(cashAdvance);

            if (retCode != CommonEnums.RET_CODE.SUCCESS)
            {
                return retCode;
            }

            cashAdvance.Status = (int)CommonEnums.ADVANCE_STATUS.CANCELLED;

            bool result = cashAdvanceService.Update(cashAdvance);

            //Update to cashAdvanceHistories.
            if (result)
            {
                var cashAdvanceHistories = cashAdvanceHistoryService.GetPaged(whereClause, "ID DESC", 0, int.MaxValue, out totalRecords);
                var cashAdvanceHistory = cashAdvanceHistories[0];
                cashAdvanceHistory.Status = (int)CommonEnums.ADVANCE_STATUS.CANCELLED;
                result = cashAdvanceHistoryService.Update(cashAdvanceHistory);
            }

            return !result ? CommonEnums.RET_CODE.SYSTEM_ERROR : CommonEnums.RET_CODE.SUCCESS;
        }

        #region system configuration

        /// <summary>
        /// Saves the config.
        /// </summary>
        /// <param name="holidayses">The holidayses.</param>
        public static void SaveHolidayConfig(IEnumerable<Holidays> holidayses)
        {
            foreach (var holidayse in holidayses)
            {
                if (!SysConfig.Holidays.ContainsKey(holidayse.Holiday.ToString("yyyyMMdd")))
                {
                    SysConfig.Holidays.Add(holidayse.Holiday.ToString("yyyyMMdd"), holidayse.Holiday);
                }
                else
                {
                    SysConfig.Holidays[holidayse.Holiday.ToString("yyyyMMdd")] = holidayse.Holiday;
                }
            }
        }

        /// <summary>
        /// Saves the working days config.
        /// </summary>
        /// <param name="workingDayses">The working dayses.</param>
        public static void SaveWorkingDaysConfig(IEnumerable<WorkingDays> workingDayses)
        {
            foreach (var workingDayse in workingDayses)
            {
                if (!SysConfig.WorkingDays.ContainsKey(workingDayse.DateId))
                {
                    SysConfig.WorkingDays.Add(workingDayse.DateId, workingDayse.IsWorkingDay);
                }
                else
                {
                    SysConfig.WorkingDays[workingDayse.DateId] = workingDayse.IsWorkingDay;
                }
            }
        }

        /// <summary>
        /// Saves all configuration.
        /// </summary>
        /// <param name="configurationses">The configurationses.</param>
        public static void SaveAllConfiguration(List<Configurations> configurationses)
        {
            foreach (Configurations configurationse in configurationses)
            {
                if (!SysConfig.Configurations.ContainsKey(configurationse.Name))
                {
                    SysConfig.Configurations.Add(configurationse.Name, configurationse.Value);
                }
                else
                {
                    SysConfig.Configurations[configurationse.Name] = configurationse.Value;
                }
            }
        }

        /*/// <summary>
        /// Saves the advance time.
        /// </summary>
        /// <param name="advanceTimes">The advance times.</param>
        public static void SaveAdvanceTime(List<AdvanceTime> advanceTimes)
        {
            foreach (AdvanceTime advanceTime in advanceTimes)
            {
                if (!SysConfig.AdvanceTimes.ContainsKey(advanceTime.AdvanceType))
                {
                    SysConfig.AdvanceTimes.Add(advanceTime.AdvanceType, advanceTime);
                }
                else
                {
                    SysConfig.AdvanceTimes[advanceTime.AdvanceType] = advanceTime;
                }
            }
        }*/

        #endregion

        /// <summary>
        /// Gets the cash advance status.
        /// </summary>
        /// <param name="accountNo">The account no.</param>
        /// <param name="fromDate">From date.</param>
        /// <param name="toDate">To date.</param>
        /// <param name="status">The status.</param>
        /// <param name="pageIndex">Index of the page.</param>
        /// <param name="pageSize">Size of the page.</param>
        /// <returns></returns>
        public ResultObject<PagingObject<List<ETradeFinance.Entities.CashAdvance>>> GetCashAdvanceStatus(string accountNo, string fromDate, string toDate, int status, int pageIndex, int pageSize)
        {
            try
            {
                var cashAdvances =
                this._cashAdvanceServices.GetCashAdvanceStatus(accountNo, fromDate, toDate, status, pageIndex, pageSize);

                if (cashAdvances == null || cashAdvances.Data == null)
                {
                    LogHandler.Log(
                    "GetCashAdvanceStatus: NO_EXISTED_DATA, accountNo = " + accountNo + ", fromDate = " +
                    fromDate + ", toDate = " + toDate + ", status = " + status + ", pageIndex = " + pageIndex +
                    ", pageSize = " + pageSize,
                    this.GetType() + ".GetCashAdvanceStatus()",
                    TraceEventType.Information);
                    return new ResultObject<PagingObject<List<ETradeFinance.Entities.CashAdvance>>>
                    {
                        ErrorMessage = CommonEnums.RET_CODE.NO_EXISTED_DATA.ToString(),
                        Result = new PagingObject<List<ETradeFinance.Entities.CashAdvance>>(),
                        RetCode = CommonEnums.RET_CODE.NO_EXISTED_DATA
                    };
                }

                return new ResultObject<PagingObject<List<ETradeFinance.Entities.CashAdvance>>>
                {
                    ErrorMessage = CommonEnums.RET_CODE.SUCCESS.ToString(),
                    Result = cashAdvances,
                    RetCode = CommonEnums.RET_CODE.SUCCESS
                };
            }
            catch (Exception exception)
            {
                LogHandler.Log(
                    "GetCashAdvanceStatus: exception = " + exception + " accountNo = " + accountNo + ", fromDate = " +
                    fromDate + ", toDate = " + toDate + ", status = " + status + ", pageIndex = " + pageIndex +
                    ", pageSize = " + pageSize,
                    this.GetType() + ".GetCashAdvanceStatus()",
                    TraceEventType.Error);

                return new ResultObject<PagingObject<List<ETradeFinance.Entities.CashAdvance>>>
                {
                    ErrorMessage = CommonEnums.RET_CODE.SYSTEM_ERROR.ToString(),
                    Result = new PagingObject<List<ETradeFinance.Entities.CashAdvance>>(),
                    RetCode = CommonEnums.RET_CODE.SYSTEM_ERROR
                };
            }
        }

        #region Bank Account Info
        /// <summary>
        /// Gets the bank account info.
        /// </summary>
        /// <param name="acccountNo">The acccount no.</param>
        /// <returns></returns>
        public ResultObject<BankAccountInfo> GetBankAccountInfo(string acccountNo)
        {
            BankAccountInfo bankAccountInfo = stockServices.GetBankAccountInfo(acccountNo);

            if (bankAccountInfo == null)
            {
                return new ResultObject<BankAccountInfo> 
                { 
                    Result=null,
                    ErrorMessage=CommonEnums.RET_CODE.NO_EXISTED_DATA.ToString(),
                    RetCode=CommonEnums.RET_CODE.NO_EXISTED_DATA
                };
            }
            //02
            if (bankAccountInfo.PaymentType.Equals("02") && bankAccountInfo.ReceiveType.Equals("02"))
            {
                if (!bankAccountInfo.BankCode.Equals("001") && !bankAccountInfo.BankCode.Equals("002") && !bankAccountInfo.BankCode.Equals("003"))
                {
                    return new ResultObject<BankAccountInfo>
                    {
                        Result = null,
                        ErrorMessage = CommonEnums.RET_CODE.NO_EXISTED_DATA.ToString(),
                        RetCode = CommonEnums.RET_CODE.NO_EXISTED_DATA
                    };
                }
                else
                {
                    bankAccountInfo.BankAccountType = CommonEnums.BANK_ACCOUNT_TYPE.BANKACC;
                    bankAccountInfo.CompAccNo=string.Empty;
                    return new ResultObject<BankAccountInfo>
                    {
                        Result = bankAccountInfo,
                        ErrorMessage = CommonEnums.RET_CODE.SUCCESS.ToString(),
                        RetCode = CommonEnums.RET_CODE.SUCCESS
                    };
                }
            }
            //60
            if (bankAccountInfo.PaymentType.Equals("60") && bankAccountInfo.ReceiveType.Equals("60"))
            {
                if (!string.IsNullOrEmpty(bankAccountInfo.CompAccNo))
                {
                    bankAccountInfo.BankAccountType = CommonEnums.BANK_ACCOUNT_TYPE.COMPACC;
                    bankAccountInfo.BankName = string.Empty;
                    bankAccountInfo.BankCode = string.Empty;
                    bankAccountInfo.BankAccNo = string.Empty;
                    return new ResultObject<BankAccountInfo>
                    {
                        Result = bankAccountInfo,
                        ErrorMessage = CommonEnums.RET_CODE.SUCCESS.ToString(),
                        RetCode = CommonEnums.RET_CODE.SUCCESS
                    };
                }
            }
            //others
            return new ResultObject<BankAccountInfo>
            {
                Result = null,
                ErrorMessage = CommonEnums.RET_CODE.NO_EXISTED_DATA.ToString(),
                RetCode = CommonEnums.RET_CODE.NO_EXISTED_DATA
            };
        }
        #endregion
    }
}
