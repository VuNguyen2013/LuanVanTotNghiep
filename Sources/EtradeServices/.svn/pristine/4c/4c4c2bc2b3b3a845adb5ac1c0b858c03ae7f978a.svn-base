	

#region Using Directives
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Collections;
using System.Linq;
using System.Text;
using System.Xml.Serialization;
using System.Data;
using ETradeCommon.Enums;
using ETradeFinance.DataAccess.Bases;
using ETradeFinance.Entities;
using ETradeFinance.Entities.Validation;

using ETradeFinance.DataAccess;
using Microsoft.Practices.EnterpriseLibrary.Logging;
using ETradeFinance.Entities;
using  ETradeCommon;
#endregion

namespace ETradeFinance.Services
{		
	/// <summary>
	/// An component type implementation of the 'CashTransfer' table.
	/// </summary>
	/// <remarks>
	/// All custom implementations should be done here.
	/// </remarks>
	[CLSCompliant(true)]
	public partial class CashTransferService : ETradeFinance.Services.CashTransferServiceBase
	{
        private const string LAYER_EXCEPTION_POLICY = "ServiceLayerExceptionPolicy";
        private static readonly bool noTranByDefault = false;
		#region Constructors
		/// <summary>
		/// Initializes a new instance of the CashTransferService class.
		/// </summary>
		public CashTransferService() : base()
		{
		}
		#endregion Constructors

        #region Method
        /// <summary>
        /// Puts the cash trans order.
        /// </summary>
        /// <param name="cashTransfer">The cash transfer.</param>
        /// <returns></returns>
        [DataObjectMethod(DataObjectMethodType.Insert)]
        public int PutCashTransOrder(CashTransfer cashTransfer)
        {
            #region Security and validation check

            // throws security exception if not authorized
            SecurityContext.IsAuthorized("Insert");

            if (!cashTransfer.IsValid)
                throw new EntityNotValidException(cashTransfer, "Insert", cashTransfer.Error);

            #endregion Security and validation check

            #region Initialisation

            bool result = false;
            TransactionManager transactionManager = null;
            NetTiersProvider dataProvider;

            #endregion Initialisation

            try
            {
                bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
                transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
                dataProvider = ConnectionScope.Current.DataProvider;
                result = dataProvider.CashTransferProvider.Insert(transactionManager, cashTransfer);
            }
            catch (Exception exc)
            {
                #region Handle transaction rollback and exception

                if (transactionManager != null && transactionManager.IsOpen)
                    transactionManager.Rollback();

                //Handle exception based on policy
                if (DomainUtil.HandleException(exc, LAYER_EXCEPTION_POLICY))
                    throw;

                #endregion Handle transaction rollback and exception
            }

            if (!result)
            {
                return (int)CommonEnums.RET_CODE.FAIL;
            }
            return (int)CommonEnums.RET_CODE.SUCCESS;
        }

        /// <summary>
        /// Updates the cash trans order.
        /// </summary>
        /// <param name="id">The id.</param>
        /// <param name="status">The status.</param>
        /// <param name="ApprovedAmt">The approved amt.</param>
        /// <param name="note">The note.</param>
        /// <param name="brokerId">The broker id.</param>
        /// <param name="execTime">The exec time.</param>
        /// <returns></returns>
        [DataObjectMethod(DataObjectMethodType.Update)]
        public int UpdateCashTransOrder(long id,int status,decimal ApprovedAmt,string note,string brokerId,DateTime execTime)
        {
            #region Security and validation check
            // throws security exception if not authorized
            SecurityContext.IsAuthorized("Update");


            #endregion Security and validation check

            #region Initialisation
            bool result = false;
            TransactionManager transactionManager = null;
            NetTiersProvider dataProvider;
            #endregion Initialisation

            try
            {
                bool isBorrowedTransaction = ConnectionScope.Current.HasTransaction;
                transactionManager = ConnectionScope.ValidateOrCreateTransaction(noTranByDefault);
                dataProvider = ConnectionScope.Current.DataProvider;

                var cashTransfer = dataProvider.CashTransferProvider.GetById(id);
                if(cashTransfer==null)
                    return (int)CommonEnums.RET_CODE.NO_EXISTED_DATA;

                //if status of the cash transfer request is diff pending -> false
                if(status == (int)CommonEnums.CASH_TRANSFER_STATUS.CANCELLED && cashTransfer.Status==(int)CommonEnums.CASH_TRANSFER_STATUS.PROCESSING)
                    return (int)CommonEnums.RET_CODE.ERROR_CANNOT_CANCEL_CASH_TRANSFER;
                
                //if status is finished
                if (status == (int)CommonEnums.CASH_TRANSFER_STATUS.FINISHED)
                    cashTransfer.ApprovedAmt = ApprovedAmt;

                //if status is canceled || rejected
                if (status == (int)CommonEnums.CASH_TRANSFER_STATUS.CANCELLED || cashTransfer.Status == (int)CommonEnums.CASH_TRANSFER_STATUS.REJECTED)
                    cashTransfer.ApprovedAmt = 0;

                cashTransfer.Status = status;                
                cashTransfer.Note = note.Trim();
                cashTransfer.BrokerId = brokerId;
                cashTransfer.ExecTime = execTime;

                result = dataProvider.CashTransferProvider.Update(transactionManager, cashTransfer);

                if (!result)
                {
                    return (int)CommonEnums.RET_CODE.FAIL;
                }
                return (int)CommonEnums.RET_CODE.SUCCESS;

            }
            catch (Exception exc)
            {
                #region Handle transaction rollback and exception
                if (transactionManager != null && transactionManager.IsOpen)
                    transactionManager.Rollback();

                //Handle exception based on policy
                if (DomainUtil.HandleException(exc, LAYER_EXCEPTION_POLICY))
                    throw;
                #endregion Handle transaction rollback and exception
            }
            return (int)CommonEnums.RET_CODE.SUCCESS;
        }

	    /// <summary>
        /// Gets the all list cash transfer by status.
        /// </summary>
        /// <param name="subAccountId">The subAccount Id.</param>
        /// <param name="status">The status.</param>
        /// <returns></returns>
        public List<CashTransfer> GetListUnfinishedCashTransfer(string subAccountId)
        {
            var whereClause = new StringBuilder();

            if(!string.IsNullOrEmpty(subAccountId))
            {
                whereClause.AppendFormat("AND SrcAccountId ='{0}'", subAccountId);
            }

            whereClause.AppendFormat("AND (Status='{0}' OR Status='{1}')", (int)ETradeCommon.Enums.CommonEnums.CASH_TRANSFER_STATUS.PENDING, (int)ETradeCommon.Enums.CommonEnums.CASH_TRANSFER_STATUS.PROCESSING);

            string finalWhereClause = whereClause.ToString();
            if(!string.IsNullOrEmpty(finalWhereClause))
                finalWhereClause = finalWhereClause.Substring(4);

            int totalCount = 0;
            var list = GetPaged(finalWhereClause, "RequestTime DESC", 0, int.MaxValue, out totalCount);
            return list.ToList();
        }

        /// <summary>
        /// Gets the total unfinished transfer amount. (on status pending or processing)
        /// </summary>
        /// <param name="subAccountId">The sub account id.</param>
        /// <returns></returns>
        public decimal GetTotalUnfinishedCashTransferAmount(string subAccountId)
        {
            decimal cashTransferAmount = 0;
            List<CashTransfer> listUnfinishedCashTransfer= GetListUnfinishedCashTransfer(subAccountId);
            if (listUnfinishedCashTransfer != null && listUnfinishedCashTransfer.Count > 0)
                cashTransferAmount = listUnfinishedCashTransfer.Sum(n => n.RequestAmt);
            return cashTransferAmount;
        }

	    /// <summary>
        /// Cashes the trans order hist.
        /// </summary>
        /// <param name="sourceAccountID">The source account ID.</param>
        /// <param name="destAccountID">The dest account ID.</param>
        /// <param name="fromDate">From date, pass empty to return today</param>
        /// <param name="toDate">To date, pass empty to return today</param>
        /// <param name="transType">Type of the trans.</param>
        /// <param name="status">The status.</param>
        /// <param name="note">The note.</param>
        /// <param name="brokerID">The broker ID.</param>
        /// <param name="pageIndex">Index of the page.</param>
        /// <param name="pageSize">Size of the page.</param>
        /// <returns></returns>
        public PagingObject<List<CashTransfer>> GetListCashTransOrderHist(string sourceAccountID,string destAccountID,string fromDate,string toDate,int transType,int status,string note,string brokerID,int pageIndex,int pageSize)
        {
            var whereClause = new StringBuilder();
            if(!string.IsNullOrEmpty(sourceAccountID))
            {
                whereClause.AppendFormat("AND SrcAccountId LIKE '%{0}%'", sourceAccountID);
            }

            if(!string.IsNullOrEmpty(destAccountID))
            {
                whereClause.AppendFormat("AND DestAccountId LIKE '%{0}%'", destAccountID);
            }

            if (!string.IsNullOrEmpty(fromDate))
            {
                whereClause.AppendFormat("AND (RequestTime >= " + ETradeCommon.Constants.SQL_CONVERT_DATETIME + ") ", fromDate);
            }

            if (!string.IsNullOrEmpty(toDate))
            {
                whereClause.AppendFormat("AND (RequestTime < " + ETradeCommon.Constants.SQL_CONVERT_DATETIME + ") ", toDate);
            }
            if (string.IsNullOrEmpty(fromDate) && string.IsNullOrEmpty(toDate))
            {                
                whereClause.AppendFormat("AND (RequestTime >= " + ETradeCommon.Constants.SQL_CONVERT_DATETIME + ") ", DateTime.Now.ToString("dd/MM/yyyy"));
                whereClause.AppendFormat("AND (RequestTime < " + ETradeCommon.Constants.SQL_CONVERT_DATETIME + ") ", DateTime.Now.AddDays(1).ToString("dd/MM/yyyy"));
            }

            if(transType>=0)
            {
                whereClause.AppendFormat("AND TransType = '{0}'",transType);                
            }

            if(status>=0)
                whereClause.AppendFormat("AND Status='{0}'",status);

            if(!string.IsNullOrEmpty(note))
            {
                whereClause.AppendFormat("AND Note LIKE '%{0}%'", note);
            }

            if(!string.IsNullOrEmpty(brokerID))
            {
                whereClause.AppendFormat("AND BrokerId LIKE '%{0}%'", brokerID);
            }

            string finalWhereClause = whereClause.ToString();
            if (!string.IsNullOrEmpty(finalWhereClause))
            {
                finalWhereClause = finalWhereClause.Substring(4);
            }

            int totalRecord;
            pageIndex = pageIndex - 1;

            var list = GetPaged(finalWhereClause, "RequestTime DESC", pageIndex-1, pageSize, out totalRecord);
            var listCashTransferOrderHistory=list.ToList();
            var returnObject = new PagingObject<List<CashTransfer>> {Data = listCashTransferOrderHistory,Count = totalRecord};
            return returnObject;
        }        
	    #endregion
    }//End Class

} // end namespace
