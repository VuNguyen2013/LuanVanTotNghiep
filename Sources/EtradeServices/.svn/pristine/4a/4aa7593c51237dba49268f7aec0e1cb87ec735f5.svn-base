<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ETradeWebServices</name>
    </assembly>
    <members>
        <member name="T:ETradeWebServices.AMServices.AccountManagerServices">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.#ctor">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetExchangeRateUSD">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetExchangeRateUSDAsync">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetExchangeRateUSDAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.CountTotalSMS(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.CountTotalSMSAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.CountTotalSMSAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListLanguage(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListLanguageAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListLanguageAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetLanguage(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetLanguageAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetLanguageAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.BrokerLogin(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.BrokerLoginAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.BrokerLoginAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.BrokerLogout">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.BrokerLogoutAsync">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.BrokerLogoutAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.CreateBroker(System.String,System.String,System.String,System.Int16,System.Boolean,System.String,System.String,System.Int32[])">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.CreateBrokerAsync(System.String,System.String,System.String,System.Int16,System.Boolean,System.String,System.String,System.Int32[])">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.CreateBrokerAsync(System.String,System.String,System.String,System.Int16,System.Boolean,System.String,System.String,System.Int32[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateBroker(System.String,System.String,System.String,System.Int16,System.Boolean,System.String,System.String,System.Int32[])">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateBrokerAsync(System.String,System.String,System.String,System.Int16,System.Boolean,System.String,System.String,System.Int32[])">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateBrokerAsync(System.String,System.String,System.String,System.Int16,System.Boolean,System.String,System.String,System.Int32[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.ChangeBrokerPassword(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.ChangeBrokerPasswordAsync(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.ChangeBrokerPasswordAsync(System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.ActivateBroker(System.String,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.ActivateBrokerAsync(System.String,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.ActivateBrokerAsync(System.String,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListBroker(System.String,System.String,System.Int16,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListBrokerAsync(System.String,System.String,System.Int16,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListBrokerAsync(System.String,System.String,System.Int16,System.Int32,System.String,System.String,System.Int32,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.SendSMSAlertCashTransfer(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.SendSMSAlertCashTransferAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.SendSMSAlertCashTransferAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetBroker(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetBrokerAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetBrokerAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListBrokerPermission">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListBrokerPermissionAsync">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListBrokerPermissionAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.CreateMainCustomer(System.String,System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Int16,System.Int16,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.CreateMainCustomerAsync(System.String,System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Int16,System.Int16,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.CreateMainCustomerAsync(System.String,System.String,System.String,System.String,System.Boolean,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Int16,System.Int16,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.CreateSubCustomer(System.String,System.String,System.Boolean,System.Int16,System.String,System.Int32[])">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.CreateSubCustomerAsync(System.String,System.String,System.Boolean,System.Int16,System.String,System.Int32[])">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.CreateSubCustomerAsync(System.String,System.String,System.Boolean,System.Int16,System.String,System.Int32[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.AddTokenId(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.AddTokenIdAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.AddTokenIdAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateMainCustomer(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Int16,System.Int16,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateMainCustomerAsync(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Int16,System.Int16,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateMainCustomerAsync(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.Int16,System.Int16,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateSubCustomer(System.String,System.String,System.Boolean,System.Int16,System.String,System.Int32[])">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateSubCustomerAsync(System.String,System.String,System.Boolean,System.Int16,System.String,System.Int32[])">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateSubCustomerAsync(System.String,System.String,System.Boolean,System.Int16,System.String,System.Int32[],System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.ActivateMainCustomer(System.String,System.Boolean,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.ActivateMainCustomerAsync(System.String,System.Boolean,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.ActivateMainCustomerAsync(System.String,System.Boolean,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.ActivateSubCustomer(System.String,System.Boolean,System.Int16)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.ActivateSubCustomerAsync(System.String,System.Boolean,System.Int16)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.ActivateSubCustomerAsync(System.String,System.Boolean,System.Int16,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetCustomer(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetCustomerAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetCustomerAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetCustomerNoSession(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetCustomerNoSessionAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetCustomerNoSessionAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetMainCustAccount(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetMainCustAccountAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetMainCustAccountAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetSubCustAccount(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetSubCustAccountAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetSubCustAccountAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListMainCustomer(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int16,System.Int16,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListMainCustomerAsync(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int16,System.Int16,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListMainCustomerAsync(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.String,System.Int16,System.Int16,System.Int32,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetCustInfoFromCore(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetCustInfoFromCoreAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetCustInfoFromCoreAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GenerateCustPass(System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GenerateCustPassAsync(System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GenerateCustPassAsync(System.String,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GenerateCustPin(System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GenerateCustPinAsync(System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GenerateCustPinAsync(System.String,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListCustServicePermission">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListCustServicePermissionAsync">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListCustServicePermissionAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.AuthenticateCustLogon(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.AuthenticateCustLogonAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.AuthenticateCustLogonAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.ForgetPassword(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.ForgetPasswordAsync(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.ForgetPasswordAsync(System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.ForgetPin(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.ForgetPinAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.ForgetPinAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.SendMessage(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.SendMessageAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.SendMessageAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.ChangeCustPassword(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.ChangeCustPasswordAsync(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.ChangeCustPasswordAsync(System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.ChangeCustPin(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.ChangeCustPinAsync(System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.ChangeCustPinAsync(System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListCustomerActionHistory(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListCustomerActionHistoryAsync(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListCustomerActionHistoryAsync(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.CustomerLogout(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.CustomerLogoutAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.CustomerLogoutAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.CreateOpenCustAccount(System.String,System.DateTime,System.String,System.String,System.DateTime,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.CreateOpenCustAccountAsync(System.String,System.DateTime,System.String,System.String,System.DateTime,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.CreateOpenCustAccountAsync(System.String,System.DateTime,System.String,System.String,System.DateTime,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateOpenCustAccount(System.String,System.String,System.DateTime,System.String,System.String,System.DateTime,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateOpenCustAccountAsync(System.String,System.String,System.DateTime,System.String,System.String,System.DateTime,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateOpenCustAccountAsync(System.String,System.String,System.DateTime,System.String,System.String,System.DateTime,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.DeleteOpenCustAccount(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.DeleteOpenCustAccountAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.DeleteOpenCustAccountAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetOpenCustAccount(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetOpenCustAccountAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetOpenCustAccountAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListOpenCustAccount(System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListOpenCustAccountAsync(System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListOpenCustAccountAsync(System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListWorkingDays">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListWorkingDaysAsync">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListWorkingDaysAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateWorkingDays(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateWorkingDaysAsync(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateWorkingDaysAsync(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.CreateHoliday(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.CreateHolidayAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.CreateHolidayAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateHoliday(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateHolidayAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateHolidayAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.DeleteHoliday(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.DeleteHolidayAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.DeleteHolidayAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetHoliday(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetHolidayAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetHolidayAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListHoliday(System.String,System.String,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListHolidayAsync(System.String,System.String,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListHolidayAsync(System.String,System.String,System.Int32,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListConfiguration">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListConfigurationAsync">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListConfigurationAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetConfiguration(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetConfigurationAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetConfigurationAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.CreateConfiguration(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.CreateConfigurationAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.CreateConfigurationAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateConfiguration(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateConfigurationAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateConfigurationAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.DeleteConfiguration(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.DeleteConfigurationAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.DeleteConfigurationAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.PutBuyRight(System.String,System.String,System.String,System.String,System.Int64,System.Int64,System.Decimal,System.Decimal,System.Decimal,System.String,System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.PutBuyRightAsync(System.String,System.String,System.String,System.String,System.Int64,System.Int64,System.Decimal,System.Decimal,System.Decimal,System.String,System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.PutBuyRightAsync(System.String,System.String,System.String,System.String,System.Int64,System.Int64,System.Decimal,System.Decimal,System.Decimal,System.String,System.String,System.String,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateBuyRight(System.Int64,System.String,System.String,System.String,System.Int64,System.Int64,System.Decimal,System.Decimal,System.Decimal,System.String,System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateBuyRightAsync(System.Int64,System.String,System.String,System.String,System.Int64,System.Int64,System.Decimal,System.Decimal,System.Decimal,System.String,System.String,System.String,System.String,System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateBuyRightAsync(System.Int64,System.String,System.String,System.String,System.Int64,System.Int64,System.Decimal,System.Decimal,System.Decimal,System.String,System.String,System.String,System.String,System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListBuyRight(System.Int64,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListBuyRightAsync(System.Int64,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListBuyRightAsync(System.Int64,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListBuyRightNoSession(System.Int64,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListBuyRightNoSessionAsync(System.Int64,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListBuyRightNoSessionAsync(System.Int64,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.DeleteBuyRight(System.Int64)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.DeleteBuyRightAsync(System.Int64)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.DeleteBuyRightAsync(System.Int64,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetLisAdvanceTime">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetLisAdvanceTimeAsync">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetLisAdvanceTimeAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateAdvanceTime(System.String[][])">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateAdvanceTimeAsync(System.String[][])">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateAdvanceTimeAsync(System.String[][],System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.CreateFee(System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Int32,System.Decimal)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.CreateFeeAsync(System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Int32,System.Decimal)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.CreateFeeAsync(System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Int32,System.Decimal,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateFee(System.Int32,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Int32,System.Decimal)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateFeeAsync(System.Int32,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Int32,System.Decimal)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateFeeAsync(System.Int32,System.Decimal,System.Decimal,System.Decimal,System.Decimal,System.Int32,System.Decimal,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.DeleteFee(System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.DeleteFeeAsync(System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.DeleteFeeAsync(System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListFee(System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListFeeAsync(System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListFeeAsync(System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.RejectCashAdvanceExpired(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.RejectCashAdvanceExpiredAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.RejectCashAdvanceExpiredAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateCashAdvance(System.Int64,System.Decimal,System.Int32,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateCashAdvanceAsync(System.Int64,System.Decimal,System.Int32,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateCashAdvanceAsync(System.Int64,System.Decimal,System.Int32,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListCashAdvance(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListCashAdvanceAsync(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListCashAdvanceAsync(System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListCashAdvanceHistory(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListCashAdvanceHistoryAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListCashAdvanceHistoryAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateCashTransOrder(System.Int64,System.Int32,System.Decimal,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateCashTransOrderAsync(System.Int64,System.Int32,System.Decimal,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateCashTransOrderAsync(System.Int64,System.Int32,System.Decimal,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListCashTransOrder(System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListCashTransOrderAsync(System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListCashTransOrderAsync(System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetCashTransfer(System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetCashTransferAsync(System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetCashTransferAsync(System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListCashTransOrderHist(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListCashTransOrderHistAsync(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListCashTransOrderHistAsync(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Int32,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateStockTransOrder(System.Int64,System.Int32,System.Int64,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateStockTransOrderAsync(System.Int64,System.Int32,System.Int64,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateStockTransOrderAsync(System.Int64,System.Int32,System.Int64,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListStockTransOrder(System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListStockTransOrderAsync(System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListStockTransOrderAsync(System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListStockTransOrderHist(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListStockTransOrderHistAsync(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListStockTransOrderHistAsync(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Int32,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateOddLotOrder(System.Int64,System.Decimal,System.Int64,System.Int64,System.Int32,System.String,System.DateTime,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateOddLotOrderAsync(System.Int64,System.Decimal,System.Int64,System.Int64,System.Int32,System.String,System.DateTime,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateOddLotOrderAsync(System.Int64,System.Decimal,System.Int64,System.Int64,System.Int32,System.String,System.DateTime,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListOddLotOrder(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListOddLotOrderAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListOddLotOrderAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListOddLotOrderHist(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListOddLotOrderHistAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListOddLotOrderHistAsync(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListXROrder(System.Int64,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListXROrderAsync(System.Int64,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListXROrderAsync(System.Int64,System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListXROrderHist(System.Int64,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListXROrderHistAsync(System.Int64,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.GetListXROrderHistAsync(System.Int64,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateXROrder(System.Int64,System.Int64,System.Int32,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateXROrderAsync(System.Int64,System.Int64,System.Int32,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.UpdateXROrderAsync(System.Int64,System.Int64,System.Int32,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.AMServices.AccountManagerServices.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetExchangeRateUSDCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.CountTotalSMSCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetListLanguageCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetLanguageCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.BrokerLoginCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.BrokerLogoutCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.CreateBrokerCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.UpdateBrokerCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.ChangeBrokerPasswordCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.ActivateBrokerCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetListBrokerCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.SendSMSAlertCashTransferCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetBrokerCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetListBrokerPermissionCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.CreateMainCustomerCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.CreateSubCustomerCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.AddTokenIdCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.UpdateMainCustomerCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.UpdateSubCustomerCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.ActivateMainCustomerCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.ActivateSubCustomerCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetCustomerCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetCustomerNoSessionCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetMainCustAccountCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetSubCustAccountCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetListMainCustomerCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetCustInfoFromCoreCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GenerateCustPassCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GenerateCustPinCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetListCustServicePermissionCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.AuthenticateCustLogonCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.ForgetPasswordCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.ForgetPinCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.SendMessageCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.ChangeCustPasswordCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.ChangeCustPinCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetListCustomerActionHistoryCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.CustomerLogoutCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.CreateOpenCustAccountCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.UpdateOpenCustAccountCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.DeleteOpenCustAccountCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetOpenCustAccountCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetListOpenCustAccountCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetListWorkingDaysCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.UpdateWorkingDaysCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.CreateHolidayCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.UpdateHolidayCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.DeleteHolidayCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetHolidayCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetListHolidayCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetListConfigurationCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetConfigurationCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.CreateConfigurationCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.UpdateConfigurationCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.DeleteConfigurationCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.PutBuyRightCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.UpdateBuyRightCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetListBuyRightCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetListBuyRightNoSessionCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.DeleteBuyRightCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetLisAdvanceTimeCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.UpdateAdvanceTimeCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.CreateFeeCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.UpdateFeeCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.DeleteFeeCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetListFeeCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.RejectCashAdvanceExpiredCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.UpdateCashAdvanceCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetListCashAdvanceCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetListCashAdvanceHistoryCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.UpdateCashTransOrderCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetListCashTransOrderCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetCashTransferCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetListCashTransOrderHistCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.UpdateStockTransOrderCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetListStockTransOrderCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetListStockTransOrderHistCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.UpdateOddLotOrderCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetListOddLotOrderCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetListOddLotOrderHistCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetListXROrderCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.GetListXROrderHistCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.AMServices.AccountManagerServices.UpdateXROrderCompleted">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetExchangeRateUSDCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetExchangeRateUSDCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetExchangeRateUSDCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.CountTotalSMSCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.CountTotalSMSCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.CountTotalSMSCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListLanguageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListLanguageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetListLanguageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetLanguageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetLanguageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetLanguageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.BrokerLoginCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.BrokerLoginCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.BrokerLoginCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.BrokerLogoutCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.BrokerLogoutCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.BrokerLogoutCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.CreateBrokerCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.CreateBrokerCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.CreateBrokerCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.UpdateBrokerCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.UpdateBrokerCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.UpdateBrokerCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.ChangeBrokerPasswordCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.ChangeBrokerPasswordCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.ChangeBrokerPasswordCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.ActivateBrokerCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.ActivateBrokerCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.ActivateBrokerCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListBrokerCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListBrokerCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetListBrokerCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.SendSMSAlertCashTransferCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.SendSMSAlertCashTransferCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.SendSMSAlertCashTransferCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetBrokerCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetBrokerCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetBrokerCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListBrokerPermissionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListBrokerPermissionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetListBrokerPermissionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.CreateMainCustomerCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.CreateMainCustomerCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.CreateMainCustomerCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.CreateSubCustomerCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.CreateSubCustomerCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.CreateSubCustomerCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.AddTokenIdCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.AddTokenIdCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.AddTokenIdCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.UpdateMainCustomerCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.UpdateMainCustomerCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.UpdateMainCustomerCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.UpdateSubCustomerCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.UpdateSubCustomerCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.UpdateSubCustomerCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.ActivateMainCustomerCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.ActivateMainCustomerCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.ActivateMainCustomerCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.ActivateSubCustomerCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.ActivateSubCustomerCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.ActivateSubCustomerCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetCustomerCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetCustomerCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetCustomerCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetCustomerNoSessionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetCustomerNoSessionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetCustomerNoSessionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetMainCustAccountCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetMainCustAccountCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetMainCustAccountCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetSubCustAccountCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetSubCustAccountCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetSubCustAccountCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListMainCustomerCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListMainCustomerCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetListMainCustomerCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetCustInfoFromCoreCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetCustInfoFromCoreCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetCustInfoFromCoreCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GenerateCustPassCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GenerateCustPassCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GenerateCustPassCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GenerateCustPinCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GenerateCustPinCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GenerateCustPinCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListCustServicePermissionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListCustServicePermissionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetListCustServicePermissionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.AuthenticateCustLogonCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.AuthenticateCustLogonCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.AuthenticateCustLogonCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.ForgetPasswordCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.ForgetPasswordCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.ForgetPasswordCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.ForgetPinCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.ForgetPinCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.ForgetPinCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.SendMessageCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.SendMessageCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.SendMessageCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.ChangeCustPasswordCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.ChangeCustPasswordCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.ChangeCustPasswordCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.ChangeCustPinCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.ChangeCustPinCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.ChangeCustPinCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListCustomerActionHistoryCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListCustomerActionHistoryCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetListCustomerActionHistoryCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.CustomerLogoutCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.CustomerLogoutCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.CustomerLogoutCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.CreateOpenCustAccountCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.CreateOpenCustAccountCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.CreateOpenCustAccountCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.UpdateOpenCustAccountCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.UpdateOpenCustAccountCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.UpdateOpenCustAccountCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.DeleteOpenCustAccountCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.DeleteOpenCustAccountCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.DeleteOpenCustAccountCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetOpenCustAccountCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetOpenCustAccountCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetOpenCustAccountCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListOpenCustAccountCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListOpenCustAccountCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetListOpenCustAccountCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListWorkingDaysCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListWorkingDaysCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetListWorkingDaysCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.UpdateWorkingDaysCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.UpdateWorkingDaysCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.UpdateWorkingDaysCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.CreateHolidayCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.CreateHolidayCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.CreateHolidayCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.UpdateHolidayCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.UpdateHolidayCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.UpdateHolidayCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.DeleteHolidayCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.DeleteHolidayCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.DeleteHolidayCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetHolidayCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetHolidayCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetHolidayCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListHolidayCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListHolidayCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetListHolidayCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListConfigurationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListConfigurationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetListConfigurationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetConfigurationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetConfigurationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetConfigurationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.CreateConfigurationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.CreateConfigurationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.CreateConfigurationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.UpdateConfigurationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.UpdateConfigurationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.UpdateConfigurationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.DeleteConfigurationCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.DeleteConfigurationCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.DeleteConfigurationCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.PutBuyRightCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.PutBuyRightCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.PutBuyRightCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.UpdateBuyRightCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.UpdateBuyRightCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.UpdateBuyRightCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListBuyRightCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListBuyRightCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetListBuyRightCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListBuyRightNoSessionCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListBuyRightNoSessionCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetListBuyRightNoSessionCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.DeleteBuyRightCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.DeleteBuyRightCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.DeleteBuyRightCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetLisAdvanceTimeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetLisAdvanceTimeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetLisAdvanceTimeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.UpdateAdvanceTimeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.UpdateAdvanceTimeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.UpdateAdvanceTimeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.CreateFeeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.CreateFeeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.CreateFeeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.UpdateFeeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.UpdateFeeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.UpdateFeeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.DeleteFeeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.DeleteFeeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.DeleteFeeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListFeeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListFeeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetListFeeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.RejectCashAdvanceExpiredCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.UpdateCashAdvanceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.UpdateCashAdvanceCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.UpdateCashAdvanceCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListCashAdvanceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListCashAdvanceCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetListCashAdvanceCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListCashAdvanceHistoryCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListCashAdvanceHistoryCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetListCashAdvanceHistoryCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.UpdateCashTransOrderCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.UpdateCashTransOrderCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.UpdateCashTransOrderCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListCashTransOrderCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListCashTransOrderCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetListCashTransOrderCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetCashTransferCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetCashTransferCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetCashTransferCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListCashTransOrderHistCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListCashTransOrderHistCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetListCashTransOrderHistCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.UpdateStockTransOrderCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.UpdateStockTransOrderCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.UpdateStockTransOrderCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListStockTransOrderCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListStockTransOrderCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetListStockTransOrderCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListStockTransOrderHistCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListStockTransOrderHistCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetListStockTransOrderHistCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.UpdateOddLotOrderCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.UpdateOddLotOrderCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.UpdateOddLotOrderCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListOddLotOrderCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListOddLotOrderCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetListOddLotOrderCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListOddLotOrderHistCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListOddLotOrderHistCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetListOddLotOrderHistCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListXROrderCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListXROrderCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetListXROrderCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListXROrderHistCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.GetListXROrderHistCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.GetListXROrderHistCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.UpdateXROrderCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.AMServices.UpdateXROrderCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.AMServices.UpdateXROrderCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:Resources.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Resources.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Resources.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Resources.Resource.BUY">
            <summary>
              Looks up a localized string similar to Mua.
            </summary>
        </member>
        <member name="P:Resources.Resource.ERROR_ACCOUNT_NOT_BUY_PERMISSION">
            <summary>
              Looks up a localized string similar to Tai khoan cua quy khach khong co quyen mua..
            </summary>
        </member>
        <member name="P:Resources.Resource.ERROR_ACCOUNT_NOT_SELL_PERMISSION">
            <summary>
              Looks up a localized string similar to Tai khoan cua quy khach khong co quyen ban..
            </summary>
        </member>
        <member name="P:Resources.Resource.ERROR_ACCOUNT_NOT_TRADE_PERMISSION">
            <summary>
              Looks up a localized string similar to Tai khoan cua quy khach khong co quyen giao dich..
            </summary>
        </member>
        <member name="P:Resources.Resource.ERROR_DEFAULT">
            <summary>
              Looks up a localized string similar to Xin vui long lien he {0} de biet them chi tiet..
            </summary>
        </member>
        <member name="P:Resources.Resource.ERROR_HNX_NOT_USE_ATO_ATC">
            <summary>
              Looks up a localized string similar to Khong duoc phep dat ATO hoac ATC tren san HNX..
            </summary>
        </member>
        <member name="P:Resources.Resource.ERROR_LOCK_ACCOUNT">
            <summary>
              Looks up a localized string similar to Tai khoan cua quy khach dang bi khoa..
            </summary>
        </member>
        <member name="P:Resources.Resource.ERROR_MARKET_CLOSE">
            <summary>
              Looks up a localized string similar to Thi truong {0} da dong cua..
            </summary>
        </member>
        <member name="P:Resources.Resource.ERROR_NOT_AVAILABLE_STOCK">
            <summary>
              Looks up a localized string similar to Khong du co phieu can giao dich..
            </summary>
        </member>
        <member name="P:Resources.Resource.ERROR_PRICE_NOT_MULTIPLE_1000_FOR_HOSE">
            <summary>
              Looks up a localized string similar to Gia tri giao dich khong dung theo buoc gia cho phep..
            </summary>
        </member>
        <member name="P:Resources.Resource.ERROR_PRICE_NOT_MULTIPLE_100_FOR_HNX">
            <summary>
              Looks up a localized string similar to Gia tri giao dich khong dung theo buoc gia cho phep..
            </summary>
        </member>
        <member name="P:Resources.Resource.ERROR_PRICE_NOT_MULTIPLE_100_FOR_HOSE">
            <summary>
              Looks up a localized string similar to Gia tri giao dich khong dung theo buoc gia cho phep..
            </summary>
        </member>
        <member name="P:Resources.Resource.ERROR_PRICE_NOT_MULTIPLE_100_FOR_UPCOM">
            <summary>
              Looks up a localized string similar to Gia tri giao dich khong dung theo buoc gia cho phep..
            </summary>
        </member>
        <member name="P:Resources.Resource.ERROR_PRICE_NOT_MULTIPLE_500_FOR_HOSE">
            <summary>
              Looks up a localized string similar to Gia tri giao dich khong dung theo buoc gia cho phep..
            </summary>
        </member>
        <member name="P:Resources.Resource.ERROR_UPCOM_NOT_USE_ATO_ATC">
            <summary>
              Looks up a localized string similar to Khong duoc phep dat ATO hoac ATC tren san UPCOM..
            </summary>
        </member>
        <member name="P:Resources.Resource.INCORRECT_SIDE">
            <summary>
              Looks up a localized string similar to Chi co the mua hoac ban..
            </summary>
        </member>
        <member name="P:Resources.Resource.INCORRECT_STOCK">
            <summary>
              Looks up a localized string similar to Chung khoan {0} khong ton tai..
            </summary>
        </member>
        <member name="P:Resources.Resource.INCORRECT_VOL">
            <summary>
              Looks up a localized string similar to Khoi luong {0} khong dung..
            </summary>
        </member>
        <member name="P:Resources.Resource.NOTICE_ADVANCE_ORDER">
            <summary>
              Looks up a localized string similar to {0} thong bao ket qua dat truoc:.
            </summary>
        </member>
        <member name="P:Resources.Resource.NOT_BUY_SELL_THE_SAME_STOCK">
            <summary>
              Looks up a localized string similar to Khong duoc phep mua va ban cung mot loai chung khoan..
            </summary>
        </member>
        <member name="P:Resources.Resource.NOT_ENOUGH_CASH">
            <summary>
              Looks up a localized string similar to Quy khach khong du tien..
            </summary>
        </member>
        <member name="P:Resources.Resource.NOT_ENOUGH_STOCK">
            <summary>
              Looks up a localized string similar to Quy khach khong du chung khoan..
            </summary>
        </member>
        <member name="P:Resources.Resource.OVER_MAX_VOL">
            <summary>
              Looks up a localized string similar to Khoi luong giao dich cao hon gia tri toi da cho phep..
            </summary>
        </member>
        <member name="P:Resources.Resource.OVER_REMAIN_VOLUME">
            <summary>
              Looks up a localized string similar to Khoi luong giao dich cao hon khoi luong cho phep..
            </summary>
        </member>
        <member name="P:Resources.Resource.PLEASE_CHECK_AGAIN">
            <summary>
              Looks up a localized string similar to Quy khach vui long kiem tra lai..
            </summary>
        </member>
        <member name="P:Resources.Resource.PRICE_ABOVE_CEILING">
            <summary>
              Looks up a localized string similar to Gia cua chung khoan cao hon gia tran..
            </summary>
        </member>
        <member name="P:Resources.Resource.PRICE_BELOW_FLOOR">
            <summary>
              Looks up a localized string similar to Gia cua chung khoan duoi gia san..
            </summary>
        </member>
        <member name="P:Resources.Resource.PUT_ORDER_NO_RESPONSE">
            <summary>
              Looks up a localized string similar to TCSC thong bao: TK {0} dat lenh truoc {1} {2}, KL {3}, GIA {4} chua nhan duoc xac nhan..
            </summary>
        </member>
        <member name="P:Resources.Resource.PUT_ORDER_SUCCESS">
            <summary>
              Looks up a localized string similar to TCSC thong bao: TK {0} dat lenh truoc {1} {2}, KL {3}, GIA {4} da duoc dua vao he thong thanh cong..
            </summary>
        </member>
        <member name="P:Resources.Resource.PUT_ORDER_UNSUCCESS">
            <summary>
              Looks up a localized string similar to TCSC thong bao: TK {0} dat lenh truoc {1} {2}, KL {3}, GIA {4} khong thanh cong..
            </summary>
        </member>
        <member name="P:Resources.Resource.SELL">
            <summary>
              Looks up a localized string similar to Ban.
            </summary>
        </member>
        <member name="P:Resources.Resource.SMS_CASH_TRANSFER">
            <summary>
              Looks up a localized string similar to Co lenh chuyen rut tien moi tu tai khoan {0}..
            </summary>
        </member>
        <member name="P:Resources.Resource.STOCK_IS_HALT">
            <summary>
              Looks up a localized string similar to Chung khoan {0} dang bi tam ngung giao dich..
            </summary>
        </member>
        <member name="T:ETradeWebServices.Services.MarketServices">
            <summary>
             Service to get market information.
            </summary>
        </member>
        <member name="M:ETradeWebServices.Services.MarketServices.UpdateSessionHOSE(System.Char,System.DateTime)">
            <summary>
            Updates the session HOSE.
            </summary>
            <param name="marketState">State of the market.</param>
            <param name="sessionTime">The session time.</param>
        </member>
        <member name="M:ETradeWebServices.Services.MarketServices.UpdateSessionHNX(System.Char,System.DateTime)">
            <summary>
            Updates the session HNX.
            </summary>
            <param name="marketState">State of the market.</param>
            <param name="sessionTime">The session time.</param>
        </member>
        <member name="M:ETradeWebServices.Services.MarketServices.UpdateSessionUpcom(System.Char,System.DateTime)">
            <summary>
            Updates the session HNX.
            </summary>
            <param name="marketState">State of the market.</param>
            <param name="sessionTime">The session time.</param>
        </member>
        <member name="M:ETradeWebServices.Services.MarketServices.StartSessionThread">
            <summary>
            Start thread to get market status
            </summary>
        </member>
        <member name="M:ETradeWebServices.Services.MarketServices.StopSessionThread">
            <summary>
            Stop thread to get market status
            </summary>
        </member>
        <member name="M:ETradeWebServices.Services.MarketServices.UpdateSessionTime">
            <summary>
            Updates the session time.
            </summary>
        </member>
        <member name="M:ETradeWebServices.Services.MarketServices.TradingStatus(System.Int32)">
            <summary>
            The trading status.
            </summary>
            <param name="market">The market.</param>
            <returns>Return the trading status of a specified center</returns>
        </member>
        <member name="M:ETradeWebServices.Services.MarketServices.AllTradingStatus">
            <summary>
            All trading statuses.
            </summary>
            <returns>Return the trading status of all markets</returns>
        </member>
        <member name="M:ETradeWebServices.Services.MarketServices.GetOrderSession(System.Int32)">
            <summary>
            Gets the order session.
            </summary>
            <param name="marketId">The market id.</param>
            <returns>CommonEnums.ORDER_SESSION</returns>
        </member>
        <member name="M:ETradeWebServices.Services.MarketServices.AllOrderSession">
            <summary>
            Get order session of all markets.
            </summary>
            <returns>Return the order session of all markets</returns>
        </member>
        <member name="M:ETradeWebServices.Services.MarketServices.GetMarketStatus(System.Int32)">
            <summary>
             Get market status
            </summary>
            <param name="marketId">Market id</param>
            <returns></returns>
        </member>
        <member name="E:ETradeWebServices.Services.MarketServices.HandleHOSECheckConditionOrderEvent">
            <summary>
            Event for market HOSE to check condition orders.
            </summary>
        </member>
        <member name="E:ETradeWebServices.Services.MarketServices.HandleHNXCheckConditionOrderEvent">
            <summary>
            Event for market HNX to check condition orders.
            </summary>
        </member>
        <member name="E:ETradeWebServices.Services.MarketServices.HandleUPCOMCheckConditionOrderEvent">
            <summary>
            Event for market UPCOM to check condition orders.
            </summary>
        </member>
        <member name="T:ETradeWebServices.ETradeServicesWebServices">
            <summary>
            Summary description for ETradeServicesWebServices
            </summary>
        </member>
        <member name="F:ETradeWebServices.ETradeServicesWebServices.WEB_SERVICE_POLICY">
            <summary>
            Exception policy
            </summary>
        </member>
        <member name="F:ETradeWebServices.ETradeServicesWebServices.AccountManagerServices">
            <summary>
            </summary>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetAvailableCash(System.String,System.Int32,System.Boolean)">
            <summary>
            Get cash available os an investor. There are some account types:
            1. Normal account (cash account with 1 in rail): There just BuyCredit
            2. Margin account (with 6 in rail): There BuyCredit, PP, IM
            And other accounts
            </summary>
            <param name="subAccountNo">The account no.</param>
            <param name="accountType">The account type.</param>
            <param name="isConditionOrder">if set to <c>true</c> [is condition order].</param>
            <returns>
            	<para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;CashAvailable&gt;</see> object contains returned code, returned message and
            list of CashAvailable objects that contains available cash information.</para>
            	<para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            	<para>RET_CODE=ERROR_NOT_CASH_AVAILABLE: There is no data.</para>
            	<para>RET_CODE=SUCCESS: Get data successfully.</para>
            	<para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetAvailableCashForMarginAccount(System.String,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Get Available cash for margin account.
            </summary>
            <param name="subAccountNo">Sub account id.</param>
            <param name="accountType">Account type</param>
            <param name="tradeDate">Trade date</param>
            <param name="symbol">Stock symbol.</param>
            <param name="isConditionOrder">if set to <c>true</c> [is condition order].</param>
            <returns>
            	<para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;CashAvailable&gt;</see> object contains returned code, returned message and
            list of CashAvailable objects that contains available cash information.</para>
            	<para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            	<para>RET_CODE=ERROR_INVALID_DATETIME: The trade date is invalid.</para>
            	<para>RET_CODE=ERROR_NOT_CASH_AVAILABLE: There is no data.</para>
            	<para>RET_CODE=SUCCESS: Get data successfully.</para>
            	<para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetPortfolio(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get portfolio of an investor. This is list stock available in portfolio, includes
            1. Sellable stock
            2. Pledge stock
            3. Limittransfer
            4. Wait to receive intra-day
            5. Wait to send intra-day
            6. Wait to receive T1, T2, T3
            7. Wait to send T1, T2, T3
            </summary>
            <param name="accountNo">
            The account no.
            </param>
            <param name="pageNumber">
            The page number.
            </param>
            <param name="pageSize">
            The page size.
            </param>
            <param name="accountType">
            The account type.
            </param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;PagingObject&lt;List&lt;PortfolioInfo&gt;, PortfolioInfo, PortfolioInfo&gt;&gt;</see> object contains returned code, returned message and 
            list of portfolio objects.</para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=ERROR_ACCOUNT: The account does not exist.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=SUCCESS: Getting data successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetListPortfolio(System.String,System.Int32)">
            <summary>
            Get list of portfolio of an investor. This is list stock available in portfolio, includes
            1. Sellable stock
            2. Pledge stock
            3. Limittransfer
            4. Wait to receive intra-day
            5. Wait to send intra-day
            6. Wait to receive T1, T2, T3
            7. Wait to send T1, T2, T3
            </summary>
            <param name="accountNo">
            The account no.
            </param>
            <param name="accountType">
            The account type.
            </param>
            <returns>
            <para>A ResultObject&lt;PagingObject&lt;List&lt;string&gt;&gt;&gt; object contains returned code, 
            returned message and a list of portfolios.</para>
            <para>RET_CODE=NOT_LOGIN: User has not logged in.</para>
            <para>RET_CODE=ERROR_ACCOUNT: Data of user does not exist.</para>
            <para>RET_CODE=SUCCESS: Create data successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetAvailableStock(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Get available stock of an investor. This just sellable share
            </summary>
            <param name="subAccountNo">The account no.</param>
            <param name="symbol">The symbol.</param>
            <param name="accountType">The account type.</param>
            <param name="?">The ?.</param>
            <param name="isConditionOrder">if set to <c>true</c> [is condition order].</param>
            <returns>
            	<para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;StockAvailable&gt;</see> object contains returned code, returned message and
            list of StockAvailable objects that contains available stock information.</para>
            	<para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            	<para>RET_CODE=ERROR_NOT_STOCK_AVAILABLE: There is no data.</para>
            	<para>RET_CODE=SUCCESS: Get data successfully.</para>
            	<para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetCashBalance(System.String,System.Int32)">
            <summary>
            Get cash balance of an investor. This includes:
            1. Buycredit
            2. CashBalance for margin account
            3. PP, IM for margin account
            4. Withdraw
            5. Net amount of T1, T2, T3
            6. Total buy intra-day
            7. Total sell intra-day
            </summary>
            <param name="subAccountNo">The account no.</param>
            <param name="accountType">The account type.</param>
            <returns>
            	<para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;CashBalance;&gt;</see> object contains returned code, returned message and
            CashAdvance object that contains cash advance information.</para>
            	<para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            	<para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            	<para>RET_CODE=SUCCESS: Get data successfully.</para>
            	<para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetPortfolioDirect(System.String,System.Int32)">
            <summary>
            Gets the portfolio direct.
            </summary>
            <param name="accountNo">The account no.</param>
            <param name="accountType">Type of the account.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;List&lt;Portfolio&gt;&gt;</see> object contains returned code, returned message and 
            list of portfolio objects.</para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=SUCCESS: Getting data successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetExchangeRateUSD">
            <summary>
             Get Exchange rate of USD.
            </summary>
            <returns>Exchange rate.</returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.Login(System.String,System.String)">
            <summary>
            Logins the specified username.
            </summary>
            <param name="username">The username.</param>
            <param name="password">The password.</param>
            <returns>
            	<para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;MainCustAccount&gt;</see> object contains returned code, returned message and
            main customer account information.</para>
            	<para>RET_CODE=SUCCESS: Log in successfully.</para>
            	<para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetListOnlineCustomers">
            <summary>
             Get list of online customer
            </summary>
            <returns></returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.Logout">
            <summary>
            Logouts the specified session id.
            </summary>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;CommonEnums.RET_CODE&gt;</see> object contains returned code, returned message and 
            result of logging out.</para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=SUCCESS: Log out successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetAccountInfo(System.String)">
            <summary>
            Gets the account information.
            </summary>
            <param name="accountId">The account id.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;MainCustAccount&gt;</see> object contains returned code, returned message and 
            MainCustAccount object that contains main customer information.</para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=SUCCESS: Get account successfully.</para>
            <para>RET_CODE=FAIL: Failed to get account.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.ForgetPassword(System.String,System.String,System.String)">
            <summary>
            Forgets the password.
            </summary>
            <param name="mainCustAccountId">The main cust account id.</param>
            <param name="identifyNumber">The identify number.</param>
            <param name="messagePhone">The message phone.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.ForgetPin(System.String)">
            <summary>
            Request new pin.
            </summary>
            <param name="mainCustAccountId">Main customer account id.</param>
            <returns>
            <para>RET_CODE=INCORECT_INFORMATION: Wrong some information.</para>
            <para>RET_CODE=SUCCESS: Generate pin successfully.</para>
             <para>RET_CODE=NO_EXIST_DATA: wrong main cust account id</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            <para>RET_CODE=FAIL: Action fail.</para>
            <para>RET_CODE=ERROR_SENT_MESSAGE: Send message fail.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.ChangePassword(System.String,System.String,System.String)">
            <summary>
            Changes the password.
            </summary>
            <param name="mainCustAccId">The main customer account id.</param>
            <param name="oldPass">The old pass.</param>
            <param name="newPass">The new pass.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject</see> object includes returned code, returned message, 
            and <see cref="T:ETradeCommon.Enums.CommonEnums.RET_CODE"/> information that contains result of changing password.</para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=SUCCESS: Changing password successfully.</para>
            <para>RET_CODE=FAILED: Fail to change password successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.ChangePin(System.String,System.String,System.String)">
            <summary>
            Chang pin of an investor
            </summary>
            <param name="accountId">
            The account id.
            </param>
            <param name="oldPin">
            The old pin.
            </param>
            <param name="newPin">
            The new pin.
            </param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject</see> object includes returned code, returned message, 
            and <see cref="T:ETradeCommon.Enums.CommonEnums.RET_CODE"/> information that contains result of changing pin.</para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=SUCCESS: Changing pin successfully.</para>
            <para>RET_CODE=FAILED: Fail to change pin successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.SendMessage(System.String,System.String)">
            <summary>
            Send message to customer.
            </summary>
            <param name="username">Customer account</param>
            <param name="message">Message to send</param>
            <returns>ResultObject object of int that contains result of sending message</returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.Connect">
            <summary>
            Connect to LinkOPS
            </summary>
            <returns>
            ResultObject of bool to show result of connection. 
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.Disconnect">
            <summary>
            Disconnect from LinkOPS
            </summary>
            <returns>
            ResultObject of bool to show result of disconnection. 
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.IsConnected">
            <summary>
            Is connected to LinkOPS
            </summary>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;bool&gt;</see> object contains returned code, returned message and 
            the result of checking connection.</para>
            <para>RET_CODE=SUCCESS: Checking successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.PutOrder(System.Int32,System.String,System.String,System.String,System.Char,System.Int32,System.Decimal,System.Char,System.Int32,System.Char)">
            <summary>
            Puts new order.
            </summary>
            <param name="market">
            The market id. Please refer to the enum MARKET_ID in CommonEnums.cs to know the values.
            </param>
            <param name="accountNo">
            The sub account ID such as 0088661, 0088666
            </param>
            <param name="pin">
            The pin code
            </param>
            <param name="secSymbol">
            The sec symbol of HOSE/HNX/UpCom
            </param>
            <param name="side">
            The side includes values BUY: "B", SELL: "S". Please refer to the enum TRADE_SIDE in CommonEnums.cs to know the values.
            </param>
            <param name="volume">
            The volume.
            </param>
            <param name="price">
            The price.
            </param>
            <param name="conPrice">
            The con price includes values ATO: 'A', ATC: 'C', LO: ' '. Please refer to the enum TRADE_SIDE in Constants.cs to know the values.
            </param>
            <param name="accountType">
            Type of the account includes values Normal account (such as 0088661): 0, Margin account (such as 0088666): 1
            </param>
            <param name="orderSource">Order source: From web or sms.</param>
            <returns>
            <para>
            Result of putting order.
            If the RetCode is CommonEnums.RET_CODE.SUCCESS then Result of ResultObject is the order id.
            Otherwise, it is a reject code. Please refer to the reject code in the enum REJECT_REASON of CommonEnums.cs
            </para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=INCORRECT_PIN: The pin is incorrect.</para>
            <para>RET_CODE=ERROR_ACCOUNT: Account does not exist.</para>
            <para>RET_CODE=ERROR_GW_NOT_CONNECTED: LinkOPS hasn't been connected.</para>
            <para>RET_CODE=ERROR_GW_NOT_SEND: Sending message failed.</para>
            <para>RET_CODE=SUCCESS: Putting order successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            <para>REJECT_REASON</para>
            <para>REJECT_REASON=ERROR_MARGIN_ACCOUNT_CANNOT_BUY_THAT_SYMBOL: Margin account cannot buy this symbol.</para>
            <para>REJECT_REASON=ERROR_OVER_LIMIT_LOAN_PER_CUSTOMER: The value of price after fee overs the limit of loan per customer.</para>
            <para>REJECT_REASON=ERROR_OVER_LIMIT_LOAN_PER_SECSYMBOL: The value of price after fee over the limit of loan per symbol.</para>
            <para>REJECT_REASON=ERROR_OVER_LIMIT_COMPANY_CAPITAL: The value of price after fee over the limit of the company capital.</para>
            <para>REJECT_REASON=ERROR_OVER_LIMIT_MAX_BUY: The value of price after fee over max buy of that account.</para>
            <para>REJECT_REASON=ERROR_OVER_LIMIT_MAX_BUY_OF_SECSYMBOL: The value of price after fee over max buy of symbol.</para>
            <para>REJECT_REASON=ERROR_MARKET_CLOSE: Market closed.</para>
            <para>REJECT_REASON=ERROR_ATO_NOT_IN_READY_AND_SESSION1: Cannot put ATO order in READY and SESSION1 session.</para>
            <para>REJECT_REASON=ERROR_ATC_NOT_IN_SESSION3: Cannot put ATC in SESSION3 session.</para>
            <para>REJECT_REASON=ERROR_PRICE_NOT_MULTIPLE_100_FOR_HOSE: Price is incorrect for HOSE market.</para>
            <para>REJECT_REASON=ERROR_PRICE_NOT_MULTIPLE_500_FOR_HOSE: Price is incorrect for HOSE market.</para>
            <para>REJECT_REASON=ERROR_PRICE_NOT_MULTIPLE_1000_FOR_HOSE: Price is incorrect for HOSE market.</para>
            <para>REJECT_REASON=ERROR_HNX_NOT_USE_ATO_ATC: Cannot put ATO, ATC order in HNX market.</para>
            <para>REJECT_REASON=ERROR_PRICE_NOT_MULTIPLE_100_FOR_HNX: Price is incorrect for HNX market.</para>
            <para>REJECT_REASON=ERROR_UPCOM_NOT_USE_ATO_ATC: Cannot put ATO, ATC order in UPCOM market.</para>
            <para>REJECT_REASON=ERROR_PRICE_NOT_MULTIPLE_100_FOR_UPCOM: Price is incorrect for UPCOM market.</para>
            <para>REJECT_REASON=INCORRECT_SIDE: The side is not buy or sell side.</para>
            <para>REJECT_REASON=INCORRECT_VOL: The volume is incorrect.</para>
            <para>REJECT_REASON=OVER_MAX_VOL: The volume is over max allowed volume.</para>
            <para>REJECT_REASON=INCORRECT_STOCK: Stock is incorrect.</para>
            <para>REJECT_REASON=STOCK_IS_HALT: Stock is halt.</para>
            <para>REJECT_REASON=PRICE_BELOW_FLOOR: Price is below floor price.</para>
            <para>REJECT_REASON=PRICE_ABOVE_CEILING: Price is over ceiling price.</para>
            <para>REJECT_REASON=NOT_BUY_SELL_THE_SAME_STOCK: Not allow to buy and sell the same stock.</para>
            <para>REJECT_REASON=ERROR_LOCK_ACCOUNT: Account is locked.</para>
            <para>REJECT_REASON=ERROR_ACCOUNT_NOT_BUY_PERMISSION: Account is not allowed to buy stocks.</para>
            <para>REJECT_REASON=ERROR_ACCOUNT_NOT_SELL_PERMISSION: Account is not allowed to sell stocks.</para>
            <para>REJECT_REASON=NOT_ENOUGH_CASH: Customer has not enough money.</para>
            <para>REJECT_REASON=NOT_ENOUGH_STOCK: Customer has not enough stocks.</para>
            <para>REJECT_REASON=OVER_REMAIN_VOLUME: Available volume is not enough.</para>
            <para>REJECT_REASON=IS_VALID: This is a valid order.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.CancelOrder(System.Int32,System.String,System.String)">
            <summary>
            Cancels an existed order. This order must is pending or is already confirmed from SET or FIS
            </summary>
            <param name="orderId">The order id that was return by PutOrder APIs</param>
            <param name="accountNo">The sub accountId such as 0088661, 0088666</param>
            <param name="pin">The pin code</param>
            <returns>
            <para>ResultObject of interger. 
            If the RetCode is CommonEnums.RET_CODE.SUCCESS then Result of ResultObject is the order id.
            Otherwise, it is a reject code. Please refer to the reject code in the enum REJECT_REASON of CommonEnums.cs</para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=INCORRECT_PIN: The pin is incorrect.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=ERROR_CANNOT_CANCEL_ODD_LOT_ORDER: Cannot cancel odd lot order because it's in incorrect state.</para>
            <para>RET_CODE=SUCCESS: Cancel successfully.</para>
            <para>RET_CODE=FAIL: Fail to cancel odd lot order.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.NewestOrdStatus(System.Int32,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets all the newest order information that put to system from all sources.
            </summary>
            <param name="pageSize">Size of the page.</param> 
            <param name="pageIndex">The page number. if pageIndex = 0, it will return all orders</param>
            <param name="accountNo">The account no.</param>
            <param name="isPending">You want it to return the pending orders. Values is True/False.</param>
            <param name="isMatched">You want it to return the matched orders. Values is True/False.</param>
            <param name="isSemiMatched">You want it to return the semimatched orders. Values is True/False.</param>
            <param name="isCanceling">You want it to return the canceling orders. Values is True/False.</param>
            <param name="isCancelled">You want it to return the canceled orders. Values is True/False.</param>
            <param name="isRejected">You want it to return the rejected orders. Values is True/False.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;PagingObject&lt;List&lt;ExecOrder&gt;&gt;&gt;</see> object contains returned code, returned message and 
            list of ExecOrder objects that contains order information.</para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=SUCCESS: Putting order successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.IsOrdersUpdated(System.Collections.Generic.List{ETradeOrders.Entities.ExecOrder})">
            <summary>
            Compare to find out the different between new and old order status. Update new ones to sesssion
            </summary>
            <param name="listOrders">Order list to check.</param>
            <returns>true if the order list is new; otherwise false.</returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.NewestOrdCount(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the total orders that put to system from all sources.
            </summary>
            <param name="accountId">The account no.</param>
            <param name="isPending">You want it to return the pending orders. Values is True/False.</param>
            <param name="isMatched">You want it to return the matched orders. Values is True/False.</param>
            <param name="isSemiMatched">You want it to return the semimatched orders. Values is True/False.</param>
            <param name="isCanceling">You want it to return the canceling orders. Values is True/False.</param>
            <param name="isCancelled">You want it to return the canceled orders. Values is True/False.</param>
            <param name="isRejected">You want it to return the rejected orders. Values is True/False.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;int&gt;</see> object contains returned code, returned message and 
            total records.</para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=SUCCESS: Putting order successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetOrderHistory(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get order history of an investor
            </summary>
            <param name="accountNo">
            The sub account no. such as 0088661, 0088666
            </param>
            <param name="fromDate">
            The from date. Format(YYYYMMDD)
            </param>
            <param name="toDate">
            The to date. Format(YYYYMMDD)
            </param>
            <param name="symbol">
            The symbol.
            </param>
            <param name="orderStatus">
            The order status. please refer the values from FILTER_ORDER_STATUS in CommonEnums.cs
            </param>
            <param name="pageIndex">
            The page index. if pageIndex = 0 then it will return all results.
            </param>
            <param name="pageSize">
            The page size.
            </param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;PagingObject&lt;List&lt;OrderHistory&gt;&gt;&gt;</see> object contains returned code, returned message and 
            list of OrderHistory objects.</para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=ERROR_INVALID_DATETIME: The date is invalid.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=SUCCESS: Getting data successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetOrderHistoryCount(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Gets the order history count.
            </summary>
            <param name="accountNo">
            The sub account no. such as 0088661, 0088666
            </param>
            <param name="fromDate">
            The from date. Format(YYYYMMDD)
            </param>
            <param name="toDate">
            The to date. Format(YYYYMMDD)
            </param>
            <param name="symbol">
            The symbol.
            </param>
            <param name="orderStatus">
            The order status. please refer the values from FILTER_ORDER_STATUS in CommonEnums.cs
            </param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;int&gt;</see> object contains returned code, returned message and 
            total records.</para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=SUCCESS: Getting data successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetDealHistory(System.Decimal,System.String,System.Int32)">
            <summary>
            Get deal detail of order history
            </summary>
            <param name="orderNo">
            The order no that was returned by GetOrderHistory.
            </param>
            <param name="dealDate">
            The deal date. Format (YYYYMMDD)
            </param>
            <param name="page">
            The page. page = 0 is all.
            </param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;List&lt;DealHistory&gt;&gt;</see> object contains returned code, returned message and 
            list of DealHistory object that contains deal history information.</para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=ERROR_INVALID_DATETIME: The dealDate is invalid.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=SUCCESS: Get data successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetDealIntraDay(System.Decimal,System.Int32)">
            <summary>
            Gets the deal intra day.
            </summary>
            <param name="orderNo">The order no that was returned by PutOrder.</param>
            <param name="page">The page. If page = 0, it return all results.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;List&lt;DealInfo&gt;&gt;</see> object contains returned code, returned message and 
            list of DealInfo object that contains deal information.</para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=ERROR_INVALID_DATETIME: The dealDate is invalid.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=SUCCESS: Get data successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetPreTradeInfo(System.String,System.String,System.Int32,System.Char,System.Boolean)">
            <summary>
            Gets the information that support for user that can refer before puting order.
            </summary>
            <param name="accountNo">The sub account no. Such as 0088661, 0088666</param>
            <param name="symbol">The symbol of HOSE/HNX/UPCOM</param>
            <param name="accountType">Type of the account.
            0: is normal account (such as 0088661).
            1: is margin account (such as 0088666).
            Please refer to ACCOUNT_TYPE in CommonEnums.cs</param>
            <param name="side">The side of trading.
            'B': buy, 'S': sell.
            Please refer to TRADE_SIDE in CommonEnums.cs</param>
            <param name="isConditionOrder">if set to <c>true</c> [is condition order].</param>
            <returns>
            	<para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;PreTradeInfo&gt;</see> object contains returned code, returned message and
            pretrade information.</para>
            	<para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            	<para>RET_CODE=SUCCESS: Getting data successfully.</para>
            	<para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.PutAdvanceOrder(System.Int32,System.String,System.String,System.String,System.Char,System.Int32,System.Decimal,System.String,System.String,System.Int16,System.Decimal,System.Decimal)">
            <summary>
            Put advance orders.
            </summary>
            <param name="market">Market Id</param>
            <param name="accountNo">Sub account Id</param>
            <param name="pin">Pin</param>
            <param name="secSymbol">security symbol</param>
            <param name="side">Side "B":buy; "S":Sell</param>
            <param name="volume">Volume to trade</param>
            <param name="price">Price to trade</param>
            <param name="strEffDate">Effected date </param>
            <param name="strExpDate">Expired date</param>
            <param name="type">Type of advance order</param>
            <param name="minValue">Minimum price value</param>
            <param name="maxValue">Maximum price value</param>
            <returns>
            <para>
            Result of putting advance order.
            If the RetCode is CommonEnums.RET_CODE.SUCCESS then Result of ResultObject is the order id.
            Otherwise, it is a reject code. Please refer to the reject code in the enum REJECT_REASON of CommonEnums.cs
            </para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=INCORRECT_PIN: The pin is incorrect.</para>
            <para>RET_CODE=ERROR_ACCOUNT: Account does not exist.</para>
            <para>RET_CODE=NOT_ALLOW: Customer isn't allowed to buy or sell stock.</para>
            <para>RET_CODE=SUCCESS: Putting order successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            <para>REJECT_REASON</para>
            <para>REJECT_REASON=NOT_ADVANCE_TIME: This time is not advance time.</para>
            <para>REJECT_REASON=ERROR_PRICE_NOT_MULTIPLE_100_FOR_HOSE: Price is incorrect for HOSE market.</para>
            <para>REJECT_REASON=ERROR_PRICE_NOT_MULTIPLE_500_FOR_HOSE: Price is incorrect for HOSE market.</para>
            <para>REJECT_REASON=ERROR_PRICE_NOT_MULTIPLE_1000_FOR_HOSE: Price is incorrect for HOSE market.</para>
            <para>REJECT_REASON=ERROR_HNX_NOT_USE_ATO_ATC: Cannot put ATO, ATC order in HNX market.</para>
            <para>REJECT_REASON=ERROR_PRICE_NOT_MULTIPLE_100_FOR_HNX: Price is incorrect for HNX market.</para>
            <para>REJECT_REASON=ERROR_UPCOM_NOT_USE_ATO_ATC: Cannot put ATO, ATC order in UPCOM market.</para>
            <para>REJECT_REASON=ERROR_PRICE_NOT_MULTIPLE_100_FOR_UPCOM: Price is incorrect for UPCOM market.</para>
            <para>REJECT_REASON=INCORRECT_SIDE: The side is not buy or sell side.</para>
            <para>REJECT_REASON=INCORRECT_VOL: The volume is incorrect.</para>
            <para>REJECT_REASON=OVER_MAX_VOL: The volume is over max allowed volume.</para>
            <para>REJECT_REASON=INCORRECT_STOCK: Stock is incorrect.</para>
            <para>REJECT_REASON=STOCK_IS_HALT: Stock is halt.</para>
            <para>REJECT_REASON=ERROR_LOCK_ACCOUNT: Account is locked.</para>
            <para>REJECT_REASON=ERROR_ACCOUNT_NOT_CONDITION_ORDER: Account is not allowed to put advance order.</para>
            <para>REJECT_REASON=NOT_ENOUGH_CASH: Customer has not enough money.</para>
            <para>REJECT_REASON=NOT_ENOUGH_STOCK: Customer has not enough stocks.</para>
            <para>REJECT_REASON=IS_VALID: This is a valid order.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.CancelAdvanceOrder(System.Int64,System.String,System.String)">
            <summary>
            Cancel advance orders.
            </summary>
            <param name="conditionOrderId">Condition Order Id</param>
            <param name="subCustAccountId">Sub account Id</param>
            <param name="pin">Pin</param>
            <returns>
            <para>Result of cancelling advance order.</para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=ERROR_ACCOUNT: Information of account in session does not exist.</para>
            <para>RET_CODE=INCORRECT_PIN: The pin is incorrect.</para>
            <para>RET_CODE=ADVANCE_ORDER_STATUS_INCORRECT_STATE: The order is not in the correct state to cancel.</para>
            <para>RET_CODE=NO_EXISTED_DATA: Data does not exist.</para>
            <para>RET_CODE=SUCCESS: Cancel successfully.</para>
            <para>RET_CODE=FAIL: Fail to cancel order.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.PutConditionOrder">
            <summary>
            Put orders of condition orders at the beginning of trading days
            </summary>
            <returns>
            <para>Result of putting condition orders.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetListConditionOrder(System.String,System.String,System.String,System.Int32[],System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Get list of condition orders. 
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="side">Buy or Sell side</param>
            <param name="symbol">Stock symbol</param>
            <param name="status">Status of orders</param>
            <param name="fromDate">Searched effective date from</param>
            <param name="toDate">Searched effective date to</param>
            <param name="pageIndex">Page index</param>
            <param name="pageSize">Page size</param>
            <param name="fromTool"></param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;PagingObject&lt;List&lt;ConditionOrder&gt;&gt;&gt;</see> object contains returned code, returned message and 
            list of ConditionOrder objects that contains condition order information.</para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=ERROR_INVALID_DATETIME: The sent date is invalid.</para>
            <para>RET_CODE=SUCCESS: Get data successfully.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ETradeWebServices.ETradeServicesWebServices.GetListConditionOrderDetail(System.Int64)" -->
        <member name="M:ETradeWebServices.ETradeServicesWebServices.ResetConditionOrder">
            <summary>
            Update expire condition orders and rejected condition orders.
            </summary>
            <returns>
            <para>Result of reseting condition orders.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.IsValidLimitQuantityAdvanceOrder(System.Char,System.String,System.String)">
            <summary>
            Check is valid limit quantity advance order if not enough cash available
            </summary>
            <param name="side">The side.</param>
            <param name="subCustAccountId">The sub cust account id.</param>
            <param name="symbol">The symbol.</param>
            <returns>
            	<c>true</c> if [is valid limit quantity advance order] [the specified side]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetTradingState(System.Int32)">
            <summary>
            Gets the state of the trading.
            </summary>
            <param name="marketId">The market id.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;PagingObject&lt;List&lt;char&gt;&gt;&gt;</see> object contains returned code, returned message and 
            trading state information. If GW not connect to LinkOPS yet, the trading status wil be 'W'</para>
            <para>RET_CODE=SUCCESS: Getting data successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetAllTradingState">
            <summary>
            Gets all states of the trading.
            </summary>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;char[]&gt;</see> object contains returned code, returned message and 
            trading state information of all markets. If GW not connect to LinkOPS yet, the trading status wil be 'W'.
            Please refer to the MARKET_STATUS in CommonEnums.cs.</para>
            <para>RET_CODE=SUCCESS: Get data successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetAllOrderSession">
            <summary>
            Gets order session of all markets.
            </summary>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;char[]&gt;</see> object contains returned code, returned message and 
            order session of all markets.</para>
            <para>RET_CODE=SUCCESS: Get data successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetAdvanceHistory(System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the advance history.
            </summary>
            <param name="subAccountNo">The account no. Such as 0088661, 0088666</param>
            <param name="fromAdvanceDate">From advance date.Format(YYYYMMDD)</param>
            <param name="toAdvanceDate">To advance date.Format(YYYYMMDD)</param>
            <param name="fromSellDate">From sell date.Format(YYYYMMDD)</param>
            <param name="toSellDate">To sell date.Format(YYYYMMDD)</param>
            <param name="advanceStatus">The advance status</param>
            <param name="contractNo">The contract number</param>
            <param name="pageIndex">The page index. If pageIndex = 0 then it will return all results.</param>
            <param name="pageSize">Size of the page.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;PagingObject&lt;List&lt;CashAdvance&gt;&gt;&gt;</see> object contains returned code, returned message and 
            list of CashAdvance objects that contains cash advance information.</para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=SUCCESS: Get data successfully.</para>
            <para>RET_CODE=FAIL: Failed to get data.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetAdvanceInfo(System.String)">
            <summary>
            Gets the advance info that support to create the request to cash advance.
            </summary>
            <param name="accountNo">The account no. such as 0088661, 0088666</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;PagingObject&lt;List&lt;AdvanceInfo&gt;, AdvanceInfo, AdvanceInfo&gt;&gt;</see> object contains returned code, returned message and 
            list of AdvanceInfo objects that contains cash advance information and total information for each page/all.</para>
            <para>RET_CODE=SUCCESS: Get data successfully.</para>
            <para>RET_CODE=FAIL: Failed to get data.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.NewCashAdvance(System.String,System.String,System.Decimal,System.Decimal,System.Decimal,System.String)">
            <summary>
            News the cash advance.
            </summary>
            <param name="accountNo">The sub account no.</param>
            <param name="pin">Pin</param>
            <param name="sellAmt">The sellAmt is the mount that was sold after fee/vat. </param>
            <param name="cashAdvance">The mount you would like to cash advance.</param>
            <param name="maxCanAdvance">The maximum mount that you can advance.</param>
            <param name="tradeDate">The sell date</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;int&gt;</see> object contains returned code, returned message and 
            contract no.</para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=ERROR_INVALID_CASH_ADVANCE: Cash advance is invalid.</para>
            <para>RET_CODE=ERROR_CANNOT_ADVANCE_OUTOF_TIME: Not time for cash advance.</para>
            <para>RET_CODE=ERROR_CANNOT_ADVANCE_IN_DUE_DATE: Cash advance due date is invalid.</para>
            <para>RET_CODE=ERROR_NOT_ENOUGH_CASH_TO_ADVANCE: There is not enough cash to request cash advance.</para>
            <para>RET_CODE=SUCCESS: Putting order successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.CancelCashAdvance(System.String,System.String,System.String)">
            <summary>
            Cancels the cash advance.
            </summary>
            <param name="subCustAccountId">The sub account no.</param>
            <param name="pin">Customer's pin.</param>
            <param name="contractNo">The contract no that was created by NewCashAdvance APIs..</param>
            <returns>
            <para>Result of cancelling cash advance.</para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=INCORRECT_PIN: The pin is incorrect.</para>
            <para>RET_CODE=ERROR_CANNOT_CANCEL_ADVANCE_CANCELED: Cannot cancel a canceled cash advance.</para>
            <para>RET_CODE=ERROR_CANNOT_CANCEL_ADVANCE_REFJECTED: Cannot cancel a rejected cash advance.</para>
            <para>RET_CODE=ERROR_CANNOT_CANCEL_IN_PROCESSING: Cannot cancel a cash advance which is in processing state.</para>
            <para>RET_CODE=ERROR_CANNOT_CANCEL_ADVANCE_FINISHED: Cannot cancel a finished cash advance.</para>
            <para>RET_CODE=SUCCESS: Cancel successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetCashAdvanceStatus(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the cash advance status.
            </summary>
            <param name="accountNo">The account no.</param>
            <param name="fromDate">From date.</param>
            <param name="toDate">To date.</param>
            <param name="status">The status.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;PagingObject&lt;List&lt;CashAdvance&gt;&gt;&gt;</see> object contains returned code, returned message and 
            list of CashAdvance objects that contains cash advance information.</para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=ERROR_INVALID_DATETIME: The date is incorrect.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=SUCCESS: Get data successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetAdvanceFee(System.String,System.Decimal,System.Int32)">
            <summary>
            Gets the advance fee.
            </summary>
            <param name="accountNo">The account no.</param>
            <param name="sellAmt">The sell amt.</param>
            <param name="advanceDays">The advance days.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetActualTrade(System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the actual trade.
            </summary>
            <param name="subAccountNo">The sub account no.</param>
            <param name="fromDate">From date.Format (YYYYMMDD)</param>
            <param name="toDate">To date.Format (YYYYYMMDD)</param>
            <param name="symbol">
            The symbol.
            "all" or " ": get all symbol.
            </param>
            <param name="pageNumber">The page number. if pageNumber = 0 it will return all results</param>
            <param name="pageSize">Size of the page.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;PagingObject&lt;List&lt;ActualTrade&gt;&gt;&gt;</see> object contains returned code, returned message and 
            list of ActualTrade objects that contains trade information.</para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=SUCCESS: Get data successfully.</para>
            <para>RET_CODE=FAIL: Failed to get data.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetXDInfo(System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the XD info.
            </summary>
            <param name="accountNo">The sub account no.</param>
            <param name="fromDate">From date.Format (YYYYMMDD)</param>
            <param name="toDate">To date.Format (YYYYYMMDD)</param>
            <param name="symbol">
            The symbol.
            "all" or " ": get all symbol.
            </param>
            <param name="pageIndex">The page number. if pageNumber = 0 it will return all results</param>
            <param name="pageSize">Size of the page.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;PagingObject&lt;List&lt;XD&gt;&gt;&gt;</see> object contains returned code, returned message and 
            list of XD information.</para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=ERROR_INVALID_DATETIME: The date is invalid.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=SUCCESS: Getting successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetXRInfo(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the XR info.
            </summary>
            <param name="accountNo">The sub account no.</param>
            <param name="symbol">Stock symbol</param>
            <param name="fromDate">From date.Format (YYYYMMDD)</param>
            <param name="toDate">To date.Format (YYYYYMMDD)</param>
            <param name="xType">
            The type of right: 0 : Right to buy. 1 : stock devident. 2: stock bonus. 3: cash devident.
            </param>
            <param name="pageIndex">The page number. if pageIndex = 0 it will return all results</param>
            <param name="pageSize">Size of the page.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;PagingObject&lt;List&lt;XR&gt;&gt;&gt;</see> object contains returned code, returned message and 
            list of XR information.</para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=ERROR_INVALID_DATETIME: The date is invalid.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=SUCCESS: Getting successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetListPnLHistory(System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
             Get list of pnl history.
            </summary>
            <param name="accountNo">Sub account no</param>
            <param name="fromDate">Search from date, format DD/MM/YYYY</param>
            <param name="toDate">Search to date, format DD/MM/YYYY</param>
            <param name="symbol">Stock symbol. if it empty, it will return for all symbol.</param>
            <param name="pageIndex">Page index</param>
            <param name="pageSize">Page size</param>
             <returns>
             <para>A ResultObject&lt;PagingObject&lt;List&lt;PnLhistory&gt;&gt;&gt; object contains returned code, 
             returned message and a list of PnLhistory object that contains pnl historyinformation.</para>
             <para>RET_CODE=NOT_LOGIN: User has not logged in.</para>
             <para>RET_CODE=NOT_ALLOW: User is not allowed to do this function.</para>
             <para>RET_CODE=NO_EXISTED_DATA: Data is not existing.</para>
             <para>RET_CODE=SUCCESS: Create data successfully.</para>
             <para>RET_CODE=SYSTEM_ERROR: System error.</para>
             </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetBankAccountInfo(System.String)">
            <summary>
             Get bank account info
            </summary>
            <param name="subAccountNo">Sub account Id</param>
             <returns>
             <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;BankAccountInfo&gt;</see> object contains returned code, returned message and 
             BankAccountInfo objects that contains bank account information.</para>
             <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
             <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
             <para>RET_CODE=SUCCESS: Get data successfully.</para>
             <para>RET_CODE=SYSTEM_ERROR: System error.</para>
             </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetMarginRatio(System.String)">
            <summary>
            Gets the margin ratio.
            </summary>
            <param name="accountNo">The account no from SBA.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;MarginRatioInfo&gt;</see> object contains returned code, returned message and 
            MarginRatioInfo object.</para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=SUCCESS: Getting data successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetMarginPortfolio(System.String)">
            <summary>
            Gets the margin portfolio.
            </summary>
            <param name="accountNo">The account no.</param>
            <returns>
            <para>A ResultObject&lt;List&lt;MarginPortfolio&gt;&gt; object contains returned code, 
            returned message and a list of MarginPortfolio objects that contains portfolio of the margin account.</para>
            <para>RET_CODE=NOT_LOGIN: User has not logged in.</para>
            <para>RET_CODE=NO_EXISTED_DATA: The is no data.</para>
            <para>RET_CODE=SUCCESS: Create data successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.IsCallMargin(System.String)">
            <summary>
            Determines whether this account is call margin or not.
            </summary>
            <param name="accountNo">The account no.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;bool&gt;</see> object contains returned code, returned message and 
            checking of call margin.</para>
            <para>RET_CODE=SUCCESS: Checking successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.IsCallForceSell(System.String)">
            <summary>
            Determines whether this account is call force sell or not.
            </summary>
            <param name="accountNo">The account no.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;bool&gt;</see> object contains returned code, returned message and 
            checking of call force sell.</para>
            <para>RET_CODE=SUCCESS: Checking successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.CancelCashTransfer(System.Int64,System.String,System.String)">
            <summary>
            Cancels the cash transfer.
            </summary>
            <param name="id">The id.</param>
            <param name="pin">Customer's pin.</param>
            <param name="note">The note.</param>
            <returns>
            <para>Result of cancelling cash transfer.</para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=INCORRECT_PIN: The pin is incorrect.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=ERROR_CANNOT_CANCEL_CASH_TRANSFER: Cannot cancel cash transfer because it's in incorrect state.</para>
            <para>RET_CODE=SUCCESS: Cancel successfully.</para>
            <para>RET_CODE=FAIL: Fail to cancel cash transfer.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetListCashTransOrder(System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Cashes the trans order hist.
            </summary>
            <param name="sourceAccountID">The source account ID.</param>
            <param name="destAccountID">The dest account ID.</param>
            <param name="transType">Type of the trans.</param>
            <param name="status">The status.</param>
            <param name="note">The note.</param>
            <param name="brokerID">The broker ID.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;PagingObject&lt;List&lt;CashTransfer&gt;&gt;&gt;</see> object contains returned code, returned message and 
            list of CashTransfer objects that contains cash transfer information.</para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=ERROR_INVALID_DATETIME: The sent date is invalid.</para>
            <para>RET_CODE=SUCCESS: Get data successfully.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetListCashTransOrderHist(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Get transfered cash order history data.
            </summary>
            <param name="sourceAccountID">The source account ID.</param>
            <param name="destAccountID">The dest account ID.</param>
            <param name="fromDate">From date.</param>
            <param name="toDate">To date.</param>
            <param name="transType">Type of the trans.</param>
            <param name="status">The status.</param>
            <param name="note">The note.</param>
            <param name="brokerID">The broker ID.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;PagingObject&lt;List&lt;CashTransfer&gt;&gt;&gt;</see> object contains returned code, returned message and 
            list of CashTransfer objects that contains cash transfer information.</para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=ERROR_INVALID_DATETIME: The sent date is invalid.</para>
            <para>RET_CODE=SUCCESS: Get data successfully.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.PutCashTransOrder(System.String,System.String,System.String,System.String,System.String,System.Decimal,System.Int32,System.String)">
            <summary>
            Puts the cash trans order.
            </summary>
            <param name="sourceAccountID">The source account ID.</param>
            <param name="destAccountID">The destination account ID.</param>
            <param name="Pin">Customer's pin.</param>
            <param name="requestAmt">The request amount.</param>
            <param name="transType">Type of the transaction.</param>
            <param name="note">The note.</param>
            <returns>
            <para>
            Result of putting cash transfer order.
            </para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=INCORRECT_PIN: The pin is incorrect.</para>
            <para>RET_CODE=ERROR_ACCOUNT: The account does not exist.</para>
            <para>RET_CODE=NOT_ALLOW: Customer is not allowed to do this action.</para>
            <para>RET_CODE=ERROR_REQUEST_AMOUNT: The amount is incorrect.</para>
            <para>RET_CODE=ERROR_INVALID_WITHDRAWAL: The withdrawal amount is incorrect.</para>
            <para>RET_CODE=ERROR_NOT_CASH_AVAILABLE: There is no available cash.</para>
            <para>RET_CODE=FAIL: Putting order failed.</para>
            <para>RET_CODE=SUCCESS: Putting order successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetListSubCustAccountFromSession">
            <summary>
            Get list of sub customer account from session
            </summary>
            <returns>List of sub customer account information from session.</returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetCashTransferInfo(System.String,System.Int32)">
            <summary>
            Gets the cash transfer info.
            </summary>
            <param name="subAccountId">The sub Account Id.</param>
            <param name="accountType">Type of the account.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;CashTransferInfo;&gt;</see> object contains returned code, returned message and 
            CashTransferInfo object that contains cash transfer information.</para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=SUCCESS: Get data successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.CancelStockTransfer(System.Int64,System.String,System.String)">
            <summary>
            Cancels the stock transfer.
            </summary>
            <param name="id">The id.</param>
            <param name="pin">Customer pin.</param>
            <param name="note">The note.</param>
            <returns>
            <para>Result of cancelling stock transfer.</para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=INCORRECT_PIN: The pin is incorrect.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=ERROR_CANNOT_CANCEL_STOCK_TRANSFER: Cannot cancel stock transfer because it's in incorrect state.</para>
            <para>RET_CODE=SUCCESS: Cancel successfully.</para>
            <para>RET_CODE=FAIL: Fail to cancel odd lot order.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.PutStockTransOrder(System.String,System.String,System.String,System.String,System.Int64,System.Int32,System.String)">
            <summary>
            Puts the stock trans order.
            </summary>
            <param name="sourceAccountID">The source account ID.</param>
            <param name="destAccountID">The dest account ID.</param>
            <param name="pin"></param>
            <param name="secSymbol">The sec symbol.</param>
            <param name="requestAmt">The request amt.</param>
            <param name="transType">Type of the trans.</param>
            <param name="note">The note.</param>
            <returns>
            <para>Result of putting stock transfer order.</para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=INCORRECT_PIN: The pin is incorrect.</para>
            <para>RET_CODE=ERROR_ACCOUNT: Account does not exist.</para>
            <para>RET_CODE=NOT_ALLOW: Customer is not allowed to put order.</para>
            <para>RET_CODE=ERROR_REQUEST_AMOUNT: The requested amount is incorrect.</para>
            <para>RET_CODE=ERROR_NOT_CASH_AVAILABLE: There is no available cash.</para>
            <para>RET_CODE=ERROR_DEBT_ACCOUNT: The account is in debt.</para>
            <para>RET_CODE=ERROR_NOT_STOCK_AVAILABLE: There is no available stock.</para>
            <para>RET_CODE=SUCCESS: Get data successfully.</para>
            <para>RET_CODE=FAIL: Failed to get data.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetStockTransferInfo(System.String,System.String,System.Int32)">
            <summary>
            Gets the stock transfer info.
            </summary>
            <param name="subAccountId">The sub account id.</param>
            <param name="secSymbol">The sec symbol.</param>
            <param name="accountType">Type of the account.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;StockTransferInfo&gt;</see> object contains returned code, returned message and 
            stock transfer information.</para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=SUCCESS: Getting data successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetListStockTransferInfo(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the list stock transfer info.
            </summary>
            <param name="subAccountId">The sub account id.</param>
            <param name="accountType">Type of the account.</param>
            <param name="pageIndex">Page index</param>
            <param name="pageSize">Page size</param>
            <returns>
            <para>A ResultObject&lt;List&lt;StockTransferInfo&gt;&gt; object contains returned code, 
            returned message and a list of StockTransferInfo objects that contains stock transfer information.</para>
            <para>RET_CODE=NOT_LOGIN: User has not logged in.</para>
            <para>RET_CODE=ERROR_NOT_CASH_AVAILABLE: The is no data of cash.</para>
            <para>RET_CODE=ERROR_DEBT_ACCOUNT: Account is in debt.</para>
            <para>RET_CODE=NO_EXISTED_DATA: The is no data.</para>
            <para>RET_CODE=SUCCESS: Create data successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetListStockTransOrder(System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the list stock trans order.
            </summary>
            <param name="sourceAccountID">The source account ID.</param>
            <param name="destAccountID">The dest account ID.</param>
            <param name="secSymbol">The sec symbol.</param>
            <param name="transType">Type of the trans.</param>
            <param name="status">The status.</param>
            <param name="note">The note.</param>
            <param name="brokerID">The broker ID.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetListStockTransOrderHist(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the list stock trans order hist.
            </summary>
            <param name="sourceAccountID">The source account ID.</param>
            <param name="destAccountID">The dest account ID.</param>
            <param name="secSymbol">The sec symbol.</param>
            <param name="fromDate">From date.</param>
            <param name="toDate">To date.</param>
            <param name="transType">Type of the trans.</param>
            <param name="status">The status.</param>
            <param name="note">The note.</param>
            <param name="brokerID">The broker ID.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns>
            <para>A ResultObject&lt;PagingObject&lt;List&lt;StockTransfer&gt;&gt;&gt; object contains returned code, 
            returned message and a list of StockTransfer objects that contains stock transfer information.</para>
            <para>RET_CODE=NOT_LOGIN: User has not logged in.</para>
            <para>RET_CODE=ERROR_INVALID_DATETIME: The date is invalid.</para>
            <para>RET_CODE=NO_EXISTED_DATA: The is no data.</para>
            <para>RET_CODE=SUCCESS: Create data successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.RecoveryPackages(System.Int32,System.Int32)">
            <summary>
             Recovery order packages.
            </summary>
            <param name="fromSeq">Sequence to get from.</param>
            <param name="toSeq">Sequence to get to.</param>
            <returns>ResultObject&lt;Boolean&gt; to show recovery result.</returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.CreateOpenCustAccount(System.String,System.DateTime,System.String,System.String,System.DateTime,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
             Allow user to register to open account online.
            </summary>
            <param name="cardId">Card Id</param>
            <param name="cardIssue">Card issued date</param>
            <param name="placeIssue">Place of issued card</param>
            <param name="name">Customer name</param>
            <param name="birthday">Birthday of customer</param>
            <param name="sex">Sex of customer</param>
            <param name="occupation">Occupation of customer</param>
            <param name="nationality">Nationality of customer</param>
            <param name="address1">Address 1 of customer</param>
            <param name="telephone1">Telephone 1 of customer</param>
            <param name="fax1">Fax 1 of customer</param>
            <param name="address2">Address 2 of customer</param>
            <param name="telephone2">Telephone 2 of customer</param>
            <param name="fax2">Fax 2 of customer</param>
            <param name="address3">Address 3 of customer</param>
            <param name="telephone3">Telephone 3 of customer</param>
            <param name="fax3">Fax 3 of customer</param>
            <param name="email">Email of customer</param>
            <param name="branchCode">Branch code</param>
            <param name="branchName">Branch name</param>
            <param name="custodian">Custodian of customer (0 = normail customer, 1 = custodian)</param>
            <param name="customerType">Customer type (N = Normal, H = High Network)</param>
            <param name="tradeAtCompany">True if allowed to trade at securities company; otherwise false</param>
            <param name="tradeByTelephone">True if allowed to trade by phone; otherwise false</param>
            <param name="tradeOnline">True if allowed to trade online; otherwise false</param>
            <param name="existedAccount">True if account is existing; otherwise false</param>
             <returns>
             <para>A A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;string&gt;</see> object contains returned code, returned message and 
             string object that contains open id of this record.</para>
             <para>RET_CODE=SUCCESS: Create account successfully.</para>
             <para>RET_CODE=FAIL: Failed to create account.</para>
             <para>RET_CODE=SYSTEM_ERROR: System error.</para>
             </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetOddLotOrderInfo(System.String,System.Int32)">
            <summary>
            Gets the odd lot info.
            </summary>
            <param name="accountNo">The account no.</param>
            <param name="accountType">Type of the account.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;List&lt;OddLotOrderInfo&gt;&gt;</see> object contains returned code, returned message and 
            list of OddLotOrderInfo objects.</para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=SUCCESS: Getting data successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetListOddLotOrderHist(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the list odd lot order hist.
            </summary>
            <param name="secSymbol">The sec symbol.</param>
            <param name="side">The side.</param>
            <param name="fromDate">From date.</param>
            <param name="toDate">To date.</param>
            <param name="subCustAccountID">The sub cust account ID.</param>
            <param name="market">The market.</param>
            <param name="status">The status.</param>
            <param name="brokerID">The broker ID.</param>
            <param name="note">The note.</param>
            <param name="pageIndex">Page index.</param>
            <param name="pageSize">Page size</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;PagingObject&lt;List&lt;OddLotOrder&gt;&gt;&gt;</see> object contains returned code, returned message and 
            list of OddLotOrder objects that contains odd lot order information.</para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=ERROR_INVALID_DATETIME: The date is invalid.</para>
            <para>RET_CODE=SUCCESS: Get data successfully.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetListOddLotOrder(System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the list odd lot order.
            </summary>
            <param name="secSymbol">The sec symbol.</param>
            <param name="side">The side.</param>
            <param name="subCustAccountID">The sub cust account ID.</param>
            <param name="market">The market.</param>
            <param name="status">The status.</param>
            <param name="brokerID">The broker ID.</param>
            <param name="note">The note.</param>
            <param name="pageIndex">Page index.</param>
            <param name="pageSize">Page size.</param>
            <returns>
            List of odd lot orders
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.CancelOddLotOrder(System.Int64,System.String,System.String)">
            <summary>
            Cancel the odd lot order.
            </summary>
            <param name="id">The odd lot order id.</param>
            <param name="pin">Customer pin.</param>
            <param name="note">The note.</param>
            <returns>
            <para>Result of cancelling odd lot order.</para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=INCORRECT_PIN: The pin is incorrect.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=ERROR_CANNOT_CANCEL_ODD_LOT_ORDER: Cannot cancel odd lot order because it's in incorrect state.</para>
            <para>RET_CODE=SUCCESS: Cancel successfully.</para>
            <para>RET_CODE=FAIL: Fail to cancel odd lot order.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.PutOddLotOrder(System.String,System.String,System.Decimal,System.Int64,System.String,System.String,System.String,System.String)">
            <summary>
            Puts the odd lot order.
            </summary>
            <param name="secSymbol">The sec symbol.</param>
            <param name="side">The side.</param>
            <param name="price">The price.</param>
            <param name="volume">The volume.</param>
            <param name="subCustAccountID">The sub cust account ID.</param>
            <param name="market">The market.</param>
            <param name="note">The note.</param>
            <param name="pin">Pin</param>
            <returns>
            <para>
            Result of putting odd lot order.
            </para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=INCORRECT_PIN: The pin is incorrect.</para>
            <para>RET_CODE=FAIL: Putting order failed.</para>
            <para>RET_CODE=SUCCESS: Putting order successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetListBuyRight(System.String,System.Int32,System.Int32)">
            <summary>
            Gets the list buy right.
            </summary>
            <param name="subAccountId">Sub account id</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns>
            	<para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;PagingObject&lt;List&lt;AccountManager.Entities.BuyRight&gt;&gt;&gt;</see> object contains returned code, returned message and
            list of BuyRignt objects that contains buy right information.</para>
            	<para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            	<para>RET_CODE=SUCCESS: Get data successfully.</para>
            	<para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.PutXROrder(System.String,System.String,System.String,System.Char,System.Int64,System.String)">
            <summary>
            Puts the XR order.
            </summary>
            <param name="subAccountId">The sub account ID.</param>
            <param name="pin">The pin.</param>
            <param name="secSymbol">The security symbol.</param>
            <param name="market">The market.</param>
            <param name="requestVol">The request vol.</param>
            <param name="note">The note.</param>
            <returns>
            	<para>Result of putting XR order.</para>
            	<para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            	<para>RET_CODE=INCORRECT_PIN: The pin is incorrect.</para>
            	<para>RET_CODE=ERROR_REQUEST_VOLUME_BUY_RIGHT: Requested volume is incorrect.</para>
            	<para>RET_CODE=ERROR_OVER_REQUEST_CAN_BUY_RIGHT: Requested volume is higher than allowed volume.</para>
            	<para>RET_CODE=ERROR_NOT_EXIST_BUY_RIGHT: There is no buy right data.</para>
            	<para>RET_CODE=SUCCESS: Get data successfully.</para>
            	<para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.CancelXROrder(System.Int64,System.String,System.String)">
            <summary>
            Cancels the XR order.
            </summary>
            <param name="id">The id.</param>
            <param name="pin">Customer pin.</param>
            <param name="note">The note.</param>
            <returns>
            <para>Result of cancelling XR order.</para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=INCORRECT_PIN: The pin is incorrect.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=ERROR_CANNOT_CANCEL_XRORDER: Cannot cancel XR order because it's in incorrect state.</para>
            <para>RET_CODE=SUCCESS: Cancel successfully.</para>
            <para>RET_CODE=FAIL: Fail to cancel odd lot order.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetListXROrderHist(System.Int64,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the list XR order hist.
            </summary>
            <param name="id">The id.</param>
            <param name="subAccountId">The sub account id.</param>
            <param name="secSymbol">The sec symbol.</param>
            <param name="market">The market.</param>
            <param name="fromDate">From date.</param>
            <param name="toDate">To date.</param>
            <param name="status">The status.</param>
            <param name="brokerID">The broker ID.</param>
            <param name="note">The note.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns>
            <para>A ResultObject&lt;PagingObject&lt;List&lt;XrOrders&gt;&gt;&gt; object contains returned code, 
            returned message and a list of XrOrders objects that contains XR order information.</para>
            <para>RET_CODE=NOT_LOGIN: User has not logged in.</para>
            <para>RET_CODE=ERROR_INVALID_DATETIME: The date is invalid.</para>
            <para>RET_CODE=NO_EXISTED_DATA: The is no data.</para>
            <para>RET_CODE=SUCCESS: Create data successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.IsMultiAccount(System.String,System.String)">
            <summary>
            Check if user is using multiple accounts or not.
            </summary>
            <param name="sendingMainCustAccountId">Main customer account id sent from website</param>
            <param name="sendingSubCustAccountId">Sub customer account id sent from website</param>
            <returns>true: if using multiple account; otherwise false.</returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.StartFISUpdater">
            <summary>
             Start FIS updater
            </summary>
            <returns>Result of starting updater.</returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.StopFISUpdater">
            <summary>
             Stop FIS updater
            </summary>
            <returns>Result of stopping updater.</returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.CheckOrderSession">
            <summary>
            Check if this is in trading time session or advance session.
            </summary>
            <returns>
            -1: Unavailable
            0: In trading time session
            1: Advance session.
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.CheckConditionOrderThreadRun(System.Int32)">
            <summary>
            Checks if the condition order thread is running.
            </summary>
            <param name="marketId">The market ID.</param>
            <returns>true if thread is running; otherwise false.</returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.CheckUpdateSessionMakertThreadRun">
            <summary>
            Checks the update session makert thread running.
            </summary>
            <returns>true if the thread is running; otherwise false.</returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.CheckFISUpdaterThreadRun">
            <summary>
            Checks if the FIS updater thread is running.
            </summary>
            <returns>true if it is running; otherwise false.</returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.GetAllConditionOrderResult">
            <summary>
            Get all result of putting condition orders.
            </summary>
            <returns>
            Result of putting condition orders.
            [0]: Total of successful orders.
            [1]: Total of failed orders.
            [2]: Total of cancelled orders.
            </returns>
        </member>
        <member name="M:ETradeWebServices.ETradeServicesWebServices.UpdateConfiguration">
            <summary>
            Update configuration.
            Remember to add write permission for Network Service account to file web.config
            </summary>
            <returns>
            int value show result of updating configuration.
            </returns>
        </member>
        <member name="T:ETradeWebServices.Services.ETradeServices">
            <summary>
            This is main service and used to call other services
            </summary>
        </member>
        <member name="F:ETradeWebServices.Services.ETradeServices._cashServices">
            <summary>
            The cash services: related all cash informations
            </summary>
        </member>
        <member name="F:ETradeWebServices.Services.ETradeServices._eTradeGW">
            <summary>
            eTradeGW: related orders
            </summary>
        </member>
        <member name="F:ETradeWebServices.Services.ETradeServices._stockServices">
            <summary>
            The stock services: related all stock informations
            </summary>
        </member>
        <member name="F:ETradeWebServices.Services.ETradeServices._orderHistoryServices">
            <summary>
            The order history services: related all order history informations
            </summary>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.Recovery(System.Int32,System.Int32)">
            <summary>
            Recovery lost packages from begin sequence to end sequence.
            </summary>
            <param name="beginSeq">Begin Sequence.</param>
            <param name="endSeq">End Sequence.</param>
            <returns>ResultObject&lt;Boolean&gt; to show recovery result.</returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.Connect(System.String,System.String)">
            <summary>
            Connect to LinkOPS.
            </summary>
            <param name="ipAddress">IP Address</param>
            <param name="port">Port.</param>
            <returns>ResultObject&lt;Boolean&gt;</returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.Disconnect">
            <summary>
            Disconnect from LinkOPS.
            </summary>
            <returns>ResultObject&lt;Boolean&gt;</returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.IsConnected">
            <summary>
            Is connected to LinkOPS.
            </summary>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;bool&gt;</see> object contains returned code, returned message and 
            the result of checking connection.</para>
            <para>RET_CODE=SUCCESS: Checking successfully.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetAvailableCash(System.String,System.Int32,System.Boolean)">
            <summary>
            Gets the available cash.
            </summary>
            <param name="accountNo">The account no.</param>
            <param name="accountType">Type of the account.</param>
            <param name="isConditionOrder">if set to <c>true</c> [is condition order].</param>
            <returns>
            	<para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;CashAvailable&gt;</see> object contains returned code, returned message and
            list of CashAvailable objects that contains available cash information.</para>
            	<para>RET_CODE=ERROR_NOT_CASH_AVAILABLE: There is no data.</para>
            	<para>RET_CODE=SUCCESS: Get data successfully.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetAvailableCash(System.String,System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Gets the available cash.
            </summary>
            <param name="accountNo">The account no.</param>
            <param name="accountType">Type of the account.</param>
            <param name="tradeDate">The trade date.</param>
            <param name="symbol">The symbol.</param>
            <param name="isConditionOrder">if set to <c>true</c> [is condition order].</param>
            <returns>
            	<para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;CashAvailable&gt;</see> object contains returned code, returned message and
            list of CashAvailable objects that contains available cash information.</para>
            	<para>RET_CODE=ERROR_INVALID_DATETIME: The trade date is invalid.</para>
            	<para>RET_CODE=ERROR_NOT_CASH_AVAILABLE: There is no data.</para>
            	<para>RET_CODE=SUCCESS: Get data successfully.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetCashBalance(System.String,System.Int32)">
            <summary>
            Gets the cash balance.
            </summary>
            <param name="accountNo">The account no.</param>
            <param name="accountType">Type of the account.</param>
            <returns>
            	<para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;CashBalance;&gt;</see> object contains returned code, returned message and
            CashAdvance object that contains cash advance information.</para>
            	<para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            	<para>RET_CODE=SUCCESS: Get data successfully.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetAvailableStock(System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Gets the stock balance.
            </summary>
            <param name="accountNo">The account no.</param>
            <param name="symbol">The symbol.</param>
            <param name="accountType">The account Type.</param>
            <param name="isConditionOrder">if set to <c>true</c> [is condition order].</param>
            <returns>
            	<para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;StockAvailable&gt;</see> object contains returned code, returned message and
            list of StockAvailable objects that contains available stock information.</para>
            	<para>RET_CODE=ERROR_NOT_STOCK_AVAILABLE: There is no data.</para>
            	<para>RET_CODE=SUCCESS: Get data successfully.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetOrderHistory(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the order history.
            </summary>
            <param name="accountNo">The account no.</param>
            <param name="fromDate">From date.</param>
            <param name="toDate">To date.</param>
            <param name="symbol">The symbol.</param>
            <param name="orderStatus">The order status.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;PagingObject&lt;List&lt;OrderHistory&gt;&gt;&gt;</see> object contains returned code, returned message and 
            list of OrderHistory objects.</para>
            <para>RET_CODE=ERROR_INVALID_DATETIME: The date is invalid.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=SUCCESS: Getting data successfully.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetOrderHistoryCount(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Gets the order history count.
            </summary>
            <param name="accountNo">The account no.</param>
            <param name="fromDate">From date.</param>
            <param name="toDate">To date.</param>
            <param name="symbol">The symbol.</param>
            <param name="orderStatus">The order status.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;int&gt;</see> object contains returned code, returned message and 
            total records.</para>
            <para>RET_CODE=ERROR_INVALID_DATETIME: The date is invalid.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=SUCCESS: Getting data successfully.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.PutOrder(System.Int32,System.String,System.String,System.Char,System.Int32,System.Decimal,System.Char,System.Int32,System.Int32,AccountManager.Entities.SubCustAccount,System.Collections.Generic.List{System.String},System.Char)">
            <summary>
            Puts the order.
            </summary>
            <param name="market">The market.</param>
            <param name="accountNo">The account no.</param>
            <param name="secSymbol">The security symbol.</param>
            <param name="side">Buy or sell side.</param>
            <param name="volume">The volume.</param>
            <param name="price">The price.</param>
            <param name="conPrice">The con price.</param>
            <param name="accountType">Type of the account.</param>
            <param name="customerType">Type of the customer.</param>
            <param name="subCustAccount">The sub cust account.</param>
            <param name="subCustAccounts">The sub cust accounts.</param>
            <param name="orderSource">Order source. From web or SMS.</param>
            <returns>
            <para>
            Result of putting order.
            If the RetCode is CommonEnums.RET_CODE.SUCCESS then Result of ResultObject is the order id.
            Otherwise, it is a reject code. Please refer to the reject code in the enum REJECT_REASON of CommonEnums.cs
            </para>
            <para>RET_CODE=ERROR_GW_NOT_CONNECTED: LinkOPS hasn't been connected.</para>
            <para>RET_CODE=ERROR_GW_NOT_SEND: Sending message failed.</para>
            <para>RET_CODE=SUCCESS: Putting order successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            <para>REJECT_REASON</para>
            <para>REJECT_REASON=ERROR_MARGIN_ACCOUNT_CANNOT_BUY_THAT_SYMBOL: Margin account cannot buy this symbol.</para>
            <para>REJECT_REASON=ERROR_OVER_LIMIT_LOAN_PER_CUSTOMER: The value of price after fee overs the limit of loan per customer.</para>
            <para>REJECT_REASON=ERROR_OVER_LIMIT_LOAN_PER_SECSYMBOL: The value of price after fee over the limit of loan per symbol.</para>
            <para>REJECT_REASON=ERROR_OVER_LIMIT_COMPANY_CAPITAL: The value of price after fee over the limit of the company capital.</para>
            <para>REJECT_REASON=ERROR_OVER_LIMIT_MAX_BUY: The value of price after fee over max buy of that account.</para>
            <para>REJECT_REASON=ERROR_OVER_LIMIT_MAX_BUY_OF_SECSYMBOL: The value of price after fee over max buy of symbol.</para>
            <para>REJECT_REASON=ERROR_MARKET_CLOSE: Market closed.</para>
            <para>REJECT_REASON=ERROR_ATO_NOT_IN_READY_AND_SESSION1: Cannot put ATO order in READY and SESSION1 session.</para>
            <para>REJECT_REASON=ERROR_ATC_NOT_IN_SESSION3: Cannot put ATC in SESSION3 session.</para>
            <para>REJECT_REASON=ERROR_PRICE_NOT_MULTIPLE_100_FOR_HOSE: Price is incorrect for HOSE market.</para>
            <para>REJECT_REASON=ERROR_PRICE_NOT_MULTIPLE_500_FOR_HOSE: Price is incorrect for HOSE market.</para>
            <para>REJECT_REASON=ERROR_PRICE_NOT_MULTIPLE_1000_FOR_HOSE: Price is incorrect for HOSE market.</para>
            <para>REJECT_REASON=ERROR_HNX_NOT_USE_ATO_ATC: Cannot put ATO, ATC order in HNX market.</para>
            <para>REJECT_REASON=ERROR_PRICE_NOT_MULTIPLE_100_FOR_HNX: Price is incorrect for HNX market.</para>
            <para>REJECT_REASON=ERROR_UPCOM_NOT_USE_ATO_ATC: Cannot put ATO, ATC order in UPCOM market.</para>
            <para>REJECT_REASON=ERROR_PRICE_NOT_MULTIPLE_100_FOR_UPCOM: Price is incorrect for UPCOM market.</para>
            <para>REJECT_REASON=INCORRECT_SIDE: The side is not buy or sell side.</para>
            <para>REJECT_REASON=INCORRECT_VOL: The volume is incorrect.</para>
            <para>REJECT_REASON=OVER_MAX_VOL: The volume is over max allowed volume.</para>
            <para>REJECT_REASON=INCORRECT_STOCK: Stock is incorrect.</para>
            <para>REJECT_REASON=STOCK_IS_HALT: Stock is halt.</para>
            <para>REJECT_REASON=PRICE_BELOW_FLOOR: Price is below floor price.</para>
            <para>REJECT_REASON=PRICE_ABOVE_CEILING: Price is over ceiling price.</para>
            <para>REJECT_REASON=NOT_BUY_SELL_THE_SAME_STOCK: Not allow to buy and sell the same stock.</para>
            <para>REJECT_REASON=ERROR_LOCK_ACCOUNT: Account is locked.</para>
            <para>REJECT_REASON=ERROR_ACCOUNT_NOT_BUY_PERMISSION: Account is not allowed to buy stocks.</para>
            <para>REJECT_REASON=ERROR_ACCOUNT_NOT_SELL_PERMISSION: Account is not allowed to sell stocks.</para>
            <para>REJECT_REASON=NOT_ENOUGH_CASH: Customer has not enough money.</para>
            <para>REJECT_REASON=NOT_ENOUGH_STOCK: Customer has not enough stocks.</para>
            <para>REJECT_REASON=OVER_REMAIN_VOLUME: Available volume is not enough.</para>
            <para>REJECT_REASON=IS_VALID: This is a valid order.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.StartPutConditionOrderThread">
            <summary>
            </summary>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.StopPuttingConditionOrderThread">
            <summary>
            </summary>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.PutHOSEConditionOrder">
            <summary>
            Put condition orders for hose market
            </summary>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.PutHNXConditionOrder">
            <summary>
            Put condition orders for hnx market
            </summary>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.PutUPCOMConditionOrder">
            <summary>
            Put condition orders for upcom market
            </summary>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.PutHOSEConditionOrder(System.Object,System.EventArgs)">
            <summary>
            Put condition orders for hose market
            </summary>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.PutHNXConditionOrder(System.Object,System.EventArgs)">
            <summary>
            Put condition orders for hnx market
            </summary>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.PutUPCOMConditionOrder(System.Object,System.EventArgs)">
            <summary>
            Put condition orders for upcom market
            </summary>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetAllConditionOrderResult">
            <summary>
            Get result of putting condition orders.
            </summary>
            <returns>Result of putting condition orders.</returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.PutConditionOrder(System.Int32)">
            <summary>
            Put condition order at the beginning of trading day
            </summary>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.CheckHOSEConditionOrder(System.Object,System.EventArgs)">
            <summary>
            Check unsent condition orders for hose market
            </summary>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.CheckHNXConditionOrder(System.Object,System.EventArgs)">
            <summary>
            Check unsent condition orders for hnx market
            </summary>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.CheckUPCOMConditionOrder(System.Object,System.EventArgs)">
            <summary>
            Check unsent condition orders for upcom market
            </summary>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.CheckConditionOrder(System.Int32)">
            <summary>
            Check condition orders' status.
            </summary>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.SendSMSMessageConditionOrder(System.String,System.String,ETradeCommon.Enums.CommonEnums.REJECT_REASON,System.Int32,System.String,System.Int32,System.Decimal,System.Char,System.String)">
            <summary>
            Send result of putting condition order to customers
            </summary>
            <param name="mainCustAccountId">Main customer account id.</param>
            <param name="subCustAccountId">Sub customer account id.</param>
            <param name="rejectReason">Reject reason or success</param>
            <param name="market">Market id</param>
            <param name="symbol">Stock symbol.</param>
            <param name="volume">Volume.</param>
            <param name="price">Stock price.</param>
            <param name="side">Buy or sell side.</param>
            <param name="languageId">Language id.</param>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.CancelOrder(System.Int32)">
            <summary>
            Cancels the order.
            </summary>
            <param name="orderId">The order id.</param>
            <returns>
            <para>ResultObject of interger. 
            If the RetCode is CommonEnums.RET_CODE.SUCCESS then Result of ResultObject is the order id.
            Otherwise, it is a reject code. Please refer to the reject code in the enum REJECT_REASON of CommonEnums.cs</para>
            <para>RET_CODE=ERROR_GW_NOT_CONNECTED: The LinkOPS is not connected.</para>
            <para>RET_CODE=INCORRECT_PIN: The pin is incorrect.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=SUCCESS: Cancel successfully.</para>
            <para>RET_CODE=FAIL: Fail to cancel order.</para>
            <para>REJECT_REASON=INCORRECT_ORDER_NO: The order id is incorrect.</para>
            <para>REJECT_REASON=NOT_CANCEL_ORDER_CANCELED: Cannot cancel a cancelled order.</para>
            <para>REJECT_REASON=NOT_CANCEL_ORDER_MATCHED: Cannot cancel a full matched order.</para>
            <para>REJECT_REASON=NOT_CANCEL_ORDER_FROM_DIFF_SOURCE: Cannot cancel a order from other source.</para>
            <para>REJECT_REASON=NOT_CANCEL_IN_THIS_PERIOD_PHASE: Cannot cancel a order in this phase.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetNewsestOrderStatus(System.Int32,System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the newest order status.
            </summary>
            <param name="pageSize">Size of the page.</param> 
            <param name="pageIndex">The page number.</param>
            <param name="accountId">The account id.</param>
            <param name="isPending">Is Pending.</param>
            <param name="isMatched">Is Matched.</param>
            <param name="isSemiMatched">Is SemiMatched.</param>
            <param name="isCanceling">Is Canceling.</param>
            <param name="isCancelled">Is Cancelled.</param>
            <param name="isRejected">Is rejected.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;PagingObject&lt;List&lt;ExecOrder&gt;&gt;&gt;</see> object contains returned code, returned message and 
            list of ExecOrder objects that contains order information.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=SUCCESS: Putting order successfully.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetNewsestOrderCount(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the newest order count.
            </summary>
            <param name="accountId">The account id.</param>
            <param name="isPending">Is Pending.</param>
            <param name="isMatched">Is Matched.</param>
            <param name="isSemiMatched">Is SemiMatched.</param>
            <param name="isCanceling">Is Canceling.</param>
            <param name="isCancelled">Is Cancelled.</param>
            <param name="isRejected">Is Rejected.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;int&gt;</see> object contains returned code, returned message and 
            total records.</para>
            <para>RET_CODE=SUCCESS: Putting order successfully.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetWhereClause(System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the GetWhereClause
            </summary>
            <param name="accountId">
            The account no.
            </param>
            <param name="isPending">
            From date.
            </param>
            <param name="isMatched">
            To date.
            </param>
            <param name="isSemiMatched">
            The symbol.
            </param>
            <param name="isCanceling">
            The order status.
            </param>
            <param name="isCancelled">
            The order status.
            </param>
            <param name="isRejected">
            The order status.
            </param>
            <returns>
            string
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetDealHistory(System.Decimal,System.String,System.Int32)">
            <summary>
            Gets the deal history.
            </summary>
            <param name="orderNo">The order no.</param>
            <param name="dealDate">The deal date.</param>
            <param name="page">The page.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;List&lt;DealHistory&gt;&gt;</see> object contains returned code, returned message and 
            list of DealHistory object that contains deal history information.</para>
            <para>RET_CODE=ERROR_INVALID_DATETIME: The dealDate is invalid.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=SUCCESS: Get data successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetDealIntraDay(System.Decimal,System.Int32)">
            <summary>
            Gets the deal intra day.
            </summary>
            <param name="orderNo">The order no.</param>
            <param name="page">The page.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;List&lt;DealInfo&gt;&gt;</see> object contains returned code, returned message and 
            list of DealInfo object that contains deal information.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=SUCCESS: Get data successfully.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.CaculatePortfolio(System.Collections.Generic.Dictionary{System.String,ETradeCore.Entities.PortfolioInfo}@,System.String,System.Int32)">
            <summary>
            Caculates the portfolio.
            </summary>
            <param name="portfolioInfos">The portfolio infos.</param>
            <param name="accountNo"></param>
            <param name="accountType"></param>
            <returns></returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.CaculateSumPortfolio(System.Collections.Generic.List{ETradeCore.Entities.PortfolioInfo},System.Int32,System.Int32)">
            <summary>
            Caculate the profit and lost for each page or total portfolio (pageNumber == 0)
            </summary>
            <param name="portfolioInfos"></param>
            <param name="pageNumber"></param>
            <param name="pageSize"></param>
            <returns></returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetPortfolio(System.String,System.Int32,System.Int32,System.Int32,AccountManager.Entities.SubCustAccount,System.Collections.Generic.List{System.String})">
            <summary>
            Gets the portfolio.
            </summary>
            <param name="accountNo">The account no.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="accountType">Type of the account.</param>
            <param name="subCustAccount">The sub cust account.</param>
            <param name="subCustAccounts">List of sub customer accounts.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;PagingObject&lt;List&lt;PortfolioInfo&gt;, PortfolioInfo, PortfolioInfo&gt;&gt;</see> object contains returned code, returned message and 
            list of portfolio objects.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=SUCCESS: Getting data successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetListPortfolio(System.String,System.Int32)">
            <summary>
            Get the portfolio list.
            </summary>
            <param name="accountNo">The account no.</param>
            <param name="accountType">Type of the account.</param>
            <returns>List of portfolios</returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetPortfolioDirect(System.String,System.Int32)">
            <summary>
            Gets the portfolio direct.
            </summary>
            <param name="accountNo">The account no.</param>
            <param name="accounType">Type of the accoun.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;List&lt;Portfolio&gt;&gt;</see> object contains returned code, returned message and 
            list of portfolio objects.</para>
            <para>RET_CODE=SUCCESS: Getting data successfully.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.Paging(System.Collections.Generic.List{ETradeCore.Entities.PortfolioInfo},System.Int32,System.Int32)">
            <summary>
            Pagings the specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetTradingState(System.Int32)">
            <summary>
            Gets the state of the trading.
            </summary>
            <param name="marketId">The market id.</param>
            <returns>Trading state.</returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetAllTradingState">
            <summary>
            Gets the state of the trading.
            </summary>
            <returns>ResultObject of char</returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.CheckOrderSession">
            <summary>
            Check if this is in trading time session or advance session.
            </summary>
            <returns>
            -1: Unavailable
            0: In trading time session
            1: Advance session.
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetOrderSessionState(System.Char,System.Boolean)">
            <summary>
            Get trading time session or advance session.
            </summary>
            <param name="tradingState">Trading state.</param>
            <param name="newData">New data or not.</param>
            <returns>
            -1: Unavailable
            0: In trading time session
            1: Advance session.
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetAllOrderSession">
            <summary>
            Get order session of all markets.
            </summary>
            <returns>char[]</returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetActualTrade(System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the actual trade.
            </summary>
            <param name="accountNo">The account no.</param>
            <param name="fromDate">From date.</param>
            <param name="toDate">To date.</param>
            <param name="symbol">The symbol.</param>
            <param name="pageNumber">The page number.</param>
            <param name="pageSize">Size of the page.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetPreTradeInfo(System.String,System.String,System.Int32,System.Char,System.Boolean)">
            <summary>
            Gets the pre trade info.
            </summary>
            <param name="accountNo">The account no.</param>
            <param name="symbol">The symbol.</param>
            <param name="accountType">Type of the account.</param>
            <param name="side">The side.</param>
            <param name="isConditionOrder">if set to <c>true</c> [is condition order].</param>
            <returns>
            	<para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;PreTradeInfo&gt;</see> object contains returned code, returned message and
            pretrade information.</para>
            	<para>RET_CODE=SUCCESS: Getting data successfully.</para>
            	<para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.Paging(System.Collections.Generic.List{ETradeCore.Entities.XD},System.Int32,System.Int32)">
            <summary>
            Pagings the specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetXDInfo(System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the XD info.
            </summary>
            <param name="accountNo">The account no.</param>
            <param name="symbol">The symbol.</param>
            <param name="fromDate">From date.</param>
            <param name="toDate">To date.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;PagingObject&lt;List&lt;XD&gt;&gt;&gt;</see> object contains returned code, returned message and 
            list of XD information.</para>
            <para>RET_CODE=NOT_LOGIN: User has not loged in or multiple login.</para>
            <para>RET_CODE=ERROR_INVALID_DATETIME: The date is invalid.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=SUCCESS: Getting data successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.Paging(System.Collections.Generic.List{ETradeCore.Entities.XR},System.Int32,System.Int32)">
            <summary>
            Pagings the specified data.
            </summary>
            <param name="data">The data.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetXRInfo(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the XR info.
            </summary>
            <param name="accountNo">The account no.</param>
            <param name="symbol">The symbol.</param>
            <param name="fromDate">From date.</param>
            <param name="toDate">To date.</param>
            <param name="xType">Type.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;PagingObject&lt;List&lt;XR&gt;&gt;&gt;</see> object contains returned code, returned message and 
            list of XR information.</para>
            <para>RET_CODE=ERROR_INVALID_DATETIME: The date is invalid.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=SUCCESS: Checking successfully.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.SaveHolidayConfig(System.Collections.Generic.IEnumerable{AccountManager.Entities.Holidays})">
            <summary>
            Saves the config.
            </summary>
            <param name="holidayses">The holidayses.</param>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.SaveWorkingDaysConfig(System.Collections.Generic.IEnumerable{AccountManager.Entities.WorkingDays})">
            <summary>
            Saves the working days config.
            </summary>
            <param name="workingDayses">The working dayses.</param>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.SaveAllConfiguration(System.Collections.Generic.List{AccountManager.Entities.Configurations})">
            <summary>
            Saves all configuration.
            </summary>
            <param name="configurationses">The configurationses.</param>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetExchangeRateUSD">
            <summary>
            Gets the exchange rate USD.
            </summary>
            <returns>Exchange rate.</returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetAdvanceHistory(System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the advance history.
            </summary>
            <param name="accountNo">The account no.</param>
            <param name="fromAdvanceDate">From advance date.</param>
            <param name="toAdvanceDate">To advance date.</param>
            <param name="fromSellDate">From sell date.</param>
            <param name="toSellDate">To sell date.</param>
            <param name="advanceStatus">The advance status.</param>
            <param name="contractNo">The contract no.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetCashAdvanceStatus(System.String,System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the cash advance status.
            </summary>
            <param name="accountNo">The account no.</param>
            <param name="fromDate">From date.</param>
            <param name="toDate">To date.</param>
            <param name="status">The status.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;PagingObject&lt;List&lt;CashAdvance&gt;&gt;&gt;</see> object contains returned code, returned message and 
            list of CashAdvance objects that contains cash advance information.</para>
            <para>RET_CODE=ERROR_INVALID_DATETIME: The date is incorrect.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=SUCCESS: Get data successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetAdvanceInfo(System.String)">
            <summary>
            Gets the advance info.
            </summary>
            <param name="accountNo">The account no.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.NewCashAdvance(System.String,System.Decimal,System.Decimal,System.Decimal,System.String)">
            <summary>
            News the cash advance.
            </summary>
            <param name="accountNo">The account no.</param>
            <param name="sellAmt">The sell amt.</param>
            <param name="cashAdvance">The cash advance.</param>
            <param name="maxCanAdvance">The max can advance.</param>
            <param name="tradeDate">The trade date.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;int&gt;</see> object contains returned code, returned message and 
            contract no.</para>
            <para>RET_CODE=ERROR_INVALID_CASH_ADVANCE: Cash advance is invalid.</para>
            <para>RET_CODE=ERROR_CANNOT_ADVANCE_OUTOF_TIME: Not time for cash advance.</para>
            <para>RET_CODE=ERROR_CANNOT_ADVANCE_IN_DUE_DATE: Cash advance due date is invalid.</para>
            <para>RET_CODE=ERROR_NOT_ENOUGH_CASH_TO_ADVANCE: There is not enough cash to request cash advance.</para>
            <para>RET_CODE=SUCCESS: Putting order successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.CancelAdvance(System.String,System.String)">
            <summary>
            Cancel the cash advance.
            </summary>
            <param name="accountNo">The account no.</param>
            <param name="contractNo">The contract no.</param>
            <returns>
            <para>Result of cancelling cash advance.</para>
            <para>RET_CODE=ERROR_CANNOT_CANCEL_ADVANCE_CANCELED: Cannot cancel a canceled cash advance.</para>
            <para>RET_CODE=ERROR_CANNOT_CANCEL_ADVANCE_REFJECTED: Cannot cancel a rejected cash advance.</para>
            <para>RET_CODE=ERROR_CANNOT_CANCEL_IN_PROCESSING: Cannot cancel a cash advance which is in processing state.</para>
            <para>RET_CODE=ERROR_CANNOT_CANCEL_ADVANCE_FINISHED: Cannot cancel a finished cash advance.</para>
            <para>RET_CODE=SUCCESS: Cancel successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetAdvanceFee(System.Decimal,System.Int32)">
            <summary>
            Gets the advance fee.
            </summary>
            <param name="sellAmt">The sell amt.</param>
            <param name="advanceDays">The advance days.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetBankAccountInfo(System.String)">
            <summary>
            Gets the bank account info.
            </summary>
            <param name="acccountNo">The acccount no.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;BankAccountInfo&gt;</see> object contains returned code, returned message and 
            BankAccountInfo objects that contains bank account information.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=SUCCESS: Get data successfully.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.IsCallMargin(System.String)">
            <summary>
            Determines whether [is call margin] [the specified account no].
            </summary>
            <param name="accountNo">The account no.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;bool&gt;</see> object contains returned code, returned message and 
            checking of call margin.</para>
            <para>RET_CODE=SUCCESS: Checking successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.IsCallForceSell(System.String)">
            <summary>
            Determines whether this account is force sell or not.
            </summary>
            <param name="accountNo">The account no.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;bool&gt;</see> object contains returned code, returned message and 
            checking of call force sell.</para>
            <para>RET_CODE=SUCCESS: Checking successfully.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetMarginRatio(System.String)">
            <summary>
            Gets the margin ratio.
            </summary>
            <param name="accountNo">The account no.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;MarginRatioInfo&gt;</see> object contains returned code, returned message and 
            MarginRatioInfo object.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=SUCCESS: Getting data successfully.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetMarginPortfolio(System.String)">
            <summary>
            Gets the margin portfolio.
            </summary>
            <param name="accountNo">The account no.</param>
            <returns>
            <para>A ResultObject&lt;List&lt;MarginPortfolio&gt;&gt; object contains returned code, 
            returned message and a list of MarginPortfolio objects that contains portfolio of the margin account.</para>
            <para>RET_CODE=NO_EXISTED_DATA: The is no data.</para>
            <para>RET_CODE=SUCCESS: Create data successfully.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.PutCashTransOrder(System.Collections.Generic.List{AccountManager.Entities.SubCustAccount},System.String,System.String,System.String,System.String,System.Decimal,System.Int32,System.String)">
            <summary>
            Puts the cash trans order.
            </summary>
            <param name="sourceAccountID">The source account ID.</param>
            <param name="destAccountID">The dest account ID.</param>
            <param name="requestAmt">The request amt.</param>
            <param name="transType">Type of the trans.</param>
            <param name="note">The note.</param>
            <returns>
            <para> Result of putting cash transfer order. </para>
            <para>RET_CODE=ERROR_ACCOUNT: The account does not exist.</para>
            <para>RET_CODE=NOT_ALLOW: Customer is not allowed to do this action.</para>
            <para>RET_CODE=ERROR_REQUEST_AMOUNT: The amount is incorrect.</para>
            <para>RET_CODE=ERROR_INVALID_WITHDRAWAL: The withdrawal amount is incorrect.</para>
            <para>RET_CODE=ERROR_NOT_CASH_AVAILABLE: There is no available cash.</para>
            <para>RET_CODE=FAIL: Putting order failed.</para>
            <para>RET_CODE=SUCCESS: Putting order successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetListUnfinishedCashTransfer(System.String)">
            <summary>
            Gets the list unfinished cash transfer.
            </summary>
            <param name="subAccountId">The sub Account Id</param>
            <returns>ResultObject List CashTransfer</returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetTotalUnfinishedTransferAmount(System.String)">
            <summary>
            Gets the total unfinished transfer amount (on status pending or processing)
            </summary>
            <param name="subAccountId">The sub account id.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetCashTransferInfo(System.String,System.Int32)">
            <summary>
            Gets the cash transfer info.
            </summary>
            <param name="subAccountId">The subAccountId.</param>
            <param name="accountType">Type of the account.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;CashTransferInfo;&gt;</see> object contains returned code, returned message and 
            CashTransferInfo object that contains cash transfer information.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=SUCCESS: Get data successfully.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetListCashTransOrderHist(System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Cashes the trans order hist.
            </summary>
            <param name="sourceAccountID">The source account ID.</param>
            <param name="destAccountID">The dest account ID.</param>
            <param name="fromDate">From date.</param>
            <param name="toDate">To date.</param>
            <param name="transType">Type of the trans.</param>
            <param name="status">The status.</param>
            <param name="note">The note.</param>
            <param name="brokerID">The broker ID.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;PagingObject&lt;List&lt;CashTransfer&gt;&gt;&gt;</see> object contains returned code, returned message and 
            list of CashTransfer objects that contains cash transfer information.</para>
            <para>RET_CODE=ERROR_INVALID_DATETIME: The sent date is invalid.</para>
            <para>RET_CODE=SUCCESS: Get data successfully.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.CancelCashTransfer(System.Int64,System.String)">
            <summary>
            Cancel the cash transfer.
            </summary>
            <param name="id">The cash transfer id.</param>
            <param name="note">The note.</param>
            <returns>
            <para>Result of cancelling cash transfer.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=ERROR_CANNOT_CANCEL_CASH_TRANSFER: Cannot cancel cash transfer because it's in incorrect state.</para>
            <para>RET_CODE=SUCCESS: Cancel successfully.</para>
            <para>RET_CODE=FAIL: Fail to cancel cash transfer.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.PutStockTransOrder(System.Collections.Generic.List{AccountManager.Entities.SubCustAccount},System.String,System.String,System.String,System.Int64,System.Int32,System.String)">
            <summary>
            Puts the stock trans order.
            </summary>
            <param name="TlistSubCustAccount">The tlist sub cust account.</param>
            <param name="sourceAccountID">The source account ID.</param>
            <param name="destAccountID">The dest account ID.</param>
            <param name="secSymbol">The sec symbol.</param>
            <param name="requestAmt">The request amt.</param>
            <param name="transType">Type of the trans.</param>
            <param name="note">The note.</param>
            <returns>
            <para>Result of putting stock transfer order.</para>
            <para>RET_CODE=ERROR_ACCOUNT: Account does not exist.</para>
            <para>RET_CODE=NOT_ALLOW: Customer is not allowed to put order.</para>
            <para>RET_CODE=ERROR_REQUEST_AMOUNT: The requested amount is incorrect.</para>
            <para>RET_CODE=ERROR_NOT_CASH_AVAILABLE: There is no available cash.</para>
            <para>RET_CODE=ERROR_DEBT_ACCOUNT: The account is in debt.</para>
            <para>RET_CODE=ERROR_NOT_STOCK_AVAILABLE: There is no available stock.</para>
            <para>RET_CODE=SUCCESS: Get data successfully.</para>
            <para>RET_CODE=FAIL: Failed to get data.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetListUnfinishedStockTransfer(System.String,System.String)">
            <summary>
            Gets the list unfinished stock transfer.
            </summary>
            <param name="subAccountId">The sub account id.</param>
            <param name="secSymbol">The sec symbol.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetListStockTransOrderHist(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the list stock trans order hist.
            </summary>
            <param name="sourceAccountID">The source account ID.</param>
            <param name="destAccountID">The dest account ID.</param>
            <param name="secSymbol">The sec symbol.</param>
            <param name="fromDate">From date.</param>
            <param name="toDate">To date.</param>
            <param name="transType">Type of the trans.</param>
            <param name="status">The status.</param>
            <param name="note">The note.</param>
            <param name="brokerID">The broker ID.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns>
            <para>A ResultObject&lt;PagingObject&lt;List&lt;StockTransfer&gt;&gt;&gt; object contains returned code, 
            returned message and a list of StockTransfer objects that contains stock transfer information.</para>
            <para>RET_CODE=ERROR_INVALID_DATETIME: The date is invalid.</para>
            <para>RET_CODE=NO_EXISTED_DATA: The is no data.</para>
            <para>RET_CODE=SUCCESS: Create data successfully.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetStockTransferInfo(System.String,System.String,System.Int32)">
            <summary>
            Gets the cash transfer info.
            </summary>
            <param name="subAccountId">The sub account id.</param>
            <param name="secSymbol">The sec symbol.</param>
            <param name="accountType">Type of the account.</param>
            <returns>
            <para>A ResultObject&lt;StockTransferInfo&gt; object contains returned code, 
            returned message and a list of StockTransferInfo objects that contains stock transfer information.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=SUCCESS: Get data successfully.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetListStockTransferInfo(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the list stock transfer info.
            </summary>
            <param name="subAccountId">The sub account id.</param>
            <param name="accountType">Type of the account.</param>
            <param name="pageIndex">Page index.</param>
            <param name="pageSize">Page size.</param>
            <returns>
            <para>A ResultObject&lt;List&lt;StockTransferInfo&gt;&gt; object contains returned code, 
            returned message and a list of StockTransferInfo objects that contains stock transfer information.</para>
            <para>RET_CODE=ERROR_NOT_CASH_AVAILABLE: The is no data of cash.</para>
            <para>RET_CODE=ERROR_DEBT_ACCOUNT: Account is in debt.</para>
            <para>RET_CODE=SUCCESS: Create data successfully.</para>
            <para>RET_CODE=NO_EXISTED_DATA: The is no data.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.CancelStockTransfer(System.Int64,System.String)">
            <summary>
            Cancels the stock transfer.
            </summary>
            <param name="id">The id.</param>
            <param name="note">The note.</param>
            <returns>
            <para>Result of cancelling stock transfer.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=ERROR_CANNOT_CANCEL_STOCK_TRANSFER: Cannot cancel stock transfer because it's in incorrect state.</para>
            <para>RET_CODE=SUCCESS: Cancel successfully.</para>
            <para>RET_CODE=FAIL: Fail to cancel odd lot order.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetListBuyRight(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the list buy right.
            </summary>
            <param name="accountNo">The account no.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns>
            A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;PagingObject&lt;List&lt;AccountManager.Entities.BuyRight&gt;&gt;&gt;</see> object contains returned code, returned message and
            list of BuyRignt objects that contains buy right information.
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.PutXROrder(System.String,System.String,System.Char,System.Int64,System.String)">
            <summary>
            Puts the XR order.
            </summary>
            <param name="subAccountId">The sub account ID.</param>
            <param name="secSymbol">The sec symbol.</param>
            <param name="market">The market.</param>
            <param name="requestVol">The request vol.</param>
            <param name="note">The note.</param>
            <returns>
            	<para>Result of putting XR order.</para>
            	<para>RET_CODE=ERROR_REQUEST_VOLUME_BUY_RIGHT: Requested volume is incorrect.</para>
            	<para>RET_CODE=ERROR_OVER_REQUEST_CAN_BUY_RIGHT: Requested volume is higher than allowed volume.</para>
            	<para>RET_CODE=ERROR_NOT_EXIST_BUY_RIGHT: There is no buy right data.</para>
            	<para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.CancelXROrder(System.Int64,System.String)">
            <summary>
            Cancels the XR order.
            </summary>
            <param name="id">The id.</param>
            <param name="note">The note.</param>
            <returns>
            <para>Result of cancelling XR order.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=ERROR_CANNOT_CANCEL_XRORDER: Cannot cancel XR order because it's in incorrect state.</para>
            <para>RET_CODE=SUCCESS: Cancel successfully.</para>
            <para>RET_CODE=FAIL: Fail to cancel odd lot order.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetListXROrderHist(System.Int64,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the list XR order hist.
            </summary>
            <param name="id">The id.</param>
            <param name="subAccountId">The sub account id.</param>
            <param name="secSymbol">The sec symbol.</param>
            <param name="market">The market.</param>
            <param name="fromDate">From date.</param>
            <param name="toDate">To date.</param>
            <param name="status">The status.</param>
            <param name="brokerID">The broker ID.</param>
            <param name="note">The note.</param>
            <param name="pageIndex">Index of the page.</param>
            <param name="pageSize">Size of the page.</param>
            <returns>
            <para>A ResultObject&lt;PagingObject&lt;List&lt;XrOrders&gt;&gt;&gt; object contains returned code, 
            returned message and a list of XrOrders objects that contains XR order information.</para>
            <para>RET_CODE=ERROR_INVALID_DATETIME: The date is invalid.</para>
            <para>RET_CODE=NO_EXISTED_DATA: The is no data.</para>
            <para>RET_CODE=SUCCESS: Create data successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetOddLotOrderInfo(System.String,System.Int32)">
            <summary>
            Gets the odd lot info.
            </summary>
            <param name="accountNo">The account no.</param>
            <param name="accountType">Type of the account.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;List&lt;OddLotOrderInfo&gt;&gt;</see> object contains returned code, returned message and 
            list of OddLotOrderInfo objects.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=SUCCESS: Getting data successfully.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetListOddLotOrderHist(System.String,System.String,System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the list odd lot order hist.
            </summary>
            <param name="secSymbol">The sec symbol.</param>
            <param name="side">The side.</param>
            <param name="fromDate">From date.</param>
            <param name="toDate">To date.</param>
            <param name="subCustAccountID">The sub cust account ID.</param>
            <param name="market">The market.</param>
            <param name="status">The status.</param>
            <param name="brokerID">The broker ID.</param>
            <param name="note">The note.</param>
            <param name="pageIndex">Page index.</param>
            <returns>
            <para>A <see cref="T:ETradeCommon.ResultObject`1">ResultObject&lt;PagingObject&lt;List&lt;OddLotOrder&gt;&gt;&gt;</see> object contains returned code, returned message and 
            list of OddLotOrder objects that contains odd lot order information.</para>
            <para>RET_CODE=ERROR_INVALID_DATETIME: The date is invalid.</para>
            <para>RET_CODE=SUCCESS: Get data successfully.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.GetListOddLotOrder(System.String,System.String,System.String,System.String,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the list odd lot order.
            </summary>
            <param name="secSymbol">The sec symbol.</param>
            <param name="side">The side.</param>
            <param name="subCustAccountID">The sub cust account ID.</param>
            <param name="market">The market.</param>
            <param name="status">The status.</param>
            <param name="brokerID">The broker ID.</param>
            <param name="note">The note.</param>
            <param name="pageIndex">Page index.</param>
            <param name="pageSize">Page size.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.CancelOddLotOrder(System.Int64,System.String)">
            <summary>
            Cancel the odd lot order.
            </summary>
            <param name="id">The id.</param>
            <param name="note">The note.</param>
            <returns>
            <para>Result of cancelling odd lot order.</para>
            <para>RET_CODE=NO_EXISTED_DATA: There is no data.</para>
            <para>RET_CODE=ERROR_CANNOT_CANCEL_ODD_LOT_ORDER: Cannot cancel odd lot order because it's in incorrect state.</para>
            <para>RET_CODE=SUCCESS: Cancel successfully.</para>
            <para>RET_CODE=FAIL: Fail to cancel odd lot order.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ETradeServices.PutOddLotOrder(System.String,System.String,System.Decimal,System.Int64,System.String,System.String,System.String)">
            <summary>
            Puts the odd lot order.
            </summary>
            <param name="secSymbol">The sec symbol.</param>
            <param name="side">The side.</param>
            <param name="price">The price.</param>
            <param name="volume">The volume.</param>
            <param name="subCustAccountID">The sub cust account ID.</param>
            <param name="market">The market.</param>
            <param name="note">The note.</param>
            <returns>
            <para>
            Result of putting odd lot order.
            </para>
            <para>RET_CODE=FAIL: Putting order failed.</para>
            <para>RET_CODE=SUCCESS: Putting order successfully.</para>
            <para>RET_CODE=SYSTEM_ERROR: System error.</para>
            </returns>       
        </member>
        <member name="T:ETradeWebServices.Global">
            <summary>
             Global class
            </summary>
        </member>
        <member name="M:ETradeWebServices.Global.LoadSysConfig">
            <summary>
            Loads the sys config.
            </summary>
        </member>
        <member name="M:ETradeWebServices.Global.SaveHolidayConfig(System.Collections.Generic.IEnumerable{AccountManager.Entities.Holidays})">
            <summary>
            Saves the config.
            </summary>
            <param name="holidayses">The holidayses.</param>
        </member>
        <member name="M:ETradeWebServices.Global.SaveWorkingDaysConfig(System.Collections.Generic.IEnumerable{AccountManager.Entities.WorkingDays})">
            <summary>
            Saves the working days config.
            </summary>
            <param name="workingDayses">The working dayses.</param>
        </member>
        <member name="M:ETradeWebServices.Global.SaveAllConfiguration(System.Collections.Generic.IEnumerable{AccountManager.Entities.Configurations})">
            <summary>
            Saves all configuration.
            </summary>
            <param name="configurationses">The configurationses.</param>
        </member>
        <member name="M:ETradeWebServices.Global.SaveAdvanceTime(System.Collections.Generic.IEnumerable{ETradeFinance.Entities.AdvanceTime})">
            <summary>
            Saves the advance time.
            </summary>
            <param name="advanceTimes">The advance times.</param>
        </member>
        <member name="M:ETradeWebServices.Global.Application_PreRequestHandlerExecute(System.Object,System.EventArgs)">
            <summary>
            Process before every requests
            Check multiple login
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ETradeWebServices.RTServices.Service">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.#ctor">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetIndexVN30">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetIndexVN30Async">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetIndexVN30Async(System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetMarketInfo(System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetMarketInfoAsync(System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetMarketInfoAsync(System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.MarketStatus(System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.MarketStatusAsync(System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.MarketStatusAsync(System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.AllMarketStatus">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.AllMarketStatusAsync">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.AllMarketStatusAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.AllMarketInfoAndStatus">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.AllMarketInfoAndStatusAsync">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.AllMarketInfoAndStatusAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.SetMatketStatus(System.Int32,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.SetMatketStatusAsync(System.Int32,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.SetMatketStatusAsync(System.Int32,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetListCompany(System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetListCompanyAsync(System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetListCompanyAsync(System.Int32,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetNewestWorkingDates">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetNewestWorkingDatesAsync">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetNewestWorkingDatesAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetAllStockFromMarket(System.Int16)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetAllStockFromMarketAsync(System.Int16)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetAllStockFromMarketAsync(System.Int16,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetBestCurrentPrice(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetBestCurrentPriceAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetBestCurrentPriceAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetStockInfo(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetStockInfoAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetStockInfoAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetStockDetail(System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetStockDetailAsync(System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetStockDetailAsync(System.String,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetStockInfoByLanguge(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetStockInfoByLangugeAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetStockInfoByLangugeAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetListStockInfos(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetListStockInfosAsync(System.String,System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetListStockInfosAsync(System.String,System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetTransactions(System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetTransactionsAsync(System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetTransactionsAsync(System.String,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetMainMatchedPrices(System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetMainMatchedPricesAsync(System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetMainMatchedPricesAsync(System.String,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetTickerInfos(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetTickerInfosAsync(System.String)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetTickerInfosAsync(System.String,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetAllTickerInfos(System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetAllTickerInfosAsync(System.Int32,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetAllTickerInfosAsync(System.Int32,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetHOSEPutAd">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetHOSEPutAdAsync">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetHOSEPutAdAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetHOSEPutExec">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetHOSEPutExecAsync">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetHOSEPutExecAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.StartUpdater">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.StartUpdaterAsync">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.StartUpdaterAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.StartUpdaterForMarket(System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.StartUpdaterForMarketAsync(System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.StartUpdaterForMarketAsync(System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.UpdatingStatus">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.UpdatingStatusAsync">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.UpdatingStatusAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.StartIntraD(System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.StartIntraDAsync(System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.StartIntraDAsync(System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.StopUpdater">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.StopUpdaterAsync">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.StopUpdaterAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.StopUpdaterForMarket(System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.StopUpdaterForMarketAsync(System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.StopUpdaterForMarketAsync(System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.StopIntraD(System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.StopIntraDAsync(System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.StopIntraDAsync(System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.IsIntradayRunning">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.IsIntradayRunningAsync">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.IsIntradayRunningAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.CheckLatestData">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.CheckLatestDataAsync">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.CheckLatestDataAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.RestartRTService">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.RestartRTServiceAsync">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.RestartRTServiceAsync(System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetFirstIndexVN30">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetFirstIndexVN30Async">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetFirstIndexVN30Async(System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetAllIndexVN30">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetAllIndexVN30Async">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetAllIndexVN30Async(System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetStaticStockInfo(System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetStaticStockInfoAsync(System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetStaticStockInfoAsync(System.String,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetDynamicStockInfo(System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetDynamicStockInfoAsync(System.String,System.Int32)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.GetDynamicStockInfoAsync(System.String,System.Int32,System.Object)">
            <remarks/>
        </member>
        <member name="M:ETradeWebServices.RTServices.Service.CancelAsync(System.Object)">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.RTServices.Service.GetIndexVN30Completed">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.RTServices.Service.GetMarketInfoCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.RTServices.Service.MarketStatusCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.RTServices.Service.AllMarketStatusCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.RTServices.Service.AllMarketInfoAndStatusCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.RTServices.Service.SetMatketStatusCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.RTServices.Service.GetListCompanyCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.RTServices.Service.GetNewestWorkingDatesCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.RTServices.Service.GetAllStockFromMarketCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.RTServices.Service.GetBestCurrentPriceCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.RTServices.Service.GetStockInfoCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.RTServices.Service.GetStockDetailCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.RTServices.Service.GetStockInfoByLangugeCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.RTServices.Service.GetListStockInfosCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.RTServices.Service.GetTransactionsCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.RTServices.Service.GetMainMatchedPricesCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.RTServices.Service.GetTickerInfosCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.RTServices.Service.GetAllTickerInfosCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.RTServices.Service.GetHOSEPutAdCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.RTServices.Service.GetHOSEPutExecCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.RTServices.Service.StartUpdaterCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.RTServices.Service.StartUpdaterForMarketCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.RTServices.Service.UpdatingStatusCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.RTServices.Service.StartIntraDCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.RTServices.Service.StopUpdaterCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.RTServices.Service.StopUpdaterForMarketCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.RTServices.Service.StopIntraDCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.RTServices.Service.IsIntradayRunningCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.RTServices.Service.CheckLatestDataCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.RTServices.Service.RestartRTServiceCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.RTServices.Service.GetFirstIndexVN30Completed">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.RTServices.Service.GetAllIndexVN30Completed">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.RTServices.Service.GetStaticStockInfoCompleted">
            <remarks/>
        </member>
        <member name="E:ETradeWebServices.RTServices.Service.GetDynamicStockInfoCompleted">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetIndexVN30CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetIndexVN30CompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.RTServices.GetIndexVN30CompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetMarketInfoCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetMarketInfoCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.RTServices.GetMarketInfoCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.MarketStatusCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.MarketStatusCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.RTServices.MarketStatusCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.AllMarketStatusCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.AllMarketStatusCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.RTServices.AllMarketStatusCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.AllMarketInfoAndStatusCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.AllMarketInfoAndStatusCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.RTServices.AllMarketInfoAndStatusCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.SetMatketStatusCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.SetMatketStatusCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.RTServices.SetMatketStatusCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetListCompanyCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetListCompanyCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.RTServices.GetListCompanyCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetNewestWorkingDatesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetNewestWorkingDatesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.RTServices.GetNewestWorkingDatesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetAllStockFromMarketCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetAllStockFromMarketCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.RTServices.GetAllStockFromMarketCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetBestCurrentPriceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetBestCurrentPriceCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.RTServices.GetBestCurrentPriceCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetStockInfoCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetStockInfoCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.RTServices.GetStockInfoCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetStockDetailCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetStockDetailCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.RTServices.GetStockDetailCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetStockInfoByLangugeCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetStockInfoByLangugeCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.RTServices.GetStockInfoByLangugeCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetListStockInfosCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetListStockInfosCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.RTServices.GetListStockInfosCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetTransactionsCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetTransactionsCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.RTServices.GetTransactionsCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetMainMatchedPricesCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetMainMatchedPricesCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.RTServices.GetMainMatchedPricesCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetTickerInfosCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetTickerInfosCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.RTServices.GetTickerInfosCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetAllTickerInfosCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetAllTickerInfosCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.RTServices.GetAllTickerInfosCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetHOSEPutAdCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetHOSEPutAdCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.RTServices.GetHOSEPutAdCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetHOSEPutExecCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetHOSEPutExecCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.RTServices.GetHOSEPutExecCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.StartUpdaterCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.StartUpdaterCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.RTServices.StartUpdaterCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.StartUpdaterForMarketCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.UpdatingStatusCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.UpdatingStatusCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.RTServices.UpdatingStatusCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.StartIntraDCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.StopUpdaterCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.StopUpdaterCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.RTServices.StopUpdaterCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.StopUpdaterForMarketCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.StopIntraDCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.IsIntradayRunningCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.IsIntradayRunningCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.RTServices.IsIntradayRunningCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.CheckLatestDataCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.CheckLatestDataCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.RTServices.CheckLatestDataCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.RestartRTServiceCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.RestartRTServiceCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.RTServices.RestartRTServiceCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetFirstIndexVN30CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetFirstIndexVN30CompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.RTServices.GetFirstIndexVN30CompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetAllIndexVN30CompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetAllIndexVN30CompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.RTServices.GetAllIndexVN30CompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetStaticStockInfoCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetStaticStockInfoCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.RTServices.GetStaticStockInfoCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetDynamicStockInfoCompletedEventHandler">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.RTServices.GetDynamicStockInfoCompletedEventArgs">
            <remarks/>
        </member>
        <member name="P:ETradeWebServices.RTServices.GetDynamicStockInfoCompletedEventArgs.Result">
            <remarks/>
        </member>
        <member name="T:ETradeWebServices.Services.ValidateServices">
            <summary>
            The priority of validation:
            1.  Validate market
            2.  Validate stock
            3.  Validate volume unit
            4.  Validate step price
            5.  Validate price
            6.  Validate traderId
            7.  Validate transaction
            8.  Validate trade permission
            9.  Validate balance
            10. Validate account
            </summary>
        </member>
        <member name="M:ETradeWebServices.Services.ValidateServices.IsValidMarket(System.Int32,System.Char)">
            <summary>
            Determines whether the market session is valid or not.
            </summary>
            <param name="marketId">The market id.</param>
            <param name="condPrice">The con price.</param>
            <returns>
            <para>Result checking if this is a valid market session.</para>
            <para>REJECT_REASON=ERROR_MARKET_CLOSE: Market closed.</para>
            <para>REJECT_REASON=ERROR_ATO_NOT_IN_READY_AND_SESSION1: Cannot put ATO order in READY and SESSION1 session.</para>
            <para>REJECT_REASON=ERROR_ATC_NOT_IN_SESSION3: Cannot put ATC in SESSION3 session.</para>
            <para>REJECT_REASON=IS_VALID: This is a valid order.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ValidateServices.IsValidStock(System.String,System.Boolean,System.Char,System.Char)">
            <summary>
            Determines whether [is valid stock] [the specified symbol].
            1. Check is existed stock?
            2. Check isHalted
            3. Check isBond
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="isAdvance">true if this is validation for condition order; otherwise, false.</param>
            <param name="side">The side.</param>
            <param name="conPrice">The con price.</param>
            <returns>
            <para>Result checking if this is a valid stock.</para>
            <para>REJECT_REASON=INCORRECT_STOCK: Stock is incorrect.</para>
            <para>REJECT_REASON=STOCK_IS_HALT: Stock is halt.</para>
            <para>REJECT_REASON=IS_VALID: This is a valid stock.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ValidateServices.IsValidVolUnit(System.Int32,System.Int32)">
            <summary>
            Determines whether [is valid vol unit] [the specified market id].
            </summary>
            <param name="marketId">The market id.</param>
            <param name="volume">The volume.</param>
            <returns>
            <para>Result checking if this is a valid volume unit.</para>
            <para>REJECT_REASON=INCORRECT_VOL: The volume is incorrect.</para>
            <para>REJECT_REASON=OVER_MAX_VOL: The volume is over max allowed volume.</para>
            <para>REJECT_REASON=IS_VALID: This is a valid order.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ValidateServices.IsValidPrice(System.Int32,System.Decimal,System.Char,System.String)">
            <summary>
            Determines whether [is valid price] [the specified market id].
            </summary>
            <param name="marketId">The market id.</param>
            <param name="price">The price.</param>
            <param name="conPrice">The con price.</param>
            <param name="symbol">The symbol.</param>
            <returns>
            <para>Result checking if this is a valid price.</para>
            <para>REJECT_REASON=PRICE_BELOW_FLOOR: Price is below floor price.</para>
            <para>REJECT_REASON=PRICE_ABOVE_CEILING: Price is over ceiling price.</para>
            <para>REJECT_REASON=INCORRECT_STOCK: Stock is incorrect.</para>
            <para>REJECT_REASON=IS_VALID: This is a valid price.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ValidateServices.IsValidTransaction(System.String,System.String,System.Char,System.Collections.Generic.List{System.String})">
            <summary>
            Determines whether [is valid transaction] [the specified account no].
            </summary>
            <param name="accountNo">The account no.</param>
            <param name="symbol">The symbol.</param>
            <param name="side">The side.</param>
            <param name="subCustAccounts">The sub cust accounts.</param>
            <returns>
            <para>Result checking if this is a valid transaction.</para>
            <para>REJECT_REASON=NOT_BUY_SELL_THE_SAME_STOCK: Not allow to buy and sell the same stock.</para>
            <para>REJECT_REASON=IS_VALID: This is a valid order.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ValidateServices.IsValidTradePermission(AccountManager.Entities.SubCustAccount,ETradeCommon.Enums.CommonEnums.PERMISSION_TYPE)">
            <summary>
            Determines whether [is valid trade permission] [the specified account no].
            Validation includes:
            1. CanBuy
            2. CanSell
            3. IsActive
            </summary>
            <param name="subCustAccount">
            The sub Cust Account.
            </param>
            <param name="permissions">
            The permissions.
            </param>
            <returns>
            <para>Result checking if this is a valid order.</para>
            <para>REJECT_REASON=ERROR_LOCK_ACCOUNT: Account is locked.</para>
            <para>REJECT_REASON=ERROR_ACCOUNT_NOT_BUY_PERMISSION: Account is not allowed to buy stocks.</para>
            <para>REJECT_REASON=ERROR_ACCOUNT_NOT_SELL_PERMISSION: Account is not allowed to sell stocks.</para>
            <para>REJECT_REASON=IS_VALID: This is a valid order.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ValidateServices.IsValidAdvanceOrderPermission(AccountManager.Entities.SubCustAccount)">
            <summary>
            Determines whether this account can put advance orders.
            </summary>
            <param name="subCustAccount">
            The sub Cust Account.
            </param>
            <returns>
            <para>Result of validating permission.</para>
            <para>REJECT_REASON=ERROR_LOCK_ACCOUNT: Account is locked.</para>
            <para>REJECT_REASON=ERROR_ACCOUNT_NOT_CONDITION_ORDER: Account is not allowed to put advance order.</para>
            <para>REJECT_REASON=IS_VALID: This is a valid order.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ValidateServices.IsValidBalance(System.String,System.Char,System.String,System.Int32,System.Char,System.Int32,System.Decimal,System.Int64,System.String,System.Boolean)">
            <summary>
            Determines whether [is valid balance] [the specified account no].
            Validation includes:
            1. Validate stock available
            2. Validate cash available
            3. validate remain room
            </summary>
            <param name="accountNo">The account no.</param>
            <param name="side">The side.</param>
            <param name="symbol">The symbol.</param>
            <param name="marketId">The market id.</param>
            <param name="condPrice">The cond price.</param>
            <param name="volume">The volume.</param>
            <param name="price">The price.</param>
            <param name="conditionOrderId">Condition order id.</param>
            <param name="strEffDate">Effect date</param>
            <param name="isConditionOrder">if set to <c>true</c> [is condition order].</param>
            <returns>
            	<para>Result checking if customer's balance is OK or not.</para>
            	<para>REJECT_REASON=NOT_ENOUGH_CASH: Customer has not enough money.</para>
            	<para>REJECT_REASON=NOT_ENOUGH_STOCK: Customer has not enough stocks.</para>
            	<para>REJECT_REASON=IS_VALID: Customer's balance is OK.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ValidateServices.GetAvailableCash(System.String,System.Char,System.Int64,System.String,System.Boolean)">
            <summary>
            Get available cash.
            </summary>
            <param name="accountNo">Account id</param>
            <param name="side">Buy or Sell side</param>
            <param name="conditionOrderId">Condition order id</param>
            <param name="strEffDate">Effect date</param>
            <param name="isCondtionOrder">if set to <c>true</c> [is condtion order].</param>
            <returns>Available cash</returns>
        </member>
        <member name="M:ETradeWebServices.Services.ValidateServices.GetAvailableStock(System.String,System.String,System.Char,System.Int64,System.String,System.Boolean)">
            <summary>
            Get available stock.
            </summary>
            <param name="accountNo">Account id</param>
            <param name="secSymbol">Security symbol</param>
            <param name="side">Buy or Sell side</param>
            <param name="conditionOrderId">Condition order id</param>
            <param name="strEffDate">Effect date.</param>
            <param name="isConditionOrder">if set to <c>true</c> [is condition order].</param>
            <returns>Available stock</returns>
        </member>
        <member name="M:ETradeWebServices.Services.ValidateServices.GetTotalConditionOrderMoney(System.Char,System.String,System.Int64)">
            <summary>
            Get total money of condition orders of an account.
            </summary>
            <param name="side">Buy or Sell side</param>
            <param name="subCustAccountId">Sub cust</param>
            <param name="conditionOrderId"></param>
            <returns></returns>
        </member>
        <member name="M:ETradeWebServices.Services.ValidateServices.GetTotalConditionOrderStock(System.Char,System.String,System.Int64,System.String)">
            <summary>
            Get total stock of condition orders of an account.
            </summary>
            <param name="side">Buy or Sell side</param>
            <param name="subCustAccountId">Sub cust</param>
            <param name="conditionOrderId">The condition order id.</param>
            <param name="symbol">The symbol.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeWebServices.Services.ValidateServices.IsValidAccount(System.String,System.Char,System.String,System.Int32,System.Int32)">
            <summary>
            Determines whether [is valid account] [the specified account no].
            </summary>
            <param name="accountNo">
            The account no.
            </param>
            <param name="side">
            The side.
            </param>
            <param name="symbol">
            The symbol.
            </param>
            <param name="volume">
            The volume.
            </param>
            <param name="customerType"></param>
            <returns>
            <para>Result checking if this is a valid volume for foreign account.</para>
            <para>REJECT_REASON=OVER_REMAIN_VOLUME: Available volume is not enough.</para>
            <para>REJECT_REASON=IS_VALID: It is valid.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ValidateServices.IsValidNewOrder(System.Int32,System.String,System.String,System.Char,System.Int32,System.Decimal,System.Char,System.Int32,System.Int32,AccountManager.Entities.SubCustAccount,System.Collections.Generic.List{System.String},ETradeCore.Entities.StockAvailable,System.Int64,System.Boolean)">
            <summary>
            Determines whether [is valid new order] [the specified market id].
            </summary>
            <param name="marketId">The market id.</param>
            <param name="accountNo">The account no.</param>
            <param name="symbol">The symbol.</param>
            <param name="side">The side.</param>
            <param name="volume">The volume.</param>
            <param name="price">The price.</param>
            <param name="conPrice">The con price.</param>
            <param name="accountType">Type of the account.</param>
            <param name="customerType">Type of the customer.</param>
            <param name="subCustAccount">The sub cust account.</param>
            <param name="subCustAccounts">The sub cust accounts.</param>
            <param name="stockAvailable">The stock available.</param>
            <param name="conditionOrderId">Condition order id.</param>
            <param name="isMargin">This account is margin account or not.</param>
            <returns>
            	<para>Result checking if this is a valid order.</para>
            	<para>REJECT_REASON=ERROR_MARKET_CLOSE: Market closed.</para>
            	<para>REJECT_REASON=ERROR_ATO_NOT_IN_READY_AND_SESSION1: Cannot put ATO order in READY and SESSION1 session.</para>
            	<para>REJECT_REASON=ERROR_ATC_NOT_IN_SESSION3: Cannot put ATC in SESSION3 session.</para>
            	<para>REJECT_REASON=ERROR_PRICE_NOT_MULTIPLE_100_FOR_HOSE: Price is incorrect for HOSE market.</para>
            	<para>REJECT_REASON=ERROR_PRICE_NOT_MULTIPLE_500_FOR_HOSE: Price is incorrect for HOSE market.</para>
            	<para>REJECT_REASON=ERROR_PRICE_NOT_MULTIPLE_1000_FOR_HOSE: Price is incorrect for HOSE market.</para>
            	<para>REJECT_REASON=ERROR_HNX_NOT_USE_ATO_ATC: Cannot put ATO, ATC order in HNX market.</para>
            	<para>REJECT_REASON=ERROR_PRICE_NOT_MULTIPLE_100_FOR_HNX: Price is incorrect for HNX market.</para>
            	<para>REJECT_REASON=ERROR_UPCOM_NOT_USE_ATO_ATC: Cannot put ATO, ATC order in UPCOM market.</para>
            	<para>REJECT_REASON=ERROR_PRICE_NOT_MULTIPLE_100_FOR_UPCOM: Price is incorrect for UPCOM market.</para>
            	<para>REJECT_REASON=INCORRECT_SIDE: The side is not buy or sell side.</para>
            	<para>REJECT_REASON=INCORRECT_VOL: The volume is incorrect.</para>
            	<para>REJECT_REASON=OVER_MAX_VOL: The volume is over max allowed volume.</para>
            	<para>REJECT_REASON=INCORRECT_STOCK: Stock is incorrect.</para>
            	<para>REJECT_REASON=STOCK_IS_HALT: Stock is halt.</para>
            	<para>REJECT_REASON=PRICE_BELOW_FLOOR: Price is below floor price.</para>
            	<para>REJECT_REASON=PRICE_ABOVE_CEILING: Price is over ceiling price.</para>
            	<para>REJECT_REASON=NOT_BUY_SELL_THE_SAME_STOCK: Not allow to buy and sell the same stock.</para>
            	<para>REJECT_REASON=ERROR_LOCK_ACCOUNT: Account is locked.</para>
            	<para>REJECT_REASON=ERROR_ACCOUNT_NOT_BUY_PERMISSION: Account is not allowed to buy stocks.</para>
            	<para>REJECT_REASON=ERROR_ACCOUNT_NOT_SELL_PERMISSION: Account is not allowed to sell stocks.</para>
            	<para>REJECT_REASON=NOT_ENOUGH_CASH: Customer has not enough money.</para>
            	<para>REJECT_REASON=NOT_ENOUGH_STOCK: Customer has not enough stocks.</para>
            	<para>REJECT_REASON=OVER_REMAIN_VOLUME: Available volume is not enough.</para>
            	<para>REJECT_REASON=IS_VALID: This is a valid order.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ValidateServices.IsValidCancelOrder(ETradeOrders.Entities.ExecOrder)">
            <summary>
            Determines whether the order is a valid order to cancel.
            </summary>
            <param name="execOrder">The exec order.</param>
            <returns>
            <para>Reject reason.</para>
            <para>REJECT_REASON=INCORRECT_ORDER_NO: The order id is incorrect.</para>
            <para>REJECT_REASON=NOT_CANCEL_ORDER_CANCELED: Cannot cancel a cancelled order.</para>
            <para>REJECT_REASON=NOT_CANCEL_ORDER_MATCHED: Cannot cancel a full matched order.</para>
            <para>REJECT_REASON=NOT_CANCEL_ORDER_FROM_DIFF_SOURCE: Cannot cancel a order from other source.</para>
            <para>REJECT_REASON=NOT_CANCEL_IN_THIS_PERIOD_PHASE: Cannot cancel a order in this phase.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ValidateServices.IsSessionCancel(System.Int32,ETradeCommon.Enums.CommonEnums.ORDER_SESSION,System.Char,ETradeCommon.Enums.CommonEnums.ORDER_SESSION)">
            <summary>
            Determines whether this order can be cancelled or not.
            </summary>
            <param name="marketId"></param>
            <param name="ordSession">The ord session.</param>
            <param name="condPrice">The cond price.</param>
            <param name="currentSession">The current session.</param>
            <returns>
            	<c>true</c> if it can be cancelled; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ValidateServices.CanSell(System.String,System.Decimal,System.String,AccountManager.Entities.SubCustAccount,System.Collections.Generic.List{System.String})">
            <summary>
            Determines whether this instance can sell the specified symbol.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="sellableShare">The sellable share.</param>
            <param name="accountNo">The account no.</param>
            <param name="subCustAccount">Sub account information.</param>
            <param name="subCustAccounts">The sub cust accounts.</param>
            <returns>
            	<c>true</c> if this instance can sell the specified symbol; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ValidateServices.CanBuy(System.String,System.String,AccountManager.Entities.SubCustAccount,System.Collections.Generic.List{System.String})">
            <summary>
            Determines whether this instance can buy the specified symbol.
            </summary>
            <param name="symbol">The symbol.</param>
            <param name="accountNo">The account no.</param>
            <param name="subCustAccount">Sub account information.</param>
            <param name="subCustAccounts">The sub cust accounts.</param>
            <returns>
            	<c>true</c> if this instance can buy the specified symbol; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ValidateServices.CanBuy">
            <summary>
            Determines whether this instance can buy.
            </summary>
            <returns>
            	<c>true</c> if all market open, others wise <c>false</c>.
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ValidateServices.IsValidAdvanceOrder(System.Int32,System.String,System.String,System.Char,System.Int32,System.Decimal,System.Char,System.Int32,System.Int32,AccountManager.Entities.SubCustAccount,System.Boolean,System.String)">
            <summary>
            Determines whether [is valid new order] [the specified market id].
            </summary>
            <param name="marketId">The market id.</param>
            <param name="accountNo">The account no.</param>
            <param name="symbol">The symbol.</param>
            <param name="side">The side.</param>
            <param name="volume">The volume.</param>
            <param name="price">The price.</param>
            <param name="conPrice">The con price.</param>
            <param name="accountType">Type of the account.</param>
            <param name="customerType">Type of the customer.</param>
            <param name="subCustAccount">The sub cust account.</param>
            <param name="isMargin">true if this account is margin account; otherwise false</param>
            <param name="strEffDate">Effect date</param>
            <returns>
            	<para>
            Result of validating order.
            </para>
            	<para>REJECT_REASON=NOT_ADVANCE_TIME: This time is not advance time.</para>
            	<para>REJECT_REASON=ERROR_PRICE_NOT_MULTIPLE_100_FOR_HOSE: Price is incorrect for HOSE market.</para>
            	<para>REJECT_REASON=ERROR_PRICE_NOT_MULTIPLE_500_FOR_HOSE: Price is incorrect for HOSE market.</para>
            	<para>REJECT_REASON=ERROR_PRICE_NOT_MULTIPLE_1000_FOR_HOSE: Price is incorrect for HOSE market.</para>
            	<para>REJECT_REASON=ERROR_HNX_NOT_USE_ATO_ATC: Cannot put ATO, ATC order in HNX market.</para>
            	<para>REJECT_REASON=ERROR_PRICE_NOT_MULTIPLE_100_FOR_HNX: Price is incorrect for HNX market.</para>
            	<para>REJECT_REASON=ERROR_UPCOM_NOT_USE_ATO_ATC: Cannot put ATO, ATC order in UPCOM market.</para>
            	<para>REJECT_REASON=ERROR_PRICE_NOT_MULTIPLE_100_FOR_UPCOM: Price is incorrect for UPCOM market.</para>
            	<para>REJECT_REASON=INCORRECT_SIDE: The side is not buy or sell side.</para>
            	<para>REJECT_REASON=INCORRECT_VOL: The volume is incorrect.</para>
            	<para>REJECT_REASON=OVER_MAX_VOL: The volume is over max allowed volume.</para>
            	<para>REJECT_REASON=INCORRECT_STOCK: Stock is incorrect.</para>
            	<para>REJECT_REASON=STOCK_IS_HALT: Stock is halt.</para>
            	<para>REJECT_REASON=ERROR_LOCK_ACCOUNT: Account is locked.</para>
            	<para>REJECT_REASON=ERROR_ACCOUNT_NOT_CONDITION_ORDER: Account is not allowed to put advance order.</para>
            	<para>REJECT_REASON=NOT_ENOUGH_CASH: Customer has not enough money.</para>
            	<para>REJECT_REASON=NOT_ENOUGH_STOCK: Customer has not enough stocks.</para>
            	<para>REJECT_REASON=IS_VALID: This is a valid order.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ValidateServices.IsValidAdvanceTime">
            <summary>
            Check if the time of putting advance order is in allowed advance time or not
            </summary>
            <returns>
            <para>Result of validating advance time.</para>
            <para>REJECT_REASON=NOT_ADVANCE_TIME: This time is not advance time.</para>
            <para>REJECT_REASON=IS_VALID: This is a valid order.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ValidateServices.IsValidBuyMarginAccount(System.String,System.String,System.Decimal,System.Int32,System.String,System.Boolean)">
            <summary>
            Validate conditions buy of margin account
            </summary>
            <param name="accountNo">The account no.</param>
            <param name="secSymbol">The sec symbol.</param>
            <param name="price">The price.</param>
            <param name="volume">The volume.</param>
            <param name="strEffDate">The STR eff date.</param>
            <param name="isConditionOrder">if set to <c>true</c> [is condition order].</param>
            <returns>
            	<para>Result checking if this is a valid buy for margin account.</para>
            	<para>REJECT_REASON=ERROR_MARGIN_ACCOUNT_CANNOT_BUY_THAT_SYMBOL: Margin account cannot buy this symbol.</para>
            	<para>REJECT_REASON=ERROR_OVER_LIMIT_LOAN_PER_CUSTOMER: The value of price after fee overs the limit of loan per customer.</para>
            	<para>REJECT_REASON=ERROR_OVER_LIMIT_LOAN_PER_SECSYMBOL: The value of price after fee over the limit of loan per symbol.</para>
            	<para>REJECT_REASON=ERROR_OVER_LIMIT_COMPANY_CAPITAL: The value of price after fee over the limit of the company capital.</para>
            	<para>REJECT_REASON=ERROR_OVER_LIMIT_MAX_BUY: The value of price after fee over max buy of that account.</para>
            	<para>REJECT_REASON=ERROR_OVER_LIMIT_MAX_BUY_OF_SECSYMBOL: The value of price after fee over max buy of symbol.</para>
            	<para>REJECT_REASON=IS_VALID: This is a valid order.</para>
            </returns>
        </member>
        <member name="M:ETradeWebServices.Services.ValidateServices.IsValidLimitQuantityAdvanceOrder(System.Char,System.String,System.String)">
            <summary>
            Determines whether [is valid limit quantity advance order] [the specified side].
            </summary>
            <param name="side">The side.</param>
            <param name="subCustAccountId">The sub cust account id.</param>
            <param name="symbol">The symbol.</param>
            <returns>
            	<c>true</c> if [is valid limit quantity advance order] [the specified side]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:ETradeWebServices.Utils.SysConfig">
            <summary>
             Store config of 
            </summary>
        </member>
        <member name="F:ETradeWebServices.Utils.SysConfig.Holidays">
            <summary>
            List of Holidays
            </summary>
        </member>
        <member name="F:ETradeWebServices.Utils.SysConfig.WorkingDays">
            <summary>
            List of WorkingDays
            </summary>
        </member>
        <member name="F:ETradeWebServices.Utils.SysConfig.Configurations">
            <summary>
            List of Configuration
            </summary>
        </member>
        <member name="F:ETradeWebServices.Utils.SysConfig.AdvanceTimes">
            <summary>
            List of AdvanceTime
            </summary>
        </member>
        <member name="M:ETradeWebServices.Utils.SysConfig.#cctor">
            <summary>
            Initializes a new instance of the <see cref="T:ETradeWebServices.Utils.SysConfig"/> class.
            </summary>
        </member>
    </members>
</doc>
