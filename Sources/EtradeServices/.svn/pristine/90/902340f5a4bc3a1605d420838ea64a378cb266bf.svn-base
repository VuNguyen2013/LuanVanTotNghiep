//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17626
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.17626.
// 
#pragma warning disable 1591

namespace ETradeCore.UnitTests.AMServices {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="AccountManagerServicesSoap", Namespace="http://tempuri.org/")]
    public partial class AccountManagerServices : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback BrokerLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback BrokerLogoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateBrokerOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateBrokerOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeBrokerPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteBrokerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListBrokerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBrokerOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateMainCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateSubCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateMainCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSubCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivateMainCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivateSubCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerNoSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMainCustAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListMainCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustInfoFromCoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenerateCustPassOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenerateCustPinOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthenticateCustLogonOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeCustPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeCustPinOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateOpenCustAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteOpenCustAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOpenCustAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListOpenCustAccountOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public AccountManagerServices() {
            this.Url = global::ETradeCore.UnitTests.Properties.Settings.Default.ETradeCore_UnitTests_AMServices_AccountManagerServices;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event BrokerLoginCompletedEventHandler BrokerLoginCompleted;
        
        /// <remarks/>
        public event BrokerLogoutCompletedEventHandler BrokerLogoutCompleted;
        
        /// <remarks/>
        public event CreateBrokerCompletedEventHandler CreateBrokerCompleted;
        
        /// <remarks/>
        public event UpdateBrokerCompletedEventHandler UpdateBrokerCompleted;
        
        /// <remarks/>
        public event ChangeBrokerPasswordCompletedEventHandler ChangeBrokerPasswordCompleted;
        
        /// <remarks/>
        public event DeleteBrokerCompletedEventHandler DeleteBrokerCompleted;
        
        /// <remarks/>
        public event GetListBrokerCompletedEventHandler GetListBrokerCompleted;
        
        /// <remarks/>
        public event GetBrokerCompletedEventHandler GetBrokerCompleted;
        
        /// <remarks/>
        public event CreateMainCustomerCompletedEventHandler CreateMainCustomerCompleted;
        
        /// <remarks/>
        public event CreateSubCustomerCompletedEventHandler CreateSubCustomerCompleted;
        
        /// <remarks/>
        public event UpdateMainCustomerCompletedEventHandler UpdateMainCustomerCompleted;
        
        /// <remarks/>
        public event UpdateSubCustomerCompletedEventHandler UpdateSubCustomerCompleted;
        
        /// <remarks/>
        public event ActivateMainCustomerCompletedEventHandler ActivateMainCustomerCompleted;
        
        /// <remarks/>
        public event ActivateSubCustomerCompletedEventHandler ActivateSubCustomerCompleted;
        
        /// <remarks/>
        public event GetCustomerCompletedEventHandler GetCustomerCompleted;
        
        /// <remarks/>
        public event GetCustomerNoSessionCompletedEventHandler GetCustomerNoSessionCompleted;
        
        /// <remarks/>
        public event GetMainCustAccountCompletedEventHandler GetMainCustAccountCompleted;
        
        /// <remarks/>
        public event GetListMainCustomerCompletedEventHandler GetListMainCustomerCompleted;
        
        /// <remarks/>
        public event GetCustInfoFromCoreCompletedEventHandler GetCustInfoFromCoreCompleted;
        
        /// <remarks/>
        public event GenerateCustPassCompletedEventHandler GenerateCustPassCompleted;
        
        /// <remarks/>
        public event GenerateCustPinCompletedEventHandler GenerateCustPinCompleted;
        
        /// <remarks/>
        public event AuthenticateCustLogonCompletedEventHandler AuthenticateCustLogonCompleted;
        
        /// <remarks/>
        public event ChangeCustPasswordCompletedEventHandler ChangeCustPasswordCompleted;
        
        /// <remarks/>
        public event ChangeCustPinCompletedEventHandler ChangeCustPinCompleted;
        
        /// <remarks/>
        public event CreateOpenCustAccountCompletedEventHandler CreateOpenCustAccountCompleted;
        
        /// <remarks/>
        public event DeleteOpenCustAccountCompletedEventHandler DeleteOpenCustAccountCompleted;
        
        /// <remarks/>
        public event GetOpenCustAccountCompletedEventHandler GetOpenCustAccountCompleted;
        
        /// <remarks/>
        public event GetListOpenCustAccountCompletedEventHandler GetListOpenCustAccountCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BrokerLogin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BrokerLogin(string userName, string password) {
            object[] results = this.Invoke("BrokerLogin", new object[] {
                        userName,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BrokerLoginAsync(string userName, string password) {
            this.BrokerLoginAsync(userName, password, null);
        }
        
        /// <remarks/>
        public void BrokerLoginAsync(string userName, string password, object userState) {
            if ((this.BrokerLoginOperationCompleted == null)) {
                this.BrokerLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBrokerLoginOperationCompleted);
            }
            this.InvokeAsync("BrokerLogin", new object[] {
                        userName,
                        password}, this.BrokerLoginOperationCompleted, userState);
        }
        
        private void OnBrokerLoginOperationCompleted(object arg) {
            if ((this.BrokerLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BrokerLoginCompleted(this, new BrokerLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BrokerLogout", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool BrokerLogout() {
            object[] results = this.Invoke("BrokerLogout", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void BrokerLogoutAsync() {
            this.BrokerLogoutAsync(null);
        }
        
        /// <remarks/>
        public void BrokerLogoutAsync(object userState) {
            if ((this.BrokerLogoutOperationCompleted == null)) {
                this.BrokerLogoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBrokerLogoutOperationCompleted);
            }
            this.InvokeAsync("BrokerLogout", new object[0], this.BrokerLogoutOperationCompleted, userState);
        }
        
        private void OnBrokerLogoutOperationCompleted(object arg) {
            if ((this.BrokerLogoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BrokerLogoutCompleted(this, new BrokerLogoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateBroker", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateBroker(string brokerId, string name, string password, short accountType, bool actived, string mobilePhone, string email, int[] permissionList) {
            object[] results = this.Invoke("CreateBroker", new object[] {
                        brokerId,
                        name,
                        password,
                        accountType,
                        actived,
                        mobilePhone,
                        email,
                        permissionList});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateBrokerAsync(string brokerId, string name, string password, short accountType, bool actived, string mobilePhone, string email, int[] permissionList) {
            this.CreateBrokerAsync(brokerId, name, password, accountType, actived, mobilePhone, email, permissionList, null);
        }
        
        /// <remarks/>
        public void CreateBrokerAsync(string brokerId, string name, string password, short accountType, bool actived, string mobilePhone, string email, int[] permissionList, object userState) {
            if ((this.CreateBrokerOperationCompleted == null)) {
                this.CreateBrokerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateBrokerOperationCompleted);
            }
            this.InvokeAsync("CreateBroker", new object[] {
                        brokerId,
                        name,
                        password,
                        accountType,
                        actived,
                        mobilePhone,
                        email,
                        permissionList}, this.CreateBrokerOperationCompleted, userState);
        }
        
        private void OnCreateBrokerOperationCompleted(object arg) {
            if ((this.CreateBrokerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateBrokerCompleted(this, new CreateBrokerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateBroker", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateBroker(string brokerId, string name, string password, short accountType, bool actived, string mobilePhone, string email, int[] permissionList) {
            object[] results = this.Invoke("UpdateBroker", new object[] {
                        brokerId,
                        name,
                        password,
                        accountType,
                        actived,
                        mobilePhone,
                        email,
                        permissionList});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateBrokerAsync(string brokerId, string name, string password, short accountType, bool actived, string mobilePhone, string email, int[] permissionList) {
            this.UpdateBrokerAsync(brokerId, name, password, accountType, actived, mobilePhone, email, permissionList, null);
        }
        
        /// <remarks/>
        public void UpdateBrokerAsync(string brokerId, string name, string password, short accountType, bool actived, string mobilePhone, string email, int[] permissionList, object userState) {
            if ((this.UpdateBrokerOperationCompleted == null)) {
                this.UpdateBrokerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateBrokerOperationCompleted);
            }
            this.InvokeAsync("UpdateBroker", new object[] {
                        brokerId,
                        name,
                        password,
                        accountType,
                        actived,
                        mobilePhone,
                        email,
                        permissionList}, this.UpdateBrokerOperationCompleted, userState);
        }
        
        private void OnUpdateBrokerOperationCompleted(object arg) {
            if ((this.UpdateBrokerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateBrokerCompleted(this, new UpdateBrokerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangeBrokerPassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ChangeBrokerPassword(string brokerId, string oldPassword, string newPassword) {
            object[] results = this.Invoke("ChangeBrokerPassword", new object[] {
                        brokerId,
                        oldPassword,
                        newPassword});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeBrokerPasswordAsync(string brokerId, string oldPassword, string newPassword) {
            this.ChangeBrokerPasswordAsync(brokerId, oldPassword, newPassword, null);
        }
        
        /// <remarks/>
        public void ChangeBrokerPasswordAsync(string brokerId, string oldPassword, string newPassword, object userState) {
            if ((this.ChangeBrokerPasswordOperationCompleted == null)) {
                this.ChangeBrokerPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeBrokerPasswordOperationCompleted);
            }
            this.InvokeAsync("ChangeBrokerPassword", new object[] {
                        brokerId,
                        oldPassword,
                        newPassword}, this.ChangeBrokerPasswordOperationCompleted, userState);
        }
        
        private void OnChangeBrokerPasswordOperationCompleted(object arg) {
            if ((this.ChangeBrokerPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeBrokerPasswordCompleted(this, new ChangeBrokerPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteBroker", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteBroker(string brokerId) {
            object[] results = this.Invoke("DeleteBroker", new object[] {
                        brokerId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteBrokerAsync(string brokerId) {
            this.DeleteBrokerAsync(brokerId, null);
        }
        
        /// <remarks/>
        public void DeleteBrokerAsync(string brokerId, object userState) {
            if ((this.DeleteBrokerOperationCompleted == null)) {
                this.DeleteBrokerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteBrokerOperationCompleted);
            }
            this.InvokeAsync("DeleteBroker", new object[] {
                        brokerId}, this.DeleteBrokerOperationCompleted, userState);
        }
        
        private void OnDeleteBrokerOperationCompleted(object arg) {
            if ((this.DeleteBrokerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteBrokerCompleted(this, new DeleteBrokerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListBroker", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetListBroker() {
            object[] results = this.Invoke("GetListBroker", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetListBrokerAsync() {
            this.GetListBrokerAsync(null);
        }
        
        /// <remarks/>
        public void GetListBrokerAsync(object userState) {
            if ((this.GetListBrokerOperationCompleted == null)) {
                this.GetListBrokerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListBrokerOperationCompleted);
            }
            this.InvokeAsync("GetListBroker", new object[0], this.GetListBrokerOperationCompleted, userState);
        }
        
        private void OnGetListBrokerOperationCompleted(object arg) {
            if ((this.GetListBrokerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListBrokerCompleted(this, new GetListBrokerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBroker", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBroker(string brokerId) {
            object[] results = this.Invoke("GetBroker", new object[] {
                        brokerId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBrokerAsync(string brokerId) {
            this.GetBrokerAsync(brokerId, null);
        }
        
        /// <remarks/>
        public void GetBrokerAsync(string brokerId, object userState) {
            if ((this.GetBrokerOperationCompleted == null)) {
                this.GetBrokerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBrokerOperationCompleted);
            }
            this.InvokeAsync("GetBroker", new object[] {
                        brokerId}, this.GetBrokerOperationCompleted, userState);
        }
        
        private void OnGetBrokerOperationCompleted(object arg) {
            if ((this.GetBrokerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBrokerCompleted(this, new GetBrokerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateMainCustomer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateMainCustomer(string mainCustAccountId, string fullname, string email, string phone, bool actived, string password, string pin, string passwordLockReason, string pinLockReason, string tokenId, string tokenName, string tokenActived) {
            object[] results = this.Invoke("CreateMainCustomer", new object[] {
                        mainCustAccountId,
                        fullname,
                        email,
                        phone,
                        actived,
                        password,
                        pin,
                        passwordLockReason,
                        pinLockReason,
                        tokenId,
                        tokenName,
                        tokenActived});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateMainCustomerAsync(string mainCustAccountId, string fullname, string email, string phone, bool actived, string password, string pin, string passwordLockReason, string pinLockReason, string tokenId, string tokenName, string tokenActived) {
            this.CreateMainCustomerAsync(mainCustAccountId, fullname, email, phone, actived, password, pin, passwordLockReason, pinLockReason, tokenId, tokenName, tokenActived, null);
        }
        
        /// <remarks/>
        public void CreateMainCustomerAsync(string mainCustAccountId, string fullname, string email, string phone, bool actived, string password, string pin, string passwordLockReason, string pinLockReason, string tokenId, string tokenName, string tokenActived, object userState) {
            if ((this.CreateMainCustomerOperationCompleted == null)) {
                this.CreateMainCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateMainCustomerOperationCompleted);
            }
            this.InvokeAsync("CreateMainCustomer", new object[] {
                        mainCustAccountId,
                        fullname,
                        email,
                        phone,
                        actived,
                        password,
                        pin,
                        passwordLockReason,
                        pinLockReason,
                        tokenId,
                        tokenName,
                        tokenActived}, this.CreateMainCustomerOperationCompleted, userState);
        }
        
        private void OnCreateMainCustomerOperationCompleted(object arg) {
            if ((this.CreateMainCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateMainCustomerCompleted(this, new CreateMainCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateSubCustomer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateSubCustomer(string subCustAccountId, string name, bool actived, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<short> authType, string mainCustAccountId, int[] permissionList) {
            object[] results = this.Invoke("CreateSubCustomer", new object[] {
                        subCustAccountId,
                        name,
                        actived,
                        authType,
                        mainCustAccountId,
                        permissionList});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateSubCustomerAsync(string subCustAccountId, string name, bool actived, System.Nullable<short> authType, string mainCustAccountId, int[] permissionList) {
            this.CreateSubCustomerAsync(subCustAccountId, name, actived, authType, mainCustAccountId, permissionList, null);
        }
        
        /// <remarks/>
        public void CreateSubCustomerAsync(string subCustAccountId, string name, bool actived, System.Nullable<short> authType, string mainCustAccountId, int[] permissionList, object userState) {
            if ((this.CreateSubCustomerOperationCompleted == null)) {
                this.CreateSubCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateSubCustomerOperationCompleted);
            }
            this.InvokeAsync("CreateSubCustomer", new object[] {
                        subCustAccountId,
                        name,
                        actived,
                        authType,
                        mainCustAccountId,
                        permissionList}, this.CreateSubCustomerOperationCompleted, userState);
        }
        
        private void OnCreateSubCustomerOperationCompleted(object arg) {
            if ((this.CreateSubCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateSubCustomerCompleted(this, new CreateSubCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateMainCustomer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateMainCustomer(string mainCustAccountId, string fullname, string email, string phone, bool actived, string password, string pin, string passwordLockReason, string pinLockReason, string tokenId, string tokenName, string tokenActived) {
            object[] results = this.Invoke("UpdateMainCustomer", new object[] {
                        mainCustAccountId,
                        fullname,
                        email,
                        phone,
                        actived,
                        password,
                        pin,
                        passwordLockReason,
                        pinLockReason,
                        tokenId,
                        tokenName,
                        tokenActived});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateMainCustomerAsync(string mainCustAccountId, string fullname, string email, string phone, bool actived, string password, string pin, string passwordLockReason, string pinLockReason, string tokenId, string tokenName, string tokenActived) {
            this.UpdateMainCustomerAsync(mainCustAccountId, fullname, email, phone, actived, password, pin, passwordLockReason, pinLockReason, tokenId, tokenName, tokenActived, null);
        }
        
        /// <remarks/>
        public void UpdateMainCustomerAsync(string mainCustAccountId, string fullname, string email, string phone, bool actived, string password, string pin, string passwordLockReason, string pinLockReason, string tokenId, string tokenName, string tokenActived, object userState) {
            if ((this.UpdateMainCustomerOperationCompleted == null)) {
                this.UpdateMainCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateMainCustomerOperationCompleted);
            }
            this.InvokeAsync("UpdateMainCustomer", new object[] {
                        mainCustAccountId,
                        fullname,
                        email,
                        phone,
                        actived,
                        password,
                        pin,
                        passwordLockReason,
                        pinLockReason,
                        tokenId,
                        tokenName,
                        tokenActived}, this.UpdateMainCustomerOperationCompleted, userState);
        }
        
        private void OnUpdateMainCustomerOperationCompleted(object arg) {
            if ((this.UpdateMainCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateMainCustomerCompleted(this, new UpdateMainCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateSubCustomer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateSubCustomer(string subCustAccountId, string name, bool actived, short authType, string mainCustAccountId, int[] permissionList) {
            object[] results = this.Invoke("UpdateSubCustomer", new object[] {
                        subCustAccountId,
                        name,
                        actived,
                        authType,
                        mainCustAccountId,
                        permissionList});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateSubCustomerAsync(string subCustAccountId, string name, bool actived, short authType, string mainCustAccountId, int[] permissionList) {
            this.UpdateSubCustomerAsync(subCustAccountId, name, actived, authType, mainCustAccountId, permissionList, null);
        }
        
        /// <remarks/>
        public void UpdateSubCustomerAsync(string subCustAccountId, string name, bool actived, short authType, string mainCustAccountId, int[] permissionList, object userState) {
            if ((this.UpdateSubCustomerOperationCompleted == null)) {
                this.UpdateSubCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSubCustomerOperationCompleted);
            }
            this.InvokeAsync("UpdateSubCustomer", new object[] {
                        subCustAccountId,
                        name,
                        actived,
                        authType,
                        mainCustAccountId,
                        permissionList}, this.UpdateSubCustomerOperationCompleted, userState);
        }
        
        private void OnUpdateSubCustomerOperationCompleted(object arg) {
            if ((this.UpdateSubCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSubCustomerCompleted(this, new UpdateSubCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ActivateMainCustomer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ActivateMainCustomer(string mainCustAccountId, bool actived) {
            object[] results = this.Invoke("ActivateMainCustomer", new object[] {
                        mainCustAccountId,
                        actived});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ActivateMainCustomerAsync(string mainCustAccountId, bool actived) {
            this.ActivateMainCustomerAsync(mainCustAccountId, actived, null);
        }
        
        /// <remarks/>
        public void ActivateMainCustomerAsync(string mainCustAccountId, bool actived, object userState) {
            if ((this.ActivateMainCustomerOperationCompleted == null)) {
                this.ActivateMainCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivateMainCustomerOperationCompleted);
            }
            this.InvokeAsync("ActivateMainCustomer", new object[] {
                        mainCustAccountId,
                        actived}, this.ActivateMainCustomerOperationCompleted, userState);
        }
        
        private void OnActivateMainCustomerOperationCompleted(object arg) {
            if ((this.ActivateMainCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivateMainCustomerCompleted(this, new ActivateMainCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ActivateSubCustomer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ActivateSubCustomer(string subCustAccountId, bool actived) {
            object[] results = this.Invoke("ActivateSubCustomer", new object[] {
                        subCustAccountId,
                        actived});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ActivateSubCustomerAsync(string subCustAccountId, bool actived) {
            this.ActivateSubCustomerAsync(subCustAccountId, actived, null);
        }
        
        /// <remarks/>
        public void ActivateSubCustomerAsync(string subCustAccountId, bool actived, object userState) {
            if ((this.ActivateSubCustomerOperationCompleted == null)) {
                this.ActivateSubCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivateSubCustomerOperationCompleted);
            }
            this.InvokeAsync("ActivateSubCustomer", new object[] {
                        subCustAccountId,
                        actived}, this.ActivateSubCustomerOperationCompleted, userState);
        }
        
        private void OnActivateSubCustomerOperationCompleted(object arg) {
            if ((this.ActivateSubCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivateSubCustomerCompleted(this, new ActivateSubCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustomer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomer(string mainCustAccountId) {
            object[] results = this.Invoke("GetCustomer", new object[] {
                        mainCustAccountId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerAsync(string mainCustAccountId) {
            this.GetCustomerAsync(mainCustAccountId, null);
        }
        
        /// <remarks/>
        public void GetCustomerAsync(string mainCustAccountId, object userState) {
            if ((this.GetCustomerOperationCompleted == null)) {
                this.GetCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerOperationCompleted);
            }
            this.InvokeAsync("GetCustomer", new object[] {
                        mainCustAccountId}, this.GetCustomerOperationCompleted, userState);
        }
        
        private void OnGetCustomerOperationCompleted(object arg) {
            if ((this.GetCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerCompleted(this, new GetCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustomerNoSession", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerNoSession(string mainCustAccountId) {
            object[] results = this.Invoke("GetCustomerNoSession", new object[] {
                        mainCustAccountId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerNoSessionAsync(string mainCustAccountId) {
            this.GetCustomerNoSessionAsync(mainCustAccountId, null);
        }
        
        /// <remarks/>
        public void GetCustomerNoSessionAsync(string mainCustAccountId, object userState) {
            if ((this.GetCustomerNoSessionOperationCompleted == null)) {
                this.GetCustomerNoSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerNoSessionOperationCompleted);
            }
            this.InvokeAsync("GetCustomerNoSession", new object[] {
                        mainCustAccountId}, this.GetCustomerNoSessionOperationCompleted, userState);
        }
        
        private void OnGetCustomerNoSessionOperationCompleted(object arg) {
            if ((this.GetCustomerNoSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerNoSessionCompleted(this, new GetCustomerNoSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMainCustAccount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMainCustAccount(string mainCustAccountId) {
            object[] results = this.Invoke("GetMainCustAccount", new object[] {
                        mainCustAccountId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMainCustAccountAsync(string mainCustAccountId) {
            this.GetMainCustAccountAsync(mainCustAccountId, null);
        }
        
        /// <remarks/>
        public void GetMainCustAccountAsync(string mainCustAccountId, object userState) {
            if ((this.GetMainCustAccountOperationCompleted == null)) {
                this.GetMainCustAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMainCustAccountOperationCompleted);
            }
            this.InvokeAsync("GetMainCustAccount", new object[] {
                        mainCustAccountId}, this.GetMainCustAccountOperationCompleted, userState);
        }
        
        private void OnGetMainCustAccountOperationCompleted(object arg) {
            if ((this.GetMainCustAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMainCustAccountCompleted(this, new GetMainCustAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListMainCustomer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetListMainCustomer() {
            object[] results = this.Invoke("GetListMainCustomer", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetListMainCustomerAsync() {
            this.GetListMainCustomerAsync(null);
        }
        
        /// <remarks/>
        public void GetListMainCustomerAsync(object userState) {
            if ((this.GetListMainCustomerOperationCompleted == null)) {
                this.GetListMainCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListMainCustomerOperationCompleted);
            }
            this.InvokeAsync("GetListMainCustomer", new object[0], this.GetListMainCustomerOperationCompleted, userState);
        }
        
        private void OnGetListMainCustomerOperationCompleted(object arg) {
            if ((this.GetListMainCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListMainCustomerCompleted(this, new GetListMainCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustInfoFromCore", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustInfoFromCore() {
            object[] results = this.Invoke("GetCustInfoFromCore", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustInfoFromCoreAsync() {
            this.GetCustInfoFromCoreAsync(null);
        }
        
        /// <remarks/>
        public void GetCustInfoFromCoreAsync(object userState) {
            if ((this.GetCustInfoFromCoreOperationCompleted == null)) {
                this.GetCustInfoFromCoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustInfoFromCoreOperationCompleted);
            }
            this.InvokeAsync("GetCustInfoFromCore", new object[0], this.GetCustInfoFromCoreOperationCompleted, userState);
        }
        
        private void OnGetCustInfoFromCoreOperationCompleted(object arg) {
            if ((this.GetCustInfoFromCoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustInfoFromCoreCompleted(this, new GetCustInfoFromCoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GenerateCustPass", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GenerateCustPass(string mainCustAccId, int authType) {
            object[] results = this.Invoke("GenerateCustPass", new object[] {
                        mainCustAccId,
                        authType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GenerateCustPassAsync(string mainCustAccId, int authType) {
            this.GenerateCustPassAsync(mainCustAccId, authType, null);
        }
        
        /// <remarks/>
        public void GenerateCustPassAsync(string mainCustAccId, int authType, object userState) {
            if ((this.GenerateCustPassOperationCompleted == null)) {
                this.GenerateCustPassOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateCustPassOperationCompleted);
            }
            this.InvokeAsync("GenerateCustPass", new object[] {
                        mainCustAccId,
                        authType}, this.GenerateCustPassOperationCompleted, userState);
        }
        
        private void OnGenerateCustPassOperationCompleted(object arg) {
            if ((this.GenerateCustPassCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenerateCustPassCompleted(this, new GenerateCustPassCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GenerateCustPin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GenerateCustPin(string mainCustAccId, int authType) {
            object[] results = this.Invoke("GenerateCustPin", new object[] {
                        mainCustAccId,
                        authType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GenerateCustPinAsync(string mainCustAccId, int authType) {
            this.GenerateCustPinAsync(mainCustAccId, authType, null);
        }
        
        /// <remarks/>
        public void GenerateCustPinAsync(string mainCustAccId, int authType, object userState) {
            if ((this.GenerateCustPinOperationCompleted == null)) {
                this.GenerateCustPinOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateCustPinOperationCompleted);
            }
            this.InvokeAsync("GenerateCustPin", new object[] {
                        mainCustAccId,
                        authType}, this.GenerateCustPinOperationCompleted, userState);
        }
        
        private void OnGenerateCustPinOperationCompleted(object arg) {
            if ((this.GenerateCustPinCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenerateCustPinCompleted(this, new GenerateCustPinCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AuthenticateCustLogon", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AuthenticateCustLogon(string username, string password, int authType) {
            object[] results = this.Invoke("AuthenticateCustLogon", new object[] {
                        username,
                        password,
                        authType});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AuthenticateCustLogonAsync(string username, string password, int authType) {
            this.AuthenticateCustLogonAsync(username, password, authType, null);
        }
        
        /// <remarks/>
        public void AuthenticateCustLogonAsync(string username, string password, int authType, object userState) {
            if ((this.AuthenticateCustLogonOperationCompleted == null)) {
                this.AuthenticateCustLogonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthenticateCustLogonOperationCompleted);
            }
            this.InvokeAsync("AuthenticateCustLogon", new object[] {
                        username,
                        password,
                        authType}, this.AuthenticateCustLogonOperationCompleted, userState);
        }
        
        private void OnAuthenticateCustLogonOperationCompleted(object arg) {
            if ((this.AuthenticateCustLogonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthenticateCustLogonCompleted(this, new AuthenticateCustLogonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangeCustPassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ChangeCustPassword(string mainCustAccId, string oldPassword, string newPassword) {
            object[] results = this.Invoke("ChangeCustPassword", new object[] {
                        mainCustAccId,
                        oldPassword,
                        newPassword});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeCustPasswordAsync(string mainCustAccId, string oldPassword, string newPassword) {
            this.ChangeCustPasswordAsync(mainCustAccId, oldPassword, newPassword, null);
        }
        
        /// <remarks/>
        public void ChangeCustPasswordAsync(string mainCustAccId, string oldPassword, string newPassword, object userState) {
            if ((this.ChangeCustPasswordOperationCompleted == null)) {
                this.ChangeCustPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeCustPasswordOperationCompleted);
            }
            this.InvokeAsync("ChangeCustPassword", new object[] {
                        mainCustAccId,
                        oldPassword,
                        newPassword}, this.ChangeCustPasswordOperationCompleted, userState);
        }
        
        private void OnChangeCustPasswordOperationCompleted(object arg) {
            if ((this.ChangeCustPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeCustPasswordCompleted(this, new ChangeCustPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangeCustPin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ChangeCustPin(string mainCustAccId, string oldPin, string newPin) {
            object[] results = this.Invoke("ChangeCustPin", new object[] {
                        mainCustAccId,
                        oldPin,
                        newPin});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeCustPinAsync(string mainCustAccId, string oldPin, string newPin) {
            this.ChangeCustPinAsync(mainCustAccId, oldPin, newPin, null);
        }
        
        /// <remarks/>
        public void ChangeCustPinAsync(string mainCustAccId, string oldPin, string newPin, object userState) {
            if ((this.ChangeCustPinOperationCompleted == null)) {
                this.ChangeCustPinOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeCustPinOperationCompleted);
            }
            this.InvokeAsync("ChangeCustPin", new object[] {
                        mainCustAccId,
                        oldPin,
                        newPin}, this.ChangeCustPinOperationCompleted, userState);
        }
        
        private void OnChangeCustPinOperationCompleted(object arg) {
            if ((this.ChangeCustPinCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeCustPinCompleted(this, new ChangeCustPinCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateOpenCustAccount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateOpenCustAccount(
                    string cardId, 
                    System.DateTime cardIssue, 
                    string placeIssue, 
                    string name, 
                    System.DateTime birthday, 
                    bool sex, 
                    string occupation, 
                    string nationality, 
                    string address1, 
                    string telephone1, 
                    string fax1, 
                    string address2, 
                    string telephone2, 
                    string fax2, 
                    string address3, 
                    string telephone3, 
                    string fax3, 
                    string email, 
                    string branchCode, 
                    string branchName, 
                    bool custodian, 
                    string customerType, 
                    bool tradeAtCompany, 
                    bool tradeByTelephone, 
                    bool tradeOnline, 
                    bool existedAccount) {
            object[] results = this.Invoke("CreateOpenCustAccount", new object[] {
                        cardId,
                        cardIssue,
                        placeIssue,
                        name,
                        birthday,
                        sex,
                        occupation,
                        nationality,
                        address1,
                        telephone1,
                        fax1,
                        address2,
                        telephone2,
                        fax2,
                        address3,
                        telephone3,
                        fax3,
                        email,
                        branchCode,
                        branchName,
                        custodian,
                        customerType,
                        tradeAtCompany,
                        tradeByTelephone,
                        tradeOnline,
                        existedAccount});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateOpenCustAccountAsync(
                    string cardId, 
                    System.DateTime cardIssue, 
                    string placeIssue, 
                    string name, 
                    System.DateTime birthday, 
                    bool sex, 
                    string occupation, 
                    string nationality, 
                    string address1, 
                    string telephone1, 
                    string fax1, 
                    string address2, 
                    string telephone2, 
                    string fax2, 
                    string address3, 
                    string telephone3, 
                    string fax3, 
                    string email, 
                    string branchCode, 
                    string branchName, 
                    bool custodian, 
                    string customerType, 
                    bool tradeAtCompany, 
                    bool tradeByTelephone, 
                    bool tradeOnline, 
                    bool existedAccount) {
            this.CreateOpenCustAccountAsync(cardId, cardIssue, placeIssue, name, birthday, sex, occupation, nationality, address1, telephone1, fax1, address2, telephone2, fax2, address3, telephone3, fax3, email, branchCode, branchName, custodian, customerType, tradeAtCompany, tradeByTelephone, tradeOnline, existedAccount, null);
        }
        
        /// <remarks/>
        public void CreateOpenCustAccountAsync(
                    string cardId, 
                    System.DateTime cardIssue, 
                    string placeIssue, 
                    string name, 
                    System.DateTime birthday, 
                    bool sex, 
                    string occupation, 
                    string nationality, 
                    string address1, 
                    string telephone1, 
                    string fax1, 
                    string address2, 
                    string telephone2, 
                    string fax2, 
                    string address3, 
                    string telephone3, 
                    string fax3, 
                    string email, 
                    string branchCode, 
                    string branchName, 
                    bool custodian, 
                    string customerType, 
                    bool tradeAtCompany, 
                    bool tradeByTelephone, 
                    bool tradeOnline, 
                    bool existedAccount, 
                    object userState) {
            if ((this.CreateOpenCustAccountOperationCompleted == null)) {
                this.CreateOpenCustAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateOpenCustAccountOperationCompleted);
            }
            this.InvokeAsync("CreateOpenCustAccount", new object[] {
                        cardId,
                        cardIssue,
                        placeIssue,
                        name,
                        birthday,
                        sex,
                        occupation,
                        nationality,
                        address1,
                        telephone1,
                        fax1,
                        address2,
                        telephone2,
                        fax2,
                        address3,
                        telephone3,
                        fax3,
                        email,
                        branchCode,
                        branchName,
                        custodian,
                        customerType,
                        tradeAtCompany,
                        tradeByTelephone,
                        tradeOnline,
                        existedAccount}, this.CreateOpenCustAccountOperationCompleted, userState);
        }
        
        private void OnCreateOpenCustAccountOperationCompleted(object arg) {
            if ((this.CreateOpenCustAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateOpenCustAccountCompleted(this, new CreateOpenCustAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteOpenCustAccount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteOpenCustAccount(string openId) {
            object[] results = this.Invoke("DeleteOpenCustAccount", new object[] {
                        openId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteOpenCustAccountAsync(string openId) {
            this.DeleteOpenCustAccountAsync(openId, null);
        }
        
        /// <remarks/>
        public void DeleteOpenCustAccountAsync(string openId, object userState) {
            if ((this.DeleteOpenCustAccountOperationCompleted == null)) {
                this.DeleteOpenCustAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteOpenCustAccountOperationCompleted);
            }
            this.InvokeAsync("DeleteOpenCustAccount", new object[] {
                        openId}, this.DeleteOpenCustAccountOperationCompleted, userState);
        }
        
        private void OnDeleteOpenCustAccountOperationCompleted(object arg) {
            if ((this.DeleteOpenCustAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteOpenCustAccountCompleted(this, new DeleteOpenCustAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOpenCustAccount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetOpenCustAccount(string openId) {
            object[] results = this.Invoke("GetOpenCustAccount", new object[] {
                        openId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetOpenCustAccountAsync(string openId) {
            this.GetOpenCustAccountAsync(openId, null);
        }
        
        /// <remarks/>
        public void GetOpenCustAccountAsync(string openId, object userState) {
            if ((this.GetOpenCustAccountOperationCompleted == null)) {
                this.GetOpenCustAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOpenCustAccountOperationCompleted);
            }
            this.InvokeAsync("GetOpenCustAccount", new object[] {
                        openId}, this.GetOpenCustAccountOperationCompleted, userState);
        }
        
        private void OnGetOpenCustAccountOperationCompleted(object arg) {
            if ((this.GetOpenCustAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOpenCustAccountCompleted(this, new GetOpenCustAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListOpenCustAccount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetListOpenCustAccount() {
            object[] results = this.Invoke("GetListOpenCustAccount", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetListOpenCustAccountAsync() {
            this.GetListOpenCustAccountAsync(null);
        }
        
        /// <remarks/>
        public void GetListOpenCustAccountAsync(object userState) {
            if ((this.GetListOpenCustAccountOperationCompleted == null)) {
                this.GetListOpenCustAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListOpenCustAccountOperationCompleted);
            }
            this.InvokeAsync("GetListOpenCustAccount", new object[0], this.GetListOpenCustAccountOperationCompleted, userState);
        }
        
        private void OnGetListOpenCustAccountOperationCompleted(object arg) {
            if ((this.GetListOpenCustAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListOpenCustAccountCompleted(this, new GetListOpenCustAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void BrokerLoginCompletedEventHandler(object sender, BrokerLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BrokerLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BrokerLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void BrokerLogoutCompletedEventHandler(object sender, BrokerLogoutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BrokerLogoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BrokerLogoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void CreateBrokerCompletedEventHandler(object sender, CreateBrokerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateBrokerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateBrokerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void UpdateBrokerCompletedEventHandler(object sender, UpdateBrokerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateBrokerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateBrokerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void ChangeBrokerPasswordCompletedEventHandler(object sender, ChangeBrokerPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeBrokerPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeBrokerPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void DeleteBrokerCompletedEventHandler(object sender, DeleteBrokerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteBrokerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteBrokerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void GetListBrokerCompletedEventHandler(object sender, GetListBrokerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListBrokerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListBrokerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void GetBrokerCompletedEventHandler(object sender, GetBrokerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBrokerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBrokerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void CreateMainCustomerCompletedEventHandler(object sender, CreateMainCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateMainCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateMainCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void CreateSubCustomerCompletedEventHandler(object sender, CreateSubCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateSubCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateSubCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void UpdateMainCustomerCompletedEventHandler(object sender, UpdateMainCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateMainCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateMainCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void UpdateSubCustomerCompletedEventHandler(object sender, UpdateSubCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateSubCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateSubCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void ActivateMainCustomerCompletedEventHandler(object sender, ActivateMainCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivateMainCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivateMainCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void ActivateSubCustomerCompletedEventHandler(object sender, ActivateSubCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivateSubCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivateSubCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void GetCustomerCompletedEventHandler(object sender, GetCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void GetCustomerNoSessionCompletedEventHandler(object sender, GetCustomerNoSessionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerNoSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerNoSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void GetMainCustAccountCompletedEventHandler(object sender, GetMainCustAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMainCustAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMainCustAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void GetListMainCustomerCompletedEventHandler(object sender, GetListMainCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListMainCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListMainCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void GetCustInfoFromCoreCompletedEventHandler(object sender, GetCustInfoFromCoreCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustInfoFromCoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustInfoFromCoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void GenerateCustPassCompletedEventHandler(object sender, GenerateCustPassCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenerateCustPassCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenerateCustPassCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void GenerateCustPinCompletedEventHandler(object sender, GenerateCustPinCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenerateCustPinCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenerateCustPinCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void AuthenticateCustLogonCompletedEventHandler(object sender, AuthenticateCustLogonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthenticateCustLogonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthenticateCustLogonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void ChangeCustPasswordCompletedEventHandler(object sender, ChangeCustPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeCustPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeCustPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void ChangeCustPinCompletedEventHandler(object sender, ChangeCustPinCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeCustPinCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeCustPinCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void CreateOpenCustAccountCompletedEventHandler(object sender, CreateOpenCustAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateOpenCustAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateOpenCustAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void DeleteOpenCustAccountCompletedEventHandler(object sender, DeleteOpenCustAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteOpenCustAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteOpenCustAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void GetOpenCustAccountCompletedEventHandler(object sender, GetOpenCustAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOpenCustAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOpenCustAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void GetListOpenCustAccountCompletedEventHandler(object sender, GetListOpenCustAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListOpenCustAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListOpenCustAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591