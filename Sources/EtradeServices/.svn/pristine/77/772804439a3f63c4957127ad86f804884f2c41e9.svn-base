//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.4927.
// 
#pragma warning disable 1591

namespace ETradeWebServices.AMServices {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="AccountManagerServicesSoap", Namespace="http://tempuri.org/")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(object[]))]
    public partial class AccountManagerServices : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback BrokerLoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback BrokerLogoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateBrokerOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateBrokerOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeBrokerPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivateBrokerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListBrokerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetBrokerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListBrokerPermissionOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateMainCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateSubCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateMainCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSubCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivateMainCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback ActivateSubCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustomerNoSessionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMainCustAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSubCustAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListMainCustomerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCustInfoFromCoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenerateCustPassOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenerateCustPinOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListCustServicePermissionOperationCompleted;
        
        private System.Threading.SendOrPostCallback AuthenticateCustLogonOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeCustPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeCustPinOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateOpenCustAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateOpenCustAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteOpenCustAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetOpenCustAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListOpenCustAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListWorkingDaysOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateWorkingDaysOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateHolidayOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateHolidayOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteHolidayOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetHolidayOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListHolidayOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteConfigurationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLisAdvanceTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateAdvanceTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateFeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateFeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteFeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListFeeOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCashAdvanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListCashAdvanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetListCashAdvanceHistoryOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public AccountManagerServices() {
            this.Url = global::ETradeWebServices.Properties.Settings.Default.ETradeWebServices_AMServices_AccountManagerServices;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event BrokerLoginCompletedEventHandler BrokerLoginCompleted;
        
        /// <remarks/>
        public event BrokerLogoutCompletedEventHandler BrokerLogoutCompleted;
        
        /// <remarks/>
        public event CreateBrokerCompletedEventHandler CreateBrokerCompleted;
        
        /// <remarks/>
        public event UpdateBrokerCompletedEventHandler UpdateBrokerCompleted;
        
        /// <remarks/>
        public event ChangeBrokerPasswordCompletedEventHandler ChangeBrokerPasswordCompleted;
        
        /// <remarks/>
        public event ActivateBrokerCompletedEventHandler ActivateBrokerCompleted;
        
        /// <remarks/>
        public event GetListBrokerCompletedEventHandler GetListBrokerCompleted;
        
        /// <remarks/>
        public event GetBrokerCompletedEventHandler GetBrokerCompleted;
        
        /// <remarks/>
        public event GetListBrokerPermissionCompletedEventHandler GetListBrokerPermissionCompleted;
        
        /// <remarks/>
        public event CreateMainCustomerCompletedEventHandler CreateMainCustomerCompleted;
        
        /// <remarks/>
        public event CreateSubCustomerCompletedEventHandler CreateSubCustomerCompleted;
        
        /// <remarks/>
        public event UpdateMainCustomerCompletedEventHandler UpdateMainCustomerCompleted;
        
        /// <remarks/>
        public event UpdateSubCustomerCompletedEventHandler UpdateSubCustomerCompleted;
        
        /// <remarks/>
        public event ActivateMainCustomerCompletedEventHandler ActivateMainCustomerCompleted;
        
        /// <remarks/>
        public event ActivateSubCustomerCompletedEventHandler ActivateSubCustomerCompleted;
        
        /// <remarks/>
        public event GetCustomerCompletedEventHandler GetCustomerCompleted;
        
        /// <remarks/>
        public event GetCustomerNoSessionCompletedEventHandler GetCustomerNoSessionCompleted;
        
        /// <remarks/>
        public event GetMainCustAccountCompletedEventHandler GetMainCustAccountCompleted;
        
        /// <remarks/>
        public event GetSubCustAccountCompletedEventHandler GetSubCustAccountCompleted;
        
        /// <remarks/>
        public event GetListMainCustomerCompletedEventHandler GetListMainCustomerCompleted;
        
        /// <remarks/>
        public event GetCustInfoFromCoreCompletedEventHandler GetCustInfoFromCoreCompleted;
        
        /// <remarks/>
        public event GenerateCustPassCompletedEventHandler GenerateCustPassCompleted;
        
        /// <remarks/>
        public event GenerateCustPinCompletedEventHandler GenerateCustPinCompleted;
        
        /// <remarks/>
        public event GetListCustServicePermissionCompletedEventHandler GetListCustServicePermissionCompleted;
        
        /// <remarks/>
        public event AuthenticateCustLogonCompletedEventHandler AuthenticateCustLogonCompleted;
        
        /// <remarks/>
        public event SendMessageCompletedEventHandler SendMessageCompleted;
        
        /// <remarks/>
        public event ChangeCustPasswordCompletedEventHandler ChangeCustPasswordCompleted;
        
        /// <remarks/>
        public event ChangeCustPinCompletedEventHandler ChangeCustPinCompleted;
        
        /// <remarks/>
        public event CreateOpenCustAccountCompletedEventHandler CreateOpenCustAccountCompleted;
        
        /// <remarks/>
        public event UpdateOpenCustAccountCompletedEventHandler UpdateOpenCustAccountCompleted;
        
        /// <remarks/>
        public event DeleteOpenCustAccountCompletedEventHandler DeleteOpenCustAccountCompleted;
        
        /// <remarks/>
        public event GetOpenCustAccountCompletedEventHandler GetOpenCustAccountCompleted;
        
        /// <remarks/>
        public event GetListOpenCustAccountCompletedEventHandler GetListOpenCustAccountCompleted;
        
        /// <remarks/>
        public event GetListWorkingDaysCompletedEventHandler GetListWorkingDaysCompleted;
        
        /// <remarks/>
        public event UpdateWorkingDaysCompletedEventHandler UpdateWorkingDaysCompleted;
        
        /// <remarks/>
        public event CreateHolidayCompletedEventHandler CreateHolidayCompleted;
        
        /// <remarks/>
        public event UpdateHolidayCompletedEventHandler UpdateHolidayCompleted;
        
        /// <remarks/>
        public event DeleteHolidayCompletedEventHandler DeleteHolidayCompleted;
        
        /// <remarks/>
        public event GetHolidayCompletedEventHandler GetHolidayCompleted;
        
        /// <remarks/>
        public event GetListHolidayCompletedEventHandler GetListHolidayCompleted;
        
        /// <remarks/>
        public event GetListConfigurationCompletedEventHandler GetListConfigurationCompleted;
        
        /// <remarks/>
        public event GetConfigurationCompletedEventHandler GetConfigurationCompleted;
        
        /// <remarks/>
        public event CreateConfigurationCompletedEventHandler CreateConfigurationCompleted;
        
        /// <remarks/>
        public event UpdateConfigurationCompletedEventHandler UpdateConfigurationCompleted;
        
        /// <remarks/>
        public event DeleteConfigurationCompletedEventHandler DeleteConfigurationCompleted;
        
        /// <remarks/>
        public event GetLisAdvanceTimeCompletedEventHandler GetLisAdvanceTimeCompleted;
        
        /// <remarks/>
        public event UpdateAdvanceTimeCompletedEventHandler UpdateAdvanceTimeCompleted;
        
        /// <remarks/>
        public event CreateFeeCompletedEventHandler CreateFeeCompleted;
        
        /// <remarks/>
        public event UpdateFeeCompletedEventHandler UpdateFeeCompleted;
        
        /// <remarks/>
        public event DeleteFeeCompletedEventHandler DeleteFeeCompleted;
        
        /// <remarks/>
        public event GetListFeeCompletedEventHandler GetListFeeCompleted;
        
        /// <remarks/>
        public event UpdateCashAdvanceCompletedEventHandler UpdateCashAdvanceCompleted;
        
        /// <remarks/>
        public event GetListCashAdvanceCompletedEventHandler GetListCashAdvanceCompleted;
        
        /// <remarks/>
        public event GetListCashAdvanceHistoryCompletedEventHandler GetListCashAdvanceHistoryCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BrokerLogin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string BrokerLogin(string userName, string password) {
            object[] results = this.Invoke("BrokerLogin", new object[] {
                        userName,
                        password});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void BrokerLoginAsync(string userName, string password) {
            this.BrokerLoginAsync(userName, password, null);
        }
        
        /// <remarks/>
        public void BrokerLoginAsync(string userName, string password, object userState) {
            if ((this.BrokerLoginOperationCompleted == null)) {
                this.BrokerLoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBrokerLoginOperationCompleted);
            }
            this.InvokeAsync("BrokerLogin", new object[] {
                        userName,
                        password}, this.BrokerLoginOperationCompleted, userState);
        }
        
        private void OnBrokerLoginOperationCompleted(object arg) {
            if ((this.BrokerLoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BrokerLoginCompleted(this, new BrokerLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/BrokerLogout", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool BrokerLogout() {
            object[] results = this.Invoke("BrokerLogout", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void BrokerLogoutAsync() {
            this.BrokerLogoutAsync(null);
        }
        
        /// <remarks/>
        public void BrokerLogoutAsync(object userState) {
            if ((this.BrokerLogoutOperationCompleted == null)) {
                this.BrokerLogoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBrokerLogoutOperationCompleted);
            }
            this.InvokeAsync("BrokerLogout", new object[0], this.BrokerLogoutOperationCompleted, userState);
        }
        
        private void OnBrokerLogoutOperationCompleted(object arg) {
            if ((this.BrokerLogoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BrokerLogoutCompleted(this, new BrokerLogoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateBroker", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateBroker(string brokerId, string name, string password, short accountType, bool actived, string mobilePhone, string email, int[] permissionList) {
            object[] results = this.Invoke("CreateBroker", new object[] {
                        brokerId,
                        name,
                        password,
                        accountType,
                        actived,
                        mobilePhone,
                        email,
                        permissionList});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateBrokerAsync(string brokerId, string name, string password, short accountType, bool actived, string mobilePhone, string email, int[] permissionList) {
            this.CreateBrokerAsync(brokerId, name, password, accountType, actived, mobilePhone, email, permissionList, null);
        }
        
        /// <remarks/>
        public void CreateBrokerAsync(string brokerId, string name, string password, short accountType, bool actived, string mobilePhone, string email, int[] permissionList, object userState) {
            if ((this.CreateBrokerOperationCompleted == null)) {
                this.CreateBrokerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateBrokerOperationCompleted);
            }
            this.InvokeAsync("CreateBroker", new object[] {
                        brokerId,
                        name,
                        password,
                        accountType,
                        actived,
                        mobilePhone,
                        email,
                        permissionList}, this.CreateBrokerOperationCompleted, userState);
        }
        
        private void OnCreateBrokerOperationCompleted(object arg) {
            if ((this.CreateBrokerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateBrokerCompleted(this, new CreateBrokerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateBroker", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateBroker(string brokerId, string name, string password, short accountType, bool actived, string mobilePhone, string email, int[] permissionList) {
            object[] results = this.Invoke("UpdateBroker", new object[] {
                        brokerId,
                        name,
                        password,
                        accountType,
                        actived,
                        mobilePhone,
                        email,
                        permissionList});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateBrokerAsync(string brokerId, string name, string password, short accountType, bool actived, string mobilePhone, string email, int[] permissionList) {
            this.UpdateBrokerAsync(brokerId, name, password, accountType, actived, mobilePhone, email, permissionList, null);
        }
        
        /// <remarks/>
        public void UpdateBrokerAsync(string brokerId, string name, string password, short accountType, bool actived, string mobilePhone, string email, int[] permissionList, object userState) {
            if ((this.UpdateBrokerOperationCompleted == null)) {
                this.UpdateBrokerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateBrokerOperationCompleted);
            }
            this.InvokeAsync("UpdateBroker", new object[] {
                        brokerId,
                        name,
                        password,
                        accountType,
                        actived,
                        mobilePhone,
                        email,
                        permissionList}, this.UpdateBrokerOperationCompleted, userState);
        }
        
        private void OnUpdateBrokerOperationCompleted(object arg) {
            if ((this.UpdateBrokerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateBrokerCompleted(this, new UpdateBrokerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangeBrokerPassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ChangeBrokerPassword(string brokerId, string oldPassword, string newPassword) {
            object[] results = this.Invoke("ChangeBrokerPassword", new object[] {
                        brokerId,
                        oldPassword,
                        newPassword});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeBrokerPasswordAsync(string brokerId, string oldPassword, string newPassword) {
            this.ChangeBrokerPasswordAsync(brokerId, oldPassword, newPassword, null);
        }
        
        /// <remarks/>
        public void ChangeBrokerPasswordAsync(string brokerId, string oldPassword, string newPassword, object userState) {
            if ((this.ChangeBrokerPasswordOperationCompleted == null)) {
                this.ChangeBrokerPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeBrokerPasswordOperationCompleted);
            }
            this.InvokeAsync("ChangeBrokerPassword", new object[] {
                        brokerId,
                        oldPassword,
                        newPassword}, this.ChangeBrokerPasswordOperationCompleted, userState);
        }
        
        private void OnChangeBrokerPasswordOperationCompleted(object arg) {
            if ((this.ChangeBrokerPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeBrokerPasswordCompleted(this, new ChangeBrokerPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ActivateBroker", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ActivateBroker(string brokerId, bool isActived) {
            object[] results = this.Invoke("ActivateBroker", new object[] {
                        brokerId,
                        isActived});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ActivateBrokerAsync(string brokerId, bool isActived) {
            this.ActivateBrokerAsync(brokerId, isActived, null);
        }
        
        /// <remarks/>
        public void ActivateBrokerAsync(string brokerId, bool isActived, object userState) {
            if ((this.ActivateBrokerOperationCompleted == null)) {
                this.ActivateBrokerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivateBrokerOperationCompleted);
            }
            this.InvokeAsync("ActivateBroker", new object[] {
                        brokerId,
                        isActived}, this.ActivateBrokerOperationCompleted, userState);
        }
        
        private void OnActivateBrokerOperationCompleted(object arg) {
            if ((this.ActivateBrokerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivateBrokerCompleted(this, new ActivateBrokerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListBroker", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetListBroker(string brokerId, string name, short accountType, int actived, string mobilePhone, string email, int pageIndex, int pageSize) {
            object[] results = this.Invoke("GetListBroker", new object[] {
                        brokerId,
                        name,
                        accountType,
                        actived,
                        mobilePhone,
                        email,
                        pageIndex,
                        pageSize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetListBrokerAsync(string brokerId, string name, short accountType, int actived, string mobilePhone, string email, int pageIndex, int pageSize) {
            this.GetListBrokerAsync(brokerId, name, accountType, actived, mobilePhone, email, pageIndex, pageSize, null);
        }
        
        /// <remarks/>
        public void GetListBrokerAsync(string brokerId, string name, short accountType, int actived, string mobilePhone, string email, int pageIndex, int pageSize, object userState) {
            if ((this.GetListBrokerOperationCompleted == null)) {
                this.GetListBrokerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListBrokerOperationCompleted);
            }
            this.InvokeAsync("GetListBroker", new object[] {
                        brokerId,
                        name,
                        accountType,
                        actived,
                        mobilePhone,
                        email,
                        pageIndex,
                        pageSize}, this.GetListBrokerOperationCompleted, userState);
        }
        
        private void OnGetListBrokerOperationCompleted(object arg) {
            if ((this.GetListBrokerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListBrokerCompleted(this, new GetListBrokerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetBroker", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetBroker(string brokerId) {
            object[] results = this.Invoke("GetBroker", new object[] {
                        brokerId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetBrokerAsync(string brokerId) {
            this.GetBrokerAsync(brokerId, null);
        }
        
        /// <remarks/>
        public void GetBrokerAsync(string brokerId, object userState) {
            if ((this.GetBrokerOperationCompleted == null)) {
                this.GetBrokerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetBrokerOperationCompleted);
            }
            this.InvokeAsync("GetBroker", new object[] {
                        brokerId}, this.GetBrokerOperationCompleted, userState);
        }
        
        private void OnGetBrokerOperationCompleted(object arg) {
            if ((this.GetBrokerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetBrokerCompleted(this, new GetBrokerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListBrokerPermission", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetListBrokerPermission() {
            object[] results = this.Invoke("GetListBrokerPermission", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetListBrokerPermissionAsync() {
            this.GetListBrokerPermissionAsync(null);
        }
        
        /// <remarks/>
        public void GetListBrokerPermissionAsync(object userState) {
            if ((this.GetListBrokerPermissionOperationCompleted == null)) {
                this.GetListBrokerPermissionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListBrokerPermissionOperationCompleted);
            }
            this.InvokeAsync("GetListBrokerPermission", new object[0], this.GetListBrokerPermissionOperationCompleted, userState);
        }
        
        private void OnGetListBrokerPermissionOperationCompleted(object arg) {
            if ((this.GetListBrokerPermissionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListBrokerPermissionCompleted(this, new GetListBrokerPermissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateMainCustomer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateMainCustomer(
                    string mainCustAccountId, 
                    string fullname, 
                    string email, 
                    string phone, 
                    bool actived, 
                    string password, 
                    string pin, 
                    int passwordLockReason, 
                    int pinLockReason, 
                    string tokenId, 
                    string tokenName, 
                    string tokenActived, 
                    int customerType, 
                    int lockReason, 
                    string brokerId, 
                    short authType, 
                    short pinType) {
            object[] results = this.Invoke("CreateMainCustomer", new object[] {
                        mainCustAccountId,
                        fullname,
                        email,
                        phone,
                        actived,
                        password,
                        pin,
                        passwordLockReason,
                        pinLockReason,
                        tokenId,
                        tokenName,
                        tokenActived,
                        customerType,
                        lockReason,
                        brokerId,
                        authType,
                        pinType});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateMainCustomerAsync(
                    string mainCustAccountId, 
                    string fullname, 
                    string email, 
                    string phone, 
                    bool actived, 
                    string password, 
                    string pin, 
                    int passwordLockReason, 
                    int pinLockReason, 
                    string tokenId, 
                    string tokenName, 
                    string tokenActived, 
                    int customerType, 
                    int lockReason, 
                    string brokerId, 
                    short authType, 
                    short pinType) {
            this.CreateMainCustomerAsync(mainCustAccountId, fullname, email, phone, actived, password, pin, passwordLockReason, pinLockReason, tokenId, tokenName, tokenActived, customerType, lockReason, brokerId, authType, pinType, null);
        }
        
        /// <remarks/>
        public void CreateMainCustomerAsync(
                    string mainCustAccountId, 
                    string fullname, 
                    string email, 
                    string phone, 
                    bool actived, 
                    string password, 
                    string pin, 
                    int passwordLockReason, 
                    int pinLockReason, 
                    string tokenId, 
                    string tokenName, 
                    string tokenActived, 
                    int customerType, 
                    int lockReason, 
                    string brokerId, 
                    short authType, 
                    short pinType, 
                    object userState) {
            if ((this.CreateMainCustomerOperationCompleted == null)) {
                this.CreateMainCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateMainCustomerOperationCompleted);
            }
            this.InvokeAsync("CreateMainCustomer", new object[] {
                        mainCustAccountId,
                        fullname,
                        email,
                        phone,
                        actived,
                        password,
                        pin,
                        passwordLockReason,
                        pinLockReason,
                        tokenId,
                        tokenName,
                        tokenActived,
                        customerType,
                        lockReason,
                        brokerId,
                        authType,
                        pinType}, this.CreateMainCustomerOperationCompleted, userState);
        }
        
        private void OnCreateMainCustomerOperationCompleted(object arg) {
            if ((this.CreateMainCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateMainCustomerCompleted(this, new CreateMainCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateSubCustomer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateSubCustomer(string subCustAccountId, string name, bool actived, short lockAccountReason, string mainCustAccountId, int[] permissionList) {
            object[] results = this.Invoke("CreateSubCustomer", new object[] {
                        subCustAccountId,
                        name,
                        actived,
                        lockAccountReason,
                        mainCustAccountId,
                        permissionList});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateSubCustomerAsync(string subCustAccountId, string name, bool actived, short lockAccountReason, string mainCustAccountId, int[] permissionList) {
            this.CreateSubCustomerAsync(subCustAccountId, name, actived, lockAccountReason, mainCustAccountId, permissionList, null);
        }
        
        /// <remarks/>
        public void CreateSubCustomerAsync(string subCustAccountId, string name, bool actived, short lockAccountReason, string mainCustAccountId, int[] permissionList, object userState) {
            if ((this.CreateSubCustomerOperationCompleted == null)) {
                this.CreateSubCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateSubCustomerOperationCompleted);
            }
            this.InvokeAsync("CreateSubCustomer", new object[] {
                        subCustAccountId,
                        name,
                        actived,
                        lockAccountReason,
                        mainCustAccountId,
                        permissionList}, this.CreateSubCustomerOperationCompleted, userState);
        }
        
        private void OnCreateSubCustomerOperationCompleted(object arg) {
            if ((this.CreateSubCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateSubCustomerCompleted(this, new CreateSubCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateMainCustomer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateMainCustomer(
                    string mainCustAccountId, 
                    string fullname, 
                    string email, 
                    string phone, 
                    bool actived, 
                    string password, 
                    string pin, 
                    int passwordLockReason, 
                    int pinLockReason, 
                    string tokenId, 
                    string tokenName, 
                    string tokenActived, 
                    int customerType, 
                    int lockReason, 
                    string brokerId, 
                    short authType, 
                    short pinType) {
            object[] results = this.Invoke("UpdateMainCustomer", new object[] {
                        mainCustAccountId,
                        fullname,
                        email,
                        phone,
                        actived,
                        password,
                        pin,
                        passwordLockReason,
                        pinLockReason,
                        tokenId,
                        tokenName,
                        tokenActived,
                        customerType,
                        lockReason,
                        brokerId,
                        authType,
                        pinType});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateMainCustomerAsync(
                    string mainCustAccountId, 
                    string fullname, 
                    string email, 
                    string phone, 
                    bool actived, 
                    string password, 
                    string pin, 
                    int passwordLockReason, 
                    int pinLockReason, 
                    string tokenId, 
                    string tokenName, 
                    string tokenActived, 
                    int customerType, 
                    int lockReason, 
                    string brokerId, 
                    short authType, 
                    short pinType) {
            this.UpdateMainCustomerAsync(mainCustAccountId, fullname, email, phone, actived, password, pin, passwordLockReason, pinLockReason, tokenId, tokenName, tokenActived, customerType, lockReason, brokerId, authType, pinType, null);
        }
        
        /// <remarks/>
        public void UpdateMainCustomerAsync(
                    string mainCustAccountId, 
                    string fullname, 
                    string email, 
                    string phone, 
                    bool actived, 
                    string password, 
                    string pin, 
                    int passwordLockReason, 
                    int pinLockReason, 
                    string tokenId, 
                    string tokenName, 
                    string tokenActived, 
                    int customerType, 
                    int lockReason, 
                    string brokerId, 
                    short authType, 
                    short pinType, 
                    object userState) {
            if ((this.UpdateMainCustomerOperationCompleted == null)) {
                this.UpdateMainCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateMainCustomerOperationCompleted);
            }
            this.InvokeAsync("UpdateMainCustomer", new object[] {
                        mainCustAccountId,
                        fullname,
                        email,
                        phone,
                        actived,
                        password,
                        pin,
                        passwordLockReason,
                        pinLockReason,
                        tokenId,
                        tokenName,
                        tokenActived,
                        customerType,
                        lockReason,
                        brokerId,
                        authType,
                        pinType}, this.UpdateMainCustomerOperationCompleted, userState);
        }
        
        private void OnUpdateMainCustomerOperationCompleted(object arg) {
            if ((this.UpdateMainCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateMainCustomerCompleted(this, new UpdateMainCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateSubCustomer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateSubCustomer(string subCustAccountId, string name, bool actived, short lockAccountReason, string mainCustAccountId, int[] permissionList) {
            object[] results = this.Invoke("UpdateSubCustomer", new object[] {
                        subCustAccountId,
                        name,
                        actived,
                        lockAccountReason,
                        mainCustAccountId,
                        permissionList});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateSubCustomerAsync(string subCustAccountId, string name, bool actived, short lockAccountReason, string mainCustAccountId, int[] permissionList) {
            this.UpdateSubCustomerAsync(subCustAccountId, name, actived, lockAccountReason, mainCustAccountId, permissionList, null);
        }
        
        /// <remarks/>
        public void UpdateSubCustomerAsync(string subCustAccountId, string name, bool actived, short lockAccountReason, string mainCustAccountId, int[] permissionList, object userState) {
            if ((this.UpdateSubCustomerOperationCompleted == null)) {
                this.UpdateSubCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSubCustomerOperationCompleted);
            }
            this.InvokeAsync("UpdateSubCustomer", new object[] {
                        subCustAccountId,
                        name,
                        actived,
                        lockAccountReason,
                        mainCustAccountId,
                        permissionList}, this.UpdateSubCustomerOperationCompleted, userState);
        }
        
        private void OnUpdateSubCustomerOperationCompleted(object arg) {
            if ((this.UpdateSubCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSubCustomerCompleted(this, new UpdateSubCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ActivateMainCustomer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ActivateMainCustomer(string mainCustAccountId, bool actived, int lockReason) {
            object[] results = this.Invoke("ActivateMainCustomer", new object[] {
                        mainCustAccountId,
                        actived,
                        lockReason});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ActivateMainCustomerAsync(string mainCustAccountId, bool actived, int lockReason) {
            this.ActivateMainCustomerAsync(mainCustAccountId, actived, lockReason, null);
        }
        
        /// <remarks/>
        public void ActivateMainCustomerAsync(string mainCustAccountId, bool actived, int lockReason, object userState) {
            if ((this.ActivateMainCustomerOperationCompleted == null)) {
                this.ActivateMainCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivateMainCustomerOperationCompleted);
            }
            this.InvokeAsync("ActivateMainCustomer", new object[] {
                        mainCustAccountId,
                        actived,
                        lockReason}, this.ActivateMainCustomerOperationCompleted, userState);
        }
        
        private void OnActivateMainCustomerOperationCompleted(object arg) {
            if ((this.ActivateMainCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivateMainCustomerCompleted(this, new ActivateMainCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ActivateSubCustomer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ActivateSubCustomer(string subCustAccountId, bool actived, short lockReason) {
            object[] results = this.Invoke("ActivateSubCustomer", new object[] {
                        subCustAccountId,
                        actived,
                        lockReason});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ActivateSubCustomerAsync(string subCustAccountId, bool actived, short lockReason) {
            this.ActivateSubCustomerAsync(subCustAccountId, actived, lockReason, null);
        }
        
        /// <remarks/>
        public void ActivateSubCustomerAsync(string subCustAccountId, bool actived, short lockReason, object userState) {
            if ((this.ActivateSubCustomerOperationCompleted == null)) {
                this.ActivateSubCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnActivateSubCustomerOperationCompleted);
            }
            this.InvokeAsync("ActivateSubCustomer", new object[] {
                        subCustAccountId,
                        actived,
                        lockReason}, this.ActivateSubCustomerOperationCompleted, userState);
        }
        
        private void OnActivateSubCustomerOperationCompleted(object arg) {
            if ((this.ActivateSubCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ActivateSubCustomerCompleted(this, new ActivateSubCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustomer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomer(string mainCustAccountId) {
            object[] results = this.Invoke("GetCustomer", new object[] {
                        mainCustAccountId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerAsync(string mainCustAccountId) {
            this.GetCustomerAsync(mainCustAccountId, null);
        }
        
        /// <remarks/>
        public void GetCustomerAsync(string mainCustAccountId, object userState) {
            if ((this.GetCustomerOperationCompleted == null)) {
                this.GetCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerOperationCompleted);
            }
            this.InvokeAsync("GetCustomer", new object[] {
                        mainCustAccountId}, this.GetCustomerOperationCompleted, userState);
        }
        
        private void OnGetCustomerOperationCompleted(object arg) {
            if ((this.GetCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerCompleted(this, new GetCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustomerNoSession", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustomerNoSession(string mainCustAccountId) {
            object[] results = this.Invoke("GetCustomerNoSession", new object[] {
                        mainCustAccountId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustomerNoSessionAsync(string mainCustAccountId) {
            this.GetCustomerNoSessionAsync(mainCustAccountId, null);
        }
        
        /// <remarks/>
        public void GetCustomerNoSessionAsync(string mainCustAccountId, object userState) {
            if ((this.GetCustomerNoSessionOperationCompleted == null)) {
                this.GetCustomerNoSessionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustomerNoSessionOperationCompleted);
            }
            this.InvokeAsync("GetCustomerNoSession", new object[] {
                        mainCustAccountId}, this.GetCustomerNoSessionOperationCompleted, userState);
        }
        
        private void OnGetCustomerNoSessionOperationCompleted(object arg) {
            if ((this.GetCustomerNoSessionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustomerNoSessionCompleted(this, new GetCustomerNoSessionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMainCustAccount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetMainCustAccount(string mainCustAccountId) {
            object[] results = this.Invoke("GetMainCustAccount", new object[] {
                        mainCustAccountId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetMainCustAccountAsync(string mainCustAccountId) {
            this.GetMainCustAccountAsync(mainCustAccountId, null);
        }
        
        /// <remarks/>
        public void GetMainCustAccountAsync(string mainCustAccountId, object userState) {
            if ((this.GetMainCustAccountOperationCompleted == null)) {
                this.GetMainCustAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMainCustAccountOperationCompleted);
            }
            this.InvokeAsync("GetMainCustAccount", new object[] {
                        mainCustAccountId}, this.GetMainCustAccountOperationCompleted, userState);
        }
        
        private void OnGetMainCustAccountOperationCompleted(object arg) {
            if ((this.GetMainCustAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMainCustAccountCompleted(this, new GetMainCustAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSubCustAccount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSubCustAccount(string subCustAccountId) {
            object[] results = this.Invoke("GetSubCustAccount", new object[] {
                        subCustAccountId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSubCustAccountAsync(string subCustAccountId) {
            this.GetSubCustAccountAsync(subCustAccountId, null);
        }
        
        /// <remarks/>
        public void GetSubCustAccountAsync(string subCustAccountId, object userState) {
            if ((this.GetSubCustAccountOperationCompleted == null)) {
                this.GetSubCustAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSubCustAccountOperationCompleted);
            }
            this.InvokeAsync("GetSubCustAccount", new object[] {
                        subCustAccountId}, this.GetSubCustAccountOperationCompleted, userState);
        }
        
        private void OnGetSubCustAccountOperationCompleted(object arg) {
            if ((this.GetSubCustAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSubCustAccountCompleted(this, new GetSubCustAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListMainCustomer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetListMainCustomer(string mainCustAccountId, string fullname, string email, string phone, int actived, int passwordLockReason, int pinLockReason, int customerType, int lockReason, string brokerId, short authType, short pinType, int pageIndex, int pageSize) {
            object[] results = this.Invoke("GetListMainCustomer", new object[] {
                        mainCustAccountId,
                        fullname,
                        email,
                        phone,
                        actived,
                        passwordLockReason,
                        pinLockReason,
                        customerType,
                        lockReason,
                        brokerId,
                        authType,
                        pinType,
                        pageIndex,
                        pageSize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetListMainCustomerAsync(string mainCustAccountId, string fullname, string email, string phone, int actived, int passwordLockReason, int pinLockReason, int customerType, int lockReason, string brokerId, short authType, short pinType, int pageIndex, int pageSize) {
            this.GetListMainCustomerAsync(mainCustAccountId, fullname, email, phone, actived, passwordLockReason, pinLockReason, customerType, lockReason, brokerId, authType, pinType, pageIndex, pageSize, null);
        }
        
        /// <remarks/>
        public void GetListMainCustomerAsync(string mainCustAccountId, string fullname, string email, string phone, int actived, int passwordLockReason, int pinLockReason, int customerType, int lockReason, string brokerId, short authType, short pinType, int pageIndex, int pageSize, object userState) {
            if ((this.GetListMainCustomerOperationCompleted == null)) {
                this.GetListMainCustomerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListMainCustomerOperationCompleted);
            }
            this.InvokeAsync("GetListMainCustomer", new object[] {
                        mainCustAccountId,
                        fullname,
                        email,
                        phone,
                        actived,
                        passwordLockReason,
                        pinLockReason,
                        customerType,
                        lockReason,
                        brokerId,
                        authType,
                        pinType,
                        pageIndex,
                        pageSize}, this.GetListMainCustomerOperationCompleted, userState);
        }
        
        private void OnGetListMainCustomerOperationCompleted(object arg) {
            if ((this.GetListMainCustomerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListMainCustomerCompleted(this, new GetListMainCustomerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCustInfoFromCore", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCustInfoFromCore(string accountId) {
            object[] results = this.Invoke("GetCustInfoFromCore", new object[] {
                        accountId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCustInfoFromCoreAsync(string accountId) {
            this.GetCustInfoFromCoreAsync(accountId, null);
        }
        
        /// <remarks/>
        public void GetCustInfoFromCoreAsync(string accountId, object userState) {
            if ((this.GetCustInfoFromCoreOperationCompleted == null)) {
                this.GetCustInfoFromCoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCustInfoFromCoreOperationCompleted);
            }
            this.InvokeAsync("GetCustInfoFromCore", new object[] {
                        accountId}, this.GetCustInfoFromCoreOperationCompleted, userState);
        }
        
        private void OnGetCustInfoFromCoreOperationCompleted(object arg) {
            if ((this.GetCustInfoFromCoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCustInfoFromCoreCompleted(this, new GetCustInfoFromCoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GenerateCustPass", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GenerateCustPass(string mainCustAccId, int authType) {
            object[] results = this.Invoke("GenerateCustPass", new object[] {
                        mainCustAccId,
                        authType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GenerateCustPassAsync(string mainCustAccId, int authType) {
            this.GenerateCustPassAsync(mainCustAccId, authType, null);
        }
        
        /// <remarks/>
        public void GenerateCustPassAsync(string mainCustAccId, int authType, object userState) {
            if ((this.GenerateCustPassOperationCompleted == null)) {
                this.GenerateCustPassOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateCustPassOperationCompleted);
            }
            this.InvokeAsync("GenerateCustPass", new object[] {
                        mainCustAccId,
                        authType}, this.GenerateCustPassOperationCompleted, userState);
        }
        
        private void OnGenerateCustPassOperationCompleted(object arg) {
            if ((this.GenerateCustPassCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenerateCustPassCompleted(this, new GenerateCustPassCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GenerateCustPin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GenerateCustPin(string mainCustAccId, int authType) {
            object[] results = this.Invoke("GenerateCustPin", new object[] {
                        mainCustAccId,
                        authType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GenerateCustPinAsync(string mainCustAccId, int authType) {
            this.GenerateCustPinAsync(mainCustAccId, authType, null);
        }
        
        /// <remarks/>
        public void GenerateCustPinAsync(string mainCustAccId, int authType, object userState) {
            if ((this.GenerateCustPinOperationCompleted == null)) {
                this.GenerateCustPinOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateCustPinOperationCompleted);
            }
            this.InvokeAsync("GenerateCustPin", new object[] {
                        mainCustAccId,
                        authType}, this.GenerateCustPinOperationCompleted, userState);
        }
        
        private void OnGenerateCustPinOperationCompleted(object arg) {
            if ((this.GenerateCustPinCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenerateCustPinCompleted(this, new GenerateCustPinCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListCustServicePermission", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetListCustServicePermission() {
            object[] results = this.Invoke("GetListCustServicePermission", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetListCustServicePermissionAsync() {
            this.GetListCustServicePermissionAsync(null);
        }
        
        /// <remarks/>
        public void GetListCustServicePermissionAsync(object userState) {
            if ((this.GetListCustServicePermissionOperationCompleted == null)) {
                this.GetListCustServicePermissionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListCustServicePermissionOperationCompleted);
            }
            this.InvokeAsync("GetListCustServicePermission", new object[0], this.GetListCustServicePermissionOperationCompleted, userState);
        }
        
        private void OnGetListCustServicePermissionOperationCompleted(object arg) {
            if ((this.GetListCustServicePermissionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListCustServicePermissionCompleted(this, new GetListCustServicePermissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AuthenticateCustLogon", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AuthenticateCustLogon(string username, string password, int authType) {
            object[] results = this.Invoke("AuthenticateCustLogon", new object[] {
                        username,
                        password,
                        authType});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AuthenticateCustLogonAsync(string username, string password, int authType) {
            this.AuthenticateCustLogonAsync(username, password, authType, null);
        }
        
        /// <remarks/>
        public void AuthenticateCustLogonAsync(string username, string password, int authType, object userState) {
            if ((this.AuthenticateCustLogonOperationCompleted == null)) {
                this.AuthenticateCustLogonOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthenticateCustLogonOperationCompleted);
            }
            this.InvokeAsync("AuthenticateCustLogon", new object[] {
                        username,
                        password,
                        authType}, this.AuthenticateCustLogonOperationCompleted, userState);
        }
        
        private void OnAuthenticateCustLogonOperationCompleted(object arg) {
            if ((this.AuthenticateCustLogonCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthenticateCustLogonCompleted(this, new AuthenticateCustLogonCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SendMessage", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SendMessage(string username, string message) {
            object[] results = this.Invoke("SendMessage", new object[] {
                        username,
                        message});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SendMessageAsync(string username, string message) {
            this.SendMessageAsync(username, message, null);
        }
        
        /// <remarks/>
        public void SendMessageAsync(string username, string message, object userState) {
            if ((this.SendMessageOperationCompleted == null)) {
                this.SendMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendMessageOperationCompleted);
            }
            this.InvokeAsync("SendMessage", new object[] {
                        username,
                        message}, this.SendMessageOperationCompleted, userState);
        }
        
        private void OnSendMessageOperationCompleted(object arg) {
            if ((this.SendMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendMessageCompleted(this, new SendMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangeCustPassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ChangeCustPassword(string mainCustAccId, string oldPassword, string newPassword) {
            object[] results = this.Invoke("ChangeCustPassword", new object[] {
                        mainCustAccId,
                        oldPassword,
                        newPassword});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeCustPasswordAsync(string mainCustAccId, string oldPassword, string newPassword) {
            this.ChangeCustPasswordAsync(mainCustAccId, oldPassword, newPassword, null);
        }
        
        /// <remarks/>
        public void ChangeCustPasswordAsync(string mainCustAccId, string oldPassword, string newPassword, object userState) {
            if ((this.ChangeCustPasswordOperationCompleted == null)) {
                this.ChangeCustPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeCustPasswordOperationCompleted);
            }
            this.InvokeAsync("ChangeCustPassword", new object[] {
                        mainCustAccId,
                        oldPassword,
                        newPassword}, this.ChangeCustPasswordOperationCompleted, userState);
        }
        
        private void OnChangeCustPasswordOperationCompleted(object arg) {
            if ((this.ChangeCustPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeCustPasswordCompleted(this, new ChangeCustPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ChangeCustPin", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ChangeCustPin(string mainCustAccId, string oldPin, string newPin) {
            object[] results = this.Invoke("ChangeCustPin", new object[] {
                        mainCustAccId,
                        oldPin,
                        newPin});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeCustPinAsync(string mainCustAccId, string oldPin, string newPin) {
            this.ChangeCustPinAsync(mainCustAccId, oldPin, newPin, null);
        }
        
        /// <remarks/>
        public void ChangeCustPinAsync(string mainCustAccId, string oldPin, string newPin, object userState) {
            if ((this.ChangeCustPinOperationCompleted == null)) {
                this.ChangeCustPinOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeCustPinOperationCompleted);
            }
            this.InvokeAsync("ChangeCustPin", new object[] {
                        mainCustAccId,
                        oldPin,
                        newPin}, this.ChangeCustPinOperationCompleted, userState);
        }
        
        private void OnChangeCustPinOperationCompleted(object arg) {
            if ((this.ChangeCustPinCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeCustPinCompleted(this, new ChangeCustPinCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateOpenCustAccount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CreateOpenCustAccount(
                    string cardId, 
                    System.DateTime cardIssue, 
                    string placeIssue, 
                    string name, 
                    System.DateTime birthday, 
                    bool sex, 
                    string occupation, 
                    string nationality, 
                    string address1, 
                    string telephone1, 
                    string fax1, 
                    string address2, 
                    string telephone2, 
                    string fax2, 
                    string address3, 
                    string telephone3, 
                    string fax3, 
                    string email, 
                    string branchCode, 
                    string branchName, 
                    bool custodian, 
                    string customerType, 
                    bool tradeAtCompany, 
                    bool tradeByTelephone, 
                    bool tradeOnline, 
                    bool existedAccount) {
            object[] results = this.Invoke("CreateOpenCustAccount", new object[] {
                        cardId,
                        cardIssue,
                        placeIssue,
                        name,
                        birthday,
                        sex,
                        occupation,
                        nationality,
                        address1,
                        telephone1,
                        fax1,
                        address2,
                        telephone2,
                        fax2,
                        address3,
                        telephone3,
                        fax3,
                        email,
                        branchCode,
                        branchName,
                        custodian,
                        customerType,
                        tradeAtCompany,
                        tradeByTelephone,
                        tradeOnline,
                        existedAccount});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateOpenCustAccountAsync(
                    string cardId, 
                    System.DateTime cardIssue, 
                    string placeIssue, 
                    string name, 
                    System.DateTime birthday, 
                    bool sex, 
                    string occupation, 
                    string nationality, 
                    string address1, 
                    string telephone1, 
                    string fax1, 
                    string address2, 
                    string telephone2, 
                    string fax2, 
                    string address3, 
                    string telephone3, 
                    string fax3, 
                    string email, 
                    string branchCode, 
                    string branchName, 
                    bool custodian, 
                    string customerType, 
                    bool tradeAtCompany, 
                    bool tradeByTelephone, 
                    bool tradeOnline, 
                    bool existedAccount) {
            this.CreateOpenCustAccountAsync(cardId, cardIssue, placeIssue, name, birthday, sex, occupation, nationality, address1, telephone1, fax1, address2, telephone2, fax2, address3, telephone3, fax3, email, branchCode, branchName, custodian, customerType, tradeAtCompany, tradeByTelephone, tradeOnline, existedAccount, null);
        }
        
        /// <remarks/>
        public void CreateOpenCustAccountAsync(
                    string cardId, 
                    System.DateTime cardIssue, 
                    string placeIssue, 
                    string name, 
                    System.DateTime birthday, 
                    bool sex, 
                    string occupation, 
                    string nationality, 
                    string address1, 
                    string telephone1, 
                    string fax1, 
                    string address2, 
                    string telephone2, 
                    string fax2, 
                    string address3, 
                    string telephone3, 
                    string fax3, 
                    string email, 
                    string branchCode, 
                    string branchName, 
                    bool custodian, 
                    string customerType, 
                    bool tradeAtCompany, 
                    bool tradeByTelephone, 
                    bool tradeOnline, 
                    bool existedAccount, 
                    object userState) {
            if ((this.CreateOpenCustAccountOperationCompleted == null)) {
                this.CreateOpenCustAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateOpenCustAccountOperationCompleted);
            }
            this.InvokeAsync("CreateOpenCustAccount", new object[] {
                        cardId,
                        cardIssue,
                        placeIssue,
                        name,
                        birthday,
                        sex,
                        occupation,
                        nationality,
                        address1,
                        telephone1,
                        fax1,
                        address2,
                        telephone2,
                        fax2,
                        address3,
                        telephone3,
                        fax3,
                        email,
                        branchCode,
                        branchName,
                        custodian,
                        customerType,
                        tradeAtCompany,
                        tradeByTelephone,
                        tradeOnline,
                        existedAccount}, this.CreateOpenCustAccountOperationCompleted, userState);
        }
        
        private void OnCreateOpenCustAccountOperationCompleted(object arg) {
            if ((this.CreateOpenCustAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateOpenCustAccountCompleted(this, new CreateOpenCustAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateOpenCustAccount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateOpenCustAccount(
                    string openId, 
                    string cardId, 
                    System.DateTime cardIssue, 
                    string placeIssue, 
                    string name, 
                    System.DateTime birthday, 
                    bool sex, 
                    string occupation, 
                    string nationality, 
                    string address1, 
                    string telephone1, 
                    string fax1, 
                    string address2, 
                    string telephone2, 
                    string fax2, 
                    string address3, 
                    string telephone3, 
                    string fax3, 
                    string email, 
                    string branchCode, 
                    string branchName, 
                    bool custodian, 
                    string customerType, 
                    bool tradeAtCompany, 
                    bool tradeByTelephone, 
                    bool tradeOnline, 
                    bool existedAccount) {
            object[] results = this.Invoke("UpdateOpenCustAccount", new object[] {
                        openId,
                        cardId,
                        cardIssue,
                        placeIssue,
                        name,
                        birthday,
                        sex,
                        occupation,
                        nationality,
                        address1,
                        telephone1,
                        fax1,
                        address2,
                        telephone2,
                        fax2,
                        address3,
                        telephone3,
                        fax3,
                        email,
                        branchCode,
                        branchName,
                        custodian,
                        customerType,
                        tradeAtCompany,
                        tradeByTelephone,
                        tradeOnline,
                        existedAccount});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateOpenCustAccountAsync(
                    string openId, 
                    string cardId, 
                    System.DateTime cardIssue, 
                    string placeIssue, 
                    string name, 
                    System.DateTime birthday, 
                    bool sex, 
                    string occupation, 
                    string nationality, 
                    string address1, 
                    string telephone1, 
                    string fax1, 
                    string address2, 
                    string telephone2, 
                    string fax2, 
                    string address3, 
                    string telephone3, 
                    string fax3, 
                    string email, 
                    string branchCode, 
                    string branchName, 
                    bool custodian, 
                    string customerType, 
                    bool tradeAtCompany, 
                    bool tradeByTelephone, 
                    bool tradeOnline, 
                    bool existedAccount) {
            this.UpdateOpenCustAccountAsync(openId, cardId, cardIssue, placeIssue, name, birthday, sex, occupation, nationality, address1, telephone1, fax1, address2, telephone2, fax2, address3, telephone3, fax3, email, branchCode, branchName, custodian, customerType, tradeAtCompany, tradeByTelephone, tradeOnline, existedAccount, null);
        }
        
        /// <remarks/>
        public void UpdateOpenCustAccountAsync(
                    string openId, 
                    string cardId, 
                    System.DateTime cardIssue, 
                    string placeIssue, 
                    string name, 
                    System.DateTime birthday, 
                    bool sex, 
                    string occupation, 
                    string nationality, 
                    string address1, 
                    string telephone1, 
                    string fax1, 
                    string address2, 
                    string telephone2, 
                    string fax2, 
                    string address3, 
                    string telephone3, 
                    string fax3, 
                    string email, 
                    string branchCode, 
                    string branchName, 
                    bool custodian, 
                    string customerType, 
                    bool tradeAtCompany, 
                    bool tradeByTelephone, 
                    bool tradeOnline, 
                    bool existedAccount, 
                    object userState) {
            if ((this.UpdateOpenCustAccountOperationCompleted == null)) {
                this.UpdateOpenCustAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateOpenCustAccountOperationCompleted);
            }
            this.InvokeAsync("UpdateOpenCustAccount", new object[] {
                        openId,
                        cardId,
                        cardIssue,
                        placeIssue,
                        name,
                        birthday,
                        sex,
                        occupation,
                        nationality,
                        address1,
                        telephone1,
                        fax1,
                        address2,
                        telephone2,
                        fax2,
                        address3,
                        telephone3,
                        fax3,
                        email,
                        branchCode,
                        branchName,
                        custodian,
                        customerType,
                        tradeAtCompany,
                        tradeByTelephone,
                        tradeOnline,
                        existedAccount}, this.UpdateOpenCustAccountOperationCompleted, userState);
        }
        
        private void OnUpdateOpenCustAccountOperationCompleted(object arg) {
            if ((this.UpdateOpenCustAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateOpenCustAccountCompleted(this, new UpdateOpenCustAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteOpenCustAccount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteOpenCustAccount(string openId) {
            object[] results = this.Invoke("DeleteOpenCustAccount", new object[] {
                        openId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteOpenCustAccountAsync(string openId) {
            this.DeleteOpenCustAccountAsync(openId, null);
        }
        
        /// <remarks/>
        public void DeleteOpenCustAccountAsync(string openId, object userState) {
            if ((this.DeleteOpenCustAccountOperationCompleted == null)) {
                this.DeleteOpenCustAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteOpenCustAccountOperationCompleted);
            }
            this.InvokeAsync("DeleteOpenCustAccount", new object[] {
                        openId}, this.DeleteOpenCustAccountOperationCompleted, userState);
        }
        
        private void OnDeleteOpenCustAccountOperationCompleted(object arg) {
            if ((this.DeleteOpenCustAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteOpenCustAccountCompleted(this, new DeleteOpenCustAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetOpenCustAccount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetOpenCustAccount(string openId) {
            object[] results = this.Invoke("GetOpenCustAccount", new object[] {
                        openId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetOpenCustAccountAsync(string openId) {
            this.GetOpenCustAccountAsync(openId, null);
        }
        
        /// <remarks/>
        public void GetOpenCustAccountAsync(string openId, object userState) {
            if ((this.GetOpenCustAccountOperationCompleted == null)) {
                this.GetOpenCustAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOpenCustAccountOperationCompleted);
            }
            this.InvokeAsync("GetOpenCustAccount", new object[] {
                        openId}, this.GetOpenCustAccountOperationCompleted, userState);
        }
        
        private void OnGetOpenCustAccountOperationCompleted(object arg) {
            if ((this.GetOpenCustAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOpenCustAccountCompleted(this, new GetOpenCustAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListOpenCustAccount", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetListOpenCustAccount(
                    string cardId, 
                    string cardIssue, 
                    string placeIssue, 
                    string name, 
                    string birthday, 
                    int sex, 
                    string occupation, 
                    string nationality, 
                    string address1, 
                    string telephone1, 
                    string fax1, 
                    string address2, 
                    string telephone2, 
                    string fax2, 
                    string address3, 
                    string telephone3, 
                    string fax3, 
                    string email, 
                    string branchCode, 
                    string branchName, 
                    int custodian, 
                    string customerType, 
                    int tradeAtCompany, 
                    int tradeByTelephone, 
                    int tradeOnline, 
                    int existedAccount, 
                    int pageIndex, 
                    int pageSize) {
            object[] results = this.Invoke("GetListOpenCustAccount", new object[] {
                        cardId,
                        cardIssue,
                        placeIssue,
                        name,
                        birthday,
                        sex,
                        occupation,
                        nationality,
                        address1,
                        telephone1,
                        fax1,
                        address2,
                        telephone2,
                        fax2,
                        address3,
                        telephone3,
                        fax3,
                        email,
                        branchCode,
                        branchName,
                        custodian,
                        customerType,
                        tradeAtCompany,
                        tradeByTelephone,
                        tradeOnline,
                        existedAccount,
                        pageIndex,
                        pageSize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetListOpenCustAccountAsync(
                    string cardId, 
                    string cardIssue, 
                    string placeIssue, 
                    string name, 
                    string birthday, 
                    int sex, 
                    string occupation, 
                    string nationality, 
                    string address1, 
                    string telephone1, 
                    string fax1, 
                    string address2, 
                    string telephone2, 
                    string fax2, 
                    string address3, 
                    string telephone3, 
                    string fax3, 
                    string email, 
                    string branchCode, 
                    string branchName, 
                    int custodian, 
                    string customerType, 
                    int tradeAtCompany, 
                    int tradeByTelephone, 
                    int tradeOnline, 
                    int existedAccount, 
                    int pageIndex, 
                    int pageSize) {
            this.GetListOpenCustAccountAsync(cardId, cardIssue, placeIssue, name, birthday, sex, occupation, nationality, address1, telephone1, fax1, address2, telephone2, fax2, address3, telephone3, fax3, email, branchCode, branchName, custodian, customerType, tradeAtCompany, tradeByTelephone, tradeOnline, existedAccount, pageIndex, pageSize, null);
        }
        
        /// <remarks/>
        public void GetListOpenCustAccountAsync(
                    string cardId, 
                    string cardIssue, 
                    string placeIssue, 
                    string name, 
                    string birthday, 
                    int sex, 
                    string occupation, 
                    string nationality, 
                    string address1, 
                    string telephone1, 
                    string fax1, 
                    string address2, 
                    string telephone2, 
                    string fax2, 
                    string address3, 
                    string telephone3, 
                    string fax3, 
                    string email, 
                    string branchCode, 
                    string branchName, 
                    int custodian, 
                    string customerType, 
                    int tradeAtCompany, 
                    int tradeByTelephone, 
                    int tradeOnline, 
                    int existedAccount, 
                    int pageIndex, 
                    int pageSize, 
                    object userState) {
            if ((this.GetListOpenCustAccountOperationCompleted == null)) {
                this.GetListOpenCustAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListOpenCustAccountOperationCompleted);
            }
            this.InvokeAsync("GetListOpenCustAccount", new object[] {
                        cardId,
                        cardIssue,
                        placeIssue,
                        name,
                        birthday,
                        sex,
                        occupation,
                        nationality,
                        address1,
                        telephone1,
                        fax1,
                        address2,
                        telephone2,
                        fax2,
                        address3,
                        telephone3,
                        fax3,
                        email,
                        branchCode,
                        branchName,
                        custodian,
                        customerType,
                        tradeAtCompany,
                        tradeByTelephone,
                        tradeOnline,
                        existedAccount,
                        pageIndex,
                        pageSize}, this.GetListOpenCustAccountOperationCompleted, userState);
        }
        
        private void OnGetListOpenCustAccountOperationCompleted(object arg) {
            if ((this.GetListOpenCustAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListOpenCustAccountCompleted(this, new GetListOpenCustAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListWorkingDays", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetListWorkingDays() {
            object[] results = this.Invoke("GetListWorkingDays", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetListWorkingDaysAsync() {
            this.GetListWorkingDaysAsync(null);
        }
        
        /// <remarks/>
        public void GetListWorkingDaysAsync(object userState) {
            if ((this.GetListWorkingDaysOperationCompleted == null)) {
                this.GetListWorkingDaysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListWorkingDaysOperationCompleted);
            }
            this.InvokeAsync("GetListWorkingDays", new object[0], this.GetListWorkingDaysOperationCompleted, userState);
        }
        
        private void OnGetListWorkingDaysOperationCompleted(object arg) {
            if ((this.GetListWorkingDaysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListWorkingDaysCompleted(this, new GetListWorkingDaysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateWorkingDays", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateWorkingDays(bool mondayStatus, bool tuesdayStatus, bool wednesdayStatus, bool thursdayStatus, bool fridayStatus, bool saturdayStatus, bool sundayStatus) {
            object[] results = this.Invoke("UpdateWorkingDays", new object[] {
                        mondayStatus,
                        tuesdayStatus,
                        wednesdayStatus,
                        thursdayStatus,
                        fridayStatus,
                        saturdayStatus,
                        sundayStatus});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateWorkingDaysAsync(bool mondayStatus, bool tuesdayStatus, bool wednesdayStatus, bool thursdayStatus, bool fridayStatus, bool saturdayStatus, bool sundayStatus) {
            this.UpdateWorkingDaysAsync(mondayStatus, tuesdayStatus, wednesdayStatus, thursdayStatus, fridayStatus, saturdayStatus, sundayStatus, null);
        }
        
        /// <remarks/>
        public void UpdateWorkingDaysAsync(bool mondayStatus, bool tuesdayStatus, bool wednesdayStatus, bool thursdayStatus, bool fridayStatus, bool saturdayStatus, bool sundayStatus, object userState) {
            if ((this.UpdateWorkingDaysOperationCompleted == null)) {
                this.UpdateWorkingDaysOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateWorkingDaysOperationCompleted);
            }
            this.InvokeAsync("UpdateWorkingDays", new object[] {
                        mondayStatus,
                        tuesdayStatus,
                        wednesdayStatus,
                        thursdayStatus,
                        fridayStatus,
                        saturdayStatus,
                        sundayStatus}, this.UpdateWorkingDaysOperationCompleted, userState);
        }
        
        private void OnUpdateWorkingDaysOperationCompleted(object arg) {
            if ((this.UpdateWorkingDaysCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateWorkingDaysCompleted(this, new UpdateWorkingDaysCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateHoliday", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateHoliday(string holiday, string note) {
            object[] results = this.Invoke("CreateHoliday", new object[] {
                        holiday,
                        note});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateHolidayAsync(string holiday, string note) {
            this.CreateHolidayAsync(holiday, note, null);
        }
        
        /// <remarks/>
        public void CreateHolidayAsync(string holiday, string note, object userState) {
            if ((this.CreateHolidayOperationCompleted == null)) {
                this.CreateHolidayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateHolidayOperationCompleted);
            }
            this.InvokeAsync("CreateHoliday", new object[] {
                        holiday,
                        note}, this.CreateHolidayOperationCompleted, userState);
        }
        
        private void OnCreateHolidayOperationCompleted(object arg) {
            if ((this.CreateHolidayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateHolidayCompleted(this, new CreateHolidayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateHoliday", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateHoliday(string holiday, string note) {
            object[] results = this.Invoke("UpdateHoliday", new object[] {
                        holiday,
                        note});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateHolidayAsync(string holiday, string note) {
            this.UpdateHolidayAsync(holiday, note, null);
        }
        
        /// <remarks/>
        public void UpdateHolidayAsync(string holiday, string note, object userState) {
            if ((this.UpdateHolidayOperationCompleted == null)) {
                this.UpdateHolidayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateHolidayOperationCompleted);
            }
            this.InvokeAsync("UpdateHoliday", new object[] {
                        holiday,
                        note}, this.UpdateHolidayOperationCompleted, userState);
        }
        
        private void OnUpdateHolidayOperationCompleted(object arg) {
            if ((this.UpdateHolidayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateHolidayCompleted(this, new UpdateHolidayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteHoliday", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteHoliday(string holiday) {
            object[] results = this.Invoke("DeleteHoliday", new object[] {
                        holiday});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteHolidayAsync(string holiday) {
            this.DeleteHolidayAsync(holiday, null);
        }
        
        /// <remarks/>
        public void DeleteHolidayAsync(string holiday, object userState) {
            if ((this.DeleteHolidayOperationCompleted == null)) {
                this.DeleteHolidayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteHolidayOperationCompleted);
            }
            this.InvokeAsync("DeleteHoliday", new object[] {
                        holiday}, this.DeleteHolidayOperationCompleted, userState);
        }
        
        private void OnDeleteHolidayOperationCompleted(object arg) {
            if ((this.DeleteHolidayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteHolidayCompleted(this, new DeleteHolidayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetHoliday", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetHoliday(string holiday) {
            object[] results = this.Invoke("GetHoliday", new object[] {
                        holiday});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetHolidayAsync(string holiday) {
            this.GetHolidayAsync(holiday, null);
        }
        
        /// <remarks/>
        public void GetHolidayAsync(string holiday, object userState) {
            if ((this.GetHolidayOperationCompleted == null)) {
                this.GetHolidayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetHolidayOperationCompleted);
            }
            this.InvokeAsync("GetHoliday", new object[] {
                        holiday}, this.GetHolidayOperationCompleted, userState);
        }
        
        private void OnGetHolidayOperationCompleted(object arg) {
            if ((this.GetHolidayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetHolidayCompleted(this, new GetHolidayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListHoliday", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetListHoliday(string fromDate, string toDate, int pageIndex, int pageSize) {
            object[] results = this.Invoke("GetListHoliday", new object[] {
                        fromDate,
                        toDate,
                        pageIndex,
                        pageSize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetListHolidayAsync(string fromDate, string toDate, int pageIndex, int pageSize) {
            this.GetListHolidayAsync(fromDate, toDate, pageIndex, pageSize, null);
        }
        
        /// <remarks/>
        public void GetListHolidayAsync(string fromDate, string toDate, int pageIndex, int pageSize, object userState) {
            if ((this.GetListHolidayOperationCompleted == null)) {
                this.GetListHolidayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListHolidayOperationCompleted);
            }
            this.InvokeAsync("GetListHoliday", new object[] {
                        fromDate,
                        toDate,
                        pageIndex,
                        pageSize}, this.GetListHolidayOperationCompleted, userState);
        }
        
        private void OnGetListHolidayOperationCompleted(object arg) {
            if ((this.GetListHolidayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListHolidayCompleted(this, new GetListHolidayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListConfiguration", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetListConfiguration() {
            object[] results = this.Invoke("GetListConfiguration", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetListConfigurationAsync() {
            this.GetListConfigurationAsync(null);
        }
        
        /// <remarks/>
        public void GetListConfigurationAsync(object userState) {
            if ((this.GetListConfigurationOperationCompleted == null)) {
                this.GetListConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListConfigurationOperationCompleted);
            }
            this.InvokeAsync("GetListConfiguration", new object[0], this.GetListConfigurationOperationCompleted, userState);
        }
        
        private void OnGetListConfigurationOperationCompleted(object arg) {
            if ((this.GetListConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListConfigurationCompleted(this, new GetListConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetConfiguration", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetConfiguration(string name) {
            object[] results = this.Invoke("GetConfiguration", new object[] {
                        name});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetConfigurationAsync(string name) {
            this.GetConfigurationAsync(name, null);
        }
        
        /// <remarks/>
        public void GetConfigurationAsync(string name, object userState) {
            if ((this.GetConfigurationOperationCompleted == null)) {
                this.GetConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetConfigurationOperationCompleted);
            }
            this.InvokeAsync("GetConfiguration", new object[] {
                        name}, this.GetConfigurationOperationCompleted, userState);
        }
        
        private void OnGetConfigurationOperationCompleted(object arg) {
            if ((this.GetConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetConfigurationCompleted(this, new GetConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateConfiguration", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateConfiguration(string name, string value) {
            object[] results = this.Invoke("CreateConfiguration", new object[] {
                        name,
                        value});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateConfigurationAsync(string name, string value) {
            this.CreateConfigurationAsync(name, value, null);
        }
        
        /// <remarks/>
        public void CreateConfigurationAsync(string name, string value, object userState) {
            if ((this.CreateConfigurationOperationCompleted == null)) {
                this.CreateConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateConfigurationOperationCompleted);
            }
            this.InvokeAsync("CreateConfiguration", new object[] {
                        name,
                        value}, this.CreateConfigurationOperationCompleted, userState);
        }
        
        private void OnCreateConfigurationOperationCompleted(object arg) {
            if ((this.CreateConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateConfigurationCompleted(this, new CreateConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateConfiguration", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateConfiguration(string name, string value) {
            object[] results = this.Invoke("UpdateConfiguration", new object[] {
                        name,
                        value});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateConfigurationAsync(string name, string value) {
            this.UpdateConfigurationAsync(name, value, null);
        }
        
        /// <remarks/>
        public void UpdateConfigurationAsync(string name, string value, object userState) {
            if ((this.UpdateConfigurationOperationCompleted == null)) {
                this.UpdateConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateConfigurationOperationCompleted);
            }
            this.InvokeAsync("UpdateConfiguration", new object[] {
                        name,
                        value}, this.UpdateConfigurationOperationCompleted, userState);
        }
        
        private void OnUpdateConfigurationOperationCompleted(object arg) {
            if ((this.UpdateConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateConfigurationCompleted(this, new UpdateConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteConfiguration", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteConfiguration(string name) {
            object[] results = this.Invoke("DeleteConfiguration", new object[] {
                        name});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteConfigurationAsync(string name) {
            this.DeleteConfigurationAsync(name, null);
        }
        
        /// <remarks/>
        public void DeleteConfigurationAsync(string name, object userState) {
            if ((this.DeleteConfigurationOperationCompleted == null)) {
                this.DeleteConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteConfigurationOperationCompleted);
            }
            this.InvokeAsync("DeleteConfiguration", new object[] {
                        name}, this.DeleteConfigurationOperationCompleted, userState);
        }
        
        private void OnDeleteConfigurationOperationCompleted(object arg) {
            if ((this.DeleteConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteConfigurationCompleted(this, new DeleteConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLisAdvanceTime", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLisAdvanceTime() {
            object[] results = this.Invoke("GetLisAdvanceTime", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLisAdvanceTimeAsync() {
            this.GetLisAdvanceTimeAsync(null);
        }
        
        /// <remarks/>
        public void GetLisAdvanceTimeAsync(object userState) {
            if ((this.GetLisAdvanceTimeOperationCompleted == null)) {
                this.GetLisAdvanceTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLisAdvanceTimeOperationCompleted);
            }
            this.InvokeAsync("GetLisAdvanceTime", new object[0], this.GetLisAdvanceTimeOperationCompleted, userState);
        }
        
        private void OnGetLisAdvanceTimeOperationCompleted(object arg) {
            if ((this.GetLisAdvanceTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLisAdvanceTimeCompleted(this, new GetLisAdvanceTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateAdvanceTime", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateAdvanceTime(object[] advanceTimeList) {
            object[] results = this.Invoke("UpdateAdvanceTime", new object[] {
                        advanceTimeList});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateAdvanceTimeAsync(object[] advanceTimeList) {
            this.UpdateAdvanceTimeAsync(advanceTimeList, null);
        }
        
        /// <remarks/>
        public void UpdateAdvanceTimeAsync(object[] advanceTimeList, object userState) {
            if ((this.UpdateAdvanceTimeOperationCompleted == null)) {
                this.UpdateAdvanceTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateAdvanceTimeOperationCompleted);
            }
            this.InvokeAsync("UpdateAdvanceTime", new object[] {
                        advanceTimeList}, this.UpdateAdvanceTimeOperationCompleted, userState);
        }
        
        private void OnUpdateAdvanceTimeOperationCompleted(object arg) {
            if ((this.UpdateAdvanceTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateAdvanceTimeCompleted(this, new UpdateAdvanceTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateFee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CreateFee(decimal minValue, decimal maxValue, decimal minFee, decimal feeRatio, int feeType, decimal vat) {
            object[] results = this.Invoke("CreateFee", new object[] {
                        minValue,
                        maxValue,
                        minFee,
                        feeRatio,
                        feeType,
                        vat});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void CreateFeeAsync(decimal minValue, decimal maxValue, decimal minFee, decimal feeRatio, int feeType, decimal vat) {
            this.CreateFeeAsync(minValue, maxValue, minFee, feeRatio, feeType, vat, null);
        }
        
        /// <remarks/>
        public void CreateFeeAsync(decimal minValue, decimal maxValue, decimal minFee, decimal feeRatio, int feeType, decimal vat, object userState) {
            if ((this.CreateFeeOperationCompleted == null)) {
                this.CreateFeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateFeeOperationCompleted);
            }
            this.InvokeAsync("CreateFee", new object[] {
                        minValue,
                        maxValue,
                        minFee,
                        feeRatio,
                        feeType,
                        vat}, this.CreateFeeOperationCompleted, userState);
        }
        
        private void OnCreateFeeOperationCompleted(object arg) {
            if ((this.CreateFeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateFeeCompleted(this, new CreateFeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateFee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateFee(int feeId, decimal minValue, decimal maxValue, decimal minFee, decimal feeRatio, int feeType, decimal vat) {
            object[] results = this.Invoke("UpdateFee", new object[] {
                        feeId,
                        minValue,
                        maxValue,
                        minFee,
                        feeRatio,
                        feeType,
                        vat});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateFeeAsync(int feeId, decimal minValue, decimal maxValue, decimal minFee, decimal feeRatio, int feeType, decimal vat) {
            this.UpdateFeeAsync(feeId, minValue, maxValue, minFee, feeRatio, feeType, vat, null);
        }
        
        /// <remarks/>
        public void UpdateFeeAsync(int feeId, decimal minValue, decimal maxValue, decimal minFee, decimal feeRatio, int feeType, decimal vat, object userState) {
            if ((this.UpdateFeeOperationCompleted == null)) {
                this.UpdateFeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFeeOperationCompleted);
            }
            this.InvokeAsync("UpdateFee", new object[] {
                        feeId,
                        minValue,
                        maxValue,
                        minFee,
                        feeRatio,
                        feeType,
                        vat}, this.UpdateFeeOperationCompleted, userState);
        }
        
        private void OnUpdateFeeOperationCompleted(object arg) {
            if ((this.UpdateFeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateFeeCompleted(this, new UpdateFeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteFee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteFee(int feeId) {
            object[] results = this.Invoke("DeleteFee", new object[] {
                        feeId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteFeeAsync(int feeId) {
            this.DeleteFeeAsync(feeId, null);
        }
        
        /// <remarks/>
        public void DeleteFeeAsync(int feeId, object userState) {
            if ((this.DeleteFeeOperationCompleted == null)) {
                this.DeleteFeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteFeeOperationCompleted);
            }
            this.InvokeAsync("DeleteFee", new object[] {
                        feeId}, this.DeleteFeeOperationCompleted, userState);
        }
        
        private void OnDeleteFeeOperationCompleted(object arg) {
            if ((this.DeleteFeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteFeeCompleted(this, new DeleteFeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListFee", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetListFee(int feeType) {
            object[] results = this.Invoke("GetListFee", new object[] {
                        feeType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetListFeeAsync(int feeType) {
            this.GetListFeeAsync(feeType, null);
        }
        
        /// <remarks/>
        public void GetListFeeAsync(int feeType, object userState) {
            if ((this.GetListFeeOperationCompleted == null)) {
                this.GetListFeeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListFeeOperationCompleted);
            }
            this.InvokeAsync("GetListFee", new object[] {
                        feeType}, this.GetListFeeOperationCompleted, userState);
        }
        
        private void OnGetListFeeOperationCompleted(object arg) {
            if ((this.GetListFeeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListFeeCompleted(this, new GetListFeeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateCashAdvance", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateCashAdvance(long id, decimal cashReceived, int status, string reason) {
            object[] results = this.Invoke("UpdateCashAdvance", new object[] {
                        id,
                        cashReceived,
                        status,
                        reason});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateCashAdvanceAsync(long id, decimal cashReceived, int status, string reason) {
            this.UpdateCashAdvanceAsync(id, cashReceived, status, reason, null);
        }
        
        /// <remarks/>
        public void UpdateCashAdvanceAsync(long id, decimal cashReceived, int status, string reason, object userState) {
            if ((this.UpdateCashAdvanceOperationCompleted == null)) {
                this.UpdateCashAdvanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCashAdvanceOperationCompleted);
            }
            this.InvokeAsync("UpdateCashAdvance", new object[] {
                        id,
                        cashReceived,
                        status,
                        reason}, this.UpdateCashAdvanceOperationCompleted, userState);
        }
        
        private void OnUpdateCashAdvanceOperationCompleted(object arg) {
            if ((this.UpdateCashAdvanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCashAdvanceCompleted(this, new UpdateCashAdvanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListCashAdvance", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetListCashAdvance(string subAccountId, string contractNo, int status, int tradeType, int pageIndex, int pageSize) {
            object[] results = this.Invoke("GetListCashAdvance", new object[] {
                        subAccountId,
                        contractNo,
                        status,
                        tradeType,
                        pageIndex,
                        pageSize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetListCashAdvanceAsync(string subAccountId, string contractNo, int status, int tradeType, int pageIndex, int pageSize) {
            this.GetListCashAdvanceAsync(subAccountId, contractNo, status, tradeType, pageIndex, pageSize, null);
        }
        
        /// <remarks/>
        public void GetListCashAdvanceAsync(string subAccountId, string contractNo, int status, int tradeType, int pageIndex, int pageSize, object userState) {
            if ((this.GetListCashAdvanceOperationCompleted == null)) {
                this.GetListCashAdvanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListCashAdvanceOperationCompleted);
            }
            this.InvokeAsync("GetListCashAdvance", new object[] {
                        subAccountId,
                        contractNo,
                        status,
                        tradeType,
                        pageIndex,
                        pageSize}, this.GetListCashAdvanceOperationCompleted, userState);
        }
        
        private void OnGetListCashAdvanceOperationCompleted(object arg) {
            if ((this.GetListCashAdvanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListCashAdvanceCompleted(this, new GetListCashAdvanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetListCashAdvanceHistory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetListCashAdvanceHistory(string subAccountId, string fromDate, string toDate, string contractNo, string sellDueDateFrom, string sellDueDateTo, int status, int tradeType, int pageIndex, int pageSize) {
            object[] results = this.Invoke("GetListCashAdvanceHistory", new object[] {
                        subAccountId,
                        fromDate,
                        toDate,
                        contractNo,
                        sellDueDateFrom,
                        sellDueDateTo,
                        status,
                        tradeType,
                        pageIndex,
                        pageSize});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetListCashAdvanceHistoryAsync(string subAccountId, string fromDate, string toDate, string contractNo, string sellDueDateFrom, string sellDueDateTo, int status, int tradeType, int pageIndex, int pageSize) {
            this.GetListCashAdvanceHistoryAsync(subAccountId, fromDate, toDate, contractNo, sellDueDateFrom, sellDueDateTo, status, tradeType, pageIndex, pageSize, null);
        }
        
        /// <remarks/>
        public void GetListCashAdvanceHistoryAsync(string subAccountId, string fromDate, string toDate, string contractNo, string sellDueDateFrom, string sellDueDateTo, int status, int tradeType, int pageIndex, int pageSize, object userState) {
            if ((this.GetListCashAdvanceHistoryOperationCompleted == null)) {
                this.GetListCashAdvanceHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetListCashAdvanceHistoryOperationCompleted);
            }
            this.InvokeAsync("GetListCashAdvanceHistory", new object[] {
                        subAccountId,
                        fromDate,
                        toDate,
                        contractNo,
                        sellDueDateFrom,
                        sellDueDateTo,
                        status,
                        tradeType,
                        pageIndex,
                        pageSize}, this.GetListCashAdvanceHistoryOperationCompleted, userState);
        }
        
        private void OnGetListCashAdvanceHistoryOperationCompleted(object arg) {
            if ((this.GetListCashAdvanceHistoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetListCashAdvanceHistoryCompleted(this, new GetListCashAdvanceHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void BrokerLoginCompletedEventHandler(object sender, BrokerLoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BrokerLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BrokerLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void BrokerLogoutCompletedEventHandler(object sender, BrokerLogoutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BrokerLogoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BrokerLogoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void CreateBrokerCompletedEventHandler(object sender, CreateBrokerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateBrokerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateBrokerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void UpdateBrokerCompletedEventHandler(object sender, UpdateBrokerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateBrokerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateBrokerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void ChangeBrokerPasswordCompletedEventHandler(object sender, ChangeBrokerPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeBrokerPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeBrokerPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void ActivateBrokerCompletedEventHandler(object sender, ActivateBrokerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivateBrokerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivateBrokerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetListBrokerCompletedEventHandler(object sender, GetListBrokerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListBrokerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListBrokerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetBrokerCompletedEventHandler(object sender, GetBrokerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetBrokerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetBrokerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetListBrokerPermissionCompletedEventHandler(object sender, GetListBrokerPermissionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListBrokerPermissionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListBrokerPermissionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void CreateMainCustomerCompletedEventHandler(object sender, CreateMainCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateMainCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateMainCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void CreateSubCustomerCompletedEventHandler(object sender, CreateSubCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateSubCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateSubCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void UpdateMainCustomerCompletedEventHandler(object sender, UpdateMainCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateMainCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateMainCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void UpdateSubCustomerCompletedEventHandler(object sender, UpdateSubCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateSubCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateSubCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void ActivateMainCustomerCompletedEventHandler(object sender, ActivateMainCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivateMainCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivateMainCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void ActivateSubCustomerCompletedEventHandler(object sender, ActivateSubCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ActivateSubCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ActivateSubCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetCustomerCompletedEventHandler(object sender, GetCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetCustomerNoSessionCompletedEventHandler(object sender, GetCustomerNoSessionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustomerNoSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustomerNoSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetMainCustAccountCompletedEventHandler(object sender, GetMainCustAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMainCustAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMainCustAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetSubCustAccountCompletedEventHandler(object sender, GetSubCustAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSubCustAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSubCustAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetListMainCustomerCompletedEventHandler(object sender, GetListMainCustomerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListMainCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListMainCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetCustInfoFromCoreCompletedEventHandler(object sender, GetCustInfoFromCoreCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCustInfoFromCoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCustInfoFromCoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GenerateCustPassCompletedEventHandler(object sender, GenerateCustPassCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenerateCustPassCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenerateCustPassCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GenerateCustPinCompletedEventHandler(object sender, GenerateCustPinCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenerateCustPinCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenerateCustPinCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetListCustServicePermissionCompletedEventHandler(object sender, GetListCustServicePermissionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListCustServicePermissionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListCustServicePermissionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void AuthenticateCustLogonCompletedEventHandler(object sender, AuthenticateCustLogonCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthenticateCustLogonCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthenticateCustLogonCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void SendMessageCompletedEventHandler(object sender, SendMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void ChangeCustPasswordCompletedEventHandler(object sender, ChangeCustPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeCustPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeCustPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void ChangeCustPinCompletedEventHandler(object sender, ChangeCustPinCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeCustPinCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeCustPinCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void CreateOpenCustAccountCompletedEventHandler(object sender, CreateOpenCustAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateOpenCustAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateOpenCustAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void UpdateOpenCustAccountCompletedEventHandler(object sender, UpdateOpenCustAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateOpenCustAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateOpenCustAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void DeleteOpenCustAccountCompletedEventHandler(object sender, DeleteOpenCustAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteOpenCustAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteOpenCustAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetOpenCustAccountCompletedEventHandler(object sender, GetOpenCustAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOpenCustAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOpenCustAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetListOpenCustAccountCompletedEventHandler(object sender, GetListOpenCustAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListOpenCustAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListOpenCustAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetListWorkingDaysCompletedEventHandler(object sender, GetListWorkingDaysCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListWorkingDaysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListWorkingDaysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void UpdateWorkingDaysCompletedEventHandler(object sender, UpdateWorkingDaysCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateWorkingDaysCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateWorkingDaysCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void CreateHolidayCompletedEventHandler(object sender, CreateHolidayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateHolidayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateHolidayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void UpdateHolidayCompletedEventHandler(object sender, UpdateHolidayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateHolidayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateHolidayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void DeleteHolidayCompletedEventHandler(object sender, DeleteHolidayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteHolidayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteHolidayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetHolidayCompletedEventHandler(object sender, GetHolidayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetHolidayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetHolidayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetListHolidayCompletedEventHandler(object sender, GetListHolidayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListHolidayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListHolidayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetListConfigurationCompletedEventHandler(object sender, GetListConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetConfigurationCompletedEventHandler(object sender, GetConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void CreateConfigurationCompletedEventHandler(object sender, CreateConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void UpdateConfigurationCompletedEventHandler(object sender, UpdateConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void DeleteConfigurationCompletedEventHandler(object sender, DeleteConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetLisAdvanceTimeCompletedEventHandler(object sender, GetLisAdvanceTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLisAdvanceTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLisAdvanceTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void UpdateAdvanceTimeCompletedEventHandler(object sender, UpdateAdvanceTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateAdvanceTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateAdvanceTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void CreateFeeCompletedEventHandler(object sender, CreateFeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateFeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateFeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void UpdateFeeCompletedEventHandler(object sender, UpdateFeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateFeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateFeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void DeleteFeeCompletedEventHandler(object sender, DeleteFeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteFeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteFeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetListFeeCompletedEventHandler(object sender, GetListFeeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListFeeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListFeeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void UpdateCashAdvanceCompletedEventHandler(object sender, UpdateCashAdvanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateCashAdvanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateCashAdvanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetListCashAdvanceCompletedEventHandler(object sender, GetListCashAdvanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListCashAdvanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListCashAdvanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    public delegate void GetListCashAdvanceHistoryCompletedEventHandler(object sender, GetListCashAdvanceHistoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.4927")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetListCashAdvanceHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetListCashAdvanceHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591