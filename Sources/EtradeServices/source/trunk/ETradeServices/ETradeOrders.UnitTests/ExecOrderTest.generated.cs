

/*
	File Generated by NetTiers templates [www.nettiers.com]
	Generated on : Monday, November 15, 2010
	Important: Do not modify this file. Edit the file ExecOrderTest.cs instead.
*/

#region Using directives

using System;
using System.Xml;
using System.Xml.Serialization;
using NUnit.Framework;
using ETradeOrders.Entities;
using ETradeOrders.DataAccess;
using ETradeOrders.DataAccess.Bases;

#endregion

namespace ETradeOrders.UnitTests
{
    /// <summary>
    /// Provides tests for the and <see cref="ExecOrder"/> objects (entity, collection and repository).
    /// </summary>
   public partial class ExecOrderTest
    {
    	// the ExecOrder instance used to test the repository.
		private ExecOrder mock;
		
		// the TList<ExecOrder> instance used to test the repository.
		private TList<ExecOrder> mockCollection;
		
		private static TransactionManager CreateTransaction()
		{
			TransactionManager transactionManager = null;
			if (DataRepository.Provider.IsTransactionSupported)
			{
				transactionManager = DataRepository.Provider.CreateTransaction();
				transactionManager.BeginTransaction(System.Data.IsolationLevel.ReadUncommitted);
			}			
			return transactionManager;
		}
		       
        /// <summary>
		/// This method is used to construct the test environment prior to running the tests.
		/// </summary>        
        static public void Init_Generated()
        {		
        	System.Console.WriteLine(new String('-', 75));
			System.Console.WriteLine("-- Testing the ExecOrder Entity with the {0} --", ETradeOrders.DataAccess.DataRepository.Provider.Name);
			System.Console.WriteLine(new String('-', 75));
        }
    
    	/// <summary>
		/// This method is used to restore the environment after the tests are completed.
		/// </summary>
		static public void CleanUp_Generated()
        {   		
			System.Console.WriteLine("All Tests Completed");
			System.Console.WriteLine();
        }
    
    
		/// <summary>
		/// Inserts a mock ExecOrder entity into the database.
		/// </summary>
		private void Step_01_Insert_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				mock = CreateMockInstance(tm);
				Assert.IsTrue(DataRepository.ExecOrderProvider.Insert(tm, mock), "Insert failed");
										
				System.Console.WriteLine("DataRepository.ExecOrderProvider.Insert(mock):");			
				System.Console.WriteLine(mock);			
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		
		
		/// <summary>
		/// Selects all ExecOrder objects of the database.
		/// </summary>
		private void Step_02_SelectAll_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				//Find
				int count = -1;
				
				mockCollection = DataRepository.ExecOrderProvider.Find(tm, null, "", 0, 10, out count );
				Assert.IsTrue(count >= 0 && mockCollection != null, "Query Failed to issue Find Command.");
				
				System.Console.WriteLine("DataRepository.ExecOrderProvider.Find():");			
				System.Console.WriteLine(mockCollection);
				
				// GetPaged
				count = -1;
				
				mockCollection = DataRepository.ExecOrderProvider.GetPaged(tm, 0, 10, out count);
				Assert.IsTrue(count >= 0 && mockCollection != null, "Query Failed to issue GetPaged Command.");
				System.Console.WriteLine("#get paged count: " + count.ToString());
			}
		}
		
		
		
		
		/// <summary>
		/// Deep load all ExecOrder children.
		/// </summary>
		private void Step_03_DeepLoad_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				int count = -1;
				mock =  CreateMockInstance(tm);
				mockCollection = DataRepository.ExecOrderProvider.GetPaged(tm, 0, 10, out count);
			
				DataRepository.ExecOrderProvider.DeepLoading += new EntityProviderBaseCore<ExecOrder, ExecOrderKey>.DeepLoadingEventHandler(
						delegate(object sender, DeepSessionEventArgs e)
						{
							if (e.DeepSession.Count > 3)
								e.Cancel = true;
						}
					);

				if (mockCollection.Count > 0)
				{
					
					DataRepository.ExecOrderProvider.DeepLoad(tm, mockCollection[0]);
					System.Console.WriteLine("ExecOrder instance correctly deep loaded at 1 level.");
									
					mockCollection.Add(mock);
					// DataRepository.ExecOrderProvider.DeepSave(tm, mockCollection);
				}
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		
		/// <summary>
		/// Updates a mock ExecOrder entity into the database.
		/// </summary>
		private void Step_04_Update_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				ExecOrder mock = CreateMockInstance(tm);
				Assert.IsTrue(DataRepository.ExecOrderProvider.Insert(tm, mock), "Insert failed");
				
				UpdateMockInstance(tm, mock);
				Assert.IsTrue(DataRepository.ExecOrderProvider.Update(tm, mock), "Update failed.");			
				
				System.Console.WriteLine("DataRepository.ExecOrderProvider.Update(mock):");			
				System.Console.WriteLine(mock);
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		
		
		/// <summary>
		/// Delete the mock ExecOrder entity into the database.
		/// </summary>
		private void Step_05_Delete_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				mock =  (ExecOrder)CreateMockInstance(tm);
				DataRepository.ExecOrderProvider.Insert(tm, mock);
			
				Assert.IsTrue(DataRepository.ExecOrderProvider.Delete(tm, mock), "Delete failed.");
				System.Console.WriteLine("DataRepository.ExecOrderProvider.Delete(mock):");			
				System.Console.WriteLine(mock);
				
				//normally one would commit here
				//tm.Commit();
				//IDisposable will Rollback Transaction since it's left uncommitted
			}
		}
		
		#region Serialization tests
		
		/// <summary>
		/// Serialize the mock ExecOrder entity into a temporary file.
		/// </summary>
		private void Step_06_SerializeEntity_Generated()
		{	
			using (TransactionManager tm = CreateTransaction())
			{
				mock =  CreateMockInstance(tm);
				string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_ExecOrder.xml");
			
				EntityHelper.SerializeXml(mock, fileName);
				Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock not found");
					
				System.Console.WriteLine("mock correctly serialized to a temporary file.");			
			}
		}
		
		/// <summary>
		/// Deserialize the mock ExecOrder entity from a temporary file.
		/// </summary>
		private void Step_07_DeserializeEntity_Generated()
		{
			string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_ExecOrder.xml");
			Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock file not found to deserialize");
			
			using (System.IO.StreamReader sr = System.IO.File.OpenText(fileName))
			{
				object item = EntityHelper.DeserializeEntityXml<ExecOrder>(sr.ReadToEnd());
				sr.Close();
			}
			System.IO.File.Delete(fileName);
			
			System.Console.WriteLine("mock correctly deserialized from a temporary file.");
		}
		
		/// <summary>
		/// Serialize a ExecOrder collection into a temporary file.
		/// </summary>
		private void Step_08_SerializeCollection_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_ExecOrderCollection.xml");
				
				mock = CreateMockInstance(tm);
				TList<ExecOrder> mockCollection = new TList<ExecOrder>();
				mockCollection.Add(mock);
			
				EntityHelper.SerializeXml(mockCollection, fileName);
				
				Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock collection not found");
				System.Console.WriteLine("TList<ExecOrder> correctly serialized to a temporary file.");					
			}
		}
		
		
		/// <summary>
		/// Deserialize a ExecOrder collection from a temporary file.
		/// </summary>
		private void Step_09_DeserializeCollection_Generated()
		{
			string fileName = System.IO.Path.Combine(System.IO.Path.GetTempPath(), "temp_ExecOrderCollection.xml");
			Assert.IsTrue(System.IO.File.Exists(fileName), "Serialized mock file not found to deserialize");
			
			XmlSerializer mySerializer = new XmlSerializer(typeof(TList<ExecOrder>)); 
			using (System.IO.FileStream myFileStream = new System.IO.FileStream(fileName,  System.IO.FileMode.Open))
			{
				TList<ExecOrder> mockCollection = (TList<ExecOrder>) mySerializer.Deserialize(myFileStream);
				myFileStream.Close();
			}
			
			System.IO.File.Delete(fileName);
			System.Console.WriteLine("TList<ExecOrder> correctly deserialized from a temporary file.");	
		}
		#endregion
		
		
		
		/// <summary>
		/// Check the foreign key dal methods.
		/// </summary>
		private void Step_10_FK_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				ExecOrder entity = CreateMockInstance(tm);
				bool result = DataRepository.ExecOrderProvider.Insert(tm, entity);
				
				Assert.IsTrue(result, "Could Not Test FK, Insert Failed");
				
				TList<ExecOrder> t0 = DataRepository.ExecOrderProvider.GetByConditionOrderId(tm, entity.ConditionOrderId, 0, 10);
				TList<ExecOrder> t1 = DataRepository.ExecOrderProvider.GetByQuickOrderId(tm, entity.QuickOrderId, 0, 10);
			}
		}
		
		
		/// <summary>
		/// Check the indexes dal methods.
		/// </summary>
		private void Step_11_IX_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				ExecOrder entity = CreateMockInstance(tm);
				bool result = DataRepository.ExecOrderProvider.Insert(tm, entity);
				
				Assert.IsTrue(result, "Could Not Test IX, Insert Failed");

			
				ExecOrder t0 = DataRepository.ExecOrderProvider.GetByOrderId(tm, entity.OrderId);
			}
		}
		
		/// <summary>
		/// Test methods exposed by the EntityHelper class.
		/// </summary>
		private void Step_20_TestEntityHelper_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				mock = CreateMockInstance(tm);
				
				ExecOrder entity = mock.Copy() as ExecOrder;
				entity = (ExecOrder)mock.Clone();
				Assert.IsTrue(ExecOrder.ValueEquals(entity, mock), "Clone is not working");
			}
		}
		
		/// <summary>
		/// Test Find using the Query class
		/// </summary>
		private void Step_30_TestFindByQuery_Generated()
		{
			using (TransactionManager tm = CreateTransaction())
			{
				//Insert Mock Instance
				ExecOrder mock = CreateMockInstance(tm);
				bool result = DataRepository.ExecOrderProvider.Insert(tm, mock);
				
				Assert.IsTrue(result, "Could Not Test FindByQuery, Insert Failed");

				ExecOrderQuery query = new ExecOrderQuery();
			
				if(mock.RefOrderId != null)
					query.AppendEquals(ExecOrderColumn.RefOrderId, mock.RefOrderId.ToString());
				if(mock.MessageType != null)
					query.AppendEquals(ExecOrderColumn.MessageType, mock.MessageType.ToString());
				if(mock.FisOrderId != null)
					query.AppendEquals(ExecOrderColumn.FisOrderId, mock.FisOrderId.ToString());
				query.AppendEquals(ExecOrderColumn.SecSymbol, mock.SecSymbol.ToString());
				query.AppendEquals(ExecOrderColumn.Side, mock.Side.ToString());
				query.AppendEquals(ExecOrderColumn.Price, mock.Price.ToString());
				if(mock.AvgPrice != null)
					query.AppendEquals(ExecOrderColumn.AvgPrice, mock.AvgPrice.ToString());
				if(mock.ConPrice != null)
					query.AppendEquals(ExecOrderColumn.ConPrice, mock.ConPrice.ToString());
				query.AppendEquals(ExecOrderColumn.Volume, mock.Volume.ToString());
				if(mock.ExecutedVol != null)
					query.AppendEquals(ExecOrderColumn.ExecutedVol, mock.ExecutedVol.ToString());
				if(mock.ExecutedPrice != null)
					query.AppendEquals(ExecOrderColumn.ExecutedPrice, mock.ExecutedPrice.ToString());
				if(mock.CancelVolume != null)
					query.AppendEquals(ExecOrderColumn.CancelVolume, mock.CancelVolume.ToString());
				if(mock.CancelledVolume != null)
					query.AppendEquals(ExecOrderColumn.CancelledVolume, mock.CancelledVolume.ToString());
				query.AppendEquals(ExecOrderColumn.SubCustAccountId, mock.SubCustAccountId.ToString());
				if(mock.ExecTransType != null)
					query.AppendEquals(ExecOrderColumn.ExecTransType, mock.ExecTransType.ToString());
				if(mock.TradeTime != null)
					query.AppendEquals(ExecOrderColumn.TradeTime, mock.TradeTime.ToString());
				if(mock.MatchedTime != null)
					query.AppendEquals(ExecOrderColumn.MatchedTime, mock.MatchedTime.ToString());
				if(mock.CancelledTime != null)
					query.AppendEquals(ExecOrderColumn.CancelledTime, mock.CancelledTime.ToString());
				if(mock.OrderStatus != null)
					query.AppendEquals(ExecOrderColumn.OrderStatus, mock.OrderStatus.ToString());
				if(mock.OrdRejReason != null)
					query.AppendEquals(ExecOrderColumn.OrdRejReason, mock.OrdRejReason.ToString());
				if(mock.ConfirmNo != null)
					query.AppendEquals(ExecOrderColumn.ConfirmNo, mock.ConfirmNo.ToString());
				if(mock.CancelledConfirmNo != null)
					query.AppendEquals(ExecOrderColumn.CancelledConfirmNo, mock.CancelledConfirmNo.ToString());
				if(mock.SourceId != null)
					query.AppendEquals(ExecOrderColumn.SourceId, mock.SourceId.ToString());
				if(mock.ExecType != null)
					query.AppendEquals(ExecOrderColumn.ExecType, mock.ExecType.ToString());
				if(mock.CancelledExecType != null)
					query.AppendEquals(ExecOrderColumn.CancelledExecType, mock.CancelledExecType.ToString());
				if(mock.PortOrClient != null)
					query.AppendEquals(ExecOrderColumn.PortOrClient, mock.PortOrClient.ToString());
				query.AppendEquals(ExecOrderColumn.Market, mock.Market.ToString());
				if(mock.MarketStatus != null)
					query.AppendEquals(ExecOrderColumn.MarketStatus, mock.MarketStatus.ToString());
				if(mock.OrderSource != null)
					query.AppendEquals(ExecOrderColumn.OrderSource, mock.OrderSource.ToString());
				if(mock.IsNewOrder != null)
					query.AppendEquals(ExecOrderColumn.IsNewOrder, mock.IsNewOrder.ToString());
				query.AppendEquals(ExecOrderColumn.Sequence, mock.Sequence.ToString());
				if(mock.NumOfMatch != null)
					query.AppendEquals(ExecOrderColumn.NumOfMatch, mock.NumOfMatch.ToString());
				
				TList<ExecOrder> results = DataRepository.ExecOrderProvider.Find(tm, query);
				
				Assert.IsTrue(results.Count == 1, "Find is not working correctly.  Failed to find the mock instance");
			}
		}
						
		#region Mock Instance
		///<summary>
		///  Returns a Typed ExecOrder Entity with mock values.
		///</summary>
		static public ExecOrder CreateMockInstance_Generated(TransactionManager tm)
		{		
			ExecOrder mock = new ExecOrder();
						
			mock.RefOrderId = TestUtility.Instance.RandomString(31, false);;
			mock.MessageType = TestUtility.Instance.RandomString(2, false);;
			mock.FisOrderId = TestUtility.Instance.RandomNumber();
			mock.SecSymbol = TestUtility.Instance.RandomString(8, false);;
			mock.Side = TestUtility.Instance.RandomString(1, false);;
			mock.Price = (decimal)TestUtility.Instance.RandomShort();
			mock.AvgPrice = (decimal)TestUtility.Instance.RandomShort();
			mock.ConPrice = TestUtility.Instance.RandomString(1, false);;
			mock.Volume = TestUtility.Instance.RandomNumber();
			mock.ExecutedVol = TestUtility.Instance.RandomNumber();
			mock.ExecutedPrice = (decimal)TestUtility.Instance.RandomShort();
			mock.CancelVolume = TestUtility.Instance.RandomNumber();
			mock.CancelledVolume = TestUtility.Instance.RandomNumber();
			mock.SubCustAccountId = TestUtility.Instance.RandomString(20, false);;
			mock.ExecTransType = TestUtility.Instance.RandomNumber();
			mock.TradeTime = TestUtility.Instance.RandomDateTime();
			mock.MatchedTime = TestUtility.Instance.RandomDateTime();
			mock.CancelledTime = TestUtility.Instance.RandomDateTime();
			mock.OrderStatus = TestUtility.Instance.RandomShort();
			mock.OrdRejReason = TestUtility.Instance.RandomNumber();
			mock.ConfirmNo = TestUtility.Instance.RandomString(6, false);;
			mock.CancelledConfirmNo = TestUtility.Instance.RandomString(6, false);;
			mock.SourceId = TestUtility.Instance.RandomShort();
			mock.ExecType = TestUtility.Instance.RandomString(1, false);;
			mock.CancelledExecType = TestUtility.Instance.RandomString(1, false);;
			mock.PortOrClient = TestUtility.Instance.RandomString(1, false);;
			mock.Market = TestUtility.Instance.RandomString(1, false);;
			mock.MarketStatus = TestUtility.Instance.RandomString(1, false);;
			mock.OrderSource = TestUtility.Instance.RandomString(1, false);;
			mock.IsNewOrder = TestUtility.Instance.RandomBoolean();
			mock.Sequence = TestUtility.Instance.RandomNumber();
			mock.NumOfMatch = TestUtility.Instance.RandomNumber();
			
			//OneToOneRelationship
			ConditionOrder mockConditionOrderByConditionOrderId = ConditionOrderTest.CreateMockInstance(tm);
			DataRepository.ConditionOrderProvider.Insert(tm, mockConditionOrderByConditionOrderId);
			mock.ConditionOrderId = mockConditionOrderByConditionOrderId.ConditionOrderId;
			//OneToOneRelationship
			QuickOrder mockQuickOrderByQuickOrderId = QuickOrderTest.CreateMockInstance(tm);
			DataRepository.QuickOrderProvider.Insert(tm, mockQuickOrderByQuickOrderId);
			mock.QuickOrderId = mockQuickOrderByQuickOrderId.QuickOrderId;
		
			// create a temporary collection and add the item to it
			TList<ExecOrder> tempMockCollection = new TList<ExecOrder>();
			tempMockCollection.Add(mock);
			tempMockCollection.Remove(mock);
			
		
		   return (ExecOrder)mock;
		}
		
		
		///<summary>
		///  Update the Typed ExecOrder Entity with modified mock values.
		///</summary>
		static public void UpdateMockInstance_Generated(TransactionManager tm, ExecOrder mock)
		{
			mock.RefOrderId = TestUtility.Instance.RandomString(31, false);;
			mock.MessageType = TestUtility.Instance.RandomString(2, false);;
			mock.FisOrderId = TestUtility.Instance.RandomNumber();
			mock.SecSymbol = TestUtility.Instance.RandomString(8, false);;
			mock.Side = TestUtility.Instance.RandomString(1, false);;
			mock.Price = (decimal)TestUtility.Instance.RandomShort();
			mock.AvgPrice = (decimal)TestUtility.Instance.RandomShort();
			mock.ConPrice = TestUtility.Instance.RandomString(1, false);;
			mock.Volume = TestUtility.Instance.RandomNumber();
			mock.ExecutedVol = TestUtility.Instance.RandomNumber();
			mock.ExecutedPrice = (decimal)TestUtility.Instance.RandomShort();
			mock.CancelVolume = TestUtility.Instance.RandomNumber();
			mock.CancelledVolume = TestUtility.Instance.RandomNumber();
			mock.SubCustAccountId = TestUtility.Instance.RandomString(20, false);;
			mock.ExecTransType = TestUtility.Instance.RandomNumber();
			mock.TradeTime = TestUtility.Instance.RandomDateTime();
			mock.MatchedTime = TestUtility.Instance.RandomDateTime();
			mock.CancelledTime = TestUtility.Instance.RandomDateTime();
			mock.OrderStatus = TestUtility.Instance.RandomShort();
			mock.OrdRejReason = TestUtility.Instance.RandomNumber();
			mock.ConfirmNo = TestUtility.Instance.RandomString(6, false);;
			mock.CancelledConfirmNo = TestUtility.Instance.RandomString(6, false);;
			mock.SourceId = TestUtility.Instance.RandomShort();
			mock.ExecType = TestUtility.Instance.RandomString(1, false);;
			mock.CancelledExecType = TestUtility.Instance.RandomString(1, false);;
			mock.PortOrClient = TestUtility.Instance.RandomString(1, false);;
			mock.Market = TestUtility.Instance.RandomString(1, false);;
			mock.MarketStatus = TestUtility.Instance.RandomString(1, false);;
			mock.OrderSource = TestUtility.Instance.RandomString(1, false);;
			mock.IsNewOrder = TestUtility.Instance.RandomBoolean();
			mock.Sequence = TestUtility.Instance.RandomNumber();
			mock.NumOfMatch = TestUtility.Instance.RandomNumber();
			
			//OneToOneRelationship
			ConditionOrder mockConditionOrderByConditionOrderId = ConditionOrderTest.CreateMockInstance(tm);
			DataRepository.ConditionOrderProvider.Insert(tm, mockConditionOrderByConditionOrderId);
			mock.ConditionOrderId = mockConditionOrderByConditionOrderId.ConditionOrderId;
					
			//OneToOneRelationship
			QuickOrder mockQuickOrderByQuickOrderId = QuickOrderTest.CreateMockInstance(tm);
			DataRepository.QuickOrderProvider.Insert(tm, mockQuickOrderByQuickOrderId);
			mock.QuickOrderId = mockQuickOrderByQuickOrderId.QuickOrderId;
					
		}
		#endregion
    }
}
