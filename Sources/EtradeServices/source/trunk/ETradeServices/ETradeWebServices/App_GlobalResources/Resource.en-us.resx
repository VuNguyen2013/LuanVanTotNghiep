<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BUY" xml:space="preserve">
    <value>Buy</value>
  </data>
  <data name="ERROR_ACCOUNT_NOT_BUY_PERMISSION" xml:space="preserve">
    <value>Your account is not allowed to buy this stock.</value>
  </data>
  <data name="ERROR_ACCOUNT_NOT_SELL_PERMISSION" xml:space="preserve">
    <value>Your account is not allowed to sell this stock.</value>
  </data>
  <data name="ERROR_ACCOUNT_NOT_TRADE_PERMISSION" xml:space="preserve">
    <value>Your account is not allowed to trade this stock.</value>
  </data>
  <data name="ERROR_DEFAULT" xml:space="preserve">
    <value>Please contact {0} for details.</value>
  </data>
  <data name="ERROR_HNX_NOT_USE_ATO_ATC" xml:space="preserve">
    <value>ATO or ATC order is not allowed on HNX security exchange.</value>
  </data>
  <data name="ERROR_LOCK_ACCOUNT" xml:space="preserve">
    <value>Your account is locked.</value>
  </data>
  <data name="ERROR_MARKET_CLOSE" xml:space="preserve">
    <value>Market {0} closed.</value>
  </data>
  <data name="ERROR_NOT_AVAILABLE_STOCK" xml:space="preserve">
    <value>Stock is not available to trade.</value>
  </data>
  <data name="ERROR_PRICE_NOT_MULTIPLE_1000_FOR_HOSE" xml:space="preserve">
    <value>Trading value is not matched with price step.</value>
  </data>
  <data name="ERROR_PRICE_NOT_MULTIPLE_100_FOR_HNX" xml:space="preserve">
    <value>Trading value is not matched with price step.</value>
  </data>
  <data name="ERROR_PRICE_NOT_MULTIPLE_100_FOR_HOSE" xml:space="preserve">
    <value>Trading value is not matched with price step.</value>
  </data>
  <data name="ERROR_PRICE_NOT_MULTIPLE_100_FOR_UPCOM" xml:space="preserve">
    <value>Trading value is not matched with price step.</value>
  </data>
  <data name="ERROR_PRICE_NOT_MULTIPLE_500_FOR_HOSE" xml:space="preserve">
    <value>Trading value is not matched with price step.</value>
  </data>
  <data name="ERROR_UPCOM_NOT_USE_ATO_ATC" xml:space="preserve">
    <value>ATO or ATC order is not allowed on UPCOM security exchange.</value>
  </data>
  <data name="INCORRECT_SIDE" xml:space="preserve">
    <value>Only Buy or Sell is allowed.</value>
  </data>
  <data name="INCORRECT_STOCK" xml:space="preserve">
    <value>Stock {0} doesn't exist.</value>
  </data>
  <data name="INCORRECT_VOL" xml:space="preserve">
    <value>Volume {0} is incorrect.</value>
  </data>
  <data name="MarketAlert_NotReady" xml:space="preserve">
    <value>System is not ready accept order for market {0}</value>
  </data>
  <data name="MarketAlert_Ready" xml:space="preserve">
    <value>System is ready accept advance order for market {0}</value>
  </data>
  <data name="MarketAlert_RejectATC" xml:space="preserve">
    <value>System is changing to session 3, stop accepting ATO delete order for market {0}</value>
  </data>
  <data name="MarketAlert_RejectATO" xml:space="preserve">
    <value>System is changing to session 2, stop accepting ATO order for market {0}</value>
  </data>
  <data name="MarketAlert_RejectMatched" xml:space="preserve">
    <value>System is changing to matched session, stop accepting order for market {0}</value>
  </data>
  <data name="MarketAlert_RejectResttime" xml:space="preserve">
    <value>System is changing to rest session, stop accepting order for market {0}</value>
  </data>
  <data name="MarketStatusATORejectMessage" xml:space="preserve">
    <value>Market is in the Session 2. No ATO order is accepted.</value>
  </data>
  <data name="MarketStatusReadyMessage" xml:space="preserve">
    <value>System is ready to receive orders.</value>
  </data>
  <data name="MarketStatusRejectMessage" xml:space="preserve">
    <value>Market is closed. No order is accepted.</value>
  </data>
  <data name="MarketStatus_Close" xml:space="preserve">
    <value>Close</value>
  </data>
  <data name="MarketStatus_CloseAfter" xml:space="preserve">
    <value>After close</value>
  </data>
  <data name="MarketStatus_Deal" xml:space="preserve">
    <value>Put through</value>
  </data>
  <data name="MarketStatus_Open" xml:space="preserve">
    <value>Open</value>
  </data>
  <data name="MarketStatus_Ready" xml:space="preserve">
    <value>Alredy open</value>
  </data>
  <data name="MarketStatus_Session1" xml:space="preserve">
    <value>Session ATO</value>
  </data>
  <data name="MarketStatus_Session2" xml:space="preserve">
    <value>Session 2</value>
  </data>
  <data name="MarketStatus_Session3" xml:space="preserve">
    <value>Session ATC</value>
  </data>
  <data name="MarketStatus_Unavailable" xml:space="preserve">
    <value>---</value>
  </data>
  <data name="NOTICE_ADVANCE_ORDER" xml:space="preserve">
    <value>{0}'s advance order notice:</value>
  </data>
  <data name="NOT_BUY_SELL_THE_SAME_STOCK" xml:space="preserve">
    <value>Do not allow to buy and sell the same stock.</value>
  </data>
  <data name="NOT_ENOUGH_CASH" xml:space="preserve">
    <value>Your account has not enough cash.</value>
  </data>
  <data name="NOT_ENOUGH_STOCK" xml:space="preserve">
    <value>Your account has not enough stocks.</value>
  </data>
  <data name="OVER_MAX_VOL" xml:space="preserve">
    <value>Trading volume is higher than maximum allowed volume.</value>
  </data>
  <data name="OVER_REMAIN_VOLUME" xml:space="preserve">
    <value>Trading value is higher than maximum allowed value.</value>
  </data>
  <data name="PLEASE_CHECK_AGAIN" xml:space="preserve">
    <value>Please check again.</value>
  </data>
  <data name="PRICE_ABOVE_CEILING" xml:space="preserve">
    <value>Stock price is higher than ceiling price.</value>
  </data>
  <data name="PRICE_BELOW_FLOOR" xml:space="preserve">
    <value>Stock price is lower than floor price.</value>
  </data>
  <data name="PUT_ORDER_NO_RESPONSE" xml:space="preserve">
    <value>TCSC report: Account {0}'s advance order {1} {2}, VOL {3}, VAL {4}  received no confirmation.</value>
  </data>
  <data name="PUT_ORDER_SUCCESS" xml:space="preserve">
    <value>TCSC report: Account {0}'s advance order {1} {2}, VOL {3}, VAL {4} was sent successfully.</value>
  </data>
  <data name="PUT_ORDER_UNSUCCESS" xml:space="preserve">
    <value>TCSC report: Account {0}'s advance order {1} {2}, VOL {3}, VAL {4} wasn't sent successfully.</value>
  </data>
  <data name="SELL" xml:space="preserve">
    <value>Sell</value>
  </data>
  <data name="SMS_CASH_TRANSFER" xml:space="preserve">
    <value>There is new cash advance order from account {0}.</value>
  </data>
  <data name="STOCK_IS_HALT" xml:space="preserve">
    <value>Stock {0} is halted.</value>
  </data>
</root>