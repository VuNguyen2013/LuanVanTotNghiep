<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ETradeOrders.Services</name>
    </assembly>
    <members>
        <member name="T:ETradeOrders.Services.IConnectionScope">
            <summary>
            Connection Scope Interface
            </summary>
        </member>
        <member name="P:ETradeOrders.Services.IConnectionScope.ConnectionStringKey">
            <summary>
            Gets or sets the connection string key.
            </summary>
            <value>The connection string key.</value>
        </member>
        <member name="P:ETradeOrders.Services.IConnectionScope.DataProvider">
            <summary>
            Gets or sets the data provider.
            </summary>
            <value>The data provider.</value>
        </member>
        <member name="P:ETradeOrders.Services.IConnectionScope.DynamicConnectionString">
            <summary>
            Gets or sets the dynamic connection string.
            </summary>
            <value>The dynamic connection string.</value>
        </member>
        <member name="P:ETradeOrders.Services.IConnectionScope.HasTransaction">
            <summary>
            Gets a value indicating whether this instance has transaction.
            </summary>
            <value>
            	<c>true</c> if this instance has transaction; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ETradeOrders.Services.IConnectionScope.TransactionManager">
            <summary>
            Gets or sets the transaction manager.
            </summary>
            <value>The transaction manager.</value>
        </member>
        <member name="T:ETradeOrders.Services.ContextView`2">
            <summary>
            Used to create a general view of the current context.  
            Useful for firing events and giving the UI a picture of 
            current State of Operation.
            </summary>
            <typeparam name="Entity">The Entity object</typeparam>
            <typeparam name="Domain">Type that holds </typeparam>
        </member>
        <member name="M:ETradeOrders.Services.ContextView`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:ETradeOrders.Services.ContextView`2"/> class.
            </summary>
        </member>
        <member name="M:ETradeOrders.Services.ContextView`2.#ctor(`0,ETradeOrders.Services.SecurityContext{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ETradeOrders.Services.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
        </member>
        <member name="M:ETradeOrders.Services.ContextView`2.#ctor(`0,ETradeOrders.Services.SecurityContext{`0},ETradeOrders.DataAccess.TransactionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:ETradeOrders.Services.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
            <param name="transactionManager">The transaction manager.</param>
        </member>
        <member name="P:ETradeOrders.Services.ContextView`2.PersistingObject">
            <summary>
            Gets or sets the persisting object.
            </summary>
            <value>The persisting object.</value>
        </member>
        <member name="P:ETradeOrders.Services.ContextView`2.SecurityContext">
            <summary>
            Gets or sets the security context.
            </summary>
            <value>The security context.</value>
        </member>
        <member name="P:ETradeOrders.Services.ContextView`2.TransactionManager">
            <summary>
            Gets or sets the transaction manager.
            </summary>
            <value>The transaction manager.</value>
        </member>
        <member name="T:ETradeOrders.Services.ExecOrderService">
            <summary>
            An component type implementation of the 'ExecOrder' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:ETradeOrders.Services.ExecOrderServiceBase">
            <summary>
             An object representation of the 'ExecOrder' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ExecOrder.cs file instead.
             All custom implementations should be done in the <see cref="T:ETradeOrders.Entities.ExecOrder"/> class.
             </remarks>
        </member>
        <member name="T:ETradeOrders.Services.ServiceBase`2">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:ETradeOrders.Services.ServiceBaseCore`2">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:ETradeOrders.Services.IComponentService">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="P:ETradeOrders.Services.IComponentService.ProcessorList">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:ETradeOrders.Services.IComponentService.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:ETradeOrders.Services.IComponentService.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="E:ETradeOrders.Services.IComponentService.ProcessStarting">
            <summary>
            Event to indicate that a processor is about to begin.
            </summary>
        </member>
        <member name="E:ETradeOrders.Services.IComponentService.ProcessEnded">
            <summary>
            Event to indicate that a processor has just ended.
            </summary>
        </member>
        <member name="M:ETradeOrders.Services.ServiceBaseCore`2.OnProcessStarting(ETradeOrders.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:ETradeOrders.Services.ServiceBaseCore`2.OnProcessEnded(ETradeOrders.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:ETradeOrders.Services.ServiceBaseCore`2.Execute">
             <summary>
            	Provides the beginning
             <remarks>
             If no AbortIfFailure parameter is passed then the process will not abort if there is a failure
             </remarks>
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:ETradeOrders.Services.ServiceBaseCore`2.Execute(System.Boolean)">
             <summary>
            	Executes the processors in the processor list
             <remarks>
             If abortIfFailure is set to true then the execution will halt on the first failure
            </remarks>
             </summary>
        </member>
        <member name="M:ETradeOrders.Services.ServiceBaseCore`2.Get(`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ServiceBaseCore`2.GetAll">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ServiceBaseCore`2.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ServiceBaseCore`2.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ServiceBaseCore`2.Insert(`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ServiceBaseCore`2.BulkInsert(ETradeOrders.Entities.TList{`0})">
            <summary>
            Efficiently inserts multiple rows into the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to insert.</param>
        </member>
        <member name="M:ETradeOrders.Services.ServiceBaseCore`2.Update(`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ServiceBaseCore`2.Delete(`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ServiceBaseCore`2.Save(`0)">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:ETradeOrders.Services.ServiceBaseCore`2.DeepLoad(`0,System.Boolean,ETradeOrders.DataAccess.DeepLoadType,System.Type[],ETradeOrders.DataAccess.Bases.DeepSession)">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
            <param name="innerList">A collection of child types for easy access.</param>
        </member>
        <member name="M:ETradeOrders.Services.ServiceBaseCore`2.DeepLoad(ETradeOrders.Entities.TList{`0},System.Boolean,ETradeOrders.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ETradeOrders.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:ETradeOrders.Services.ServiceBaseCore`2.DeepSave(`0)">
            <summary>
            Deep Save the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:ETradeOrders.Services.ServiceBaseCore`2.DeepSave(`0,ETradeOrders.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:ETradeOrders.Services.ServiceBaseCore`2.DeepSave(`0,ETradeOrders.DataAccess.DeepSaveType,System.Type[],System.Collections.Hashtable)">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep save functionality.
            </remarks>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="M:ETradeOrders.Services.ServiceBaseCore`2.DeepSave(ETradeOrders.Entities.TList{`0},ETradeOrders.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="P:ETradeOrders.Services.ServiceBaseCore`2.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:ETradeOrders.Services.ServiceBaseCore`2.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:ETradeOrders.Services.ServiceBaseCore`2.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:ETradeOrders.Services.ServiceBaseCore`2.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:ETradeOrders.Services.ServiceBaseCore`2.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:ETradeOrders.Services.ServiceBaseCore`2.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:ETradeOrders.Services.ServiceBaseCore`2.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:ETradeOrders.Services.ServiceBaseCore`2.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:ETradeOrders.Services.ServiceBaseCore`2.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ETradeOrders.Entities.ExecOrder"/> instance .
            </summary>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.CreateExecOrder(System.String,System.String,System.Nullable{System.Int32},System.String,System.String,System.Decimal,System.Nullable{System.Decimal},System.String,System.Int32,System.Nullable{System.Int32},System.Nullable{System.Decimal},System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.Nullable{System.Int32},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Nullable{System.Int16},System.Nullable{System.Int32},System.String,System.String,System.Nullable{System.Int16},System.String,System.String,System.String,System.String,System.String,System.String,System.Nullable{System.Boolean},System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int64})">
            <summary>
             A simple factory method to create a new <see cref="T:ETradeOrders.Entities.ExecOrder"/> instance.
            </summary>
            <param name="_refOrderId">ID cua order duoc tao ra boi GW</param>
            <param name="_messageType">Loai cua message (7a = new order, 7b = ack, 7e = lenh da thuc thi, 7c = cancel order, 6a = order tu broker, 7d = change order, 6d = change tu broker, 3D = cancel deal )</param>
            <param name="_fisOrderId">order id sinh ra tu FIS</param>
            <param name="_secSymbol">Ma chung khoan</param>
            <param name="_side">B = Mua, S = Ban</param>
            <param name="_price">Gia chung khoan</param>
            <param name="_avgPrice">Gia trung binh</param>
            <param name="_conPrice">Dieu kien lenh, A = preOpen, C = closeOpen</param>
            <param name="_volume">Khoi luong co phieu mua hay ban</param>
            <param name="_executedVol">Khoi luong khop</param>
            <param name="_executedPrice">Gia khop</param>
            <param name="_cancelVolume">Khoi luong huy</param>
            <param name="_cancelledVolume">Khoi luong duoc huy</param>
            <param name="_subCustAccountId">Tai khoan thuc hien giao dich</param>
            <param name="_execTransType">Loai lenh (0 = new, 1 = cancel, 2 = change acc)</param>
            <param name="_tradeTime">Thoi gian d?t l?nh vào h? th?ng</param>
            <param name="_matchedTime">Thoi gian khop</param>
            <param name="_cancelledTime">Thoi gian lenh duoc huy</param>
            <param name="_orderStatus">Trang thai lenh ( ORD_NOTHING = -1, ORD_PENDING = 0, ORD_WAITING = 1, ORD_FINISHED = 2, ORD_REJECTED = 3)</param>
            <param name="_ordRejReason">nguyen nhan lenh bi tu choi</param>
            <param name="_confirmNo">ID duoc gan boi san giao dich</param>
            <param name="_cancelledConfirmNo">ID cua lenh huy duoc gan boi san giao dich</param>
            <param name="_sourceId">0=SET, 1 = FIS</param>
            <param name="_execType">N=normal, C = crossing</param>
            <param name="_cancelledExecType">N=normal, C = crossing</param>
            <param name="_portOrClient">Loai khach hang</param>
            <param name="_market">Thi truong</param>
            <param name="_marketStatus">Trang thai thi truong</param>
            <param name="_orderSource">Lenh tu web hay tu nguon khac (W = Web,)</param>
            <param name="_isNewOrder">Lenh moi, chua duoc xem thong tin</param>
            <param name="_sequence">Thu tu cua lenh</param>
            <param name="_numOfMatch">So lan khop</param>
            <param name="_quickOrderId">ID is of OrderInfo</param>
            <param name="_conditionOrderId">ConditionOrderID is of ExecOrder</param>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.GetByConditionOrderId(System.Nullable{System.Int64})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ETradeOrders.Entities.TList`1"/> from the datasource based on the FK_ExecOrder_ConditionOrder key.
            	FK_ExecOrder_ConditionOrder Description: 
            </summary>
            <param name="_conditionOrderId">ConditionOrderID is of ExecOrder</param>
            <returns>Returns a generic collection of ExecOrder objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.GetByConditionOrderId(System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ETradeOrders.Entities.TList`1"/> from the datasource based on the FK_ExecOrder_ConditionOrder key.
            	FK_ExecOrder_ConditionOrder Description: 
            </summary>
            <param name="_conditionOrderId">ConditionOrderID is of ExecOrder</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ETradeOrders.Entities.TList`1"/> of <c>ExecOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.GetByQuickOrderId(System.Nullable{System.Int32})">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ETradeOrders.Entities.TList`1"/> from the datasource based on the FK_ExecOrder_QuickOrder key.
            	FK_ExecOrder_QuickOrder Description: 
            </summary>
            <param name="_quickOrderId">ID is of OrderInfo</param>
            <returns>Returns a generic collection of ExecOrder objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.GetByQuickOrderId(System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ETradeOrders.Entities.TList`1"/> from the datasource based on the FK_ExecOrder_QuickOrder key.
            	FK_ExecOrder_QuickOrder Description: 
            </summary>
            <param name="_quickOrderId">ID is of OrderInfo</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ETradeOrders.Entities.TList`1"/> of <c>ExecOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.Get(ETradeOrders.Entities.ExecOrderKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.GetByOrderId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ETradeOrders.Entities.TList`1"/> from the datasource based on the primary key PK_ExecOrder index.
            </summary>
            <param name="_orderId">OrderID identifies ExecOrder</param>
            <returns>Returns an instance of the <see cref="T:ETradeOrders.Entities.ExecOrder"/> class.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.GetByOrderId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ETradeOrders.Entities.TList`1"/> from the datasource based on the primary key PK_ExecOrder index.
            </summary>
            <param name="_orderId">OrderID identifies ExecOrder</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ETradeOrders.Entities.ExecOrder"/> class.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ETradeOrders.Entities.ExecOrder"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ETradeOrders.Entities.ExecOrder"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ETradeOrders.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ETradeOrders.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ExecOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ETradeOrders.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ExecOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ETradeOrders.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ExecOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ExecOrder} of <c>ExecOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.Find(ETradeOrders.DataAccess.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeOrders.DataAccess.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ExecOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.Find(ETradeOrders.DataAccess.IFilterParameterCollection,ETradeOrders.DataAccess.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeOrders.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:ETradeOrders.DataAccess.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ExecOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.Find(ETradeOrders.DataAccess.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeOrders.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ExecOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.Find(ETradeOrders.DataAccess.IFilterParameterCollection,ETradeOrders.DataAccess.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeOrders.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:ETradeOrders.DataAccess.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ExecOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.Find(ETradeOrders.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeOrders.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ExecOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.Insert(ETradeOrders.Entities.ExecOrder)">
            <summary>
            public virtual method that Inserts a ExecOrder object into the datasource using a transaction.
            </summary>
            <param name="entity">ExecOrder object to Insert.</param>
            <remarks>After Inserting into the datasource, the ExecOrder object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ExecOrder entity = new ExecOrder();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ExecOrderService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.Insert(ETradeOrders.Entities.TList{ETradeOrders.Entities.ExecOrder})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:ETradeOrders.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ExecOrder</c> objects in a <see cref="T:ETradeOrders.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ExecOrder</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ExecOrder.
             <code><![CDATA[
             TList<ExecOrder> list = new TList<ExecOrder>();
             ExecOrder entity = new ExecOrder();
             entity.StringProperty = "foo";
             ExecOrder entity2 = new ExecOrder();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ExecOrderService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.Update(ETradeOrders.Entities.ExecOrder)">
            <summary>
            public virtual method that Updates a ExecOrder object into the datasource using a transaction.
            </summary>
            <param name="entity">ExecOrder object to Update.</param>
            <remarks>After Updateing into the datasource, the ExecOrder object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ExecOrder entity = ExecOrderService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ExecOrderService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.Update(ETradeOrders.Entities.TList{ETradeOrders.Entities.ExecOrder})">
             <summary>
             public virtual method that Updates rows in <see cref="T:ETradeOrders.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ExecOrder</c> objects in a <see cref="T:ETradeOrders.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ExecOrder</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ExecOrder.
             <code><![CDATA[
             TList<ExecOrder> list = new TList<ExecOrder>();
             ExecOrder entity = new ExecOrder();
             entity.StringProperty = "foo";
             ExecOrder entity2 = new ExecOrder();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ExecOrderService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.Save(ETradeOrders.Entities.ExecOrder)">
            <summary>
            public virtual method that Saves a ExecOrder object into the datasource using a transaction.
            </summary>
            <param name="entity">ExecOrder object to Save.</param>
            <remarks>After Saveing into the datasource, the ExecOrder object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ExecOrder entity = ExecOrderService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ExecOrderService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.Save(ETradeOrders.Entities.TList{ETradeOrders.Entities.ExecOrder})">
             <summary>
             public virtual method that Saves rows in <see cref="T:ETradeOrders.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ExecOrder</c> objects in a <see cref="T:ETradeOrders.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ExecOrder</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ExecOrder.
             <code><![CDATA[
             TList<ExecOrder> list = new TList<ExecOrder>();
             ExecOrder entity = new ExecOrder();
             entity.StringProperty = "foo";
             ExecOrder entity2 = new ExecOrder();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ExecOrderService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.Delete(ETradeOrders.Entities.ExecOrder)">
            <summary>
            public virtual method that Deletes a ExecOrder object into the datasource using a transaction.
            </summary>
            <param name="entity">ExecOrder object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ExecOrder object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ExecOrder entity = ExecOrderService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ExecOrderService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.Delete(ETradeOrders.Entities.TList{ETradeOrders.Entities.ExecOrder})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:ETradeOrders.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ExecOrder</c> objects in a <see cref="T:ETradeOrders.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ExecOrder</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ExecOrder.
             <code><![CDATA[
             TList<ExecOrder> list = new TList<ExecOrder>();
             ExecOrder entity = new ExecOrder();
             entity.StringProperty = "foo";
             ExecOrder entity2 = new ExecOrder();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ExecOrderService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.Delete(ETradeOrders.Entities.ExecOrderKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S int _orderId
            </summary>
            <param name="_orderId">ExecOrder pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.GetMaxSequence">
            <summary>
            This method wrap the '_ExecOrder_GetMaxSequence' stored procedure. 
            </summary>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.GetMaxSequence(System.Int32,System.Int32)">
            <summary>
            This method wrap the '_ExecOrder_GetMaxSequence' stored procedure. 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.DeleteOldData">
            <summary>
            This method wrap the '_ExecOrder_DeleteOldData' stored procedure. 
            </summary>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.DeleteOldData(System.Int32,System.Int32)">
            <summary>
            This method wrap the '_ExecOrder_DeleteOldData' stored procedure. 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.DeepLoadByOrderId(System.Int32,System.Boolean,ETradeOrders.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ETradeOrders.Entities.ExecOrder"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ETradeOrders.DataAccess.DeepLoadType"/>.
            </summary>
            <param name="_orderId">OrderID identifies ExecOrder</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ExecOrder Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ETradeOrders.Entities.ExecOrder"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.DeepLoad(ETradeOrders.Entities.ExecOrder)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ExecOrder Object</param>
            <remarks>
            <seealso cref="M:ETradeOrders.Services.ExecOrderServiceBase.DeepLoad(ETradeOrders.Entities.ExecOrder)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.DeepLoad(ETradeOrders.Entities.ExecOrder,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ETradeOrders.Services.ExecOrderServiceBase.DeepLoad(ETradeOrders.Entities.ExecOrder)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ExecOrder Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.DeepLoad(ETradeOrders.Entities.ExecOrder,System.Boolean,ETradeOrders.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ETradeOrders.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ETradeOrders.DataAccess.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ETradeOrders.Entities.ExecOrder"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ExecOrder Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.DeepLoad(ETradeOrders.Entities.TList{ETradeOrders.Entities.ExecOrder})">
            <summary>
            Deep Loads the <see cref="T:ETradeOrders.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ETradeOrders.Services.ExecOrderServiceBase.DeepLoad(ETradeOrders.Entities.ExecOrder)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ETradeOrders.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.DeepLoad(ETradeOrders.Entities.TList{ETradeOrders.Entities.ExecOrder},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ETradeOrders.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ETradeOrders.Services.ExecOrderServiceBase.DeepLoad(ETradeOrders.Entities.ExecOrder)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ETradeOrders.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.DeepLoad(ETradeOrders.Entities.TList{ETradeOrders.Entities.ExecOrder},System.Boolean,ETradeOrders.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ETradeOrders.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ETradeOrders.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ETradeOrders.DataAccess.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ETradeOrders.Entities.ExecOrder"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.DeepSave(ETradeOrders.Entities.ExecOrder)">
            <summary>
            public virtualDeep Saves the <see cref="T:ETradeOrders.Entities.ExecOrder"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ExecOrder Object</param>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.DeepSave(ETradeOrders.Entities.ExecOrder,ETradeOrders.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ExecOrder object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ExecOrder Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ExecOrder</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.DeepSave(ETradeOrders.Entities.TList{ETradeOrders.Entities.ExecOrder})">
            <summary>
            Deep Save the entire <see cref="T:ETradeOrders.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ExecOrder} Object</param>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderServiceBase.DeepSave(ETradeOrders.Entities.TList{ETradeOrders.Entities.ExecOrder},ETradeOrders.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ETradeOrders.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ETradeOrders.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ExecOrder Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ETradeOrders.Services.ExecOrderServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderService.#ctor">
            <summary>
            Initializes a new instance of the ExecOrderService class.
            </summary>
        </member>
        <member name="M:ETradeOrders.Services.ExecOrderService.GetMaxSeq">
            <summary>
             Get max Sequence
            </summary>
            <returns></returns>
        </member>
        <member name="T:ETradeOrders.Services.ProcessStartingHandler">
            <summary>
            ProcessStartingHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:ETradeOrders.Services.ProcessEndedHandler">
            <summary>
            ProcessEndedHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:ETradeOrders.Services.ProcessorEventArgs">
            <summary>
            Processor Event Args
            </summary>
        </member>
        <member name="M:ETradeOrders.Services.ProcessorEventArgs.#ctor(ETradeOrders.Services.ProcessorBase)">
            <summary>
            Initializes a new instance of the ProcessorEventArgs class.
            </summary>
            <param name="processor"></param>
        </member>
        <member name="P:ETradeOrders.Services.ProcessorEventArgs.Processor">
            <summary>
            Gets or sets the processor.
            </summary>
            <value>The processor.</value>
        </member>
        <member name="T:ETradeOrders.Services.ConnectionScopeBase">
            <summary>
            Provides storage of global database connection information.
            </summary>
        </member>
        <member name="M:ETradeOrders.Services.ConnectionScopeBase.#ctor">
            <summary>
            Initializes a new instance of the ConnectionScope class.
            </summary>
        </member>
        <member name="F:ETradeOrders.Services.ConnectionScopeBase.connectionStringKey">
            <summary>
            The ConnectionStringKey member variable.
            </summary>
        </member>
        <member name="F:ETradeOrders.Services.ConnectionScopeBase.dynamicConnectionString">
            <summary>
            The DynamicConnectionString member variable.
            </summary>
        </member>
        <member name="F:ETradeOrders.Services.ConnectionScopeBase.transactionManager">
            <summary>
            The TransactionManager member variable.
            </summary>
        </member>
        <member name="F:ETradeOrders.Services.ConnectionScopeBase.dataProvider">
            <summary>
            The NetTiersProvider member variable.
            </summary>
        </member>
        <member name="P:ETradeOrders.Services.ConnectionScopeBase.ConnectionStringKey">
            <summary>
            Gets or sets the ConnectionStringKey property.
            </summary>
        </member>
        <member name="P:ETradeOrders.Services.ConnectionScopeBase.DynamicConnectionString">
            <summary>
            Gets or sets the DynamicConnectionString property.
            </summary>
        </member>
        <member name="P:ETradeOrders.Services.ConnectionScopeBase.TransactionManager">
            <summary>
            Gets or sets the TransactionManager property.
            </summary>
        </member>
        <member name="P:ETradeOrders.Services.ConnectionScopeBase.DataProvider">
             <summary>
             Gets or Sets the Current DataProvider property of the <c>ConnectionScope</c> Object.
             </summary>
             <remarks>
             To use a dynamic connection, you must set both the 
             DynamicConnectionString and a unique ConnectionStringKey properties;
            </remarks>
        </member>
        <member name="P:ETradeOrders.Services.ConnectionScopeBase.HasTransaction">
            <summary>
            Determines if Current Connections is in a Transaction.
            </summary>
        </member>
        <member name="T:ETradeOrders.Services.ConditionOrderService">
            <summary>
            An component type implementation of the 'ConditionOrder' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:ETradeOrders.Services.ConditionOrderServiceBase">
            <summary>
             An object representation of the 'ConditionOrder' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ConditionOrder.cs file instead.
             All custom implementations should be done in the <see cref="T:ETradeOrders.Entities.ConditionOrder"/> class.
             </remarks>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ETradeOrders.Entities.ConditionOrder"/> instance .
            </summary>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.CreateConditionOrder(System.String,System.String,System.Decimal,System.Int32,System.Int32,System.String,System.String,System.String,System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Int16,System.Nullable{System.Decimal},System.Nullable{System.Decimal},System.String,System.DateTime,System.Nullable{System.DateTime},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:ETradeOrders.Entities.ConditionOrder"/> instance.
            </summary>
            <param name="_secSymbol">Stock symbol</param>
            <param name="_side">B: Buy; S: Sell</param>
            <param name="_price">Stock price</param>
            <param name="_volume">Volume</param>
            <param name="_matchedVolume">Matched volume</param>
            <param name="_subCustAccountId">Sub customer account id</param>
            <param name="_mainCustAccountId">Main customer account id</param>
            <param name="_market">Market id (HOSE = 1, HNX = 2, UPCOM = 3)</param>
            <param name="_effDate">Effected date</param>
            <param name="_expDate">Expired date</param>
            <param name="_typeOfCond">Type of condition (NORMAL = 0, ATO = 1, ATC = 2)</param>
            <param name="_maxValue">Max value</param>
            <param name="_minValue">Min value</param>
            <param name="_status">Status of order (WAITING = 0, ACTIVED = 1, CANCELLED = 2,  EXPIRED = 3, DONE = 4)</param>
            <param name="_tradeTime">Traded time</param>
            <param name="_doneTime">Time of full match</param>
            <param name="_rejectReason">Reject reason</param>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.Get(ETradeOrders.Entities.ConditionOrderKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.GetByConditionOrderId(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:ETradeOrders.Entities.TList`1"/> from the datasource based on the primary key PK_ConditionOrder index.
            </summary>
            <param name="_conditionOrderId">ConditionOrderID identifies ConditionOrder</param>
            <returns>Returns an instance of the <see cref="T:ETradeOrders.Entities.ConditionOrder"/> class.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.GetByConditionOrderId(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ETradeOrders.Entities.TList`1"/> from the datasource based on the primary key PK_ConditionOrder index.
            </summary>
            <param name="_conditionOrderId">ConditionOrderID identifies ConditionOrder</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ETradeOrders.Entities.ConditionOrder"/> class.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ETradeOrders.Entities.ConditionOrder"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ETradeOrders.Entities.ConditionOrder"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ETradeOrders.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ETradeOrders.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ConditionOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ETradeOrders.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ConditionOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ETradeOrders.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ConditionOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ConditionOrder} of <c>ConditionOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.Find(ETradeOrders.DataAccess.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeOrders.DataAccess.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ConditionOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.Find(ETradeOrders.DataAccess.IFilterParameterCollection,ETradeOrders.DataAccess.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeOrders.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:ETradeOrders.DataAccess.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ConditionOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.Find(ETradeOrders.DataAccess.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeOrders.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ConditionOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.Find(ETradeOrders.DataAccess.IFilterParameterCollection,ETradeOrders.DataAccess.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeOrders.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:ETradeOrders.DataAccess.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ConditionOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.Find(ETradeOrders.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeOrders.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ConditionOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.Insert(ETradeOrders.Entities.ConditionOrder)">
            <summary>
            public virtual method that Inserts a ConditionOrder object into the datasource using a transaction.
            </summary>
            <param name="entity">ConditionOrder object to Insert.</param>
            <remarks>After Inserting into the datasource, the ConditionOrder object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ConditionOrder entity = new ConditionOrder();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ConditionOrderService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.Insert(ETradeOrders.Entities.TList{ETradeOrders.Entities.ConditionOrder})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:ETradeOrders.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ConditionOrder</c> objects in a <see cref="T:ETradeOrders.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ConditionOrder</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ConditionOrder.
             <code><![CDATA[
             TList<ConditionOrder> list = new TList<ConditionOrder>();
             ConditionOrder entity = new ConditionOrder();
             entity.StringProperty = "foo";
             ConditionOrder entity2 = new ConditionOrder();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ConditionOrderService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.Update(ETradeOrders.Entities.ConditionOrder)">
            <summary>
            public virtual method that Updates a ConditionOrder object into the datasource using a transaction.
            </summary>
            <param name="entity">ConditionOrder object to Update.</param>
            <remarks>After Updateing into the datasource, the ConditionOrder object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ConditionOrder entity = ConditionOrderService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ConditionOrderService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.Update(ETradeOrders.Entities.TList{ETradeOrders.Entities.ConditionOrder})">
             <summary>
             public virtual method that Updates rows in <see cref="T:ETradeOrders.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ConditionOrder</c> objects in a <see cref="T:ETradeOrders.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ConditionOrder</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ConditionOrder.
             <code><![CDATA[
             TList<ConditionOrder> list = new TList<ConditionOrder>();
             ConditionOrder entity = new ConditionOrder();
             entity.StringProperty = "foo";
             ConditionOrder entity2 = new ConditionOrder();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ConditionOrderService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.Save(ETradeOrders.Entities.ConditionOrder)">
            <summary>
            public virtual method that Saves a ConditionOrder object into the datasource using a transaction.
            </summary>
            <param name="entity">ConditionOrder object to Save.</param>
            <remarks>After Saveing into the datasource, the ConditionOrder object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ConditionOrder entity = ConditionOrderService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ConditionOrderService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.Save(ETradeOrders.Entities.TList{ETradeOrders.Entities.ConditionOrder})">
             <summary>
             public virtual method that Saves rows in <see cref="T:ETradeOrders.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ConditionOrder</c> objects in a <see cref="T:ETradeOrders.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ConditionOrder</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ConditionOrder.
             <code><![CDATA[
             TList<ConditionOrder> list = new TList<ConditionOrder>();
             ConditionOrder entity = new ConditionOrder();
             entity.StringProperty = "foo";
             ConditionOrder entity2 = new ConditionOrder();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ConditionOrderService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.Delete(ETradeOrders.Entities.ConditionOrder)">
            <summary>
            public virtual method that Deletes a ConditionOrder object into the datasource using a transaction.
            </summary>
            <param name="entity">ConditionOrder object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ConditionOrder object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ConditionOrder entity = ConditionOrderService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ConditionOrderService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.Delete(ETradeOrders.Entities.TList{ETradeOrders.Entities.ConditionOrder})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:ETradeOrders.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ConditionOrder</c> objects in a <see cref="T:ETradeOrders.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ConditionOrder</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ConditionOrder.
             <code><![CDATA[
             TList<ConditionOrder> list = new TList<ConditionOrder>();
             ConditionOrder entity = new ConditionOrder();
             entity.StringProperty = "foo";
             ConditionOrder entity2 = new ConditionOrder();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ConditionOrderService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.Delete(ETradeOrders.Entities.ConditionOrderKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S long _conditionOrderId
            </summary>
            <param name="_conditionOrderId">ConditionOrder pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.GetListTodayOrders(System.String)">
            <summary>
            This method wrap the '_ConditionOrder_GetListTodayOrders' stored procedure. 
            </summary>
            <param name="market"> A <c>System.String</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:ETradeOrders.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.GetListTodayOrders(System.String,System.Int32,System.Int32)">
            <summary>
            This method wrap the '_ConditionOrder_GetListTodayOrders' stored procedure. 
            </summary>
            <param name="market"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
            <returns>A <see cref="T:ETradeOrders.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.UpdateExpiredData(System.Nullable{System.Int32})">
            <summary>
            This method wrap the '_ConditionOrder_UpdateExpiredData' stored procedure. 
            </summary>
            <param name="condition"> A <c>System.Int32?</c> instance.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.UpdateExpiredData(System.Nullable{System.Int32},System.Int32,System.Int32)">
            <summary>
            This method wrap the '_ConditionOrder_UpdateExpiredData' stored procedure. 
            </summary>
            <param name="condition"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remark>This method is generate from a stored procedure.</remark>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.DeepLoadByConditionOrderId(System.Int64,System.Boolean,ETradeOrders.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ETradeOrders.Entities.ConditionOrder"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ETradeOrders.DataAccess.DeepLoadType"/>.
            </summary>
            <param name="_conditionOrderId">ConditionOrderID identifies ConditionOrder</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ConditionOrder Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ETradeOrders.Entities.ConditionOrder"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.DeepLoad(ETradeOrders.Entities.ConditionOrder)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ConditionOrder Object</param>
            <remarks>
            <seealso cref="M:ETradeOrders.Services.ConditionOrderServiceBase.DeepLoad(ETradeOrders.Entities.ConditionOrder)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.DeepLoad(ETradeOrders.Entities.ConditionOrder,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ETradeOrders.Services.ConditionOrderServiceBase.DeepLoad(ETradeOrders.Entities.ConditionOrder)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ConditionOrder Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.DeepLoad(ETradeOrders.Entities.ConditionOrder,System.Boolean,ETradeOrders.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ETradeOrders.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ETradeOrders.DataAccess.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ETradeOrders.Entities.ConditionOrder"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ConditionOrder Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.DeepLoad(ETradeOrders.Entities.TList{ETradeOrders.Entities.ConditionOrder})">
            <summary>
            Deep Loads the <see cref="T:ETradeOrders.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ETradeOrders.Services.ConditionOrderServiceBase.DeepLoad(ETradeOrders.Entities.ConditionOrder)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ETradeOrders.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.DeepLoad(ETradeOrders.Entities.TList{ETradeOrders.Entities.ConditionOrder},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ETradeOrders.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ETradeOrders.Services.ConditionOrderServiceBase.DeepLoad(ETradeOrders.Entities.ConditionOrder)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ETradeOrders.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.DeepLoad(ETradeOrders.Entities.TList{ETradeOrders.Entities.ConditionOrder},System.Boolean,ETradeOrders.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ETradeOrders.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ETradeOrders.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ETradeOrders.DataAccess.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ETradeOrders.Entities.ConditionOrder"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.DeepSave(ETradeOrders.Entities.ConditionOrder)">
            <summary>
            public virtualDeep Saves the <see cref="T:ETradeOrders.Entities.ConditionOrder"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ConditionOrder Object</param>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.DeepSave(ETradeOrders.Entities.ConditionOrder,ETradeOrders.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ConditionOrder object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ConditionOrder Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ConditionOrder</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.DeepSave(ETradeOrders.Entities.TList{ETradeOrders.Entities.ConditionOrder})">
            <summary>
            Deep Save the entire <see cref="T:ETradeOrders.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ConditionOrder} Object</param>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderServiceBase.DeepSave(ETradeOrders.Entities.TList{ETradeOrders.Entities.ConditionOrder},ETradeOrders.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ETradeOrders.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ETradeOrders.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ConditionOrder Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ETradeOrders.Services.ConditionOrderServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderService.GetListUnfinishedConditionOrders(System.Char,System.String,System.String)">
            <summary>
             Get waiting and actived condition orders.
            </summary>
            <param name="side">Buy or sell side</param>
            <param name="subCustAccountId">Sub customer account id</param>
            <param name="symbol">Stock symbol</param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:ETradeOrders.Services.ConditionOrderService.GetListConditionOrder(System.String,System.String,System.String,System.Int32[],System.String,System.String,System.Int32,System.Int32,System.Int32@,System.Int32)" -->
        <member name="M:ETradeOrders.Services.ConditionOrderService.CancelConditionOrder(System.Int64,System.String)">
            <summary>
             Cancel condition order when it is in state Actived.
            </summary>
            <param name="conditionOrderId">Condition order id</param>
            <param name="accountNo">Account id</param>
             <returns>
             <para>Result of cancelling condition order.</para>
             <para>RET_CODE=ERROR_ACCOUNT: The account which is sent is not the account of this condition order.</para>
             <para>RET_CODE=ADVANCE_ORDER_STATUS_INCORRECT_STATE: The order is not in the correct state to cancel.</para>
             <para>RET_CODE=NO_EXISTED_DATA: Data does not exist.</para>
             <para>RET_CODE=SUCCESS: Cancel successfully.</para>
             <para>RET_CODE=FAIL: Fail to cancel order.</para>
             </returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderService.UpdateConditionOrder(ETradeOrders.Entities.ExecOrder,System.Int32,System.Nullable{System.Decimal})">
            <summary>
             Update condition order information and condition order detail information
            </summary>
            <param name="execOrder">Current order information</param>
            <param name="volume">Matched volume</param>
            <param name="matchedPrice">Matched price</param>
            <returns></returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderService.UpdateConditionOrderStatus(System.Int64,System.String,System.Int32)">
            <summary>
             Update condition order status.
            </summary>
            <param name="conditionOrderId"></param>
            <param name="status"></param>
            <param name="rejectReason">Reject reason when order is rejected.</param>
            <returns></returns>
        </member>
        <member name="T:ETradeOrders.Services.ProcessorBase">
            <summary>
            The interface that each complex business unit of work processor will use.
            </summary>
        </member>
        <member name="T:ETradeOrders.Services.IProcessor">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:ETradeOrders.Services.IProcessor.Process">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:ETradeOrders.Services.IProcessor.ChangeProcessorState(ETradeOrders.Services.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="P:ETradeOrders.Services.IProcessor.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:ETradeOrders.Services.IProcessor.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="M:ETradeOrders.Services.ProcessorBase.Process">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:ETradeOrders.Services.ProcessorBase.ChangeProcessorState(ETradeOrders.Services.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:ETradeOrders.Services.ProcessorBase.OnNotifyProcessorStateChanging(ETradeOrders.Services.ProcessorState)">
            <summary>
            Raises the ProcessorStateChanging event.
            </summary>
            <param name="newProcessorState"></param>
        </member>
        <member name="P:ETradeOrders.Services.ProcessorBase.ProcessResult">
            <summary>
            Provides the current process result of it's operation.
            </summary>
        </member>
        <member name="P:ETradeOrders.Services.ProcessorBase.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>The name of the type of the processors to execute</value>
        </member>
        <member name="P:ETradeOrders.Services.ProcessorBase.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="E:ETradeOrders.Services.ProcessorBase.ProcessorStateChanging">
            <summary>
            The ProcessorStateChanging event.
            </summary>
        </member>
        <member name="T:ETradeOrders.Services.ProcessorBase.ProcessorStateChangingEventHandler">
            <summary>
            The ProcessorStateChangingEventHandler event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:ETradeOrders.Services.QuickOrderService">
            <summary>
            An component type implementation of the 'QuickOrder' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:ETradeOrders.Services.QuickOrderServiceBase">
            <summary>
             An object representation of the 'QuickOrder' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the QuickOrder.cs file instead.
             All custom implementations should be done in the <see cref="T:ETradeOrders.Entities.QuickOrder"/> class.
             </remarks>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ETradeOrders.Entities.QuickOrder"/> instance .
            </summary>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.CreateQuickOrder(System.String,System.String,System.Int32,System.String,System.String,System.DateTime,System.Nullable{System.Int16},System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:ETradeOrders.Entities.QuickOrder"/> instance.
            </summary>
            <param name="_secSymbol">Ma chung khoan</param>
            <param name="_side">B = Mua, S = Ban</param>
            <param name="_volume">Khoi luong co phieu mua hay ban</param>
            <param name="_subCustAccountId">Tai khoan thuc hien giao dich</param>
            <param name="_market">Thi truong</param>
            <param name="_tradeTime">Ngày gi? d?t l?nh</param>
            <param name="_typeOfQuick">Loai Dieu kien (0: dieu kien index, 1: dieu kien gia chung khoan, 2: dieu kien ATO, 3: dieu kien ATC)</param>
            <param name="_status">Tr?ng thái c?a l?nh d?t nhanh, dã du?c d?y vào h? th?ng hay dang ch?.</param>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.Get(ETradeOrders.Entities.QuickOrderKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.GetByQuickOrderId(System.Int32)">
            <summary>
             method that Gets rows in a <see cref="T:ETradeOrders.Entities.TList`1"/> from the datasource based on the primary key PK_QuickOrder index.
            </summary>
            <param name="_quickOrderId">QuickOrderID identifies QuickOrder</param>
            <returns>Returns an instance of the <see cref="T:ETradeOrders.Entities.QuickOrder"/> class.</returns>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.GetByQuickOrderId(System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ETradeOrders.Entities.TList`1"/> from the datasource based on the primary key PK_QuickOrder index.
            </summary>
            <param name="_quickOrderId">QuickOrderID identifies QuickOrder</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ETradeOrders.Entities.QuickOrder"/> class.</returns>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ETradeOrders.Entities.QuickOrder"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ETradeOrders.Entities.QuickOrder"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ETradeOrders.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ETradeOrders.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>QuickOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ETradeOrders.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>QuickOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ETradeOrders.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>QuickOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{QuickOrder} of <c>QuickOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.Find(ETradeOrders.DataAccess.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeOrders.DataAccess.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>QuickOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.Find(ETradeOrders.DataAccess.IFilterParameterCollection,ETradeOrders.DataAccess.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeOrders.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:ETradeOrders.DataAccess.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>QuickOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.Find(ETradeOrders.DataAccess.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeOrders.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>QuickOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.Find(ETradeOrders.DataAccess.IFilterParameterCollection,ETradeOrders.DataAccess.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeOrders.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:ETradeOrders.DataAccess.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>QuickOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.Find(ETradeOrders.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeOrders.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>QuickOrder</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.Insert(ETradeOrders.Entities.QuickOrder)">
            <summary>
            public virtual method that Inserts a QuickOrder object into the datasource using a transaction.
            </summary>
            <param name="entity">QuickOrder object to Insert.</param>
            <remarks>After Inserting into the datasource, the QuickOrder object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            QuickOrder entity = new QuickOrder();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	QuickOrderService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.Insert(ETradeOrders.Entities.TList{ETradeOrders.Entities.QuickOrder})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:ETradeOrders.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuickOrder</c> objects in a <see cref="T:ETradeOrders.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>QuickOrder</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of QuickOrder.
             <code><![CDATA[
             TList<QuickOrder> list = new TList<QuickOrder>();
             QuickOrder entity = new QuickOrder();
             entity.StringProperty = "foo";
             QuickOrder entity2 = new QuickOrder();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuickOrderService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.Update(ETradeOrders.Entities.QuickOrder)">
            <summary>
            public virtual method that Updates a QuickOrder object into the datasource using a transaction.
            </summary>
            <param name="entity">QuickOrder object to Update.</param>
            <remarks>After Updateing into the datasource, the QuickOrder object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            QuickOrder entity = QuickOrderService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	QuickOrderService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.Update(ETradeOrders.Entities.TList{ETradeOrders.Entities.QuickOrder})">
             <summary>
             public virtual method that Updates rows in <see cref="T:ETradeOrders.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuickOrder</c> objects in a <see cref="T:ETradeOrders.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>QuickOrder</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of QuickOrder.
             <code><![CDATA[
             TList<QuickOrder> list = new TList<QuickOrder>();
             QuickOrder entity = new QuickOrder();
             entity.StringProperty = "foo";
             QuickOrder entity2 = new QuickOrder();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuickOrderService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.Save(ETradeOrders.Entities.QuickOrder)">
            <summary>
            public virtual method that Saves a QuickOrder object into the datasource using a transaction.
            </summary>
            <param name="entity">QuickOrder object to Save.</param>
            <remarks>After Saveing into the datasource, the QuickOrder object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            QuickOrder entity = QuickOrderService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	QuickOrderService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.Save(ETradeOrders.Entities.TList{ETradeOrders.Entities.QuickOrder})">
             <summary>
             public virtual method that Saves rows in <see cref="T:ETradeOrders.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuickOrder</c> objects in a <see cref="T:ETradeOrders.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>QuickOrder</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of QuickOrder.
             <code><![CDATA[
             TList<QuickOrder> list = new TList<QuickOrder>();
             QuickOrder entity = new QuickOrder();
             entity.StringProperty = "foo";
             QuickOrder entity2 = new QuickOrder();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuickOrderService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.Delete(ETradeOrders.Entities.QuickOrder)">
            <summary>
            public virtual method that Deletes a QuickOrder object into the datasource using a transaction.
            </summary>
            <param name="entity">QuickOrder object to Delete.</param>
            <remarks>After Deleteing into the datasource, the QuickOrder object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            QuickOrder entity = QuickOrderService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	QuickOrderService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.Delete(ETradeOrders.Entities.TList{ETradeOrders.Entities.QuickOrder})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:ETradeOrders.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuickOrder</c> objects in a <see cref="T:ETradeOrders.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>QuickOrder</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of QuickOrder.
             <code><![CDATA[
             TList<QuickOrder> list = new TList<QuickOrder>();
             QuickOrder entity = new QuickOrder();
             entity.StringProperty = "foo";
             QuickOrder entity2 = new QuickOrder();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuickOrderService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.Delete(ETradeOrders.Entities.QuickOrderKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.Delete(System.Int32)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S int _quickOrderId
            </summary>
            <param name="_quickOrderId">QuickOrder pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.DeepLoadByQuickOrderId(System.Int32,System.Boolean,ETradeOrders.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ETradeOrders.Entities.QuickOrder"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ETradeOrders.DataAccess.DeepLoadType"/>.
            </summary>
            <param name="_quickOrderId">QuickOrderID identifies QuickOrder</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QuickOrder Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ETradeOrders.Entities.QuickOrder"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.DeepLoad(ETradeOrders.Entities.QuickOrder)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">QuickOrder Object</param>
            <remarks>
            <seealso cref="M:ETradeOrders.Services.QuickOrderServiceBase.DeepLoad(ETradeOrders.Entities.QuickOrder)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.DeepLoad(ETradeOrders.Entities.QuickOrder,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ETradeOrders.Services.QuickOrderServiceBase.DeepLoad(ETradeOrders.Entities.QuickOrder)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">QuickOrder Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.DeepLoad(ETradeOrders.Entities.QuickOrder,System.Boolean,ETradeOrders.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ETradeOrders.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ETradeOrders.DataAccess.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ETradeOrders.Entities.QuickOrder"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QuickOrder Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.DeepLoad(ETradeOrders.Entities.TList{ETradeOrders.Entities.QuickOrder})">
            <summary>
            Deep Loads the <see cref="T:ETradeOrders.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ETradeOrders.Services.QuickOrderServiceBase.DeepLoad(ETradeOrders.Entities.QuickOrder)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ETradeOrders.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.DeepLoad(ETradeOrders.Entities.TList{ETradeOrders.Entities.QuickOrder},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ETradeOrders.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ETradeOrders.Services.QuickOrderServiceBase.DeepLoad(ETradeOrders.Entities.QuickOrder)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ETradeOrders.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.DeepLoad(ETradeOrders.Entities.TList{ETradeOrders.Entities.QuickOrder},System.Boolean,ETradeOrders.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ETradeOrders.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ETradeOrders.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ETradeOrders.DataAccess.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ETradeOrders.Entities.QuickOrder"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.DeepSave(ETradeOrders.Entities.QuickOrder)">
            <summary>
            public virtualDeep Saves the <see cref="T:ETradeOrders.Entities.QuickOrder"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">QuickOrder Object</param>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.DeepSave(ETradeOrders.Entities.QuickOrder,ETradeOrders.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the QuickOrder object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">QuickOrder Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>QuickOrder</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.DeepSave(ETradeOrders.Entities.TList{ETradeOrders.Entities.QuickOrder})">
            <summary>
            Deep Save the entire <see cref="T:ETradeOrders.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{QuickOrder} Object</param>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderServiceBase.DeepSave(ETradeOrders.Entities.TList{ETradeOrders.Entities.QuickOrder},ETradeOrders.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ETradeOrders.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ETradeOrders.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">QuickOrder Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ETradeOrders.Services.QuickOrderServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ETradeOrders.Services.QuickOrderService.#ctor">
            <summary>
            Initializes a new instance of the QuickOrderService class.
            </summary>
        </member>
        <member name="T:ETradeOrders.Services.IProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:ETradeOrders.Services.IProcessorResult.AddBrokenRulesList(System.Type,ETradeOrders.Entities.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:ETradeOrders.Services.IProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:ETradeOrders.Services.IProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:ETradeOrders.Services.IProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation.
            </summary>
        </member>
        <member name="T:ETradeOrders.Services.ServiceViewBaseCore`1">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:ETradeOrders.Services.ServiceViewBaseCore`1.Execute">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:ETradeOrders.Services.ServiceViewBaseCore`1.Execute(System.Boolean)">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:ETradeOrders.Services.ServiceViewBaseCore`1.OnProcessStarting(ETradeOrders.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:ETradeOrders.Services.ServiceViewBaseCore`1.OnProcessEnded(ETradeOrders.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:ETradeOrders.Services.ServiceViewBaseCore`1.Get">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ServiceViewBaseCore`1.Get(System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ServiceViewBaseCore`1.Get(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ServiceViewBaseCore`1.Get(System.String,System.String)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ServiceViewBaseCore`1.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ServiceViewBaseCore`1.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ServiceViewBaseCore`1.Find(ETradeOrders.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeOrders.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="P:ETradeOrders.Services.ServiceViewBaseCore`1.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:ETradeOrders.Services.ServiceViewBaseCore`1.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:ETradeOrders.Services.ServiceViewBaseCore`1.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:ETradeOrders.Services.ServiceViewBaseCore`1.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:ETradeOrders.Services.ServiceViewBaseCore`1.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:ETradeOrders.Services.ServiceViewBaseCore`1.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:ETradeOrders.Services.ServiceViewBaseCore`1.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:ETradeOrders.Services.ServiceViewBaseCore`1.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:ETradeOrders.Services.ServiceViewBaseCore`1.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="T:ETradeOrders.Services.ServiceViewBase`1">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:ETradeOrders.Services.DomainUtil">
            <summary>
            DomainUtil class.
            </summary>
        </member>
        <member name="M:ETradeOrders.Services.DomainUtil.GetErrorsFromList``1(ETradeOrders.Entities.TList{``0})">
            <summary>
            Aggregates all the errors in a collection
            </summary>
        </member>
        <member name="M:ETradeOrders.Services.DomainUtil.HandleException(System.Exception,System.String)">
            <summary>
            Wraps call to tohe <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy"/> class which handles all exceptions based on the security policy.
            </summary>
        </member>
        <member name="M:ETradeOrders.Services.DomainUtil.GetDefaultByType(System.Data.DbType)">
            <summary>
            Get a default value for a given data type
            </summary>
            <param name="dataType">Data type for which to get the default value</param>
            <returns>An object of the default value.</returns>
        </member>
        <member name="M:ETradeOrders.Services.DomainUtil.GetDataValue(System.Data.IDataParameter)">
            <summary>
            Get Value or Default Value from an IDataParamater
            Based on DbType
            </summary>
            <param name="p">The IDataParameter instance type is used to determine the default value.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeOrders.Services.DomainUtil.DefaultToDBNull(System.Object,System.Data.DbType)">
            <summary>
            Checks to see if the Default Value has been set to the parameter.
            If it's the default value, then create.
            </summary>
            <param name="val">The value we want to check.</param>
            <param name="dbtype">The DbType from wich we take the default value.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeOrders.Services.DomainUtil.GetParameterValue``1(System.Data.IDataParameter)">
            <summary>
            Generic method to return the value of a nullable parameter
            </summary>
            <typeparam name="T">Type of value to return</typeparam>
            <param name="parameter">Parameter from which to extract the value</param>
            <returns></returns>
        </member>
        <member name="M:ETradeOrders.Services.DomainUtil.ConvertDataReaderToDataSet(System.Data.IDataReader)">
            <summary>
            Converts a IDataReader to a DataSet.  For use when a custom stored procedure returns an <see cref="T:System.Data.IDataReader"/>, it will
            convert all result sets returned as a DataSet.
            </summary>
            <param name="reader">The reader to convert</param>
            <returns>A dataset with one table per result in the reader</returns>
        </member>
        <member name="T:ETradeOrders.Services.ConditionOrderDetailService">
            <summary>
            An component type implementation of the 'ConditionOrderDetail' table.
            </summary>
            <remarks>
            All custom implementations should be done here.
            </remarks>
        </member>
        <member name="T:ETradeOrders.Services.ConditionOrderDetailServiceBase">
            <summary>
             An object representation of the 'ConditionOrderDetail' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ConditionOrderDetail.cs file instead.
             All custom implementations should be done in the <see cref="T:ETradeOrders.Entities.ConditionOrderDetail"/> class.
             </remarks>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:ETradeOrders.Entities.ConditionOrderDetail"/> instance .
            </summary>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.CreateConditionOrderDetail(System.Int32,System.Int32,System.Nullable{System.Decimal},System.Nullable{System.Int16},System.Int64,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.DateTime,System.Nullable{System.DateTime})">
            <summary>
             A simple factory method to create a new <see cref="T:ETradeOrders.Entities.ConditionOrderDetail"/> instance.
            </summary>
            <param name="_volume">Volume putted at that day</param>
            <param name="_matchedVolume">MatchedVolume at that day</param>
            <param name="_avgPrice">Average price</param>
            <param name="_orderStatus">Status of order (WAITING = 0, ACTIVED = 1, CANCELLED = 2,  EXPIRED = 3, DONE = 4)</param>
            <param name="_conditionOrderId">Foreign key to ConditionOrder table</param>
            <param name="_fisOrderId">FIS order id</param>
            <param name="_ordRejReason">Order reject reason 
             		///    00: MP order without contra-side 
             		///    01: Illegal price spread 
             		///    02: Incorrect volume for specified board 
             		///    03: Illegal request - Market Closed 
             		///    04: Incorrect Stock Symbol 
             		///    05: Incorrect Firm 
             		///    06: Incorrect Trader ID 
             		///    07: Incorrect confirm number 
             		///    08: Too late to perform requested action 
             		///    09: Incorrect Reference Number 
             		///    10: Incorrect Conditions 
             		///    11: Trading halted in Stock 
             		///    12: Incorrect Board 
             		///    13: Security in DS - Missing Client ID 
             		///    14: Incorrect Order Type 
             		///    15: Incorrect Port / Client flag 
             		///    16: Incorrect Request Code or Reply Code 
             		///    17: Incorrect Side: must be Buy or Sell 
             		///    18: Incorrect Order Number 
             		///    19: Incorrect Time 
             		///    20: Incorrect Date 
             		///    21: Cannot do on Odd-Lot board 
             		///    22: Incorrect Sub-Broker ID 
             		///    23: Illegal Trustee ID 
             		///    24: Security suspended 
             		///    25: Missing P/C Flag 
             		///    26: Missing Sub-Broker ID 
             		///    27: No available room for Thai Trust Fund 
             		///    28: Market in Intermission 
             		///    29: Market Halted 
             		///    30: Incorrect Published Volume 
             		///    31: Changing Deal information disallowed 
             		///    32: Publish Vol disallowed at this time 
             		///    33: Trading disallowed for this stock 
             		///    34: Incorrect price - above ceiling 
             		///    35: Incorrect price - below floor 
             		///    36: Put-Through price incorrect format 
             		///    37: Cancel of automatch deal disallowed 
             		///    38: Incorrect Volume for Put-Through deal 
             		///    39: Incorrect Market Maker 
             		///    40: Illegal Short Sales Order 
             		///    41: Illegal Market ID 
             		///    42: Illegal Message Type/Header 
             		///    43: Illegal Message Length 
             		///    71: Warning! Price over 10 % 
             		///    81: Disapprove Order 
             		///    82: Reject form FIS 
             		///    99: Unidentified Error </param>
            <param name="_numOfMatch">Number of matches</param>
            <param name="_cancelledVol">Cancelled volume</param>
            <param name="_createdDateTime">Created date time</param>
            <param name="_updatedDateTime">Updated date time</param>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.GetByConditionOrderId(System.Int64)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ETradeOrders.Entities.TList`1"/> from the datasource based on the FK_ConditionOrderDetail_ConditionOrder key.
            	FK_ConditionOrderDetail_ConditionOrder Description: 
            </summary>
            <param name="_conditionOrderId">Foreign key to ConditionOrder table</param>
            <returns>Returns a generic collection of ConditionOrderDetail objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.GetByConditionOrderId(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:ETradeOrders.Entities.TList`1"/> from the datasource based on the FK_ConditionOrderDetail_ConditionOrder key.
            	FK_ConditionOrderDetail_ConditionOrder Description: 
            </summary>
            <param name="_conditionOrderId">Foreign key to ConditionOrder table</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:ETradeOrders.Entities.TList`1"/> of <c>ConditionOrderDetail</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.Get(ETradeOrders.Entities.ConditionOrderDetailKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.GetByDetailId(System.Int64)">
            <summary>
             method that Gets rows in a <see cref="T:ETradeOrders.Entities.TList`1"/> from the datasource based on the primary key PK_CONDITIONORDERDETAIL index.
            </summary>
            <param name="_detailId">Auto increase key</param>
            <returns>Returns an instance of the <see cref="T:ETradeOrders.Entities.ConditionOrderDetail"/> class.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.GetByDetailId(System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:ETradeOrders.Entities.TList`1"/> from the datasource based on the primary key PK_CONDITIONORDERDETAIL index.
            </summary>
            <param name="_detailId">Auto increase key</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:ETradeOrders.Entities.ConditionOrderDetail"/> class.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:ETradeOrders.Entities.ConditionOrderDetail"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:ETradeOrders.Entities.ConditionOrderDetail"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:ETradeOrders.Entities.TList`1"/> </returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ETradeOrders.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ConditionOrderDetail</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:ETradeOrders.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ConditionOrderDetail</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:ETradeOrders.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ConditionOrderDetail</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ConditionOrderDetail} of <c>ConditionOrderDetail</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.Find(ETradeOrders.DataAccess.IFilterParameterCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeOrders.DataAccess.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ConditionOrderDetail</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.Find(ETradeOrders.DataAccess.IFilterParameterCollection,ETradeOrders.DataAccess.ISortColumnCollection)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeOrders.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:ETradeOrders.DataAccess.SqlSortColumn"/> objects.</param>
            <returns>Returns a typed collection of <c>ConditionOrderDetail</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.Find(ETradeOrders.DataAccess.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeOrders.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ConditionOrderDetail</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.Find(ETradeOrders.DataAccess.IFilterParameterCollection,ETradeOrders.DataAccess.ISortColumnCollection,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeOrders.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="sortColumns">A collection of <see cref="T:ETradeOrders.DataAccess.SqlSortColumn"/> objects.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ConditionOrderDetail</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.Find(ETradeOrders.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:ETradeOrders.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ConditionOrderDetail</c> objects.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.Insert(ETradeOrders.Entities.ConditionOrderDetail)">
            <summary>
            public virtual method that Inserts a ConditionOrderDetail object into the datasource using a transaction.
            </summary>
            <param name="entity">ConditionOrderDetail object to Insert.</param>
            <remarks>After Inserting into the datasource, the ConditionOrderDetail object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ConditionOrderDetail entity = new ConditionOrderDetail();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ConditionOrderDetailService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.Insert(ETradeOrders.Entities.TList{ETradeOrders.Entities.ConditionOrderDetail})">
             <summary>
             public virtual method that Inserts rows in <see cref="T:ETradeOrders.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ConditionOrderDetail</c> objects in a <see cref="T:ETradeOrders.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ConditionOrderDetail</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ConditionOrderDetail.
             <code><![CDATA[
             TList<ConditionOrderDetail> list = new TList<ConditionOrderDetail>();
             ConditionOrderDetail entity = new ConditionOrderDetail();
             entity.StringProperty = "foo";
             ConditionOrderDetail entity2 = new ConditionOrderDetail();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ConditionOrderDetailService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.Update(ETradeOrders.Entities.ConditionOrderDetail)">
            <summary>
            public virtual method that Updates a ConditionOrderDetail object into the datasource using a transaction.
            </summary>
            <param name="entity">ConditionOrderDetail object to Update.</param>
            <remarks>After Updateing into the datasource, the ConditionOrderDetail object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ConditionOrderDetail entity = ConditionOrderDetailService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ConditionOrderDetailService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.Update(ETradeOrders.Entities.TList{ETradeOrders.Entities.ConditionOrderDetail})">
             <summary>
             public virtual method that Updates rows in <see cref="T:ETradeOrders.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ConditionOrderDetail</c> objects in a <see cref="T:ETradeOrders.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ConditionOrderDetail</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ConditionOrderDetail.
             <code><![CDATA[
             TList<ConditionOrderDetail> list = new TList<ConditionOrderDetail>();
             ConditionOrderDetail entity = new ConditionOrderDetail();
             entity.StringProperty = "foo";
             ConditionOrderDetail entity2 = new ConditionOrderDetail();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ConditionOrderDetailService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.Save(ETradeOrders.Entities.ConditionOrderDetail)">
            <summary>
            public virtual method that Saves a ConditionOrderDetail object into the datasource using a transaction.
            </summary>
            <param name="entity">ConditionOrderDetail object to Save.</param>
            <remarks>After Saveing into the datasource, the ConditionOrderDetail object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ConditionOrderDetail entity = ConditionOrderDetailService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ConditionOrderDetailService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.Save(ETradeOrders.Entities.TList{ETradeOrders.Entities.ConditionOrderDetail})">
             <summary>
             public virtual method that Saves rows in <see cref="T:ETradeOrders.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ConditionOrderDetail</c> objects in a <see cref="T:ETradeOrders.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ConditionOrderDetail</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ConditionOrderDetail.
             <code><![CDATA[
             TList<ConditionOrderDetail> list = new TList<ConditionOrderDetail>();
             ConditionOrderDetail entity = new ConditionOrderDetail();
             entity.StringProperty = "foo";
             ConditionOrderDetail entity2 = new ConditionOrderDetail();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ConditionOrderDetailService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.Delete(ETradeOrders.Entities.ConditionOrderDetail)">
            <summary>
            public virtual method that Deletes a ConditionOrderDetail object into the datasource using a transaction.
            </summary>
            <param name="entity">ConditionOrderDetail object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ConditionOrderDetail object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ConditionOrderDetail entity = ConditionOrderDetailService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ConditionOrderDetailService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.Delete(ETradeOrders.Entities.TList{ETradeOrders.Entities.ConditionOrderDetail})">
             <summary>
             public virtual method that Deletes rows in <see cref="T:ETradeOrders.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ConditionOrderDetail</c> objects in a <see cref="T:ETradeOrders.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ConditionOrderDetail</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ConditionOrderDetail.
             <code><![CDATA[
             TList<ConditionOrderDetail> list = new TList<ConditionOrderDetail>();
             ConditionOrderDetail entity = new ConditionOrderDetail();
             entity.StringProperty = "foo";
             ConditionOrderDetail entity2 = new ConditionOrderDetail();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ConditionOrderDetailService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.Delete(ETradeOrders.Entities.ConditionOrderDetailKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.Delete(System.Int64)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S long _detailId
            </summary>
            <param name="_detailId">ConditionOrderDetail pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.DeepLoadByDetailId(System.Int64,System.Boolean,ETradeOrders.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:ETradeOrders.Entities.ConditionOrderDetail"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:ETradeOrders.DataAccess.DeepLoadType"/>.
            </summary>
            <param name="_detailId">Auto increase key</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ConditionOrderDetail Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:ETradeOrders.Entities.ConditionOrderDetail"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.DeepLoad(ETradeOrders.Entities.ConditionOrderDetail)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ConditionOrderDetail Object</param>
            <remarks>
            <seealso cref="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.DeepLoad(ETradeOrders.Entities.ConditionOrderDetail)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.DeepLoad(ETradeOrders.Entities.ConditionOrderDetail,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.DeepLoad(ETradeOrders.Entities.ConditionOrderDetail)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ConditionOrderDetail Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.DeepLoad(ETradeOrders.Entities.ConditionOrderDetail,System.Boolean,ETradeOrders.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:ETradeOrders.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:ETradeOrders.DataAccess.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:ETradeOrders.Entities.ConditionOrderDetail"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ConditionOrderDetail Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.DeepLoad(ETradeOrders.Entities.TList{ETradeOrders.Entities.ConditionOrderDetail})">
            <summary>
            Deep Loads the <see cref="T:ETradeOrders.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.DeepLoad(ETradeOrders.Entities.ConditionOrderDetail)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ETradeOrders.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.DeepLoad(ETradeOrders.Entities.TList{ETradeOrders.Entities.ConditionOrderDetail},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:ETradeOrders.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.DeepLoad(ETradeOrders.Entities.ConditionOrderDetail)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:ETradeOrders.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.DeepLoad(ETradeOrders.Entities.TList{ETradeOrders.Entities.ConditionOrderDetail},System.Boolean,ETradeOrders.DataAccess.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:ETradeOrders.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:ETradeOrders.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:ETradeOrders.DataAccess.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:ETradeOrders.Entities.ConditionOrderDetail"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.DeepSave(ETradeOrders.Entities.ConditionOrderDetail)">
            <summary>
            public virtualDeep Saves the <see cref="T:ETradeOrders.Entities.ConditionOrderDetail"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ConditionOrderDetail Object</param>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.DeepSave(ETradeOrders.Entities.ConditionOrderDetail,ETradeOrders.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ConditionOrderDetail object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ConditionOrderDetail Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ConditionOrderDetail</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.DeepSave(ETradeOrders.Entities.TList{ETradeOrders.Entities.ConditionOrderDetail})">
            <summary>
            Deep Save the entire <see cref="T:ETradeOrders.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ConditionOrderDetail} Object</param>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailServiceBase.DeepSave(ETradeOrders.Entities.TList{ETradeOrders.Entities.ConditionOrderDetail},ETradeOrders.DataAccess.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:ETradeOrders.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:ETradeOrders.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ConditionOrderDetail Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:ETradeOrders.Services.ConditionOrderDetailServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:ETradeOrders.Services.ConditionOrderDetailService.#ctor">
            <summary>
            Initializes a new instance of the ConditionOrderDetailService class.
            </summary>
        </member>
        <member name="T:ETradeOrders.Services.SecurityContextBase`1">
            <summary>
            The class that is available in case role based security is required at runtime.  
            It will be made availabe through the entities themselves.
            </summary>
        </member>
        <member name="M:ETradeOrders.Services.SecurityContextBase`1.#ctor">
            <summary>
            Initializes a new instance of the SecurityContext class.
            </summary>
        </member>
        <member name="M:ETradeOrders.Services.SecurityContextBase`1.IsAuthorized(System.String)">
            <summary>
            Determine whether user is authorized for the rule based on the rule provider
            </summary>
        </member>
        <member name="P:ETradeOrders.Services.SecurityContextBase`1.Identity">
            <summary>
            The Current IIdentity.
            </summary>
        </member>
        <member name="P:ETradeOrders.Services.SecurityContextBase`1.Profile">
            <summary>
            The Current Profile .
            </summary>
        </member>
        <member name="P:ETradeOrders.Services.SecurityContextBase`1.Principal">
            <summary>
             The Current IPrincipal .
            </summary>
        </member>
        <member name="P:ETradeOrders.Services.SecurityContextBase`1.RuleProvider">
            <summary>
             The Current Authorization Rule Provider
            </summary>
        </member>
        <member name="T:ETradeOrders.Services.SecurityContext`1">
            <summary>
            The class that is available in case role based security is required at runtime.  
            It will be made availabe through the entities themselves.
            </summary>
        </member>
        <member name="M:ETradeOrders.Services.SecurityContext`1.#ctor">
            <summary>
             Creates a new <see cref="T:System.Security.SecurityContext"/> instance.
            </summary>
        </member>
        <member name="T:ETradeOrders.Services.ProcessorState">
            <summary>
            ProcessorState enumeration.
            </summary>
        </member>
        <member name="F:ETradeOrders.Services.ProcessorState.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:ETradeOrders.Services.ProcessorState.Running">
            <summary>
            Running
            </summary>
        </member>
        <member name="F:ETradeOrders.Services.ProcessorState.Stopped">
            <summary>
            Stopped
            </summary>
        </member>
        <member name="F:ETradeOrders.Services.ProcessorState.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="T:ETradeOrders.Services.ConnectionScope">
            <summary>
            Provides storage of global database connection information.
            </summary>
        </member>
        <member name="M:ETradeOrders.Services.ConnectionScope.#ctor">
            <summary>
            Private constructor.
            </summary>
        </member>
        <member name="M:ETradeOrders.Services.ConnectionScope.NewThread(System.Threading.ThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:ETradeOrders.Services.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConnectionScope.NewThread(System.Threading.ParameterizedThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:ETradeOrders.Services.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConnectionScope.EnqueueOnThreadPool(System.Threading.ThreadStart)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConnectionScope.EnqueueOnThreadPool(System.Threading.ParameterizedThreadStart,System.Object)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <param name="state">An object containing data to be used by the method.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:ETradeOrders.Services.ConnectionScope.Copy(ETradeOrders.Services.ConnectionScope)">
            <summary>
            Copies the values from the specified <paramref name="scope"/> object
            to the <see cref="T:ETradeOrders.Services.ConnectionScope"/> used by the current thread.
            </summary>
            <param name="scope">A <see cref="T:ETradeOrders.Services.ConnectionScope"/> object.</param>
        </member>
        <member name="M:ETradeOrders.Services.ConnectionScope.ValidateOrCreateTransaction">
            <summary>
            Validates an existing <c cref="T:ETradeOrders.DataAccess.TransactionManager"/> if one exists,
            otherwise creates a new <c cref="T:ETradeOrders.DataAccess.TransactionManager"/> to use.
            </summary>
        </member>
        <member name="M:ETradeOrders.Services.ConnectionScope.ValidateOrCreateTransaction(System.Boolean)">
            <summary>
            Validates an existing <c cref="T:ETradeOrders.DataAccess.TransactionManager"/> if one exists,
            otherwise creates a new <c cref="T:ETradeOrders.DataAccess.TransactionManager"/> to use.
            </summary>
            <param name="createTransaction">determines whether to create a new transaction</param>
        </member>
        <member name="M:ETradeOrders.Services.ConnectionScope.CreateTransaction">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>.
            </summary>
        </member>
        <member name="M:ETradeOrders.Services.ConnectionScope.CreateTransaction(System.Data.IsolationLevel)">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>
            with the specified <c cref="T:System.Data.IsolationLevel"/>.
            </summary>
            <param name="level">Determines which <c cref="T:System.Data.IsolationLevel"/> to use for the transaction.</param>
        </member>
        <member name="M:ETradeOrders.Services.ConnectionScope.Complete">
            <summary>
            Completes this transaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ETradeOrders.Services.ConnectionScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:ETradeOrders.Services.ConnectionScope.Current">
            <summary>
            Gets a reference to the ConnectionScope object for the current thread.
            </summary>
        </member>
        <member name="P:ETradeOrders.Services.ConnectionScope.HasTransaction">
            <summary>
            Determines if Current Connections is in a Transaction.
            </summary>
        </member>
        <member name="T:ETradeOrders.Services.ServiceResult">
            <summary>
            The class provides a notification pattern for the processor execution.
            </summary>
        </member>
        <member name="P:ETradeOrders.Services.ServiceResult.HasErrors">
            <summary>
               Determines whethere the containing service, has errors.
            </summary>
        </member>
        <member name="P:ETradeOrders.Services.ServiceResult.Error">
            <summary>
               Provides a string of errors accumulated with a new line of delimeted errors.
            </summary>
        </member>
        <member name="P:ETradeOrders.Services.ServiceResult.ProcessBrokenRuleLists">
            <summary>
               Provides an aggregated group of BrokenRuleList for each of the executed processes.
            </summary>
        </member>
        <member name="P:ETradeOrders.Services.ServiceResult.ProcessorResultList">
            <summary>
               Determines whethere the containing processs results that were enlisted in the service.
            </summary>
        </member>
        <member name="P:ETradeOrders.Services.ServiceResult.ExceptionList">
             <summary>
            	Provides the List of UnHandled Exceptions that occured during processing.
             </summary>
            <value>A list of rules that were broken in the process</value>		
        </member>
        <member name="T:ETradeOrders.Services.GenericProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary> 
        </member>
        <member name="M:ETradeOrders.Services.GenericProcessorResult.#ctor">
            <summary>
            Initializes a new instance of the GenericProcessorResult class.
            </summary>
        </member>
        <member name="M:ETradeOrders.Services.GenericProcessorResult.AddBrokenRulesList(System.Type,ETradeOrders.Entities.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:ETradeOrders.Services.GenericProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:ETradeOrders.Services.GenericProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:ETradeOrders.Services.GenericProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation. 
            This is set by the processor.
            </summary>
        </member>
    </members>
</doc>
