<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ETradeOrders.DataAccess.SqlClient</name>
    </assembly>
    <members>
        <member name="T:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ETradeOrders.Entities.ConditionOrder"/> entity.
            </summary>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderProviderBase.Delete(ETradeOrders.DataAccess.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_conditionOrderId">ConditionOrderID identifies ConditionOrder. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderProviderBase.Find(ETradeOrders.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ETradeOrders.Entities.ConditionOrder objects.</returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderProviderBase.Find(ETradeOrders.DataAccess.TransactionManager,ETradeOrders.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ETradeOrders.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ETradeOrders.Entities.ConditionOrder objects.</returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderProviderBase.GetAll(ETradeOrders.DataAccess.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ETradeOrders.Entities.ConditionOrder objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderProviderBase.GetPaged(ETradeOrders.DataAccess.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ETradeOrders.Entities.ConditionOrder objects.</returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderProviderBase.GetByConditionOrderId(ETradeOrders.DataAccess.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ConditionOrder index.
            </summary>
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object</param>
            <param name="_conditionOrderId">ConditionOrderID identifies ConditionOrder</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ETradeOrders.Entities.ConditionOrder"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderProviderBase.BulkInsert(ETradeOrders.DataAccess.TransactionManager,ETradeOrders.Entities.TList{ETradeOrders.Entities.ConditionOrder})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ETradeOrders.Entities.ConditionOrder object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderProviderBase.Insert(ETradeOrders.DataAccess.TransactionManager,ETradeOrders.Entities.ConditionOrder)">
            <summary>
            	Inserts a ETradeOrders.Entities.ConditionOrder object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object</param>
            <param name="entity">ETradeOrders.Entities.ConditionOrder object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ETradeOrders.Entities.ConditionOrder object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderProviderBase.Update(ETradeOrders.DataAccess.TransactionManager,ETradeOrders.Entities.ConditionOrder)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object</param>
            <param name="entity">ETradeOrders.Entities.ConditionOrder object to update.</param>
            <remarks>
            	After updating the datasource, the ETradeOrders.Entities.ConditionOrder object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderProviderBase.GetListTodayOrders(ETradeOrders.DataAccess.TransactionManager,System.Int32,System.Int32,System.String)">
            <summary>
            This method wraps the '_ConditionOrder_GetListTodayOrders' stored procedure. 
            </summary>	
            <param name="market"> A <c>System.String</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:ETradeOrders.Entities.TList`1"/> instance.</returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderProviderBase.UpdateExpiredData(ETradeOrders.DataAccess.TransactionManager,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            This method wraps the '_ConditionOrder_UpdateExpiredData' stored procedure. 
            </summary>	
            <param name="condition"> A <c>System.Int32?</c> instance.</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ETradeOrders.DataAccess.SqlClient.SqlExecOrderProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ETradeOrders.Entities.ExecOrder"/> entity.
            </summary>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlExecOrderProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ETradeOrders.DataAccess.SqlClient.SqlExecOrderProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlExecOrderProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ETradeOrders.DataAccess.SqlClient.SqlExecOrderProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlExecOrderProviderBase.Delete(ETradeOrders.DataAccess.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_orderId">OrderID identifies ExecOrder. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlExecOrderProviderBase.Find(ETradeOrders.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ETradeOrders.Entities.ExecOrder objects.</returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlExecOrderProviderBase.Find(ETradeOrders.DataAccess.TransactionManager,ETradeOrders.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ETradeOrders.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ETradeOrders.Entities.ExecOrder objects.</returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlExecOrderProviderBase.GetAll(ETradeOrders.DataAccess.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ETradeOrders.Entities.ExecOrder objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlExecOrderProviderBase.GetPaged(ETradeOrders.DataAccess.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ETradeOrders.Entities.ExecOrder objects.</returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlExecOrderProviderBase.GetByConditionOrderId(ETradeOrders.DataAccess.TransactionManager,System.Nullable{System.Int64},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ExecOrder_ConditionOrder key.
            	FK_ExecOrder_ConditionOrder Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object</param>
            <param name="_conditionOrderId">ConditionOrderID is of ExecOrder</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ETradeOrders.Entities.ExecOrder objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlExecOrderProviderBase.GetByQuickOrderId(ETradeOrders.DataAccess.TransactionManager,System.Nullable{System.Int32},System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ExecOrder_QuickOrder key.
            	FK_ExecOrder_QuickOrder Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object</param>
            <param name="_quickOrderId">ID is of OrderInfo</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ETradeOrders.Entities.ExecOrder objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlExecOrderProviderBase.GetByOrderId(ETradeOrders.DataAccess.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_ExecOrder index.
            </summary>
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object</param>
            <param name="_orderId">OrderID identifies ExecOrder</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ETradeOrders.Entities.ExecOrder"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlExecOrderProviderBase.BulkInsert(ETradeOrders.DataAccess.TransactionManager,ETradeOrders.Entities.TList{ETradeOrders.Entities.ExecOrder})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ETradeOrders.Entities.ExecOrder object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlExecOrderProviderBase.Insert(ETradeOrders.DataAccess.TransactionManager,ETradeOrders.Entities.ExecOrder)">
            <summary>
            	Inserts a ETradeOrders.Entities.ExecOrder object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object</param>
            <param name="entity">ETradeOrders.Entities.ExecOrder object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ETradeOrders.Entities.ExecOrder object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlExecOrderProviderBase.Update(ETradeOrders.DataAccess.TransactionManager,ETradeOrders.Entities.ExecOrder)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object</param>
            <param name="entity">ETradeOrders.Entities.ExecOrder object to update.</param>
            <remarks>
            	After updating the datasource, the ETradeOrders.Entities.ExecOrder object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlExecOrderProviderBase.GetMaxSequence(ETradeOrders.DataAccess.TransactionManager,System.Int32,System.Int32)">
            <summary>
            This method wraps the '_ExecOrder_GetMaxSequence' stored procedure. 
            </summary>	
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
            <returns>A <see cref="T:System.Data.DataSet"/> instance.</returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlExecOrderProviderBase.DeleteOldData(ETradeOrders.DataAccess.TransactionManager,System.Int32,System.Int32)">
            <summary>
            This method wraps the '_ExecOrder_DeleteOldData' stored procedure. 
            </summary>	
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object.</param>
            <remark>This method is generated from a stored procedure.</remark>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.SqlExecOrderProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.SqlExecOrderProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.SqlExecOrderProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ETradeOrders.DataAccess.SqlClient.StoredProcedureProvider">
            <summary>
            Summary description for Procedures.
            </summary>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.StoredProcedureProvider.#ctor">
            <summary>
            Creates a new <see cref="T:ETradeOrders.DataAccess.SqlClient.StoredProcedureProvider"/> instance.
            </summary>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.StoredProcedureProvider.Serialize(System.String)">
            <summary>
            Serializes the specified filename.
            </summary>
            <param name="filename">Filename.</param>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.StoredProcedureProvider.Deserialize">
            <summary>
            Deserializes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.StoredProcedureProvider.GetProcedureBodyFromEmbeddedResource(System.String)">
            <summary>
            Get the query text from the embedded xml file.
            </summary>
            <param name="name">The name of the query.</param>
            <returns>the text of the query</returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Boolean)">
            <summary>
            Get the command wrapper, either from the stored procedures or from the embedded queries.
            </summary>
            <param name="database">The database instance.</param>
            <param name="commandName">the name of the sp.</param>
            <param name="useStoredProcedure">Indicates if we want stored procedure.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.StoredProcedureProvider.GetCommandWrapper(Microsoft.Practices.EnterpriseLibrary.Data.Database,System.String,System.Type,ETradeOrders.DataAccess.SqlFilterParameterCollection,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the command wrapper for a dynamically generated query and
            optionally includes server-side paging.
            </summary>
            <param name="database"></param>
            <param name="commandName"></param>
            <param name="columnEnum"></param>
            <param name="parameters"></param>
            <param name="orderBy"></param>
            <param name="start"></param>
            <param name="pageLength"></param>
            <returns></returns>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.StoredProcedureProvider.Current">
            <summary>
            Gets the current <see cref="T:ETradeOrders.DataAccess.SqlClient.StoredProcedureProvider"/> singleton instance.
            </summary>
            <value><see cref="T:ETradeOrders.DataAccess.SqlClient.StoredProcedureProvider"/></value>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.StoredProcedureProvider.Procedures">
            <summary>
            Gets or sets the procedures.
            </summary>
            <value>An <see cref="T:System.Collections.ArrayList"/> of <see cref="T:ETradeOrders.DataAccess.SqlClient.Procedure"/> objects.</value>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.StoredProcedureProvider.Item(System.String)">
            <summary>
            Gets or sets the <see cref="T:ETradeOrders.DataAccess.SqlClient.Procedure"/> instance with the specified name.
            </summary>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.StoredProcedureProvider.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:ETradeOrders.DataAccess.SqlClient.Procedure"/> instance at the specified index.
            </summary>
        </member>
        <member name="T:ETradeOrders.DataAccess.SqlClient.Procedure">
            <summary>
            Represents a sql query.
            </summary>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.Procedure.#ctor">
            <summary>
            Creates a new <see cref="T:ETradeOrders.DataAccess.SqlClient.Procedure"/> instance.
            </summary>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.Procedure.Parameter(System.String)">
            <summary>
            Get the parameter from the specified name of the param.
            </summary>
            <param name="paramName">Name of the param.</param>
            <returns></returns>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.Procedure.Parameters">
            <summary>
            Gets or sets the parameters.
            </summary>
            <value></value>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.Procedure.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value></value>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.Procedure.Owner">
            <summary>
            Gets or sets the owner.
            </summary>
            <value></value>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.Procedure.Comment">
            <summary>
            Gets or sets the comment.
            </summary>
            <value></value>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.Procedure.Body">
            <summary>
            Gets or sets the body.
            </summary>
            <value></value>
        </member>
        <member name="T:ETradeOrders.DataAccess.SqlClient.Parameter">
            <summary>
            Respresents a query parameter.
            </summary>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.Parameter.#ctor">
            <summary>
            Creates a new <see cref="T:ETradeOrders.DataAccess.SqlClient.Parameter"/> instance.
            </summary>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.Parameter.Name">
            <summary>
            Gets or sets the Name.
            </summary>
            <value></value>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.Parameter.SqlType">
            <summary>
            Gets or sets the SqlType.
            </summary>
            <value></value>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.Parameter.Direction">
            <summary>
            Gets or sets the Direction.
            </summary>
            <value></value>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.Parameter.Size">
            <summary>
            Gets or sets the size.
            </summary>
            <value></value>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.Parameter.Precision">
            <summary>
            Gets or sets the precision.
            </summary>
            <value></value>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.Parameter.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value></value>
        </member>
        <member name="T:ETradeOrders.DataAccess.SqlClient.SqlQuickOrderProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ETradeOrders.Entities.QuickOrder"/> entity.
            </summary>
        </member>
        <member name="T:ETradeOrders.DataAccess.SqlClient.SqlQuickOrderProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ETradeOrders.Entities.QuickOrder"/> entity.
            </summary>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlQuickOrderProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ETradeOrders.DataAccess.SqlClient.SqlQuickOrderProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlQuickOrderProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ETradeOrders.DataAccess.SqlClient.SqlQuickOrderProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlQuickOrderProviderBase.Delete(ETradeOrders.DataAccess.TransactionManager,System.Int32)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_quickOrderId">QuickOrderID identifies QuickOrder. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlQuickOrderProviderBase.Find(ETradeOrders.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ETradeOrders.Entities.QuickOrder objects.</returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlQuickOrderProviderBase.Find(ETradeOrders.DataAccess.TransactionManager,ETradeOrders.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ETradeOrders.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ETradeOrders.Entities.QuickOrder objects.</returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlQuickOrderProviderBase.GetAll(ETradeOrders.DataAccess.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ETradeOrders.Entities.QuickOrder objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlQuickOrderProviderBase.GetPaged(ETradeOrders.DataAccess.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ETradeOrders.Entities.QuickOrder objects.</returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlQuickOrderProviderBase.GetByQuickOrderId(ETradeOrders.DataAccess.TransactionManager,System.Int32,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_QuickOrder index.
            </summary>
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object</param>
            <param name="_quickOrderId">QuickOrderID identifies QuickOrder</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ETradeOrders.Entities.QuickOrder"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlQuickOrderProviderBase.BulkInsert(ETradeOrders.DataAccess.TransactionManager,ETradeOrders.Entities.TList{ETradeOrders.Entities.QuickOrder})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ETradeOrders.Entities.QuickOrder object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlQuickOrderProviderBase.Insert(ETradeOrders.DataAccess.TransactionManager,ETradeOrders.Entities.QuickOrder)">
            <summary>
            	Inserts a ETradeOrders.Entities.QuickOrder object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object</param>
            <param name="entity">ETradeOrders.Entities.QuickOrder object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ETradeOrders.Entities.QuickOrder object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlQuickOrderProviderBase.Update(ETradeOrders.DataAccess.TransactionManager,ETradeOrders.Entities.QuickOrder)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object</param>
            <param name="entity">ETradeOrders.Entities.QuickOrder object to update.</param>
            <remarks>
            	After updating the datasource, the ETradeOrders.Entities.QuickOrder object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.SqlQuickOrderProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.SqlQuickOrderProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.SqlQuickOrderProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlQuickOrderProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ETradeOrders.DataAccess.SqlClient.SqlQuickOrderProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderDetailProviderBase">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ETradeOrders.Entities.ConditionOrderDetail"/> entity.
            </summary>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderDetailProviderBase.#ctor">
            <summary>
            Creates a new <see cref="T:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderDetailProviderBase"/> instance.
            </summary>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderDetailProviderBase.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderDetailProviderBase"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderDetailProviderBase.Delete(ETradeOrders.DataAccess.TransactionManager,System.Int64)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="_detailId">Auto increase key. Primary Key.</param>	
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderDetailProviderBase.Find(ETradeOrders.DataAccess.TransactionManager,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks>Operators must be capitalized (OR, AND).</remarks>
            <returns>Returns a typed collection of ETradeOrders.Entities.ConditionOrderDetail objects.</returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderDetailProviderBase.Find(ETradeOrders.DataAccess.TransactionManager,ETradeOrders.DataAccess.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object</param>
            <param name="parameters">A collection of <see cref="T:ETradeOrders.DataAccess.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of ETradeOrders.Entities.ConditionOrderDetail objects.</returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderDetailProviderBase.GetAll(ETradeOrders.DataAccess.TransactionManager,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets All rows from the DataSource.
            </summary>
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ETradeOrders.Entities.ConditionOrderDetail objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderDetailProviderBase.GetPaged(ETradeOrders.DataAccess.TransactionManager,System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ETradeOrders.Entities.ConditionOrderDetail objects.</returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderDetailProviderBase.GetByConditionOrderId(ETradeOrders.DataAccess.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the FK_ConditionOrderDetail_ConditionOrder key.
            	FK_ConditionOrderDetail_ConditionOrder Description: 
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object</param>
            <param name="_conditionOrderId">Foreign key to ConditionOrder table</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks></remarks>
            <returns>Returns a typed collection of ETradeOrders.Entities.ConditionOrderDetail objects.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderDetailProviderBase.GetByDetailId(ETradeOrders.DataAccess.TransactionManager,System.Int64,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Gets rows from the datasource based on the PK_CONDITIONORDERDETAIL index.
            </summary>
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object</param>
            <param name="_detailId">Auto increase key</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query.</param>
            <returns>Returns an instance of the <see cref="T:ETradeOrders.Entities.ConditionOrderDetail"/> class.</returns>
            <remarks></remarks>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderDetailProviderBase.BulkInsert(ETradeOrders.DataAccess.TransactionManager,ETradeOrders.Entities.TList{ETradeOrders.Entities.ConditionOrderDetail})">
            <summary>
            Lets you efficiently bulk insert many entities to the database.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="entities">The entities.</param>
            <remarks>
            	After inserting into the datasource, the ETradeOrders.Entities.ConditionOrderDetail object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderDetailProviderBase.Insert(ETradeOrders.DataAccess.TransactionManager,ETradeOrders.Entities.ConditionOrderDetail)">
            <summary>
            	Inserts a ETradeOrders.Entities.ConditionOrderDetail object into the datasource using a transaction.
            </summary>
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object</param>
            <param name="entity">ETradeOrders.Entities.ConditionOrderDetail object to insert.</param>
            <remarks>
            	After inserting into the datasource, the ETradeOrders.Entities.ConditionOrderDetail object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>	
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderDetailProviderBase.Update(ETradeOrders.DataAccess.TransactionManager,ETradeOrders.Entities.ConditionOrderDetail)">
            <summary>
            	Update an existing row in the datasource.
            </summary>
            <param name="transactionManager"><see cref="T:ETradeOrders.DataAccess.TransactionManager"/> object</param>
            <param name="entity">ETradeOrders.Entities.ConditionOrderDetail object to update.</param>
            <remarks>
            	After updating the datasource, the ETradeOrders.Entities.ConditionOrderDetail object will be updated
            	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns true if operation is successful.</returns>
            <exception cref="T:System.Exception">The command could not be executed.</exception>
            <exception cref="T:System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
            <exception cref="T:System.Data.Common.DbException">The command could not be executed.</exception>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderDetailProviderBase.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderDetailProviderBase.UseStoredProcedure">
            <summary>
            Gets or sets a value indicating whether to use stored procedures.
            </summary>
            <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderDetailProviderBase.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="T:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider">
            <summary>
            This class is the Sql implementation of the NetTiersProvider.
            </summary>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.#ctor">
             <summary>
             Initializes a new instance of the <see cref="T:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider"/> class.
            </summary>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Initializes the provider.
            </summary>
            <param name="name">The friendly name of the provider.</param>
            <param name="config">A collection of the name/value pairs representing the provider-specific attributes specified in the configuration for this provider.</param>
            <exception cref="T:System.ArgumentNullException">The name of the provider is null.</exception>
            <exception cref="T:System.InvalidOperationException">An attempt is made to call <see cref="M:System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)"></see> on a provider after the provider has already been initialized.</exception>
            <exception cref="T:System.ArgumentException">The name of the provider has a length of zero.</exception>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.CreateTransaction">
            <summary>
            Creates a new <c cref="T:ETradeOrders.DataAccess.TransactionManager"/> instance from the current datasource.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(ETradeOrders.DataAccess.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(ETradeOrders.DataAccess.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteNonQuery(ETradeOrders.DataAccess.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the non query.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteReader(System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteReader(ETradeOrders.DataAccess.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteReader(ETradeOrders.DataAccess.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteReader(System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteReader(ETradeOrders.DataAccess.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the reader.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteDataSet(ETradeOrders.DataAccess.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteDataSet(ETradeOrders.DataAccess.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteDataSet(System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteDataSet(ETradeOrders.DataAccess.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the data set.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteScalar(ETradeOrders.DataAccess.TransactionManager,System.String,System.Object[])">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="storedProcedureName">Name of the stored procedure.</param>
            <param name="parameterValues">The parameter values.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteScalar(ETradeOrders.DataAccess.TransactionManager,System.Data.Common.DbCommand)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandWrapper">The command wrapper.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteScalar(System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.ExecuteScalar(ETradeOrders.DataAccess.TransactionManager,System.Data.CommandType,System.String)">
            <summary>
            Executes the scalar.
            </summary>
            <param name="transactionManager">The transaction manager.</param>
            <param name="commandType">Type of the command.</param>
            <param name="commandText">The command text.</param>
            <returns></returns>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.UseStoredProcedure">
            <summary>
            Gets a value indicating whether to use stored procedure or not.
            </summary>
            <value>
            	<c>true</c> if this repository use stored procedures; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>The connection string.</value>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.ProviderInvariantName">
            <summary>
            Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
            </summary>
            <value>The name of the provider invariant.</value>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.IsTransactionSupported">
            <summary>
             Indicates if the current <c cref="T:ETradeOrders.DataAccess.Bases.NetTiersProvider"/> implementation supports Transacton.
            </summary>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.ConditionOrderProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ETradeOrders.Entities.ConditionOrder"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.SqlConditionOrderProvider">
            <summary>
            Gets the current <c cref="P:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.SqlConditionOrderProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.QuickOrderProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ETradeOrders.Entities.QuickOrder"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.SqlQuickOrderProvider">
            <summary>
            Gets the current <c cref="P:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.SqlQuickOrderProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.ExecOrderProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ETradeOrders.Entities.ExecOrder"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.SqlExecOrderProvider">
            <summary>
            Gets the current <c cref="P:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.SqlExecOrderProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.ConditionOrderDetailProvider">
            <summary>
             This class is the Data Access Logic Component for the <see cref="T:ETradeOrders.Entities.ConditionOrderDetail"/> business entity.
             It exposes CRUD methods as well as selecting on index, foreign keys and custom stored procedures.
            </summary>
             <value></value>
        </member>
        <member name="P:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.SqlConditionOrderDetailProvider">
            <summary>
            Gets the current <c cref="P:ETradeOrders.DataAccess.SqlClient.SqlNetTiersProvider.SqlConditionOrderDetailProvider"/>.
            </summary>
            <value></value>
        </member>
        <member name="T:ETradeOrders.DataAccess.SqlClient.SqlExecOrderProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ETradeOrders.Entities.ExecOrder"/> entity.
            </summary>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlExecOrderProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ETradeOrders.DataAccess.SqlClient.SqlExecOrderProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderDetailProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ETradeOrders.Entities.ConditionOrderDetail"/> entity.
            </summary>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderDetailProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderDetailProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
        <member name="T:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderProvider">
            <summary>
             This class is the SqlClient Data Access Logic Component implementation for the <see cref="T:ETradeOrders.Entities.ConditionOrder"/> entity.
            </summary>
        </member>
        <member name="M:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderProvider.#ctor(System.String,System.Boolean,System.String)">
            <summary>
            Creates a new <see cref="T:ETradeOrders.DataAccess.SqlClient.SqlConditionOrderProvider"/> instance.
            Uses connection string to connect to datasource.
            </summary>
            <param name="connectionString">The connection string to the database.</param>
            <param name="useStoredProcedure">A boolean value that indicates if we use the stored procedures or embedded queries.</param>
            <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
        </member>
    </members>
</doc>
