
/*
	File Generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file SqlExecOrderProvider.cs instead.
*/

#region using directives

using System;
using System.Data;
using System.Data.Common;
using System.Text;

using Microsoft.Practices.EnterpriseLibrary.Data;
using Microsoft.Practices.EnterpriseLibrary.Data.Sql;

using System.Collections;
using System.Collections.Specialized;

using System.Diagnostics;
using ETradeOrders.Entities;
using ETradeOrders.DataAccess;
using ETradeOrders.DataAccess.Bases;

#endregion

namespace ETradeOrders.DataAccess.SqlClient
{
	///<summary>
	/// This class is the SqlClient Data Access Logic Component implementation for the <see cref="ExecOrder"/> entity.
	///</summary>
	public abstract partial class SqlExecOrderProviderBase : ExecOrderProviderBase
	{
		#region Declarations
		
		string _connectionString;
	    bool _useStoredProcedure;
	    string _providerInvariantName;
			
		#endregion "Declarations"
			
		#region Constructors
		
		/// <summary>
		/// Creates a new <see cref="SqlExecOrderProviderBase"/> instance.
		/// </summary>
		public SqlExecOrderProviderBase()
		{
		}
	
	/// <summary>
	/// Creates a new <see cref="SqlExecOrderProviderBase"/> instance.
	/// Uses connection string to connect to datasource.
	/// </summary>
	/// <param name="connectionString">The connection string to the database.</param>
	/// <param name="useStoredProcedure">A boolean value that indicates if we should use stored procedures or embedded queries.</param>
	/// <param name="providerInvariantName">Name of the invariant provider use by the DbProviderFactory.</param>
	public SqlExecOrderProviderBase(string connectionString, bool useStoredProcedure, string providerInvariantName)
	{
		this._connectionString = connectionString;
		this._useStoredProcedure = useStoredProcedure;
		this._providerInvariantName = providerInvariantName;
	}
		
	#endregion "Constructors"
	
		#region Public properties
	/// <summary>
    /// Gets or sets the connection string.
    /// </summary>
    /// <value>The connection string.</value>
    public string ConnectionString
	{
		get {return this._connectionString;}
		set {this._connectionString = value;}
	}
	
	/// <summary>
    /// Gets or sets a value indicating whether to use stored procedures.
    /// </summary>
    /// <value><c>true</c> if we choose to use use stored procedures; otherwise, <c>false</c>.</value>
	public bool UseStoredProcedure
	{
		get {return this._useStoredProcedure;}
		set {this._useStoredProcedure = value;}
	}
	
	/// <summary>
    /// Gets or sets the invariant provider name listed in the DbProviderFactories machine.config section.
    /// </summary>
    /// <value>The name of the provider invariant.</value>
    public string ProviderInvariantName
    {
        get { return this._providerInvariantName; }
        set { this._providerInvariantName = value; }
    }
	#endregion
	
		#region Get Many To Many Relationship Functions
		#endregion
	
		#region Delete Functions
		/// <summary>
		/// 	Deletes a row from the DataSource.
		/// </summary>
		/// <param name="_orderId">OrderID identifies ExecOrder. Primary Key.</param>	
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks>Deletes based on primary key(s).</remarks>
		/// <returns>Returns true if operation suceeded.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Delete(TransactionManager transactionManager, System.Int32 _orderId)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ExecOrder_Delete", _useStoredProcedure);
			database.AddInParameter(commandWrapper, "@OrderId", DbType.Int32, _orderId);
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Delete")); 

			int results = 0;
			
			if (transactionManager != null)
			{	
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
			{
				string entityKey = EntityLocator.ConstructKeyFromPkItems(typeof(ExecOrder)
					,_orderId);
				EntityManager.StopTracking(entityKey);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Delete")); 

			commandWrapper = null;
			
			return Convert.ToBoolean(results);
		}//end Delete
		#endregion

		#region Find Functions

		#region Parsed Find Methods
		/// <summary>
		/// 	Returns rows meeting the whereClause condition from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks>Operators must be capitalized (OR, AND).</remarks>
		/// <returns>Returns a typed collection of ETradeOrders.Entities.ExecOrder objects.</returns>
		public override TList<ExecOrder> Find(TransactionManager transactionManager, string whereClause, int start, int pageLength, out int count)
		{
			count = -1;
			if (whereClause.IndexOf(";") > -1)
				return new TList<ExecOrder>();
	
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ExecOrder_Find", _useStoredProcedure);

		bool searchUsingOR = false;
		if (whereClause.IndexOf(" OR ") > 0) // did they want to do "a=b OR c=d OR..."?
			searchUsingOR = true;
		
		database.AddInParameter(commandWrapper, "@SearchUsingOR", DbType.Boolean, searchUsingOR);
		
		database.AddInParameter(commandWrapper, "@OrderId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@RefOrderId", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MessageType", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@FisOrderId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SecSymbol", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Side", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Price", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@AvgPrice", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ConPrice", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Volume", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ExecutedVol", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ExecutedPrice", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CancelVolume", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CancelledVolume", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SubCustAccountId", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ExecTransType", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@TradeTime", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MatchedTime", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CancelledTime", DbType.DateTime, DBNull.Value);
		database.AddInParameter(commandWrapper, "@OrderStatus", DbType.Int16, DBNull.Value);
		database.AddInParameter(commandWrapper, "@OrdRejReason", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ConfirmNo", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CancelledConfirmNo", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@SourceId", DbType.Int16, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ExecType", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@CancelledExecType", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@PortOrClient", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Market", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@MarketStatus", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@OrderSource", DbType.AnsiString, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IsNewOrder", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Sequence", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NumOfMatch", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@QuickOrderId", DbType.Int32, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ConditionOrderId", DbType.Int64, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IsNewStatus", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@IsNewVolume", DbType.Boolean, DBNull.Value);
		database.AddInParameter(commandWrapper, "@NewPrice", DbType.Decimal, DBNull.Value);
		database.AddInParameter(commandWrapper, "@ChangedOrderStatus", DbType.Int16, DBNull.Value);
		database.AddInParameter(commandWrapper, "@Condition", DbType.AnsiStringFixedLength, DBNull.Value);
	
			// replace all instances of 'AND' and 'OR' because we already set searchUsingOR
			whereClause = whereClause.Replace(" AND ", "|").Replace(" OR ", "|") ; 
			string[] clauses = whereClause.ToLower().Split('|');
		
			// Here's what's going on below: Find a field, then to get the value we
			// drop the field name from the front, trim spaces, drop the '=' sign,
			// trim more spaces, and drop any outer single quotes.
			// Now handles the case when two fields start off the same way - like "Friendly='Yes' AND Friend='john'"
				
			char[] equalSign = {'='};
			char[] singleQuote = {'\''};
	   		foreach (string clause in clauses)
			{
				if (clause.Trim().StartsWith("orderid ") || clause.Trim().StartsWith("orderid="))
				{
					database.SetParameterValue(commandWrapper, "@OrderId", 
						clause.Trim().Remove(0,7).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("reforderid ") || clause.Trim().StartsWith("reforderid="))
				{
					database.SetParameterValue(commandWrapper, "@RefOrderId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("messagetype ") || clause.Trim().StartsWith("messagetype="))
				{
					database.SetParameterValue(commandWrapper, "@MessageType", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("fisorderid ") || clause.Trim().StartsWith("fisorderid="))
				{
					database.SetParameterValue(commandWrapper, "@FisOrderId", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("secsymbol ") || clause.Trim().StartsWith("secsymbol="))
				{
					database.SetParameterValue(commandWrapper, "@SecSymbol", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("side ") || clause.Trim().StartsWith("side="))
				{
					database.SetParameterValue(commandWrapper, "@Side", 
						clause.Trim().Remove(0,4).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("price ") || clause.Trim().StartsWith("price="))
				{
					database.SetParameterValue(commandWrapper, "@Price", 
						clause.Trim().Remove(0,5).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("avgprice ") || clause.Trim().StartsWith("avgprice="))
				{
					database.SetParameterValue(commandWrapper, "@AvgPrice", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("conprice ") || clause.Trim().StartsWith("conprice="))
				{
					database.SetParameterValue(commandWrapper, "@ConPrice", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("volume ") || clause.Trim().StartsWith("volume="))
				{
					database.SetParameterValue(commandWrapper, "@Volume", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("executedvol ") || clause.Trim().StartsWith("executedvol="))
				{
					database.SetParameterValue(commandWrapper, "@ExecutedVol", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("executedprice ") || clause.Trim().StartsWith("executedprice="))
				{
					database.SetParameterValue(commandWrapper, "@ExecutedPrice", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("cancelvolume ") || clause.Trim().StartsWith("cancelvolume="))
				{
					database.SetParameterValue(commandWrapper, "@CancelVolume", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("cancelledvolume ") || clause.Trim().StartsWith("cancelledvolume="))
				{
					database.SetParameterValue(commandWrapper, "@CancelledVolume", 
						clause.Trim().Remove(0,15).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("subcustaccountid ") || clause.Trim().StartsWith("subcustaccountid="))
				{
					database.SetParameterValue(commandWrapper, "@SubCustAccountId", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("exectranstype ") || clause.Trim().StartsWith("exectranstype="))
				{
					database.SetParameterValue(commandWrapper, "@ExecTransType", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("tradetime ") || clause.Trim().StartsWith("tradetime="))
				{
					database.SetParameterValue(commandWrapper, "@TradeTime", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("matchedtime ") || clause.Trim().StartsWith("matchedtime="))
				{
					database.SetParameterValue(commandWrapper, "@MatchedTime", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("cancelledtime ") || clause.Trim().StartsWith("cancelledtime="))
				{
					database.SetParameterValue(commandWrapper, "@CancelledTime", 
						clause.Trim().Remove(0,13).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("orderstatus ") || clause.Trim().StartsWith("orderstatus="))
				{
					database.SetParameterValue(commandWrapper, "@OrderStatus", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ordrejreason ") || clause.Trim().StartsWith("ordrejreason="))
				{
					database.SetParameterValue(commandWrapper, "@OrdRejReason", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("confirmno ") || clause.Trim().StartsWith("confirmno="))
				{
					database.SetParameterValue(commandWrapper, "@ConfirmNo", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("cancelledconfirmno ") || clause.Trim().StartsWith("cancelledconfirmno="))
				{
					database.SetParameterValue(commandWrapper, "@CancelledConfirmNo", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sourceid ") || clause.Trim().StartsWith("sourceid="))
				{
					database.SetParameterValue(commandWrapper, "@SourceId", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("exectype ") || clause.Trim().StartsWith("exectype="))
				{
					database.SetParameterValue(commandWrapper, "@ExecType", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("cancelledexectype ") || clause.Trim().StartsWith("cancelledexectype="))
				{
					database.SetParameterValue(commandWrapper, "@CancelledExecType", 
						clause.Trim().Remove(0,17).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("portorclient ") || clause.Trim().StartsWith("portorclient="))
				{
					database.SetParameterValue(commandWrapper, "@PortOrClient", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("market ") || clause.Trim().StartsWith("market="))
				{
					database.SetParameterValue(commandWrapper, "@Market", 
						clause.Trim().Remove(0,6).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("marketstatus ") || clause.Trim().StartsWith("marketstatus="))
				{
					database.SetParameterValue(commandWrapper, "@MarketStatus", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("ordersource ") || clause.Trim().StartsWith("ordersource="))
				{
					database.SetParameterValue(commandWrapper, "@OrderSource", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("isneworder ") || clause.Trim().StartsWith("isneworder="))
				{
					database.SetParameterValue(commandWrapper, "@IsNewOrder", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("sequence ") || clause.Trim().StartsWith("sequence="))
				{
					database.SetParameterValue(commandWrapper, "@Sequence", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("numofmatch ") || clause.Trim().StartsWith("numofmatch="))
				{
					database.SetParameterValue(commandWrapper, "@NumOfMatch", 
						clause.Trim().Remove(0,10).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("quickorderid ") || clause.Trim().StartsWith("quickorderid="))
				{
					database.SetParameterValue(commandWrapper, "@QuickOrderId", 
						clause.Trim().Remove(0,12).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("conditionorderid ") || clause.Trim().StartsWith("conditionorderid="))
				{
					database.SetParameterValue(commandWrapper, "@ConditionOrderId", 
						clause.Trim().Remove(0,16).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("isnewstatus ") || clause.Trim().StartsWith("isnewstatus="))
				{
					database.SetParameterValue(commandWrapper, "@IsNewStatus", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("isnewvolume ") || clause.Trim().StartsWith("isnewvolume="))
				{
					database.SetParameterValue(commandWrapper, "@IsNewVolume", 
						clause.Trim().Remove(0,11).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("newprice ") || clause.Trim().StartsWith("newprice="))
				{
					database.SetParameterValue(commandWrapper, "@NewPrice", 
						clause.Trim().Remove(0,8).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("changedorderstatus ") || clause.Trim().StartsWith("changedorderstatus="))
				{
					database.SetParameterValue(commandWrapper, "@ChangedOrderStatus", 
						clause.Trim().Remove(0,18).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
				if (clause.Trim().StartsWith("condition ") || clause.Trim().StartsWith("condition="))
				{
					database.SetParameterValue(commandWrapper, "@Condition", 
						clause.Trim().Remove(0,9).Trim().TrimStart(equalSign).Trim().Trim(singleQuote));
					continue;
				}
	
				throw new ArgumentException("Unable to use this part of the where clause in this version of Find: " + clause);
			}
					
			IDataReader reader = null;
			//Create Collection
			TList<ExecOrder> rows = new TList<ExecOrder>();
	
				
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
				
				Fill(reader, rows, start, pageLength);
				
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();	
					
				commandWrapper = null;
			}
			return rows;
		}

		#endregion Parsed Find Methods
		
		#region Parameterized Find Methods
		
		/// <summary>
		/// 	Returns rows from the DataSource that meet the parameter conditions.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="parameters">A collection of <see cref="SqlFilterParameter"/> objects.</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <returns>Returns a typed collection of ETradeOrders.Entities.ExecOrder objects.</returns>
		public override TList<ExecOrder> Find(TransactionManager transactionManager, IFilterParameterCollection parameters, string orderBy, int start, int pageLength, out int count)
		{
			SqlFilterParameterCollection filter = null;
			
			if (parameters == null)
				filter = new SqlFilterParameterCollection();
			else 
				filter = parameters.GetParameters();
				
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ExecOrder_Find_Dynamic", typeof(ExecOrderColumn), filter, orderBy, start, pageLength);
		
			SqlFilterParameter param;

			for ( int i = 0; i < filter.Count; i++ )
			{
				param = filter[i];
				database.AddInParameter(commandWrapper, param.Name, param.DbType, param.GetValue());
			}

			TList<ExecOrder> rows = new TList<ExecOrder>();
			IDataReader reader = null;
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "Find", rows)); 

				if ( transactionManager != null )
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;
				
				if ( reader.NextResult() )
				{
					if ( reader.Read() )
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "Find", rows)); 
			}
			finally
			{
				if ( reader != null )
					reader.Close();
					
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion Parameterized Find Methods
		
		#endregion Find Functions
	
		#region GetAll Methods
				
		/// <summary>
		/// 	Gets All rows from the DataSource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out. The number of rows that match this query.</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of ETradeOrders.Entities.ExecOrder objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<ExecOrder> GetAll(TransactionManager transactionManager, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ExecOrder_Get_List", _useStoredProcedure);
			
			IDataReader reader = null;
		
			//Create Collection
			TList<ExecOrder> rows = new TList<ExecOrder>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
					
				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetAll", rows)); 
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;	
			}
			return rows;
		}//end getall
		
		#endregion
				
		#region GetPaged Methods
				
		/// <summary>
		/// Gets a page of rows from the DataSource.
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">Number of rows in the DataSource.</param>
		/// <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
		/// <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of ETradeOrders.Entities.ExecOrder objects.</returns>
		public override TList<ExecOrder> GetPaged(TransactionManager transactionManager, string whereClause, string orderBy, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ExecOrder_GetPaged", _useStoredProcedure);
		
			
            if (commandWrapper.CommandType == CommandType.Text
                && commandWrapper.CommandText != null)
            {
                commandWrapper.CommandText = commandWrapper.CommandText.Replace(SqlUtil.PAGE_INDEX, string.Concat(SqlUtil.PAGE_INDEX, Guid.NewGuid().ToString("N").Substring(0, 8)));
            }
			
			database.AddInParameter(commandWrapper, "@WhereClause", DbType.String, whereClause);
			database.AddInParameter(commandWrapper, "@OrderBy", DbType.String, orderBy);
			database.AddInParameter(commandWrapper, "@PageIndex", DbType.Int32, start);
			database.AddInParameter(commandWrapper, "@PageSize", DbType.Int32, pageLength);
		
			IDataReader reader = null;
			//Create Collection
			TList<ExecOrder> rows = new TList<ExecOrder>();
			
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
				
				Fill(reader, rows, 0, int.MaxValue);
				count = rows.Count;

				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetPaged", rows)); 

			}
			catch(Exception)
			{			
				throw;
			}
			finally
			{
				if (reader != null) 
					reader.Close();
				
				commandWrapper = null;
			}
			
			return rows;
		}
		
		#endregion	
		
		#region Get By Foreign Key Functions

		#region GetByConditionOrderId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ExecOrder_ConditionOrder key.
		///		FK_ExecOrder_ConditionOrder Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_conditionOrderId">ConditionOrderID is of ExecOrder</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of ETradeOrders.Entities.ExecOrder objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<ExecOrder> GetByConditionOrderId(TransactionManager transactionManager, System.Int64? _conditionOrderId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ExecOrder_GetByConditionOrderId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@ConditionOrderId", DbType.Int64, _conditionOrderId);
			
			IDataReader reader = null;
			TList<ExecOrder> rows = new TList<ExecOrder>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByConditionOrderId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByConditionOrderId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	

		#region GetByQuickOrderId
		/// <summary>
		/// 	Gets rows from the datasource based on the FK_ExecOrder_QuickOrder key.
		///		FK_ExecOrder_QuickOrder Description: 
		/// </summary>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_quickOrderId">ID is of OrderInfo</param>
		/// <param name="count">out parameter to get total records for query</param>
		/// <remarks></remarks>
		/// <returns>Returns a typed collection of ETradeOrders.Entities.ExecOrder objects.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override TList<ExecOrder> GetByQuickOrderId(TransactionManager transactionManager, System.Int32? _quickOrderId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ExecOrder_GetByQuickOrderId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@QuickOrderId", DbType.Int32, _quickOrderId);
			
			IDataReader reader = null;
			TList<ExecOrder> rows = new TList<ExecOrder>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByQuickOrderId", rows)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}
			
				//Create Collection
				Fill(reader, rows, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByQuickOrderId", rows)); 
			}
			finally
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			return rows;
		}	
		#endregion
	
	#endregion
	
		#region Get By Index Functions

		#region GetByOrderId
					
		/// <summary>
		/// 	Gets rows from the datasource based on the PK_ExecOrder index.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="_orderId">OrderID identifies ExecOrder</param>
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="count">out parameter to get total records for query.</param>
		/// <returns>Returns an instance of the <see cref="ETradeOrders.Entities.ExecOrder"/> class.</returns>
		/// <remarks></remarks>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override ETradeOrders.Entities.ExecOrder GetByOrderId(TransactionManager transactionManager, System.Int32 _orderId, int start, int pageLength, out int count)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ExecOrder_GetByOrderId", _useStoredProcedure);
			
				database.AddInParameter(commandWrapper, "@OrderId", DbType.Int32, _orderId);
			
			IDataReader reader = null;
			TList<ExecOrder> tmp = new TList<ExecOrder>();
			try
			{
				//Provider Data Requesting Command Event
				OnDataRequesting(new CommandEventArgs(commandWrapper, "GetByOrderId", tmp)); 

				if (transactionManager != null)
				{
					reader = Utility.ExecuteReader(transactionManager, commandWrapper);
				}
				else
				{
					reader = Utility.ExecuteReader(database, commandWrapper);
				}		
		
				//Create collection and fill
				Fill(reader, tmp, start, pageLength);
				count = -1;
				if(reader.NextResult())
				{
					if(reader.Read())
					{
						count = reader.GetInt32(0);
					}
				}
				
				//Provider Data Requested Command Event
				OnDataRequested(new CommandEventArgs(commandWrapper, "GetByOrderId", tmp));
			}
			finally 
			{
				if (reader != null) 
					reader.Close();
					
				commandWrapper = null;
			}
			
			if (tmp.Count == 1)
			{
				return tmp[0];
			}
			else if (tmp.Count == 0)
			{
				return null;
			}
			else
			{
				throw new DataException("Cannot find the unique instance of the class.");
			}
			
			//return rows;
		}
		
		#endregion

	#endregion Get By Index Functions

		#region Insert Methods
		/// <summary>
		/// Lets you efficiently bulk insert many entities to the database.
		/// </summary>
		/// <param name="transactionManager">The transaction manager.</param>
		/// <param name="entities">The entities.</param>
		/// <remarks>
		///		After inserting into the datasource, the ETradeOrders.Entities.ExecOrder object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		public override void BulkInsert(TransactionManager transactionManager, TList<ETradeOrders.Entities.ExecOrder> entities)
		{
			//System.Data.SqlClient.SqlBulkCopy bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			
			System.Data.SqlClient.SqlBulkCopy bulkCopy = null;
	
			if (transactionManager != null && transactionManager.IsOpen)
			{			
				System.Data.SqlClient.SqlConnection cnx = transactionManager.TransactionObject.Connection as System.Data.SqlClient.SqlConnection;
				System.Data.SqlClient.SqlTransaction transaction = transactionManager.TransactionObject as System.Data.SqlClient.SqlTransaction;
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(cnx, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints, transaction); //, null);
			}
			else
			{
				bulkCopy = new System.Data.SqlClient.SqlBulkCopy(this._connectionString, System.Data.SqlClient.SqlBulkCopyOptions.CheckConstraints); //, null);
			}
			
			bulkCopy.BulkCopyTimeout = 360;
			bulkCopy.DestinationTableName = "ExecOrder";
			
			DataTable dataTable = new DataTable();
			DataColumn col0 = dataTable.Columns.Add("OrderID", typeof(System.Int32));
			col0.AllowDBNull = false;		
			DataColumn col1 = dataTable.Columns.Add("RefOrderID", typeof(System.String));
			col1.AllowDBNull = true;		
			DataColumn col2 = dataTable.Columns.Add("MessageType", typeof(System.String));
			col2.AllowDBNull = true;		
			DataColumn col3 = dataTable.Columns.Add("FISOrderID", typeof(System.Int32));
			col3.AllowDBNull = true;		
			DataColumn col4 = dataTable.Columns.Add("SecSymbol", typeof(System.String));
			col4.AllowDBNull = false;		
			DataColumn col5 = dataTable.Columns.Add("Side", typeof(System.String));
			col5.AllowDBNull = false;		
			DataColumn col6 = dataTable.Columns.Add("Price", typeof(System.Decimal));
			col6.AllowDBNull = false;		
			DataColumn col7 = dataTable.Columns.Add("AvgPrice", typeof(System.Decimal));
			col7.AllowDBNull = true;		
			DataColumn col8 = dataTable.Columns.Add("ConPrice", typeof(System.String));
			col8.AllowDBNull = true;		
			DataColumn col9 = dataTable.Columns.Add("Volume", typeof(System.Int32));
			col9.AllowDBNull = false;		
			DataColumn col10 = dataTable.Columns.Add("ExecutedVol", typeof(System.Int32));
			col10.AllowDBNull = true;		
			DataColumn col11 = dataTable.Columns.Add("ExecutedPrice", typeof(System.Decimal));
			col11.AllowDBNull = true;		
			DataColumn col12 = dataTable.Columns.Add("CancelVolume", typeof(System.Int32));
			col12.AllowDBNull = true;		
			DataColumn col13 = dataTable.Columns.Add("CancelledVolume", typeof(System.Int32));
			col13.AllowDBNull = true;		
			DataColumn col14 = dataTable.Columns.Add("SubCustAccountID", typeof(System.String));
			col14.AllowDBNull = false;		
			DataColumn col15 = dataTable.Columns.Add("ExecTransType", typeof(System.Int32));
			col15.AllowDBNull = true;		
			DataColumn col16 = dataTable.Columns.Add("TradeTime", typeof(System.DateTime));
			col16.AllowDBNull = true;		
			DataColumn col17 = dataTable.Columns.Add("MatchedTime", typeof(System.DateTime));
			col17.AllowDBNull = true;		
			DataColumn col18 = dataTable.Columns.Add("CancelledTime", typeof(System.DateTime));
			col18.AllowDBNull = true;		
			DataColumn col19 = dataTable.Columns.Add("OrderStatus", typeof(System.Int16));
			col19.AllowDBNull = true;		
			DataColumn col20 = dataTable.Columns.Add("OrdRejReason", typeof(System.Int32));
			col20.AllowDBNull = true;		
			DataColumn col21 = dataTable.Columns.Add("ConfirmNo", typeof(System.String));
			col21.AllowDBNull = true;		
			DataColumn col22 = dataTable.Columns.Add("CancelledConfirmNo", typeof(System.String));
			col22.AllowDBNull = true;		
			DataColumn col23 = dataTable.Columns.Add("SourceID", typeof(System.Int16));
			col23.AllowDBNull = true;		
			DataColumn col24 = dataTable.Columns.Add("ExecType", typeof(System.String));
			col24.AllowDBNull = true;		
			DataColumn col25 = dataTable.Columns.Add("CancelledExecType", typeof(System.String));
			col25.AllowDBNull = true;		
			DataColumn col26 = dataTable.Columns.Add("PortOrClient", typeof(System.String));
			col26.AllowDBNull = true;		
			DataColumn col27 = dataTable.Columns.Add("Market", typeof(System.String));
			col27.AllowDBNull = false;		
			DataColumn col28 = dataTable.Columns.Add("MarketStatus", typeof(System.String));
			col28.AllowDBNull = true;		
			DataColumn col29 = dataTable.Columns.Add("OrderSource", typeof(System.String));
			col29.AllowDBNull = true;		
			DataColumn col30 = dataTable.Columns.Add("IsNewOrder", typeof(System.Boolean));
			col30.AllowDBNull = true;		
			DataColumn col31 = dataTable.Columns.Add("Sequence", typeof(System.Int32));
			col31.AllowDBNull = false;		
			DataColumn col32 = dataTable.Columns.Add("NumOfMatch", typeof(System.Int32));
			col32.AllowDBNull = true;		
			DataColumn col33 = dataTable.Columns.Add("QuickOrderID", typeof(System.Int32));
			col33.AllowDBNull = true;		
			DataColumn col34 = dataTable.Columns.Add("ConditionOrderID", typeof(System.Int64));
			col34.AllowDBNull = true;		
			DataColumn col35 = dataTable.Columns.Add("IsNewStatus", typeof(System.Boolean));
			col35.AllowDBNull = true;		
			DataColumn col36 = dataTable.Columns.Add("IsNewVolume", typeof(System.Boolean));
			col36.AllowDBNull = true;		
			DataColumn col37 = dataTable.Columns.Add("NewPrice", typeof(System.Decimal));
			col37.AllowDBNull = true;		
			DataColumn col38 = dataTable.Columns.Add("ChangedOrderStatus", typeof(System.Int16));
			col38.AllowDBNull = true;		
			DataColumn col39 = dataTable.Columns.Add("Condition", typeof(System.String));
			col39.AllowDBNull = true;		
			
			bulkCopy.ColumnMappings.Add("OrderID", "OrderID");
			bulkCopy.ColumnMappings.Add("RefOrderID", "RefOrderID");
			bulkCopy.ColumnMappings.Add("MessageType", "MessageType");
			bulkCopy.ColumnMappings.Add("FISOrderID", "FISOrderID");
			bulkCopy.ColumnMappings.Add("SecSymbol", "SecSymbol");
			bulkCopy.ColumnMappings.Add("Side", "Side");
			bulkCopy.ColumnMappings.Add("Price", "Price");
			bulkCopy.ColumnMappings.Add("AvgPrice", "AvgPrice");
			bulkCopy.ColumnMappings.Add("ConPrice", "ConPrice");
			bulkCopy.ColumnMappings.Add("Volume", "Volume");
			bulkCopy.ColumnMappings.Add("ExecutedVol", "ExecutedVol");
			bulkCopy.ColumnMappings.Add("ExecutedPrice", "ExecutedPrice");
			bulkCopy.ColumnMappings.Add("CancelVolume", "CancelVolume");
			bulkCopy.ColumnMappings.Add("CancelledVolume", "CancelledVolume");
			bulkCopy.ColumnMappings.Add("SubCustAccountID", "SubCustAccountID");
			bulkCopy.ColumnMappings.Add("ExecTransType", "ExecTransType");
			bulkCopy.ColumnMappings.Add("TradeTime", "TradeTime");
			bulkCopy.ColumnMappings.Add("MatchedTime", "MatchedTime");
			bulkCopy.ColumnMappings.Add("CancelledTime", "CancelledTime");
			bulkCopy.ColumnMappings.Add("OrderStatus", "OrderStatus");
			bulkCopy.ColumnMappings.Add("OrdRejReason", "OrdRejReason");
			bulkCopy.ColumnMappings.Add("ConfirmNo", "ConfirmNo");
			bulkCopy.ColumnMappings.Add("CancelledConfirmNo", "CancelledConfirmNo");
			bulkCopy.ColumnMappings.Add("SourceID", "SourceID");
			bulkCopy.ColumnMappings.Add("ExecType", "ExecType");
			bulkCopy.ColumnMappings.Add("CancelledExecType", "CancelledExecType");
			bulkCopy.ColumnMappings.Add("PortOrClient", "PortOrClient");
			bulkCopy.ColumnMappings.Add("Market", "Market");
			bulkCopy.ColumnMappings.Add("MarketStatus", "MarketStatus");
			bulkCopy.ColumnMappings.Add("OrderSource", "OrderSource");
			bulkCopy.ColumnMappings.Add("IsNewOrder", "IsNewOrder");
			bulkCopy.ColumnMappings.Add("Sequence", "Sequence");
			bulkCopy.ColumnMappings.Add("NumOfMatch", "NumOfMatch");
			bulkCopy.ColumnMappings.Add("QuickOrderID", "QuickOrderID");
			bulkCopy.ColumnMappings.Add("ConditionOrderID", "ConditionOrderID");
			bulkCopy.ColumnMappings.Add("IsNewStatus", "IsNewStatus");
			bulkCopy.ColumnMappings.Add("IsNewVolume", "IsNewVolume");
			bulkCopy.ColumnMappings.Add("NewPrice", "NewPrice");
			bulkCopy.ColumnMappings.Add("ChangedOrderStatus", "ChangedOrderStatus");
			bulkCopy.ColumnMappings.Add("Condition", "Condition");
			
			foreach(ETradeOrders.Entities.ExecOrder entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
					
				DataRow row = dataTable.NewRow();
				
					row["OrderID"] = entity.OrderId;
							
				
					row["RefOrderID"] = entity.RefOrderId;
							
				
					row["MessageType"] = entity.MessageType;
							
				
					row["FISOrderID"] = entity.FisOrderId.HasValue ? (object) entity.FisOrderId  : System.DBNull.Value;
							
				
					row["SecSymbol"] = entity.SecSymbol;
							
				
					row["Side"] = entity.Side;
							
				
					row["Price"] = entity.Price;
							
				
					row["AvgPrice"] = entity.AvgPrice.HasValue ? (object) entity.AvgPrice  : System.DBNull.Value;
							
				
					row["ConPrice"] = entity.ConPrice;
							
				
					row["Volume"] = entity.Volume;
							
				
					row["ExecutedVol"] = entity.ExecutedVol.HasValue ? (object) entity.ExecutedVol  : System.DBNull.Value;
							
				
					row["ExecutedPrice"] = entity.ExecutedPrice.HasValue ? (object) entity.ExecutedPrice  : System.DBNull.Value;
							
				
					row["CancelVolume"] = entity.CancelVolume.HasValue ? (object) entity.CancelVolume  : System.DBNull.Value;
							
				
					row["CancelledVolume"] = entity.CancelledVolume.HasValue ? (object) entity.CancelledVolume  : System.DBNull.Value;
							
				
					row["SubCustAccountID"] = entity.SubCustAccountId;
							
				
					row["ExecTransType"] = entity.ExecTransType.HasValue ? (object) entity.ExecTransType  : System.DBNull.Value;
							
				
					row["TradeTime"] = entity.TradeTime.HasValue ? (object) entity.TradeTime  : System.DBNull.Value;
							
				
					row["MatchedTime"] = entity.MatchedTime.HasValue ? (object) entity.MatchedTime  : System.DBNull.Value;
							
				
					row["CancelledTime"] = entity.CancelledTime.HasValue ? (object) entity.CancelledTime  : System.DBNull.Value;
							
				
					row["OrderStatus"] = entity.OrderStatus.HasValue ? (object) entity.OrderStatus  : System.DBNull.Value;
							
				
					row["OrdRejReason"] = entity.OrdRejReason.HasValue ? (object) entity.OrdRejReason  : System.DBNull.Value;
							
				
					row["ConfirmNo"] = entity.ConfirmNo;
							
				
					row["CancelledConfirmNo"] = entity.CancelledConfirmNo;
							
				
					row["SourceID"] = entity.SourceId.HasValue ? (object) entity.SourceId  : System.DBNull.Value;
							
				
					row["ExecType"] = entity.ExecType;
							
				
					row["CancelledExecType"] = entity.CancelledExecType;
							
				
					row["PortOrClient"] = entity.PortOrClient;
							
				
					row["Market"] = entity.Market;
							
				
					row["MarketStatus"] = entity.MarketStatus;
							
				
					row["OrderSource"] = entity.OrderSource;
							
				
					row["IsNewOrder"] = entity.IsNewOrder.HasValue ? (object) entity.IsNewOrder  : System.DBNull.Value;
							
				
					row["Sequence"] = entity.Sequence;
							
				
					row["NumOfMatch"] = entity.NumOfMatch.HasValue ? (object) entity.NumOfMatch  : System.DBNull.Value;
							
				
					row["QuickOrderID"] = entity.QuickOrderId.HasValue ? (object) entity.QuickOrderId  : System.DBNull.Value;
							
				
					row["ConditionOrderID"] = entity.ConditionOrderId.HasValue ? (object) entity.ConditionOrderId  : System.DBNull.Value;
							
				
					row["IsNewStatus"] = entity.IsNewStatus.HasValue ? (object) entity.IsNewStatus  : System.DBNull.Value;
							
				
					row["IsNewVolume"] = entity.IsNewVolume.HasValue ? (object) entity.IsNewVolume  : System.DBNull.Value;
							
				
					row["NewPrice"] = entity.NewPrice.HasValue ? (object) entity.NewPrice  : System.DBNull.Value;
							
				
					row["ChangedOrderStatus"] = entity.ChangedOrderStatus.HasValue ? (object) entity.ChangedOrderStatus  : System.DBNull.Value;
							
				
					row["Condition"] = entity.Condition;
							
				
				dataTable.Rows.Add(row);
			}		
			
			// send the data to the server		
			bulkCopy.WriteToServer(dataTable);		
			
			// update back the state
			foreach(ETradeOrders.Entities.ExecOrder entity in entities)
			{
				if (entity.EntityState != EntityState.Added)
					continue;
			
				entity.AcceptChanges();
			}
		}
				
		/// <summary>
		/// 	Inserts a ETradeOrders.Entities.ExecOrder object into the datasource using a transaction.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">ETradeOrders.Entities.ExecOrder object to insert.</param>
		/// <remarks>
		///		After inserting into the datasource, the ETradeOrders.Entities.ExecOrder object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>	
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Insert(TransactionManager transactionManager, ETradeOrders.Entities.ExecOrder entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ExecOrder_Insert", _useStoredProcedure);
			
			database.AddOutParameter(commandWrapper, "@OrderId", DbType.Int32, 4);
			database.AddInParameter(commandWrapper, "@RefOrderId", DbType.AnsiString, entity.RefOrderId );
			database.AddInParameter(commandWrapper, "@MessageType", DbType.AnsiString, entity.MessageType );
			database.AddInParameter(commandWrapper, "@FisOrderId", DbType.Int32, (entity.FisOrderId.HasValue ? (object) entity.FisOrderId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SecSymbol", DbType.AnsiString, entity.SecSymbol );
			database.AddInParameter(commandWrapper, "@Side", DbType.AnsiString, entity.Side );
			database.AddInParameter(commandWrapper, "@Price", DbType.Decimal, entity.Price );
			database.AddInParameter(commandWrapper, "@AvgPrice", DbType.Decimal, (entity.AvgPrice.HasValue ? (object) entity.AvgPrice  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ConPrice", DbType.AnsiString, entity.ConPrice );
			database.AddInParameter(commandWrapper, "@Volume", DbType.Int32, entity.Volume );
			database.AddInParameter(commandWrapper, "@ExecutedVol", DbType.Int32, (entity.ExecutedVol.HasValue ? (object) entity.ExecutedVol  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ExecutedPrice", DbType.Decimal, (entity.ExecutedPrice.HasValue ? (object) entity.ExecutedPrice  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CancelVolume", DbType.Int32, (entity.CancelVolume.HasValue ? (object) entity.CancelVolume  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CancelledVolume", DbType.Int32, (entity.CancelledVolume.HasValue ? (object) entity.CancelledVolume  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@SubCustAccountId", DbType.AnsiString, entity.SubCustAccountId );
			database.AddInParameter(commandWrapper, "@ExecTransType", DbType.Int32, (entity.ExecTransType.HasValue ? (object) entity.ExecTransType  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@TradeTime", DbType.DateTime, (entity.TradeTime.HasValue ? (object) entity.TradeTime  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@MatchedTime", DbType.DateTime, (entity.MatchedTime.HasValue ? (object) entity.MatchedTime  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@CancelledTime", DbType.DateTime, (entity.CancelledTime.HasValue ? (object) entity.CancelledTime  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@OrderStatus", DbType.Int16, (entity.OrderStatus.HasValue ? (object) entity.OrderStatus  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@OrdRejReason", DbType.Int32, (entity.OrdRejReason.HasValue ? (object) entity.OrdRejReason  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ConfirmNo", DbType.AnsiString, entity.ConfirmNo );
			database.AddInParameter(commandWrapper, "@CancelledConfirmNo", DbType.AnsiString, entity.CancelledConfirmNo );
			database.AddInParameter(commandWrapper, "@SourceId", DbType.Int16, (entity.SourceId.HasValue ? (object) entity.SourceId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ExecType", DbType.AnsiString, entity.ExecType );
			database.AddInParameter(commandWrapper, "@CancelledExecType", DbType.AnsiString, entity.CancelledExecType );
			database.AddInParameter(commandWrapper, "@PortOrClient", DbType.AnsiString, entity.PortOrClient );
			database.AddInParameter(commandWrapper, "@Market", DbType.AnsiString, entity.Market );
			database.AddInParameter(commandWrapper, "@MarketStatus", DbType.AnsiString, entity.MarketStatus );
			database.AddInParameter(commandWrapper, "@OrderSource", DbType.AnsiString, entity.OrderSource );
			database.AddInParameter(commandWrapper, "@IsNewOrder", DbType.Boolean, (entity.IsNewOrder.HasValue ? (object) entity.IsNewOrder  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Sequence", DbType.Int32, entity.Sequence );
			database.AddInParameter(commandWrapper, "@NumOfMatch", DbType.Int32, (entity.NumOfMatch.HasValue ? (object) entity.NumOfMatch  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@QuickOrderId", DbType.Int32, (entity.QuickOrderId.HasValue ? (object) entity.QuickOrderId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ConditionOrderId", DbType.Int64, (entity.ConditionOrderId.HasValue ? (object) entity.ConditionOrderId  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@IsNewStatus", DbType.Boolean, (entity.IsNewStatus.HasValue ? (object) entity.IsNewStatus  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@IsNewVolume", DbType.Boolean, (entity.IsNewVolume.HasValue ? (object) entity.IsNewVolume  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@NewPrice", DbType.Decimal, (entity.NewPrice.HasValue ? (object) entity.NewPrice  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@ChangedOrderStatus", DbType.Int16, (entity.ChangedOrderStatus.HasValue ? (object) entity.ChangedOrderStatus  : System.DBNull.Value));
			database.AddInParameter(commandWrapper, "@Condition", DbType.AnsiStringFixedLength, entity.Condition );
            database.AddInParameter(commandWrapper, "@NewVolume", DbType.Int32, entity.Volume);
            database.AddInParameter(commandWrapper, "@WaitMatchVol", DbType.Int32, 0);
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Insert", entity));
				
			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
					
			object _orderId = database.GetParameterValue(commandWrapper, "@OrderId");
			entity.OrderId = (System.Int32)_orderId;
			
			
			entity.AcceptChanges();
	
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Insert", entity));

			return Convert.ToBoolean(results);
		}	
		#endregion

		#region Update Methods
				
		/// <summary>
		/// 	Update an existing row in the datasource.
		/// </summary>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object</param>
		/// <param name="entity">ETradeOrders.Entities.ExecOrder object to update.</param>
		/// <remarks>
		///		After updating the datasource, the ETradeOrders.Entities.ExecOrder object will be updated
		/// 	to refelect any changes made by the datasource. (ie: identity or computed columns)
		/// </remarks>
		/// <returns>Returns true if operation is successful.</returns>
        /// <exception cref="System.Exception">The command could not be executed.</exception>
        /// <exception cref="System.Data.DataException">The <paramref name="transactionManager"/> is not open.</exception>
        /// <exception cref="System.Data.Common.DbException">The command could not be executed.</exception>
		public override bool Update(TransactionManager transactionManager, ETradeOrders.Entities.ExecOrder entity)
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo.ExecOrder_Update", _useStoredProcedure);
			
			database.AddInParameter(commandWrapper, "@OrderId", DbType.Int32, entity.OrderId );
			database.AddInParameter(commandWrapper, "@RefOrderId", DbType.AnsiString, entity.RefOrderId );
			database.AddInParameter(commandWrapper, "@MessageType", DbType.AnsiString, entity.MessageType );
			database.AddInParameter(commandWrapper, "@FisOrderId", DbType.Int32, (entity.FisOrderId.HasValue ? (object) entity.FisOrderId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SecSymbol", DbType.AnsiString, entity.SecSymbol );
			database.AddInParameter(commandWrapper, "@Side", DbType.AnsiString, entity.Side );
			database.AddInParameter(commandWrapper, "@Price", DbType.Decimal, entity.Price );
			database.AddInParameter(commandWrapper, "@AvgPrice", DbType.Decimal, (entity.AvgPrice.HasValue ? (object) entity.AvgPrice : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ConPrice", DbType.AnsiString, entity.ConPrice );
			database.AddInParameter(commandWrapper, "@Volume", DbType.Int32, entity.Volume );
			database.AddInParameter(commandWrapper, "@ExecutedVol", DbType.Int32, (entity.ExecutedVol.HasValue ? (object) entity.ExecutedVol : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ExecutedPrice", DbType.Decimal, (entity.ExecutedPrice.HasValue ? (object) entity.ExecutedPrice : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CancelVolume", DbType.Int32, (entity.CancelVolume.HasValue ? (object) entity.CancelVolume : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CancelledVolume", DbType.Int32, (entity.CancelledVolume.HasValue ? (object) entity.CancelledVolume : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@SubCustAccountId", DbType.AnsiString, entity.SubCustAccountId );
			database.AddInParameter(commandWrapper, "@ExecTransType", DbType.Int32, (entity.ExecTransType.HasValue ? (object) entity.ExecTransType : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@TradeTime", DbType.DateTime, (entity.TradeTime.HasValue ? (object) entity.TradeTime : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@MatchedTime", DbType.DateTime, (entity.MatchedTime.HasValue ? (object) entity.MatchedTime : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@CancelledTime", DbType.DateTime, (entity.CancelledTime.HasValue ? (object) entity.CancelledTime : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@OrderStatus", DbType.Int16, (entity.OrderStatus.HasValue ? (object) entity.OrderStatus : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@OrdRejReason", DbType.Int32, (entity.OrdRejReason.HasValue ? (object) entity.OrdRejReason : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ConfirmNo", DbType.AnsiString, entity.ConfirmNo );
			database.AddInParameter(commandWrapper, "@CancelledConfirmNo", DbType.AnsiString, entity.CancelledConfirmNo );
			database.AddInParameter(commandWrapper, "@SourceId", DbType.Int16, (entity.SourceId.HasValue ? (object) entity.SourceId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ExecType", DbType.AnsiString, entity.ExecType );
			database.AddInParameter(commandWrapper, "@CancelledExecType", DbType.AnsiString, entity.CancelledExecType );
			database.AddInParameter(commandWrapper, "@PortOrClient", DbType.AnsiString, entity.PortOrClient );
			database.AddInParameter(commandWrapper, "@Market", DbType.AnsiString, entity.Market );
			database.AddInParameter(commandWrapper, "@MarketStatus", DbType.AnsiString, entity.MarketStatus );
			database.AddInParameter(commandWrapper, "@OrderSource", DbType.AnsiString, entity.OrderSource );
			database.AddInParameter(commandWrapper, "@IsNewOrder", DbType.Boolean, (entity.IsNewOrder.HasValue ? (object) entity.IsNewOrder : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Sequence", DbType.Int32, entity.Sequence );
			database.AddInParameter(commandWrapper, "@NumOfMatch", DbType.Int32, (entity.NumOfMatch.HasValue ? (object) entity.NumOfMatch : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@QuickOrderId", DbType.Int32, (entity.QuickOrderId.HasValue ? (object) entity.QuickOrderId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ConditionOrderId", DbType.Int64, (entity.ConditionOrderId.HasValue ? (object) entity.ConditionOrderId : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@IsNewStatus", DbType.Boolean, (entity.IsNewStatus.HasValue ? (object) entity.IsNewStatus : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@IsNewVolume", DbType.Boolean, (entity.IsNewVolume.HasValue ? (object) entity.IsNewVolume : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@NewPrice", DbType.Decimal, (entity.NewPrice.HasValue ? (object) entity.NewPrice : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@ChangedOrderStatus", DbType.Int16, (entity.ChangedOrderStatus.HasValue ? (object) entity.ChangedOrderStatus : System.DBNull.Value) );
			database.AddInParameter(commandWrapper, "@Condition", DbType.AnsiStringFixedLength, entity.Condition );

            database.AddInParameter(commandWrapper, "@NewVolume", DbType.Int32, entity.Volume);
            database.AddInParameter(commandWrapper, "@WaitMatchVol", DbType.Int32, 0);
			
			int results = 0;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "Update", entity));

			if (transactionManager != null)
			{
				results = Utility.ExecuteNonQuery(transactionManager, commandWrapper);
			}
			else
			{
				results = Utility.ExecuteNonQuery(database,commandWrapper);
			}
			
			//Stop Tracking Now that it has been updated and persisted.
			if (DataRepository.Provider.EnableEntityTracking)
				EntityManager.StopTracking(entity.EntityTrackingKey);
			
			
			entity.AcceptChanges();
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "Update", entity));

			return Convert.ToBoolean(results);
		}
			
		#endregion
		
		#region Custom Methods
	

		#region _ExecOrder_GetMaxSequence
					
		/// <summary>
		///	This method wraps the '_ExecOrder_GetMaxSequence' stored procedure. 
		/// </summary>	
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		/// <returns>A <see cref="DataSet"/> instance.</returns>
		public override DataSet GetMaxSequence(TransactionManager transactionManager, int start, int pageLength )
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo._ExecOrder_GetMaxSequence", true);
			
	
			
			DataSet ds = null;
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "GetMaxSequence", (IEntity)null));

			if (transactionManager != null)
			{	
				ds = Utility.ExecuteDataSet(transactionManager, commandWrapper);
			}
			else
			{
				ds = Utility.ExecuteDataSet(database, commandWrapper);
			}
			
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "GetMaxSequence", (IEntity)null));

			

			
			return ds;	
		}
		#endregion

		#region _ExecOrder_DeleteOldData
					
		/// <summary>
		///	This method wraps the '_ExecOrder_DeleteOldData' stored procedure. 
		/// </summary>	
		/// <param name="start">Row number at which to start reading.</param>
		/// <param name="pageLength">Number of rows to return.</param>
		/// <param name="transactionManager"><see cref="TransactionManager"/> object.</param>
		/// <remark>This method is generated from a stored procedure.</remark>
		public override void DeleteOldData(TransactionManager transactionManager, int start, int pageLength )
		{
			SqlDatabase database = new SqlDatabase(this._connectionString);
			DbCommand commandWrapper = StoredProcedureProvider.GetCommandWrapper(database, "dbo._ExecOrder_DeleteOldData", true);
			
	
			
			//Provider Data Requesting Command Event
			OnDataRequesting(new CommandEventArgs(commandWrapper, "DeleteOldData", (IEntity)null));

			if (transactionManager != null)
			{	
				Utility.ExecuteNonQuery(transactionManager, commandWrapper );
			}
			else
			{
				Utility.ExecuteNonQuery(database, commandWrapper);
			}
						
			//Provider Data Requested Command Event
			OnDataRequested(new CommandEventArgs(commandWrapper, "DeleteOldData", (IEntity)null));


				
				return;
		}
		#endregion
		#endregion
	}//end class
} // end namespace
